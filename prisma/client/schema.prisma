// // model Menu {
// //   id         Int         @id @default(autoincrement())
// //   name       String
// //   image      String
// //   price      Float
// //   category   String
// //   createdAt  DateTime    @default(now())
// //   updatedAt  DateTime    @default(now())
// //   orderItems OrderItem[]
// // }

// // model Order {
// //   id        Int         @id @default(autoincrement())
// //   status    String      @default("WAITING")
// //   tableId   Int
// //   items     OrderItem[]
// //   createdAt DateTime    @default(now())
// //   updatedAt DateTime    @default(now())
// // }

// // model OrderItem {
// //   id        Int      @id @default(autoincrement())
// //   menu      Menu     @relation(fields: [menuId], references: [id])
// //   order     Order?   @relation(fields: [orderId], references: [id])
// //   orderId   Int?
// //   menuId    Int
// //   quantity  Int
// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @default(now())
// // }

// // ครัวคุณบิน
// // category: มีต้ม ผัด แกง ทอด แนะนำ
// // menu: แกงส้ม, ผัดชะอม, ต้มจืด
// // menu: แกงส้ม [แกง], ผัดชะอม [ผัด], ต้มจืด [ต้ม], แกงเขียวหวาน [แกง]
// // order 1: ระบุหมายเลขโต๊ะ 13, แกงส้ม 1 รายการ, ผัดชะอม 2 รายการ (PENDING)
// // order 2: ระบุหมายเลขโต๊ะ 13, แกงส้ม 2 รายการ, แกงเขียวหวาน 1 รายการ
// // กรณีทำเสร็จ: order 1 จะเปลี่ยนจาก PENDING -> DONE

// model BinKitchenCategory {
//   id        Int              @id @default(autoincrement())
//   name      String           @unique
//   menus     BinKitchenMenu[] //*
//   createdAt DateTime         @default(now())
//   updatedAt DateTime         @default(now())
// }

// //----------------------------------------------------------------

// model BinKitchenMenu {
//   id           Int                   @id @default(autoincrement())
//   name         String
//   image        String
//   price        Float
//   category     BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
//   //                        ระบุว่า categoryName มี foreign key คือ name ใน BinKitchenCategory
//   categoryName String?
//   orderItems   BinKitchenOrderItem[]
//   createdAt    DateTime              @default(now())
//   updatedAt    DateTime              @default(now())
// }

// //----------------------------------------------------------------

// model BinKitchenOrder {
//   id        Int                   @id @default(autoincrement())
//   status    String                @default("PENDING")
//   tableId   Int
//   items     BinKitchenOrderItem[]
//   createdAt DateTime              @default(now())
//   updatedAt DateTime              @default(now())
// }

// //----------------------------------------------------------------

// model BinKitchenOrderItem {
//   id         Int              @id @default(autoincrement())
//   menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
//   menuId     Int
//   order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
//   orderId    Int?
//   quantity   Int
//   totalPrice Float
//   createdAt  DateTime         @default(now())
//   updatedAt  DateTime         @default(now())
// }

// //----------------------------------------------------------------
// // //ชื่อโมเดลปกติจะตั้งเป็น singular
// // //แล้วชื่อตัวแปรค่อยเป็น plural
// // //แล้วชื่อตัวแปรให้เป็น camelCase หมด
// // //ใน 1 table มี relation ได้แบบเดียว

// model Category {
//   id       Int        @id @default(autoincrement())
//   name     String     @unique
//   question Question[]
//   round    Round[]
//   createAt DateTime   @default(now())
//   updateAt DateTime   @updatedAt
// }

// model Question {
//   id              Int           @id @default(autoincrement())
//   name            String
//   categories      Category      @relation(fields: [categoriesId], references: [id])
//   categoriesId    Int
//   roundQuestion   RoundQuestion @relation(fields: [roundQuestionId], references: [id])
//   roundQuestionId Int
//   choices         Choice[]
//   answerId        Int
//   createAt        DateTime      @default(now())
//   updateAt        DateTime      @updatedAt
// }

// model RoundQuestion {
//   id            Int        @id @default(autoincrement())
//   question      Question[]
//   round         Round      @relation(fields: [roundId], references: [id])
//   roundId       Int
//   // choiceUser    Int
//   choice        Choice     @relation(fields: [choiceId], references: [id])
//   correctAnswer Boolean
//   createAt      DateTime   @default(now())
//   updateAt      DateTime   @updatedAt
//   choiceId      Int
// }

// model Round {
//   id            Int             @id @default(autoincrement())
//   category      Category        @relation(fields: [categoryId], references: [id])
//   categoryId    Int
//   createAt      DateTime        @default(now())
//   updateAt      DateTime        @updatedAt
//   score         Int
//   roundQuestion RoundQuestion[]
// }

// model Choice {
//   id            Int             @id @default(autoincrement())
//   choices       Int             @unique
//   question      Question        @relation(fields: [questionId], references: [id])
//   questionId    Int
//   createAt      DateTime        @default(now())
//   updateAt      DateTime        @updatedAt
//   roundQuestion RoundQuestion[]
// }
// model BoeingWash {
//   id       Int      @id @default(autoincrement())
//   name     String
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// model BranchWash {
//   id               Int                   @id @default(autoincrement())
//   owner            String
//   tel              Int
//   address          String
//   area             Int
//   createAt         DateTime              @default(now())
//   updateAt         DateTime              @updatedAt
//   MachineAtBranchs MachineAtBranchWash[]
// }

// model MachineWash {
//   id               Int                   @id @default(autoincrement())
//   brand            String
//   size             Int
//   type             String
//   model            String
//   year             Int
//   insurances       InsuranceWash[]
//   createAt         DateTime              @default(now())
//   updateAt         DateTime              @updatedAt
//   MachineAtBranchs MachineAtBranchWash[]
//   MachineToProgram MachineToProgram[]
//   maintainance     maintainance[]
//   histories        HistoryWash[]
// }

// model MachineAtBranchWash {
//   id        Int         @id @default(autoincrement())
//   machine   MachineWash @relation(fields: [machineId], references: [id])
//   machineId Int
//   branch    BranchWash  @relation(fields: [branchId], references: [id])
//   branchId  Int
//   createAt  DateTime    @default(now())
//   updateAt  DateTime    @updatedAt
// }

// model InsuranceWash {
//   id            Int           @id @default(autoincrement())
//   startTime     DateTime
//   endTime       DateTime
//   remainingTime DateTime
//   createAt      DateTime      @default(now())
//   updateAt      DateTime      @updatedAt
//   Machine       MachineWash[]
// }

// model CategoryProgramWash {
//   id       Int           @id @default(autoincrement())
//   name     String
//   createAt DateTime      @default(now())
//   updateAt DateTime      @updatedAt
//   program  ProgramWash[]
// }

// model ProgramWash {
//   id                    Int                 @id @default(autoincrement())
//   categoryProgramWash   CategoryProgramWash @relation(fields: [categoryProgramWashId], references: [id])
//   categoryProgramWashId Int
//   price                 Int
//   duration              DateTime
//   weight                Int
//   createAt              DateTime            @default(now())
//   updateAt              DateTime            @updatedAt
//   MachineToProgram      MachineToProgram[]
//   history               HistoryWash[]
// }

// model MachineToProgram {
//   id            Int         @id @default(autoincrement())
//   machineWash   MachineWash @relation(fields: [machineWashId], references: [id])
//   machineWashId Int
//   programWash   ProgramWash @relation(fields: [programWashId], references: [id])
//   programWashId Int
//   createAt      DateTime    @default(now())
//   updateAt      DateTime    @updatedAt
// }

// model maintainance {
//   id             Int         @id @default(autoincrement())
//   round          Int
//   dateUseMachine DateTime
//   levelDamage    Int
//   cause          String
//   machanicName   String
//   machineWash    MachineWash @relation(fields: [machineWashId], references: [id])
//   machineWashId  Int
//   createAt       DateTime    @default(now())
//   updateAt       DateTime    @updatedAt
// }

// model userWash {
//   id           Int            @id @default(autoincrement())
//   name         String
//   tel          Int
//   balance      Int
//   createAt     DateTime       @default(now())
//   updateAt     DateTime       @updatedAt
//   HistoryWash  HistoryWash[]
//   topUpHistory topUpHistory[]
// }

// model HistoryWash {
//   id            Int         @id @default(autoincrement())
//   machineWash   MachineWash @relation(fields: [machineWashId], references: [id])
//   machineWashId Int
//   programWash   ProgramWash @relation(fields: [programWashId], references: [id])
//   programWashId Int
//   startWashAt   DateTime
//   endWashAt     DateTime
//   price         Int
//   userWash      userWash    @relation(fields: [userWashId], references: [id])
//   userWashId    Int
//   createAt      DateTime    @default(now())
//   updateAt      DateTime    @updatedAt
// }

// model topUpHistory {
//   id         Int      @id @default(autoincrement())
//   userWash   userWash @relation(fields: [userWashId], references: [id])
//   userWashId Int
//   topUpValue Int
//   createAt   DateTime @default(now())
//   updateAt   DateTime @updatedAt
// }
// model User {
//   id                   Int                @id @default(autoincrement())
//   name                 String
//   profileImage         String
//   coverImage           String
//   createAt             DateTime           @default(now())
//   updateAt             DateTime           @updatedAt
//   Reply                Reply[]
//   Like                 Like[]
//   userDestinationTable DestinationTable[] @relation("userDestinationTable")
//   wallDestinationTable DestinationTable[] @relation("wallDestinationTable")
//   Post                 Post[]
// }

// model Post {
//   id            Int             @id @default(autoincrement())
//   message       String?
//   image         String?
//   Like          Like[]
//   //Reply         Reply[]
//   HashTagOnPost HashTagOnPost[]
//   //replyTold     Reply           @relation(fields: [replyToldId], references: [id])
//   replyToldId   Int?
//   user          User            @relation(fields: [userId], references: [id])
//   userId        Int
//   createAt      DateTime        @default(now())
//   updateAt      DateTime        @updatedAt
// }

// model Reply {
//   id       Int      @id @default(autoincrement())
//   //post     Post     @relation(fields: [postId], references: [id])
//   postId   Int
//   user     User     @relation(fields: [userId], references: [id])
//   userId   Int
//   message  String
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
//   Like     Like[]
// }

// model Like {
//   id       Int      @id @default(autoincrement())
//   category String
//   post     Post     @relation(fields: [postId], references: [id])
//   postId   Int
//   reply    Reply    @relation(fields: [replyId], references: [id])
//   replyId  Int
//   user     User     @relation(fields: [userId], references: [id])
//   userId   Int
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// model UserRelation {
//   id       Int      @id @default(autoincrement())
//   fromUser Int
//   toUser   Int
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// model HashTag {
//   id            Int             @id @default(autoincrement())
//   name          String
//   createAt      DateTime        @default(now())
//   updateAt      DateTime        @updatedAt
//   HashTagOnPost HashTagOnPost[]
// }

// model HashTagOnPost {
//   id        Int      @id @default(autoincrement())
//   hashTag   HashTag  @relation(fields: [hashTagId], references: [id])
//   hashTagId Int
//   post      Post     @relation(fields: [postId], references: [id])
//   postId    Int
//   createAt  DateTime @default(now())
//   updateAt  DateTime @updatedAt
// }

// model Group {
//   id               Int                @id @default(autoincrement())
//   name             String
//   createAt         DateTime           @default(now())
//   updateAt         DateTime           @updatedAt
//   DestinationTable DestinationTable[]
// }

// model DestinationTable {
//   id       Int      @id @default(autoincrement())
//   group    Group    @relation(fields: [groupId], references: [id])
//   groupId  Int
//   user     User     @relation("userDestinationTable", fields: [userId], references: [id])
//   userId   Int
//   wall     User     @relation("wallDestinationTable", fields: [wallId], references: [id])
//   wallId   Int
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// // User
// // - From [] 
// // - To []

// // Relation
// // - From
// // - To
// model University {
//   id       Int      @id @default(autoincrement())
//   name     String
//   createAt DateTime @default(now())
//   updateAt DateTime @updatedAt
// }

// model Book {
//   id   Int    @id @default(autoincrement())
//   name String
//   isbn Int
// }
model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  profileImage      String
  createAt          DateTime       @default(now())
  updateAt          DateTime       @updatedAt
  reply             Reply[]
  fromUserRelations UserRelation[] @relation("FromUserRelation")
  toUserRelations   UserRelation[] @relation("ToUserRelation")
  Post              Post[]
}

model Post {
  id            Int             @id @default(autoincrement())
  message       String
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  HashTagOnPost HashTagOnPost[]
  reply         Reply[]
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
}

model DirecMessage {
  id       Int      @id @default(autoincrement())
  message  String
  fromUser String
  toUser   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model HashTag {
  id            Int             @id @default(autoincrement())
  name          String
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  HashTagOnPost HashTagOnPost[]
}

model HashTagOnPost {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  hashTags  HashTag  @relation(fields: [hashTagId], references: [id])
  hashTagId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Reply {
  id       Int      @id @default(autoincrement())
  posts    Post     @relation(fields: [postId], references: [id])
  postId   Int
  users    User     @relation(fields: [userId], references: [id])
  userId   Int
  message  String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model UserRelation {
  id       Int      @id @default(autoincrement())
  from     User     @relation("FromUserRelation", fields: [fromId], references: [id])
  fromId   Int
  to       User     @relation("ToUserRelation", fields: [toId], references: [id])
  toId     Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

//กรณีที่ไป relate Table เดิมซ้ำกันสองรอบ relation string
// model UserYoutube {
//   id           Int            @id @default(autoincrement())
//   name         String
//   email        String
//   imageProfile String
//   createAt     DateTime       @default(now())
//   updateAt     DateTime       @updatedAt
//   chanel       Chanel[]
//   Comment      Comment[]
//   userToChanel UserToChanel[]
//   permission   Permission[]
// }

// model Chanel {
//   id           Int            @id @default(autoincrement())
//   name         String
//   // user         User           @relation(fields: [userId], references: [id])
//   // userId       Int
//   videos       Video[]
//   description  String
//   user         UserYoutube    @relation(fields: [userId], references: [id])
//   createAt     DateTime       @default(now())
//   updateAt     DateTime       @updatedAt
//   userToChanel UserToChanel[]
//   // permission   Permission[]
//   userId       Int
//   Permission   Permission[]
// }

// enum RoleEnum {
//   Admin
//   Editor
//   Creater
// }

// enum FeelingEnum {
//   like
//   unlike
// }

// model Comment {
//   id       Int         @id @default(autoincrement())
//   user     UserYoutube @relation(fields: [userId], references: [id])
//   userId   Int
//   video    Video       @relation(fields: [videoId], references: [id])
//   videoId  Int
//   createAt DateTime    @default(now())
//   updateAt DateTime    @updatedAt
// }

// model Video {
//   id          Int       @id @default(autoincrement())
//   name        String
//   description String
//   comments    Comment[]
//   url         String
//   createAt    DateTime  @default(now())
//   updateAt    DateTime  @updatedAt
//   Chanel      Chanel?   @relation(fields: [chanelId], references: [id])
//   chanelId    Int?
// }

// model Permission {
//   id           Int            @id @default(autoincrement())
//   role         RoleEnum
//   edit         Boolean
//   post         Boolean
//   delete       Boolean
//   upload       Boolean
//   createAt     DateTime       @default(now())
//   updateAt     DateTime       @updatedAt
//   User         UserYoutube?   @relation(fields: [userId], references: [id])
//   userId       Int?
//   Chanel       Chanel?        @relation(fields: [chanelId], references: [id])
//   chanelId     Int?
//   userToChanel UserToChanel[]
// }

// model UserToChanel {
//   id           Int         @id @default(autoincrement())
//   role         RoleEnum
//   user         UserYoutube @relation(fields: [userId], references: [id])
//   userId       Int
//   chanel       Chanel      @relation(fields: [chanelId], references: [id])
//   chanelId     Int
//   permission   Permission  @relation(fields: [permissionId], references: [id])
//   permissionId Int
// }
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}

// model QuestionCategory {
//   id        Int         @id @default(autoincrement())
//   name      String
//   createAt  DateTime    @default(now())
//   updateAt  DateTime    @updatedAt
//   Question  Question[]
//   RoundQuiz RoundQuiz[]
// }

// model Question {
//   id                        Int                         @id @default(autoincrement())
//   questionCategories        QuestionCategory            @relation(fields: [questionCategoryId], references: [id])
//   questionCategoryId        Int
//   textQuestion              String
//   answer                    Choice                      @relation("questionAnswer", fields: [answerId], references: [id]) //resolver
//   answerId                  Int                         @unique //show on database
//   createAt                  DateTime                    @default(now())
//   updateAt                  DateTime                    @updatedAt
//   choice                    Choice[]
//   RoundQuestionDetail       RoundQuestionDetail[]
//   RoundQuestionChoiceDetail RoundQuestionChoiceDetail[]
// }

// model Choice {
//   id                        Int                         @id @default(autoincrement())
//   choiceName                String
//   question                  Question?                   @relation(fields: [questionId], references: [id])
//   questionId                Int?
//   questionAnswer            Question?                   @relation("questionAnswer")
//   createAt                  DateTime                    @default(now())
//   updateAt                  DateTime                    @updatedAt
//   RoundQuestionChoiceDetail RoundQuestionChoiceDetail[]
// }

// model User {
//   id        Int         @id @default(autoincrement())
//   name      String
//   createAt  DateTime    @default(now())
//   updateAt  DateTime    @updatedAt
//   RoundQuiz RoundQuiz[]
// }

// model RoundQuiz {
//   id                        Int                         @id @default(autoincrement())
//   questionCategories        QuestionCategory            @relation(fields: [questionCategoryId], references: [id])
//   questionCategoryId        Int
//   score                     Int
//   user                      User                        @relation(fields: [userId], references: [id])
//   userId                    Int
//   createAt                  DateTime                    @default(now())
//   updateAt                  DateTime                    @updatedAt
//   RoundQuestionDetail       RoundQuestionDetail[]
//   RoundQuestionChoiceDetail RoundQuestionChoiceDetail[]
// }

// model RoundQuestionDetail {
//   id            Int       @id @default(autoincrement())
//   roundQuiz     RoundQuiz @relation(fields: [roundQuizId], references: [id])
//   roundQuizId   Int
//   question      Question  @relation(fields: [questionId], references: [id])
//   questionId    Int
//   questionOrder Int
//   userChoose    Int?
//   result        Boolean
//   createAt      DateTime  @default(now())
//   updateAt      DateTime  @updatedAt
// }

// model RoundQuestionChoiceDetail {
//   id          Int       @id @default(autoincrement())
//   roundQuiz   RoundQuiz @relation(fields: [roundQuizId], references: [id])
//   roundQuizId Int
//   question    Question  @relation(fields: [questionId], references: [id])
//   questionId  Int
//   choice      Choice    @relation(fields: [choiceId], references: [id])
//   choiceId    Int
//   createAt    DateTime  @default(now())
//   updateAt    DateTime  @updatedAt
// }
// model TodoList {
//   id        Int      @id @default(autoincrement())
//   task      String
//   status    String   @default("PENDING")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
// }
