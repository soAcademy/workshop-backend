model BinKitchenCategory {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  menus     BinKitchenMenu[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  }

  model BinKitchenMenu {
  id           Int                   @id @default(autoincrement())
  name         String
  image        String
  price        Float
  category     BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
  categoryName String?
  orderItems   BinKitchenOrderItem[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model BinKitchenOrder {
  id         Int                   @id @default(autoincrement())
  status     String                @default("PENDING")
  tableId    Int
  orderItems BinKitchenOrderItem[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model BinKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}
model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TriviaCategory {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  triviaQuizes TriviaQuiz[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rounds TriviaRound[]
}

model TriviaQuiz {
  id           Int               @id @default(autoincrement())
  quiz         String
  category     TriviaCategory?   @relation(fields: [categoryName], references: [name])
  categoryName String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  choices      TriviaChoice[]
  answerId     Int
  roundQuizes  TriviaRoundQuiz[]
}

model TriviaChoice {
  id          Int               @id @default(autoincrement())
  choice      String
  quiz        TriviaQuiz?       @relation(fields: [quizId], references: [id])
  quizId      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  roundQuizes TriviaRoundQuiz[]
}

model TriviaRound {
  id          Int               @id @default(autoincrement())
  round       String
  category    TriviaCategory?   @relation(fields: [categoryId], references: [id])
  categoryId  Int
  score       Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  roundQuizes TriviaRoundQuiz[]
}

model TriviaRoundQuiz {
  id           Int           @id @default(autoincrement())
  round        TriviaRound?  @relation(fields: [roundId], references: [id])
  roundId      Int
  quiz         TriviaQuiz?   @relation(fields: [quizId], references: [id])
  quizId       Int
  userChoice   TriviaChoice? @relation(fields: [userChoiceId], references: [id])
  userChoiceId Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// model BinKitchenOrderItem {
//   id         Int              @id @default(autoincrement())
//   menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
//   menuId     Int
//   order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
//   orderId    Int?
//   quantity   Int
//   totalPrice Float
//   createdAt  DateTime         @default(now())
//   updatedAt  DateTime         @updatedAt
// }
model TwitterUser {
  id             Int                   @id @default(autoincrement())
  image          String                @unique
  name           String                @unique
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  follwers       TwitterUserRelation[] @relation("FromId")
  followings     TwitterUserRelation[] @relation("ToId")
  twitterPosts   TwitterPost[]
  twitterReplies TwitterReply[]
  directFroms    TwitterDM[]           @relation("DMFromId")
  directToes     TwitterDM[]           @relation("DMToId")
}

model TwitterUserRelation {
  id          Int         @id @default(autoincrement())
  follwer     TwitterUser @relation("FromId", fields: [followerId], references: [id])
  followerId  Int
  following   TwitterUser @relation("ToId", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TwitterPost {
  id             Int              @id @default(autoincrement())
  message        String
  user           TwitterUser      @relation(fields: [postByUserId], references: [id])
  postByUserId   Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  twitterReplies TwitterReply[]
  hashTags       TwitterHashTag[]
  // TwitterPostTohashtag TwitterPostTohashtag[]
}

model TwitterHashTag {
  id        Int           @id @default(autoincrement())
  message   String
  posts     TwitterPost[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  // TwitterPostTohashtag TwitterPostTohashtag[]
}

// model TwitterPostTohashtag {
//   id      Int            @id @default(autoincrement())
//   post    TwitterPost    @relation(fields: [twitterPostId], references: [id])
//   hashtag TwitterHashTag @relation(fields: [twitterHashTagId], references: [id])
//   twitterPostId    Int
//   twitterHashTagId Int
// }

model TwitterReply {
  id           Int         @id @default(autoincrement())
  message      String
  post         TwitterPost @relation(fields: [postId], references: [id])
  postId       Int
  user         TwitterUser @relation(fields: [postByUserId], references: [id])
  postByUserId Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model TwitterDM {
  id           Int         @id @default(autoincrement())
  message      String
  directFrom   TwitterUser @relation("DMFromId", fields: [directFromId], references: [id])
  directFromId Int
  directTo     TwitterUser @relation("DMToId", fields: [directToId], references: [id])
  directToId   Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
model FacebookUser {
  id                  Int                     @id @default(autoincrement())
  profileImage        String
  coverImage          String
  name                String                  @unique
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  posts               FacebookPost[]
  groupcreater        FacebookGroup[]         @relation("creater")
  groupMember         FacebookGroup[]
  comments            FacebookComment[]
  likePosts           FacebookLikePost[]
  likeComments        FacebookLikeComment[]
  friendRequestFroms  FacebookFriendRequest[] @relation("requestFrom")
  friendRequestToes   FacebookFriendRequest[] @relation("requestTo")
  friendRelationFroms FacebookUserRelation[]  @relation("relationFrom")
  friendRelationToes  FacebookUserRelation[]  @relation("relationTo")
  messengeFroms       FacebookMessenger[]     @relation("messageFrom")
  messengeToes        FacebookMessenger[]     @relation("messageTo")
}

model FacebookGroup {
  id            Int            @id @default(autoincrement())
  GroupImage    String
  coverImage    String
  name          String         @unique
  createrUser   FacebookUser   @relation("creater", fields: [createrUserId], references: [id])
  createrUserId Int
  memberUser    FacebookUser[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model FacebookPostDestination {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  posts     FacebookPost[]
}

model FacebookPostType {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  posts     FacebookPost[]
}

model FacebookLocation {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  posts     FacebookPost[]
}

model FacebookHashtag {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  posts     FacebookPost[]
}

model FacebookPost {
  id                  Int                     @id @default(autoincrement())
  message             String
  postType            FacebookPostType        @relation(fields: [postTypeId], references: [id])
  postTypeId          Int
  posterUser          FacebookUser            @relation(fields: [posterUserId], references: [id])
  posterUserId        Int
  location            FacebookLocation        @relation(fields: [locationId], references: [id])
  locationId          Int
  destination         FacebookPostDestination @relation(fields: [destinationId], references: [id])
  destinationId       Int
  destinationRelateId Int
  isShared            Boolean
  shareFromPostId     Int
  createdAt           DateTime                @default(now())
  updatedAt           DateTime                @updatedAt
  hashtags            FacebookHashtag[]
  comments            FacebookComment[]
  likePosts           FacebookLikePost[]
  likeComments        FacebookLikeComment[]
}

model FacebookComment {
  id                 Int          @id @default(autoincrement())
  message            String
  commentByUser      FacebookUser @relation(fields: [commentByUserId], references: [id])
  commentByUserId    Int
  post               FacebookPost @relation(fields: [postId], references: [id])
  postId             Int
  isReplied          Boolean
  replyFromCommentId Int
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model FacebookLikeType {
  id           Int                   @id @default(autoincrement())
  emoji        String
  name         String
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  likePosts    FacebookLikePost[]
  likeComments FacebookLikeComment[]
}

model FacebookLikePost {
  id           Int              @id @default(autoincrement())
  post         FacebookPost     @relation(fields: [postId], references: [id])
  postId       Int
  posterUser   FacebookUser     @relation(fields: [posterUserId], references: [id])
  posterUserId Int
  likeType     FacebookLikeType @relation(fields: [likeTypeId], references: [id])
  likeTypeId   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model FacebookLikeComment {
  id           Int              @id @default(autoincrement())
  comment      FacebookPost     @relation(fields: [commentId], references: [id])
  commentId    Int
  posterUser   FacebookUser     @relation(fields: [posterUserId], references: [id])
  posterUserId Int
  likeType     FacebookLikeType @relation(fields: [likeTypeId], references: [id])
  likeTypeId   Int
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model FacebookFriendRequest {
  id                Int          @id @default(autoincrement())
  requestFromUser   FacebookUser @relation("requestFrom", fields: [requestFromUserId], references: [id])
  requestFromUserId Int
  requestToUser     FacebookUser @relation("requestTo", fields: [requestToUserId], references: [id])
  requestToUserId   Int
  isAccepted        Boolean
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model FacebookUserRelation {
  id                 Int          @id @default(autoincrement())
  relationFromUser   FacebookUser @relation("relationFrom", fields: [relationFromUserId], references: [id])
  relationFromUserId Int
  relationToUser     FacebookUser @relation("relationTo", fields: [relationToUserId], references: [id])
  relationToUserId   Int
  isAccepted         Boolean
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model FacebookMessenger {
  id                Int          @id @default(autoincrement())
  message           String
  messageFromUser   FacebookUser @relation("messageFrom", fields: [messageFromUserId], references: [id])
  messageFromUserId Int
  messageToUser     FacebookUser @relation("messageTo", fields: [messageToUserId], references: [id])
  messageToUserId   Int
  isRead            Boolean
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
