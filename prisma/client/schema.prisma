model BinKitchenCategory {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BinKitchenMenu BinKitchenMenu[]
}

model BinKitchenMenu {
  id                  Int                   @id @default(autoincrement())
  name                String
  image               String
  price               Float
  category            BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
  categoryName        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  BinKitchenOrderItem BinKitchenOrderItem[]
}

model BinKitchenOrder {
  id                  Int                   @id @default(autoincrement())
  status              String                @default("PENDING")
  tableId             Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  BinKitchenOrderItem BinKitchenOrderItem[]
}

model BinKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model FBUser {
  id            Int           @id @default(autoincrement())
  name          String
  profileImage  String
  coverImage    String
  bio           String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  fromFriends   Friends[]     @relation("FromFriend")
  toFriends     Friends[]     @relation("ToFriend")
  Comment       Comment[]
  SubComment    SubComment[]
  GroupOnUser   GroupOnUser[]
  Like          Like[]
  Share         Share[]
  fromDirectMsg FBDirectMsg[] @relation("FromDirectMessage")
  toDirectMsg   FBDirectMsg[] @relation("ToDirectMessage")
  postByUser    FBPost[]      @relation("postByUserId")
  postInUser    FBPost[]      @relation("postInUserId")
}

model Friends {
  id         Int      @id @default(autoincrement())
  from       FBUser   @relation("FromFriend", fields: [fromUserId], references: [id])
  fromUserId Int
  to         FBUser   @relation("ToFriend", fields: [toUserId], references: [id])
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}

model FBPost {
  id            Int               @id @default(autoincrement())
  postByUser    FBUser?           @relation("postByUserId", fields: [postByUserId], references: [id])
  postByUserId  Int?
  postInUser    FBUser?           @relation("postInUserId", fields: [postInUserId], references: [id])
  postInUserId  Int?
  postDetail    String?
  image         String?
  group         Group?            @relation(fields: [groupId], references: [id])
  groupId       Int?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  Comment       Comment[]
  Like          Like[]
  Share         Share[]
  PostOnHashtag FBPostOnHashtag[]
}

model Comment {
  id            Int          @id @default(autoincrement())
  post          FBPost       @relation(fields: [postId], references: [id])
  postId        Int
  commentDetail String
  fromUserId    FBUser       @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  SubComment    SubComment[]
}

model SubComment {
  id               Int      @id @default(autoincrement())
  comment          Comment  @relation(fields: [commentId], references: [id])
  commentId        Int
  subCommentDetail String
  fromUserId       FBUser   @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Like {
  id         Int      @id @default(autoincrement())
  post       FBPost   @relation(fields: [postId], references: [id])
  postId     Int
  fromUserId FBUser   @relation(fields: [userId], references: [id])
  userId     Int
  likeType   LikeType @relation(fields: [likeTypeId], references: [id])
  likeTypeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Share {
  id            Int         @id @default(autoincrement())
  post          FBPost      @relation(fields: [postId], references: [id])
  postId        Int
  fromUserId    FBUser      @relation(fields: [userId], references: [id])
  userId        Int
  shareStatus   ShareStatus @relation(fields: [shareStatusId], references: [id])
  shareStatusId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Group {
  id          Int           @id @default(autoincrement())
  groupName   String
  groupImage  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  GroupOnUser GroupOnUser[]
  FBPost      FBPost[]
}

model GroupOnUser {
  id        Int      @id @default(autoincrement())
  user      FBUser   @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LikeType {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Like      Like[]
}

model ShareStatus {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Share     Share[]
}

model FBDirectMsg {
  id         Int      @id @default(autoincrement())
  from       FBUser   @relation("FromDirectMessage", fields: [fromUserId], references: [id])
  fromUserId Int
  to         FBUser   @relation("ToDirectMessage", fields: [toUserId], references: [id])
  toUserId   Int
  msgDetail  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FBHashtag {
  id            Int               @id @default(autoincrement())
  hashtag       String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  PostOnHashtag FBPostOnHashtag[]
}

model FBPostOnHashtag {
  id        Int       @id @default(autoincrement())
  post      FBPost    @relation(fields: [postId], references: [id])
  hashtag   FBHashtag @relation(fields: [hashtagId], references: [id])
  postId    Int
  hashtagId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LibraryUniversity {
  id                      Int                       @id @default(autoincrement())
  name                    String
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  libraryBook             LibraryBook[]
  libraryBookCopy         LibraryBookCopy[]
  fromUniversity          LibraryStudentRequest[]   @relation("FromUniversity")
  toUniversity            LibraryStudentRequest[]   @relation("ToUniversity")
  libraryStudentBorrowing LibraryStudentBorrowing[]
}

model LibraryStudent {
  id                               Int                        @id @default(autoincrement())
  name                             String
  createdAt                        DateTime                   @default(now())
  updatedAt                        DateTime                   @updatedAt
  libraryBookCopy                  LibraryBookCopy[]
  historyOfBookCopy                LibraryHistoryOfBookCopy[]
  libraryHistoryOfStudentBorrowing LibraryStudentRequest[]
  libraryStudentBorrowing          LibraryStudentBorrowing[]
}

model LibraryBook {
  id              Int               @id @default(autoincrement())
  university      LibraryUniversity @relation(fields: [universityId], references: [id])
  universityId    Int
  name            String
  isbn            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  libraryBookCopy LibraryBookCopy[]
  bookOnAuthor    BookOnAuthor[]
  bookOnCategory  BookOnCategory[]
}

model LibraryBookCopy {
  id                               Int                        @id @default(autoincrement())
  book                             LibraryBook                @relation(fields: [bookId], references: [id])
  bookId                           Int
  atUniversity                     LibraryUniversity?         @relation(fields: [atUniversityId], references: [id])
  atUniversityId                   Int?
  currentBorrowByStudent           LibraryStudent?            @relation(fields: [currentBorrowBytudentId], references: [id])
  currentBorrowBytudentId          Int?
  status                           String
  isbn                             String
  createdAt                        DateTime                   @default(now())
  updatedAt                        DateTime                   @updatedAt
  historyOfBookCopy                LibraryHistoryOfBookCopy[]
  libraryHistoryOfStudentBorrowing LibraryStudentRequest[]
  libraryStudentBorrowing          LibraryStudentBorrowing[]
}

model LibraryHistoryOfBookCopy {
  id                    Int             @id @default(autoincrement())
  copy                  LibraryBookCopy @relation(fields: [copyId], references: [id])
  copyId                Int
  onceBorrowByStudent   LibraryStudent? @relation(fields: [oncetBorrowBytudentId], references: [id])
  oncetBorrowBytudentId Int?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
}

model LibraryCategory {
  id             Int              @id @default(autoincrement())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  bookOnCategory BookOnCategory[]
}

model LibraryAuthor {
  id           Int            @id @default(autoincrement())
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bookOnAuthor BookOnAuthor[]
}

model BookOnAuthor {
  id        Int           @id @default(autoincrement())
  book      LibraryBook   @relation(fields: [bookId], references: [id])
  bookId    Int
  author    LibraryAuthor @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model BookOnCategory {
  id         Int             @id @default(autoincrement())
  book       LibraryBook     @relation(fields: [bookId], references: [id])
  bookId     Int
  category   LibraryCategory @relation(fields: [categoryId], references: [id])
  categoryId Int
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model LibraryStudentRequest {
  id               Int               @id @default(autoincrement())
  student          LibraryStudent    @relation(fields: [studentId], references: [id])
  studentId        Int
  bookCopy         LibraryBookCopy   @relation(fields: [bookCopyId], references: [id])
  bookCopyId       Int
  fromUniversity   LibraryUniversity @relation("FromUniversity", fields: [fromUniversityId], references: [id])
  fromUniversityId Int
  toUniversity     LibraryUniversity @relation("ToUniversity", fields: [toUniversityId], references: [id])
  toUniversityId   Int
  status           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model LibraryStudentBorrowing {
  id                     Int               @id @default(autoincrement())
  stident                LibraryStudent    @relation(fields: [studentId], references: [id])
  studentId              Int
  bookCopy               LibraryBookCopy   @relation(fields: [bookCopyId], references: [id])
  bookCopyId             Int
  borrowingDate          DateTime
  targetReturnDate       DateTime
  actualReturnDate       DateTime?
  borrowFromUniversity   LibraryUniversity @relation(fields: [borrowFromUniversityId], references: [id])
  borrowFromUniversityId Int
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
}

model MeetingUser {
  id                   Int                    @id @default(autoincrement())
  name                 String
  profileImage         String?
  postion              String?
  bio                  String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  MeetingUserBooked    MeetingUserBooked[]
  MeetingUserAvailable MeetingUserAvailable[]
  MeetingRoomBooked    MeetingRoomBooked[]
}

model MeetingUserBooked {
  id             Int              @id @default(autoincrement())
  user           MeetingUser      @relation(fields: [userId], references: [id])
  userId         Int
  meetingRoom    MeetingRoom      @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId  Int
  meetingDetail  String?
  bookingStart   DateTime
  bookingEnd     DateTime
  nameOfBooker   String
  tel            String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  MeetingMembers MeetingMembers[]
}

model MeetingMembers {
  id        Int               @id @default(autoincrement())
  booking   MeetingUserBooked @relation(fields: [bookedId], references: [id])
  bookedId  Int
  name      String?
  email     String?
  tel       String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model MeetingUserAvailable {
  id             Int         @id @default(autoincrement())
  user           MeetingUser @relation(fields: [userId], references: [id])
  userId         Int
  availableStart DateTime
  availableEnd   DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model MeetingRoom {
  id                Int                 @id @default(autoincrement())
  name              String
  floor             Int
  building          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  MeetingUserBooked MeetingUserBooked[]
  MeetingRoomBooked MeetingRoomBooked[]
}

model MeetingRoomBooked {
  id            Int         @id @default(autoincrement())
  meetingRoom   MeetingRoom @relation(fields: [meetingRoomId], references: [id])
  meetingRoomId Int
  byUserId      MeetingUser @relation(fields: [userId], references: [id])
  userId        Int
  bookingStart  DateTime
  bookingEnd    DateTime
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// model MeetingRoomAvailable {
//   id             Int         @id @default(autoincrement())
//   meetingRoom    MeetingRoom @relation(fields: [meetingRoomId], references: [id])
//   meetingRoomId  Int
//   availableStart DateTime
//   availableEnd   DateTime
//   createdAt      DateTime    @default(now())
//   updatedAt      DateTime    @updatedAt
// }
model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TriviaCategory {
  id           Int           @id @default(autoincrement())
  categoryName String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  triviaQuiz   TriviaQuiz[]
  triviaRound  TriviaRound[]
}

model TriviaQuiz {
  id                   Int               @id @default(autoincrement())
  quizName             String
  category             TriviaCategory    @relation(fields: [categoryId], references: [id])
  categoryId           Int
  answer               TriviaChoice      @relation("TriviaQuizAnswer", fields: [triviaAnswerChoiceId], references: [id])
  triviaAnswerChoiceId Int               @unique
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  triviaRoundQuiz      TriviaRoundQuiz[]
  TriviaChoice         TriviaChoice[]
}

model TriviaChoice {
  id                    Int                     @id @default(autoincrement())
  choiceName            String
  quiz                  TriviaQuiz?             @relation(fields: [quizId], references: [id])
  quizId                Int?
  triviaQuizAnswer      TriviaQuiz?             @relation("TriviaQuizAnswer")
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  triviaRoundQuizChoice TriviaRoundQuizChoice[]
}

model TriviaRound {
  id              Int               @id @default(autoincrement())
  name            String?
  score           Int
  category        TriviaCategory    @relation(fields: [categoryId], references: [id])
  categoryId      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  triviaRoundQuiz TriviaRoundQuiz[]
}

model TriviaRoundQuiz {
  id                    Int                     @id @default(autoincrement())
  round                 TriviaRound             @relation(fields: [roundId], references: [id])
  roundId               Int
  quiz                  TriviaQuiz              @relation(fields: [quizId], references: [id])
  quizId                Int
  playerChooseChoice    Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  triviaRoundQuizChoice TriviaRoundQuizChoice[]
}

model TriviaRoundQuizChoice {
  id              Int             @id @default(autoincrement())
  roundQuiz       TriviaRoundQuiz @relation(fields: [roundQuizId], references: [id])
  roundQuizId     Int
  roundQuizChoice TriviaChoice    @relation(fields: [quizChoiceId], references: [id])
  quizChoiceId    Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model User {
  id                Int         @id @default(autoincrement())
  name              String
  profileImage      String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  fromFolowing      Following[] @relation("FromFollowing")
  toFollowing       Following[] @relation("ToFollowing")
  post              Post[]
  fromDirectMessage DirectMsg[] @relation("FromDirectMessage")
  toDirectMessage   DirectMsg[] @relation("ToDirectMessage")
  Reply             Reply[]
}

model Following {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromFollowing", fields: [fromUserId], references: [id])
  fromUserId Int
  to         User     @relation("ToFollowing", fields: [toUserId], references: [id])
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([fromUserId, toUserId])
}

model Post {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  postDetail    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reply         Reply[]
  postOnHashtag PostOnHashtag[]
}

model DirectMsg {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromDirectMessage", fields: [fromUserId], references: [id])
  fromUserId Int
  to         User     @relation("ToDirectMessage", fields: [toUserId], references: [id])
  toUserId   Int
  msgDetail  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Hashtag {
  id            Int             @id @default(autoincrement())
  hashtag       String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  postOnHashtag PostOnHashtag[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  reply     String
  replyUser User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostOnHashtag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  postId    Int
  hashtagId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WashingBranch {
  id                Int                 @id @default(autoincrement())
  branchName        String
  address           String
  tel               String
  area              Int
  ownerName         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  WashingMachine    WashingMachine[]
  WashingUseHistory WashingUseHistory[]
}

model WashingMachine {
  id                        Int                         @id @default(autoincrement())
  branch                    WashingBranch               @relation(fields: [branchId], references: [id])
  branchId                  Int
  brand                     String
  weight                    Int
  type                      String
  productionYear            DateTime
  warrantyEnd               DateTime
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  WashingMachineMaintenance WashingMachineMaintenance[]
  WashingUseHistory         WashingUseHistory[]
  WashingMachineOnProgram   WashingMachineOnProgram[]
}

model WashingMachineMaintenance {
  id           Int            @id @default(autoincrement())
  machine      WashingMachine @relation(fields: [machineId], references: [id])
  machineId    Int
  symptom      String
  failureLevel Int
  mechanicName String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model WashingMachineProgram {
  id                      Int                       @id @default(autoincrement())
  programName             String
  price                   Int
  time                    Int
  maxWeight               Int
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  WashingUseHistory       WashingUseHistory[]
  WashingMachineOnProgram WashingMachineOnProgram[]
}

model WashingMachineOnProgram {
  id        Int                   @id @default(autoincrement())
  machine   WashingMachine        @relation(fields: [machineId], references: [id])
  machineId Int
  program   WashingMachineProgram @relation(fields: [programId], references: [id])
  programId Int
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
}

model WashingUser {
  id                Int                 @id @default(autoincrement())
  userName          String
  tel               String
  remainCoupon      Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  WashingTopUp      WashingTopUp[]
  WashingUseHistory WashingUseHistory[]
}

model WashingTopUp {
  id          Int         @id @default(autoincrement())
  user        WashingUser @relation(fields: [userId], references: [id])
  userId      Int
  topUpAmount Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model WashingUseHistory {
  id           Int                   @id @default(autoincrement())
  user         WashingUser           @relation(fields: [userId], references: [id])
  userId       Int
  useAtBranch  WashingBranch         @relation(fields: [branchId], references: [id])
  branchId     Int
  useAtMachine WashingMachine        @relation(fields: [machineId], references: [id])
  machineId    Int
  useProgram   WashingMachineProgram @relation(fields: [programId], references: [id])
  programId    Int
  price        Int
  startTime    DateTime
  endTime      DateTime
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model YTUser {
  id           Int            @id @default(autoincrement())
  userName     String
  profileImage String
  email        String
  bio          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChanelOnUser ChanelOnUser[]
  YTAdmin      YTAdmin[]
  YTComment    YTComment[]
  YTSubComment YTSubComment[]
  YTSubscribe  YTSubscribe[]
}

model YTChanel {
  id           Int            @id @default(autoincrement())
  chaneName    String
  image        String?
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChanelOnUser ChanelOnUser[]
  YTAdmin      YTAdmin[]
  YTVideo      YTVideo[]
  YTSubscribe  YTSubscribe[]
}

model ChanelOnUser {
  id        Int      @id @default(autoincrement())
  user      YTUser   @relation(fields: [userId], references: [id])
  userId    Int
  chanel    YTChanel @relation(fields: [chanelId], references: [id])
  chanelId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model YTAdmin {
  id          Int      @id @default(autoincrement())
  chanel      YTChanel @relation(fields: [chanelId], references: [id])
  chanelId    Int
  adminUser   YTUser   @relation(fields: [adminUserId], references: [id])
  adminUserId Int
  role        YTRole   @relation(fields: [roleId], references: [id])
  roleId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model YTRole {
  id               Int                @id @default(autoincrement())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  YTAdmin          YTAdmin[]
  YTRolePermission YTRolePermission[]
}

model YTRolePermission {
  id             Int      @id @default(autoincrement())
  roldid         YTRole   @relation(fields: [roleId], references: [id])
  roleId         Int
  permissionName String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model YTSubscribe {
  id              Int      @id @default(autoincrement())
  chanel          YTChanel @relation(fields: [chanelId], references: [id])
  chanelId        Int
  subscribeUser   YTUser   @relation(fields: [subscribeUserId], references: [id])
  subscribeUserId Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model YTVideo {
  id          Int         @id @default(autoincrement())
  chanel      YTChanel    @relation(fields: [chanelId], references: [id])
  chanelId    Int
  videoLink   String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  YTComment   YTComment[]
}

model YTComment {
  id                Int            @id @default(autoincrement())
  video             YTVideo        @relation(fields: [videoId], references: [id])
  videoId           Int
  commentDetail     String
  commentFromUser   YTUser         @relation(fields: [commentFromUserId], references: [id])
  commentFromUserId Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  YTSubComment      YTSubComment[]
}

model YTSubComment {
  id                   Int       @id @default(autoincrement())
  comment              YTComment @relation(fields: [commentId], references: [id])
  commentId            Int
  subCommentDetail     String
  subCommentFromUser   YTUser    @relation(fields: [subCommentFromUserId], references: [id])
  subCommentFromUserId Int
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
