model BinKitchenCategory {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  menus     BinKitchenMenu[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

model BinKitchenMenu {
  id                  Int                   @id @default(autoincrement())
  name                String
  image               String
  price               Float
  category            BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
  categoryName        String?
  createdAt           DateTime              @default(now())
  updateAt            DateTime              @default(now())
  binKitchenOrderItem BinKitchenOrderItem[]
}

model BinKitchenOrder {
  id        Int                   @id @default(autoincrement())
  status    String                @default("PENDING")
  tableId   Int
  items     BinKitchenOrderItem[]
  createdAt DateTime              @default(now())
  updateAt  DateTime              @default(now())
}

model BinKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime         @default(now())
  updateAt   DateTime         @default(now())
}

model QuizCat {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  questions Question[]
  rounds    Round[]
}

model Question {
  id             Int             @id @default(autoincrement())
  question       String
  catName        QuizCat         @relation(fields: [quizCatId], references: [id])
  choices        Choice[]
  createdAt      DateTime        @default(now())
  updateAt       DateTime        @updatedAt
  quizCatId      Int
  answerId       Int
  roundQuestions RoundQuestion[]
}

model Choice {
  id             Int             @id @default(autoincrement())
  questionId     Int
  choice         String
  createdAt      DateTime        @default(now())
  updateAt       DateTime        @updatedAt
  question       Question?       @relation(fields: [questionId], references: [id])
  questionsId    Int?
  roundQuestions RoundQuestion[]
}

model Round {
  id        Int             @id @default(autoincrement())
  cat       QuizCat         @relation(fields: [quizCatId], references: [id])
  score     Int
  questions RoundQuestion[]
  createdAt DateTime        @default(now())
  updateAt  DateTime        @updatedAt
  quizCatId Int
}

model RoundQuestion {
  id         Int      @id @default(autoincrement())
  question   Question @relation(fields: [questionId], references: [id])
  userChoice Choice   @relation(fields: [choiceId], references: [id])
  round      Round?   @relation(fields: [roundId], references: [id])
  roundId    Int?
  questionId Int
  choiceId   Int
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Following {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromFollowing", fields: [fromUserId], references: [id])
  to         User     @relation("ToFollowing", fields: [toUserId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUserId Int
  toUserId   Int
}

model User {
  id                 Int             @id @default(autoincrement())
  name               String
  profileImage       String
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  posts              Post[]
  fromDirectMessages DirectMessage[] @relation("FromDirectMessage")
  toDirectMessages   DirectMessage[] @relation("ToDirectMessage")
  postReplies        PostReply[]
  fromFollowings     Following[]     @relation("FromFollowing")
  toFollowings       Following[]     @relation("ToFollowing")
}

model Post {
  id                Int                @id @default(autoincrement())
  user              User               @relation(fields: [userId], references: [id])
  message           String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userId            Int
  messageToHashTags MessageToHashTag[]
  postReplies       PostReply[]
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromDirectMessage", fields: [fromUserId], references: [id])
  to         User     @relation("ToDirectMessage", fields: [toUserId], references: [id])
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  fromUserId Int
  toUserId   Int
}

model MessageToHashTag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    Int
  hashtagId Int
}

model Hashtag {
  id               Int                @id @default(autoincrement())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  MessageToHashTag MessageToHashTag[]
}

model PostReply {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  message   String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  postId    Int
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
