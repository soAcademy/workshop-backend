// model Menu {
//   id         Int         @id @default(autoincrement())
//   name       String
//   image      String
//   price      Float
//   category   String
//   createdAt  DateTime    @default(now())
//   updatedAt  DateTime    @default(now())
//   orderItems OrderItem[]
// }

// model Order {
//   id        Int         @id @default(autoincrement())
//   status    String      @default("WAITING")
//   tableId   Int
//   items     OrderItem[]
//   createdAt DateTime    @default(now())
//   updatedAt DateTime    @default(now())
// }

// model OrderItem {
//   id        Int      @id @default(autoincrement())
//   menu      Menu     @relation(fields: [menuId], references: [id])
//   order     Order?   @relation(fields: [orderId], references: [id])
//   orderId   Int?
//   menuId    Int
//   quantity  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @default(now())
// }

// ครัวคุณบิน
// category: มีต้ม ผัด แกง ทอด แนะนำ
// menu: แกงส้ม, ผัดชะอม, ต้มจืด
// menu: แกงส้ม [แกง], ผัดชะอม [ผัด], ต้มจืด [ต้ม], แกงเขียวหวาน [แกง]
// order 1: ระบุหมายเลขโต๊ะ 13, แกงส้ม 1 รายการ, ผัดชะอม 2 รายการ (PENDING)
// order 2: ระบุหมายเลขโต๊ะ 13, แกงส้ม 2 รายการ, แกงเขียวหวาน 1 รายการ
// กรณีทำเสร็จ: order 1 จะเปลี่ยนจาก PENDING -> DONE

model BinKitchenCategory {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  menus     BinKitchenMenu[] //*
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

//----------------------------------------------------------------

model BinKitchenMenu {
  id           Int                   @id @default(autoincrement())
  name         String
  image        String
  price        Float
  category     BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
  //                        ระบุว่า categoryName มี foreign key คือ name ใน BinKitchenCategory
  categoryName String?
  orderItems   BinKitchenOrderItem[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now())
}

//----------------------------------------------------------------

model BinKitchenOrder {
  id        Int                   @id @default(autoincrement())
  status    String                @default("PENDING")
  tableId   Int
  items     BinKitchenOrderItem[]
  createdAt DateTime              @default(now())
  updatedAt DateTime              @default(now())
}

//----------------------------------------------------------------

model BinKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now())
}

//----------------------------------------------------------------
//ชื่อโมเดลปกติจะตั้งเป็น singular
//แล้วชื่อตัวแปรค่อยเป็น plural
//แล้วชื่อตัวแปรให้เป็น camelCase หมด
//ใน 1 table มี relation ได้แบบเดียว

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  question Question[]
  round    Round[]
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt
}

model Question {
  id              Int           @id @default(autoincrement())
  name            String
  categories      Category      @relation(fields: [categoriesId], references: [id])
  categoriesId    Int
  roundQuestion   RoundQuestion @relation(fields: [roundQuestionId], references: [id])
  roundQuestionId Int
  choices         Choice[]
  answerId        Int
  createAt        DateTime      @default(now())
  updateAt        DateTime      @updatedAt
}

model RoundQuestion {
  id            Int        @id @default(autoincrement())
  question      Question[]
  round         Round      @relation(fields: [roundId], references: [id])
  roundId       Int
  // choiceUser    Int
  choice        Choice     @relation(fields: [choiceId], references: [id])
  correctAnswer Boolean
  createAt      DateTime   @default(now())
  updateAt      DateTime   @updatedAt
  choiceId      Int
}

model Round {
  id            Int             @id @default(autoincrement())
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  score         Int
  roundQuestion RoundQuestion[]
}

model Choice {
  id            Int             @id @default(autoincrement())
  choices       Int             @unique
  question      Question        @relation(fields: [questionId], references: [id])
  questionId    Int
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  roundQuestion RoundQuestion[]
}

model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  profileImage      String
  createAt          DateTime       @default(now())
  updateAt          DateTime       @updatedAt
  reply             Reply[]
  fromUserRelations UserRelation[] @relation("FromUserRelation")
  toUserRelations   UserRelation[] @relation("ToUserRelation")
}

model Post {
  id            Int             @id @default(autoincrement())
  message       String
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  HashTagOnPost HashTagOnPost[]
  reply         Reply[]
}

model DirecMessage {
  id       Int      @id @default(autoincrement())
  message  String
  fromUser String
  toUser   String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model HashTag {
  id            Int             @id @default(autoincrement())
  name          String
  createAt      DateTime        @default(now())
  updateAt      DateTime        @updatedAt
  HashTagOnPost HashTagOnPost[]
}

model HashTagOnPost {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  hashTags  HashTag  @relation(fields: [hashTagId], references: [id])
  hashTagId Int
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Reply {
  id       Int      @id @default(autoincrement())
  posts    Post     @relation(fields: [postId], references: [id])
  postId   Int
  users    User     @relation(fields: [userId], references: [id])
  userId   Int
  message  String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

model UserRelation {
  id       Int      @id @default(autoincrement())
  from     User     @relation("FromUserRelation", fields: [fromId], references: [id])
  fromId   Int
  to       User     @relation("ToUserRelation", fields: [toId], references: [id])
  toId     Int
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}

//กรณีที่ไป relate Table เดิมซ้ำกันสองรอบ relation string
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_GOOGLE_CLOUD")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}

model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
