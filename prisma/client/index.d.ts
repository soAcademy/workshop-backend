
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model BinKitchenCategory
 * 
 */
export type BinKitchenCategory = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenMenu
 * 
 */
export type BinKitchenMenu = {
  id: number
  name: string
  image: string
  price: number
  categoryName: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenOrder
 * 
 */
export type BinKitchenOrder = {
  id: number
  status: string
  tableId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenOrderItem
 * 
 */
export type BinKitchenOrderItem = {
  id: number
  menuId: number
  orderId: number | null
  quantity: number
  totalPrice: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FBUser
 * 
 */
export type FBUser = {
  id: number
  name: string
  profileImage: string
  coverImage: string
  bio: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Friends
 * 
 */
export type Friends = {
  id: number
  fromUserId: number
  toUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FBPost
 * 
 */
export type FBPost = {
  id: number
  postByUserId: number | null
  postInUserId: number | null
  postDetail: string | null
  image: string | null
  groupId: number | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Comment
 * 
 */
export type Comment = {
  id: number
  postId: number
  commentDetail: string
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model SubComment
 * 
 */
export type SubComment = {
  id: number
  commentId: number
  subCommentDetail: string
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Like
 * 
 */
export type Like = {
  id: number
  postId: number
  userId: number
  likeTypeId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Share
 * 
 */
export type Share = {
  id: number
  postId: number
  userId: number
  shareStatusId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Group
 * 
 */
export type Group = {
  id: number
  groupName: string
  groupImage: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model GroupOnUser
 * 
 */
export type GroupOnUser = {
  id: number
  userId: number
  groupId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LikeType
 * 
 */
export type LikeType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ShareStatus
 * 
 */
export type ShareStatus = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FBDirectMsg
 * 
 */
export type FBDirectMsg = {
  id: number
  fromUserId: number
  toUserId: number
  msgDetail: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FBHashtag
 * 
 */
export type FBHashtag = {
  id: number
  hashtag: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FBPostOnHashtag
 * 
 */
export type FBPostOnHashtag = {
  id: number
  postId: number
  hashtagId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryUniversity
 * 
 */
export type LibraryUniversity = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryStudent
 * 
 */
export type LibraryStudent = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryBook
 * 
 */
export type LibraryBook = {
  id: number
  universityId: number
  name: string
  isbn: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryBookCopy
 * 
 */
export type LibraryBookCopy = {
  id: number
  bookId: number
  atUniversityId: number | null
  currentBorrowBytudentId: number | null
  status: string
  isbn: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryHistoryOfBookCopy
 * 
 */
export type LibraryHistoryOfBookCopy = {
  id: number
  copyId: number
  oncetBorrowBytudentId: number | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryCategory
 * 
 */
export type LibraryCategory = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryAuthor
 * 
 */
export type LibraryAuthor = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BookOnAuthor
 * 
 */
export type BookOnAuthor = {
  id: number
  bookId: number
  authorId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BookOnCategory
 * 
 */
export type BookOnCategory = {
  id: number
  bookId: number
  categoryId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryStudentRequest
 * 
 */
export type LibraryStudentRequest = {
  id: number
  studentId: number
  bookCopyId: number
  fromUniversityId: number
  toUniversityId: number
  status: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model LibraryStudentBorrowing
 * 
 */
export type LibraryStudentBorrowing = {
  id: number
  studentId: number
  bookCopyId: number
  borrowingDate: Date
  targetReturnDate: Date
  actualReturnDate: Date | null
  borrowFromUniversityId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingUser
 * 
 */
export type MeetingUser = {
  id: number
  name: string
  profileImage: string | null
  postion: string | null
  bio: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingUserBooked
 * 
 */
export type MeetingUserBooked = {
  id: number
  userId: number
  meetingRoomId: number
  meetingDetail: string | null
  bookingStart: Date
  bookingEnd: Date
  nameOfBooker: string
  tel: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingMembers
 * 
 */
export type MeetingMembers = {
  id: number
  bookedId: number
  name: string | null
  email: string | null
  tel: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingUserAvailable
 * 
 */
export type MeetingUserAvailable = {
  id: number
  userId: number
  availableStart: Date
  availableEnd: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingRoom
 * 
 */
export type MeetingRoom = {
  id: number
  name: string
  floor: number
  building: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model MeetingRoomBooked
 * 
 */
export type MeetingRoomBooked = {
  id: number
  meetingRoomId: number
  userId: number
  bookingStart: Date
  bookingEnd: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TodoList
 * 
 */
export type TodoList = {
  id: number
  task: string
  status: string
  note: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaCategory
 * 
 */
export type TriviaCategory = {
  id: number
  categoryName: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaQuiz
 * 
 */
export type TriviaQuiz = {
  id: number
  quizName: string
  categoryId: number
  triviaAnswerChoiceId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaChoice
 * 
 */
export type TriviaChoice = {
  id: number
  choiceName: string
  quizId: number | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaRound
 * 
 */
export type TriviaRound = {
  id: number
  name: string | null
  score: number
  categoryId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaRoundQuiz
 * 
 */
export type TriviaRoundQuiz = {
  id: number
  roundId: number
  quizId: number
  playerChooseChoice: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaRoundQuizChoice
 * 
 */
export type TriviaRoundQuizChoice = {
  id: number
  roundQuizId: number
  quizChoiceId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string
  profileImage: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Following
 * 
 */
export type Following = {
  id: number
  fromUserId: number
  toUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Post
 * 
 */
export type Post = {
  id: number
  userId: number
  postDetail: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model DirectMsg
 * 
 */
export type DirectMsg = {
  id: number
  fromUserId: number
  toUserId: number
  msgDetail: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Hashtag
 * 
 */
export type Hashtag = {
  id: number
  hashtag: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Reply
 * 
 */
export type Reply = {
  id: number
  postId: number
  reply: string
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PostOnHashtag
 * 
 */
export type PostOnHashtag = {
  id: number
  postId: number
  hashtagId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingBranch
 * 
 */
export type WashingBranch = {
  id: number
  branchName: string
  address: string
  tel: string
  area: number
  ownerName: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingMachine
 * 
 */
export type WashingMachine = {
  id: number
  branchId: number
  brand: string
  weight: number
  type: string
  productionYear: Date
  warrantyEnd: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingMachineMaintenance
 * 
 */
export type WashingMachineMaintenance = {
  id: number
  machineId: number
  symptom: string
  failureLevel: number
  mechanicName: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingMachineProgram
 * 
 */
export type WashingMachineProgram = {
  id: number
  programName: string
  price: number
  time: number
  maxWeight: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingMachineOnProgram
 * 
 */
export type WashingMachineOnProgram = {
  id: number
  machineId: number
  programId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingUser
 * 
 */
export type WashingUser = {
  id: number
  userName: string
  tel: string
  remainCoupon: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingTopUp
 * 
 */
export type WashingTopUp = {
  id: number
  userId: number
  topUpAmount: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model WashingUseHistory
 * 
 */
export type WashingUseHistory = {
  id: number
  userId: number
  branchId: number
  machineId: number
  programId: number
  price: number
  startTime: Date
  endTime: Date
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTUser
 * 
 */
export type YTUser = {
  id: number
  userName: string
  profileImage: string
  email: string
  bio: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTChanel
 * 
 */
export type YTChanel = {
  id: number
  chaneName: string
  image: string | null
  description: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model ChanelOnUser
 * 
 */
export type ChanelOnUser = {
  id: number
  userId: number
  chanelId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTAdmin
 * 
 */
export type YTAdmin = {
  id: number
  chanelId: number
  adminUserId: number
  roleId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTRole
 * 
 */
export type YTRole = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTRolePermission
 * 
 */
export type YTRolePermission = {
  id: number
  roleId: number
  permissionName: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTSubscribe
 * 
 */
export type YTSubscribe = {
  id: number
  chanelId: number
  subscribeUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTVideo
 * 
 */
export type YTVideo = {
  id: number
  chanelId: number
  videoLink: string
  description: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTComment
 * 
 */
export type YTComment = {
  id: number
  videoId: number
  commentDetail: string
  commentFromUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YTSubComment
 * 
 */
export type YTSubComment = {
  id: number
  commentId: number
  subCommentDetail: string
  subCommentFromUserId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BinKitchenCategories
 * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BinKitchenCategories
   * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.binKitchenCategory`: Exposes CRUD operations for the **BinKitchenCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenCategories
    * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
    * ```
    */
  get binKitchenCategory(): Prisma.BinKitchenCategoryDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenMenu`: Exposes CRUD operations for the **BinKitchenMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenMenus
    * const binKitchenMenus = await prisma.binKitchenMenu.findMany()
    * ```
    */
  get binKitchenMenu(): Prisma.BinKitchenMenuDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenOrder`: Exposes CRUD operations for the **BinKitchenOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenOrders
    * const binKitchenOrders = await prisma.binKitchenOrder.findMany()
    * ```
    */
  get binKitchenOrder(): Prisma.BinKitchenOrderDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenOrderItem`: Exposes CRUD operations for the **BinKitchenOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenOrderItems
    * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany()
    * ```
    */
  get binKitchenOrderItem(): Prisma.BinKitchenOrderItemDelegate<GlobalReject>;

  /**
   * `prisma.fBUser`: Exposes CRUD operations for the **FBUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FBUsers
    * const fBUsers = await prisma.fBUser.findMany()
    * ```
    */
  get fBUser(): Prisma.FBUserDelegate<GlobalReject>;

  /**
   * `prisma.friends`: Exposes CRUD operations for the **Friends** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Friends
    * const friends = await prisma.friends.findMany()
    * ```
    */
  get friends(): Prisma.FriendsDelegate<GlobalReject>;

  /**
   * `prisma.fBPost`: Exposes CRUD operations for the **FBPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FBPosts
    * const fBPosts = await prisma.fBPost.findMany()
    * ```
    */
  get fBPost(): Prisma.FBPostDelegate<GlobalReject>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<GlobalReject>;

  /**
   * `prisma.subComment`: Exposes CRUD operations for the **SubComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubComments
    * const subComments = await prisma.subComment.findMany()
    * ```
    */
  get subComment(): Prisma.SubCommentDelegate<GlobalReject>;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate<GlobalReject>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.share.findMany()
    * ```
    */
  get share(): Prisma.ShareDelegate<GlobalReject>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<GlobalReject>;

  /**
   * `prisma.groupOnUser`: Exposes CRUD operations for the **GroupOnUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupOnUsers
    * const groupOnUsers = await prisma.groupOnUser.findMany()
    * ```
    */
  get groupOnUser(): Prisma.GroupOnUserDelegate<GlobalReject>;

  /**
   * `prisma.likeType`: Exposes CRUD operations for the **LikeType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LikeTypes
    * const likeTypes = await prisma.likeType.findMany()
    * ```
    */
  get likeType(): Prisma.LikeTypeDelegate<GlobalReject>;

  /**
   * `prisma.shareStatus`: Exposes CRUD operations for the **ShareStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareStatuses
    * const shareStatuses = await prisma.shareStatus.findMany()
    * ```
    */
  get shareStatus(): Prisma.ShareStatusDelegate<GlobalReject>;

  /**
   * `prisma.fBDirectMsg`: Exposes CRUD operations for the **FBDirectMsg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FBDirectMsgs
    * const fBDirectMsgs = await prisma.fBDirectMsg.findMany()
    * ```
    */
  get fBDirectMsg(): Prisma.FBDirectMsgDelegate<GlobalReject>;

  /**
   * `prisma.fBHashtag`: Exposes CRUD operations for the **FBHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FBHashtags
    * const fBHashtags = await prisma.fBHashtag.findMany()
    * ```
    */
  get fBHashtag(): Prisma.FBHashtagDelegate<GlobalReject>;

  /**
   * `prisma.fBPostOnHashtag`: Exposes CRUD operations for the **FBPostOnHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FBPostOnHashtags
    * const fBPostOnHashtags = await prisma.fBPostOnHashtag.findMany()
    * ```
    */
  get fBPostOnHashtag(): Prisma.FBPostOnHashtagDelegate<GlobalReject>;

  /**
   * `prisma.libraryUniversity`: Exposes CRUD operations for the **LibraryUniversity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryUniversities
    * const libraryUniversities = await prisma.libraryUniversity.findMany()
    * ```
    */
  get libraryUniversity(): Prisma.LibraryUniversityDelegate<GlobalReject>;

  /**
   * `prisma.libraryStudent`: Exposes CRUD operations for the **LibraryStudent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryStudents
    * const libraryStudents = await prisma.libraryStudent.findMany()
    * ```
    */
  get libraryStudent(): Prisma.LibraryStudentDelegate<GlobalReject>;

  /**
   * `prisma.libraryBook`: Exposes CRUD operations for the **LibraryBook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryBooks
    * const libraryBooks = await prisma.libraryBook.findMany()
    * ```
    */
  get libraryBook(): Prisma.LibraryBookDelegate<GlobalReject>;

  /**
   * `prisma.libraryBookCopy`: Exposes CRUD operations for the **LibraryBookCopy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryBookCopies
    * const libraryBookCopies = await prisma.libraryBookCopy.findMany()
    * ```
    */
  get libraryBookCopy(): Prisma.LibraryBookCopyDelegate<GlobalReject>;

  /**
   * `prisma.libraryHistoryOfBookCopy`: Exposes CRUD operations for the **LibraryHistoryOfBookCopy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryHistoryOfBookCopies
    * const libraryHistoryOfBookCopies = await prisma.libraryHistoryOfBookCopy.findMany()
    * ```
    */
  get libraryHistoryOfBookCopy(): Prisma.LibraryHistoryOfBookCopyDelegate<GlobalReject>;

  /**
   * `prisma.libraryCategory`: Exposes CRUD operations for the **LibraryCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryCategories
    * const libraryCategories = await prisma.libraryCategory.findMany()
    * ```
    */
  get libraryCategory(): Prisma.LibraryCategoryDelegate<GlobalReject>;

  /**
   * `prisma.libraryAuthor`: Exposes CRUD operations for the **LibraryAuthor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryAuthors
    * const libraryAuthors = await prisma.libraryAuthor.findMany()
    * ```
    */
  get libraryAuthor(): Prisma.LibraryAuthorDelegate<GlobalReject>;

  /**
   * `prisma.bookOnAuthor`: Exposes CRUD operations for the **BookOnAuthor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookOnAuthors
    * const bookOnAuthors = await prisma.bookOnAuthor.findMany()
    * ```
    */
  get bookOnAuthor(): Prisma.BookOnAuthorDelegate<GlobalReject>;

  /**
   * `prisma.bookOnCategory`: Exposes CRUD operations for the **BookOnCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookOnCategories
    * const bookOnCategories = await prisma.bookOnCategory.findMany()
    * ```
    */
  get bookOnCategory(): Prisma.BookOnCategoryDelegate<GlobalReject>;

  /**
   * `prisma.libraryStudentRequest`: Exposes CRUD operations for the **LibraryStudentRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryStudentRequests
    * const libraryStudentRequests = await prisma.libraryStudentRequest.findMany()
    * ```
    */
  get libraryStudentRequest(): Prisma.LibraryStudentRequestDelegate<GlobalReject>;

  /**
   * `prisma.libraryStudentBorrowing`: Exposes CRUD operations for the **LibraryStudentBorrowing** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LibraryStudentBorrowings
    * const libraryStudentBorrowings = await prisma.libraryStudentBorrowing.findMany()
    * ```
    */
  get libraryStudentBorrowing(): Prisma.LibraryStudentBorrowingDelegate<GlobalReject>;

  /**
   * `prisma.meetingUser`: Exposes CRUD operations for the **MeetingUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingUsers
    * const meetingUsers = await prisma.meetingUser.findMany()
    * ```
    */
  get meetingUser(): Prisma.MeetingUserDelegate<GlobalReject>;

  /**
   * `prisma.meetingUserBooked`: Exposes CRUD operations for the **MeetingUserBooked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingUserBookeds
    * const meetingUserBookeds = await prisma.meetingUserBooked.findMany()
    * ```
    */
  get meetingUserBooked(): Prisma.MeetingUserBookedDelegate<GlobalReject>;

  /**
   * `prisma.meetingMembers`: Exposes CRUD operations for the **MeetingMembers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingMembers
    * const meetingMembers = await prisma.meetingMembers.findMany()
    * ```
    */
  get meetingMembers(): Prisma.MeetingMembersDelegate<GlobalReject>;

  /**
   * `prisma.meetingUserAvailable`: Exposes CRUD operations for the **MeetingUserAvailable** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingUserAvailables
    * const meetingUserAvailables = await prisma.meetingUserAvailable.findMany()
    * ```
    */
  get meetingUserAvailable(): Prisma.MeetingUserAvailableDelegate<GlobalReject>;

  /**
   * `prisma.meetingRoom`: Exposes CRUD operations for the **MeetingRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingRooms
    * const meetingRooms = await prisma.meetingRoom.findMany()
    * ```
    */
  get meetingRoom(): Prisma.MeetingRoomDelegate<GlobalReject>;

  /**
   * `prisma.meetingRoomBooked`: Exposes CRUD operations for the **MeetingRoomBooked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetingRoomBookeds
    * const meetingRoomBookeds = await prisma.meetingRoomBooked.findMany()
    * ```
    */
  get meetingRoomBooked(): Prisma.MeetingRoomBookedDelegate<GlobalReject>;

  /**
   * `prisma.todoList`: Exposes CRUD operations for the **TodoList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodoLists
    * const todoLists = await prisma.todoList.findMany()
    * ```
    */
  get todoList(): Prisma.TodoListDelegate<GlobalReject>;

  /**
   * `prisma.triviaCategory`: Exposes CRUD operations for the **TriviaCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaCategories
    * const triviaCategories = await prisma.triviaCategory.findMany()
    * ```
    */
  get triviaCategory(): Prisma.TriviaCategoryDelegate<GlobalReject>;

  /**
   * `prisma.triviaQuiz`: Exposes CRUD operations for the **TriviaQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaQuizs
    * const triviaQuizs = await prisma.triviaQuiz.findMany()
    * ```
    */
  get triviaQuiz(): Prisma.TriviaQuizDelegate<GlobalReject>;

  /**
   * `prisma.triviaChoice`: Exposes CRUD operations for the **TriviaChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaChoices
    * const triviaChoices = await prisma.triviaChoice.findMany()
    * ```
    */
  get triviaChoice(): Prisma.TriviaChoiceDelegate<GlobalReject>;

  /**
   * `prisma.triviaRound`: Exposes CRUD operations for the **TriviaRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaRounds
    * const triviaRounds = await prisma.triviaRound.findMany()
    * ```
    */
  get triviaRound(): Prisma.TriviaRoundDelegate<GlobalReject>;

  /**
   * `prisma.triviaRoundQuiz`: Exposes CRUD operations for the **TriviaRoundQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaRoundQuizs
    * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany()
    * ```
    */
  get triviaRoundQuiz(): Prisma.TriviaRoundQuizDelegate<GlobalReject>;

  /**
   * `prisma.triviaRoundQuizChoice`: Exposes CRUD operations for the **TriviaRoundQuizChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaRoundQuizChoices
    * const triviaRoundQuizChoices = await prisma.triviaRoundQuizChoice.findMany()
    * ```
    */
  get triviaRoundQuizChoice(): Prisma.TriviaRoundQuizChoiceDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.following`: Exposes CRUD operations for the **Following** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followings
    * const followings = await prisma.following.findMany()
    * ```
    */
  get following(): Prisma.FollowingDelegate<GlobalReject>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<GlobalReject>;

  /**
   * `prisma.directMsg`: Exposes CRUD operations for the **DirectMsg** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DirectMsgs
    * const directMsgs = await prisma.directMsg.findMany()
    * ```
    */
  get directMsg(): Prisma.DirectMsgDelegate<GlobalReject>;

  /**
   * `prisma.hashtag`: Exposes CRUD operations for the **Hashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hashtags
    * const hashtags = await prisma.hashtag.findMany()
    * ```
    */
  get hashtag(): Prisma.HashtagDelegate<GlobalReject>;

  /**
   * `prisma.reply`: Exposes CRUD operations for the **Reply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replies
    * const replies = await prisma.reply.findMany()
    * ```
    */
  get reply(): Prisma.ReplyDelegate<GlobalReject>;

  /**
   * `prisma.postOnHashtag`: Exposes CRUD operations for the **PostOnHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostOnHashtags
    * const postOnHashtags = await prisma.postOnHashtag.findMany()
    * ```
    */
  get postOnHashtag(): Prisma.PostOnHashtagDelegate<GlobalReject>;

  /**
   * `prisma.washingBranch`: Exposes CRUD operations for the **WashingBranch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingBranches
    * const washingBranches = await prisma.washingBranch.findMany()
    * ```
    */
  get washingBranch(): Prisma.WashingBranchDelegate<GlobalReject>;

  /**
   * `prisma.washingMachine`: Exposes CRUD operations for the **WashingMachine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingMachines
    * const washingMachines = await prisma.washingMachine.findMany()
    * ```
    */
  get washingMachine(): Prisma.WashingMachineDelegate<GlobalReject>;

  /**
   * `prisma.washingMachineMaintenance`: Exposes CRUD operations for the **WashingMachineMaintenance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingMachineMaintenances
    * const washingMachineMaintenances = await prisma.washingMachineMaintenance.findMany()
    * ```
    */
  get washingMachineMaintenance(): Prisma.WashingMachineMaintenanceDelegate<GlobalReject>;

  /**
   * `prisma.washingMachineProgram`: Exposes CRUD operations for the **WashingMachineProgram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingMachinePrograms
    * const washingMachinePrograms = await prisma.washingMachineProgram.findMany()
    * ```
    */
  get washingMachineProgram(): Prisma.WashingMachineProgramDelegate<GlobalReject>;

  /**
   * `prisma.washingMachineOnProgram`: Exposes CRUD operations for the **WashingMachineOnProgram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingMachineOnPrograms
    * const washingMachineOnPrograms = await prisma.washingMachineOnProgram.findMany()
    * ```
    */
  get washingMachineOnProgram(): Prisma.WashingMachineOnProgramDelegate<GlobalReject>;

  /**
   * `prisma.washingUser`: Exposes CRUD operations for the **WashingUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingUsers
    * const washingUsers = await prisma.washingUser.findMany()
    * ```
    */
  get washingUser(): Prisma.WashingUserDelegate<GlobalReject>;

  /**
   * `prisma.washingTopUp`: Exposes CRUD operations for the **WashingTopUp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingTopUps
    * const washingTopUps = await prisma.washingTopUp.findMany()
    * ```
    */
  get washingTopUp(): Prisma.WashingTopUpDelegate<GlobalReject>;

  /**
   * `prisma.washingUseHistory`: Exposes CRUD operations for the **WashingUseHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WashingUseHistories
    * const washingUseHistories = await prisma.washingUseHistory.findMany()
    * ```
    */
  get washingUseHistory(): Prisma.WashingUseHistoryDelegate<GlobalReject>;

  /**
   * `prisma.yTUser`: Exposes CRUD operations for the **YTUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTUsers
    * const yTUsers = await prisma.yTUser.findMany()
    * ```
    */
  get yTUser(): Prisma.YTUserDelegate<GlobalReject>;

  /**
   * `prisma.yTChanel`: Exposes CRUD operations for the **YTChanel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTChanels
    * const yTChanels = await prisma.yTChanel.findMany()
    * ```
    */
  get yTChanel(): Prisma.YTChanelDelegate<GlobalReject>;

  /**
   * `prisma.chanelOnUser`: Exposes CRUD operations for the **ChanelOnUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChanelOnUsers
    * const chanelOnUsers = await prisma.chanelOnUser.findMany()
    * ```
    */
  get chanelOnUser(): Prisma.ChanelOnUserDelegate<GlobalReject>;

  /**
   * `prisma.yTAdmin`: Exposes CRUD operations for the **YTAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTAdmins
    * const yTAdmins = await prisma.yTAdmin.findMany()
    * ```
    */
  get yTAdmin(): Prisma.YTAdminDelegate<GlobalReject>;

  /**
   * `prisma.yTRole`: Exposes CRUD operations for the **YTRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTRoles
    * const yTRoles = await prisma.yTRole.findMany()
    * ```
    */
  get yTRole(): Prisma.YTRoleDelegate<GlobalReject>;

  /**
   * `prisma.yTRolePermission`: Exposes CRUD operations for the **YTRolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTRolePermissions
    * const yTRolePermissions = await prisma.yTRolePermission.findMany()
    * ```
    */
  get yTRolePermission(): Prisma.YTRolePermissionDelegate<GlobalReject>;

  /**
   * `prisma.yTSubscribe`: Exposes CRUD operations for the **YTSubscribe** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTSubscribes
    * const yTSubscribes = await prisma.yTSubscribe.findMany()
    * ```
    */
  get yTSubscribe(): Prisma.YTSubscribeDelegate<GlobalReject>;

  /**
   * `prisma.yTVideo`: Exposes CRUD operations for the **YTVideo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTVideos
    * const yTVideos = await prisma.yTVideo.findMany()
    * ```
    */
  get yTVideo(): Prisma.YTVideoDelegate<GlobalReject>;

  /**
   * `prisma.yTComment`: Exposes CRUD operations for the **YTComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTComments
    * const yTComments = await prisma.yTComment.findMany()
    * ```
    */
  get yTComment(): Prisma.YTCommentDelegate<GlobalReject>;

  /**
   * `prisma.yTSubComment`: Exposes CRUD operations for the **YTSubComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YTSubComments
    * const yTSubComments = await prisma.yTSubComment.findMany()
    * ```
    */
  get yTSubComment(): Prisma.YTSubCommentDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BinKitchenCategory: 'BinKitchenCategory',
    BinKitchenMenu: 'BinKitchenMenu',
    BinKitchenOrder: 'BinKitchenOrder',
    BinKitchenOrderItem: 'BinKitchenOrderItem',
    FBUser: 'FBUser',
    Friends: 'Friends',
    FBPost: 'FBPost',
    Comment: 'Comment',
    SubComment: 'SubComment',
    Like: 'Like',
    Share: 'Share',
    Group: 'Group',
    GroupOnUser: 'GroupOnUser',
    LikeType: 'LikeType',
    ShareStatus: 'ShareStatus',
    FBDirectMsg: 'FBDirectMsg',
    FBHashtag: 'FBHashtag',
    FBPostOnHashtag: 'FBPostOnHashtag',
    LibraryUniversity: 'LibraryUniversity',
    LibraryStudent: 'LibraryStudent',
    LibraryBook: 'LibraryBook',
    LibraryBookCopy: 'LibraryBookCopy',
    LibraryHistoryOfBookCopy: 'LibraryHistoryOfBookCopy',
    LibraryCategory: 'LibraryCategory',
    LibraryAuthor: 'LibraryAuthor',
    BookOnAuthor: 'BookOnAuthor',
    BookOnCategory: 'BookOnCategory',
    LibraryStudentRequest: 'LibraryStudentRequest',
    LibraryStudentBorrowing: 'LibraryStudentBorrowing',
    MeetingUser: 'MeetingUser',
    MeetingUserBooked: 'MeetingUserBooked',
    MeetingMembers: 'MeetingMembers',
    MeetingUserAvailable: 'MeetingUserAvailable',
    MeetingRoom: 'MeetingRoom',
    MeetingRoomBooked: 'MeetingRoomBooked',
    TodoList: 'TodoList',
    TriviaCategory: 'TriviaCategory',
    TriviaQuiz: 'TriviaQuiz',
    TriviaChoice: 'TriviaChoice',
    TriviaRound: 'TriviaRound',
    TriviaRoundQuiz: 'TriviaRoundQuiz',
    TriviaRoundQuizChoice: 'TriviaRoundQuizChoice',
    User: 'User',
    Following: 'Following',
    Post: 'Post',
    DirectMsg: 'DirectMsg',
    Hashtag: 'Hashtag',
    Reply: 'Reply',
    PostOnHashtag: 'PostOnHashtag',
    WashingBranch: 'WashingBranch',
    WashingMachine: 'WashingMachine',
    WashingMachineMaintenance: 'WashingMachineMaintenance',
    WashingMachineProgram: 'WashingMachineProgram',
    WashingMachineOnProgram: 'WashingMachineOnProgram',
    WashingUser: 'WashingUser',
    WashingTopUp: 'WashingTopUp',
    WashingUseHistory: 'WashingUseHistory',
    YTUser: 'YTUser',
    YTChanel: 'YTChanel',
    ChanelOnUser: 'ChanelOnUser',
    YTAdmin: 'YTAdmin',
    YTRole: 'YTRole',
    YTRolePermission: 'YTRolePermission',
    YTSubscribe: 'YTSubscribe',
    YTVideo: 'YTVideo',
    YTComment: 'YTComment',
    YTSubComment: 'YTSubComment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BinKitchenCategoryCountOutputType
   */


  export type BinKitchenCategoryCountOutputType = {
    BinKitchenMenu: number
  }

  export type BinKitchenCategoryCountOutputTypeSelect = {
    BinKitchenMenu?: boolean
  }

  export type BinKitchenCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenCategoryCountOutputTypeArgs)
    ? BinKitchenCategoryCountOutputType 
    : S extends { select: any } & (BinKitchenCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenCategoryCountOutputType ? BinKitchenCategoryCountOutputType[P] : never
  } 
      : BinKitchenCategoryCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenCategoryCountOutputType without action
   */
  export type BinKitchenCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategoryCountOutputType
     */
    select?: BinKitchenCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type BinKitchenMenuCountOutputType
   */


  export type BinKitchenMenuCountOutputType = {
    BinKitchenOrderItem: number
  }

  export type BinKitchenMenuCountOutputTypeSelect = {
    BinKitchenOrderItem?: boolean
  }

  export type BinKitchenMenuCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenMenuCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenMenuCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenMenuCountOutputTypeArgs)
    ? BinKitchenMenuCountOutputType 
    : S extends { select: any } & (BinKitchenMenuCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenMenuCountOutputType ? BinKitchenMenuCountOutputType[P] : never
  } 
      : BinKitchenMenuCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenMenuCountOutputType without action
   */
  export type BinKitchenMenuCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenuCountOutputType
     */
    select?: BinKitchenMenuCountOutputTypeSelect | null
  }



  /**
   * Count Type BinKitchenOrderCountOutputType
   */


  export type BinKitchenOrderCountOutputType = {
    BinKitchenOrderItem: number
  }

  export type BinKitchenOrderCountOutputTypeSelect = {
    BinKitchenOrderItem?: boolean
  }

  export type BinKitchenOrderCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenOrderCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrderCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderCountOutputTypeArgs)
    ? BinKitchenOrderCountOutputType 
    : S extends { select: any } & (BinKitchenOrderCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenOrderCountOutputType ? BinKitchenOrderCountOutputType[P] : never
  } 
      : BinKitchenOrderCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenOrderCountOutputType without action
   */
  export type BinKitchenOrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderCountOutputType
     */
    select?: BinKitchenOrderCountOutputTypeSelect | null
  }



  /**
   * Count Type FBUserCountOutputType
   */


  export type FBUserCountOutputType = {
    fromFriends: number
    toFriends: number
    Comment: number
    SubComment: number
    GroupOnUser: number
    Like: number
    Share: number
    fromDirectMsg: number
    toDirectMsg: number
    postByUser: number
    postInUser: number
  }

  export type FBUserCountOutputTypeSelect = {
    fromFriends?: boolean
    toFriends?: boolean
    Comment?: boolean
    SubComment?: boolean
    GroupOnUser?: boolean
    Like?: boolean
    Share?: boolean
    fromDirectMsg?: boolean
    toDirectMsg?: boolean
    postByUser?: boolean
    postInUser?: boolean
  }

  export type FBUserCountOutputTypeGetPayload<S extends boolean | null | undefined | FBUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FBUserCountOutputTypeArgs)
    ? FBUserCountOutputType 
    : S extends { select: any } & (FBUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FBUserCountOutputType ? FBUserCountOutputType[P] : never
  } 
      : FBUserCountOutputType




  // Custom InputTypes

  /**
   * FBUserCountOutputType without action
   */
  export type FBUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FBUserCountOutputType
     */
    select?: FBUserCountOutputTypeSelect | null
  }



  /**
   * Count Type FBPostCountOutputType
   */


  export type FBPostCountOutputType = {
    Comment: number
    Like: number
    Share: number
    PostOnHashtag: number
  }

  export type FBPostCountOutputTypeSelect = {
    Comment?: boolean
    Like?: boolean
    Share?: boolean
    PostOnHashtag?: boolean
  }

  export type FBPostCountOutputTypeGetPayload<S extends boolean | null | undefined | FBPostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBPostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FBPostCountOutputTypeArgs)
    ? FBPostCountOutputType 
    : S extends { select: any } & (FBPostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FBPostCountOutputType ? FBPostCountOutputType[P] : never
  } 
      : FBPostCountOutputType




  // Custom InputTypes

  /**
   * FBPostCountOutputType without action
   */
  export type FBPostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FBPostCountOutputType
     */
    select?: FBPostCountOutputTypeSelect | null
  }



  /**
   * Count Type CommentCountOutputType
   */


  export type CommentCountOutputType = {
    SubComment: number
  }

  export type CommentCountOutputTypeSelect = {
    SubComment?: boolean
  }

  export type CommentCountOutputTypeGetPayload<S extends boolean | null | undefined | CommentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CommentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CommentCountOutputTypeArgs)
    ? CommentCountOutputType 
    : S extends { select: any } & (CommentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CommentCountOutputType ? CommentCountOutputType[P] : never
  } 
      : CommentCountOutputType




  // Custom InputTypes

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect | null
  }



  /**
   * Count Type GroupCountOutputType
   */


  export type GroupCountOutputType = {
    GroupOnUser: number
    FBPost: number
  }

  export type GroupCountOutputTypeSelect = {
    GroupOnUser?: boolean
    FBPost?: boolean
  }

  export type GroupCountOutputTypeGetPayload<S extends boolean | null | undefined | GroupCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GroupCountOutputTypeArgs)
    ? GroupCountOutputType 
    : S extends { select: any } & (GroupCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GroupCountOutputType ? GroupCountOutputType[P] : never
  } 
      : GroupCountOutputType




  // Custom InputTypes

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect | null
  }



  /**
   * Count Type LikeTypeCountOutputType
   */


  export type LikeTypeCountOutputType = {
    Like: number
  }

  export type LikeTypeCountOutputTypeSelect = {
    Like?: boolean
  }

  export type LikeTypeCountOutputTypeGetPayload<S extends boolean | null | undefined | LikeTypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LikeTypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LikeTypeCountOutputTypeArgs)
    ? LikeTypeCountOutputType 
    : S extends { select: any } & (LikeTypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LikeTypeCountOutputType ? LikeTypeCountOutputType[P] : never
  } 
      : LikeTypeCountOutputType




  // Custom InputTypes

  /**
   * LikeTypeCountOutputType without action
   */
  export type LikeTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LikeTypeCountOutputType
     */
    select?: LikeTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type ShareStatusCountOutputType
   */


  export type ShareStatusCountOutputType = {
    Share: number
  }

  export type ShareStatusCountOutputTypeSelect = {
    Share?: boolean
  }

  export type ShareStatusCountOutputTypeGetPayload<S extends boolean | null | undefined | ShareStatusCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ShareStatusCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ShareStatusCountOutputTypeArgs)
    ? ShareStatusCountOutputType 
    : S extends { select: any } & (ShareStatusCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ShareStatusCountOutputType ? ShareStatusCountOutputType[P] : never
  } 
      : ShareStatusCountOutputType




  // Custom InputTypes

  /**
   * ShareStatusCountOutputType without action
   */
  export type ShareStatusCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShareStatusCountOutputType
     */
    select?: ShareStatusCountOutputTypeSelect | null
  }



  /**
   * Count Type FBHashtagCountOutputType
   */


  export type FBHashtagCountOutputType = {
    PostOnHashtag: number
  }

  export type FBHashtagCountOutputTypeSelect = {
    PostOnHashtag?: boolean
  }

  export type FBHashtagCountOutputTypeGetPayload<S extends boolean | null | undefined | FBHashtagCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBHashtagCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FBHashtagCountOutputTypeArgs)
    ? FBHashtagCountOutputType 
    : S extends { select: any } & (FBHashtagCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FBHashtagCountOutputType ? FBHashtagCountOutputType[P] : never
  } 
      : FBHashtagCountOutputType




  // Custom InputTypes

  /**
   * FBHashtagCountOutputType without action
   */
  export type FBHashtagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FBHashtagCountOutputType
     */
    select?: FBHashtagCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryUniversityCountOutputType
   */


  export type LibraryUniversityCountOutputType = {
    libraryBook: number
    libraryBookCopy: number
    fromUniversity: number
    toUniversity: number
    libraryStudentBorrowing: number
  }

  export type LibraryUniversityCountOutputTypeSelect = {
    libraryBook?: boolean
    libraryBookCopy?: boolean
    fromUniversity?: boolean
    toUniversity?: boolean
    libraryStudentBorrowing?: boolean
  }

  export type LibraryUniversityCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryUniversityCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryUniversityCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryUniversityCountOutputTypeArgs)
    ? LibraryUniversityCountOutputType 
    : S extends { select: any } & (LibraryUniversityCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryUniversityCountOutputType ? LibraryUniversityCountOutputType[P] : never
  } 
      : LibraryUniversityCountOutputType




  // Custom InputTypes

  /**
   * LibraryUniversityCountOutputType without action
   */
  export type LibraryUniversityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversityCountOutputType
     */
    select?: LibraryUniversityCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryStudentCountOutputType
   */


  export type LibraryStudentCountOutputType = {
    libraryBookCopy: number
    historyOfBookCopy: number
    libraryHistoryOfStudentBorrowing: number
    libraryStudentBorrowing: number
  }

  export type LibraryStudentCountOutputTypeSelect = {
    libraryBookCopy?: boolean
    historyOfBookCopy?: boolean
    libraryHistoryOfStudentBorrowing?: boolean
    libraryStudentBorrowing?: boolean
  }

  export type LibraryStudentCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryStudentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryStudentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryStudentCountOutputTypeArgs)
    ? LibraryStudentCountOutputType 
    : S extends { select: any } & (LibraryStudentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryStudentCountOutputType ? LibraryStudentCountOutputType[P] : never
  } 
      : LibraryStudentCountOutputType




  // Custom InputTypes

  /**
   * LibraryStudentCountOutputType without action
   */
  export type LibraryStudentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentCountOutputType
     */
    select?: LibraryStudentCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryBookCountOutputType
   */


  export type LibraryBookCountOutputType = {
    libraryBookCopy: number
    bookOnAuthor: number
    bookOnCategory: number
  }

  export type LibraryBookCountOutputTypeSelect = {
    libraryBookCopy?: boolean
    bookOnAuthor?: boolean
    bookOnCategory?: boolean
  }

  export type LibraryBookCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryBookCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryBookCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryBookCountOutputTypeArgs)
    ? LibraryBookCountOutputType 
    : S extends { select: any } & (LibraryBookCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryBookCountOutputType ? LibraryBookCountOutputType[P] : never
  } 
      : LibraryBookCountOutputType




  // Custom InputTypes

  /**
   * LibraryBookCountOutputType without action
   */
  export type LibraryBookCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCountOutputType
     */
    select?: LibraryBookCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryBookCopyCountOutputType
   */


  export type LibraryBookCopyCountOutputType = {
    historyOfBookCopy: number
    libraryHistoryOfStudentBorrowing: number
    libraryStudentBorrowing: number
  }

  export type LibraryBookCopyCountOutputTypeSelect = {
    historyOfBookCopy?: boolean
    libraryHistoryOfStudentBorrowing?: boolean
    libraryStudentBorrowing?: boolean
  }

  export type LibraryBookCopyCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryBookCopyCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryBookCopyCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryBookCopyCountOutputTypeArgs)
    ? LibraryBookCopyCountOutputType 
    : S extends { select: any } & (LibraryBookCopyCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryBookCopyCountOutputType ? LibraryBookCopyCountOutputType[P] : never
  } 
      : LibraryBookCopyCountOutputType




  // Custom InputTypes

  /**
   * LibraryBookCopyCountOutputType without action
   */
  export type LibraryBookCopyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopyCountOutputType
     */
    select?: LibraryBookCopyCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryCategoryCountOutputType
   */


  export type LibraryCategoryCountOutputType = {
    bookOnCategory: number
  }

  export type LibraryCategoryCountOutputTypeSelect = {
    bookOnCategory?: boolean
  }

  export type LibraryCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryCategoryCountOutputTypeArgs)
    ? LibraryCategoryCountOutputType 
    : S extends { select: any } & (LibraryCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryCategoryCountOutputType ? LibraryCategoryCountOutputType[P] : never
  } 
      : LibraryCategoryCountOutputType




  // Custom InputTypes

  /**
   * LibraryCategoryCountOutputType without action
   */
  export type LibraryCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategoryCountOutputType
     */
    select?: LibraryCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type LibraryAuthorCountOutputType
   */


  export type LibraryAuthorCountOutputType = {
    bookOnAuthor: number
  }

  export type LibraryAuthorCountOutputTypeSelect = {
    bookOnAuthor?: boolean
  }

  export type LibraryAuthorCountOutputTypeGetPayload<S extends boolean | null | undefined | LibraryAuthorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryAuthorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (LibraryAuthorCountOutputTypeArgs)
    ? LibraryAuthorCountOutputType 
    : S extends { select: any } & (LibraryAuthorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof LibraryAuthorCountOutputType ? LibraryAuthorCountOutputType[P] : never
  } 
      : LibraryAuthorCountOutputType




  // Custom InputTypes

  /**
   * LibraryAuthorCountOutputType without action
   */
  export type LibraryAuthorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthorCountOutputType
     */
    select?: LibraryAuthorCountOutputTypeSelect | null
  }



  /**
   * Count Type MeetingUserCountOutputType
   */


  export type MeetingUserCountOutputType = {
    MeetingUserBooked: number
    MeetingUserAvailable: number
    MeetingRoomBooked: number
  }

  export type MeetingUserCountOutputTypeSelect = {
    MeetingUserBooked?: boolean
    MeetingUserAvailable?: boolean
    MeetingRoomBooked?: boolean
  }

  export type MeetingUserCountOutputTypeGetPayload<S extends boolean | null | undefined | MeetingUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MeetingUserCountOutputTypeArgs)
    ? MeetingUserCountOutputType 
    : S extends { select: any } & (MeetingUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MeetingUserCountOutputType ? MeetingUserCountOutputType[P] : never
  } 
      : MeetingUserCountOutputType




  // Custom InputTypes

  /**
   * MeetingUserCountOutputType without action
   */
  export type MeetingUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserCountOutputType
     */
    select?: MeetingUserCountOutputTypeSelect | null
  }



  /**
   * Count Type MeetingUserBookedCountOutputType
   */


  export type MeetingUserBookedCountOutputType = {
    MeetingMembers: number
  }

  export type MeetingUserBookedCountOutputTypeSelect = {
    MeetingMembers?: boolean
  }

  export type MeetingUserBookedCountOutputTypeGetPayload<S extends boolean | null | undefined | MeetingUserBookedCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingUserBookedCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MeetingUserBookedCountOutputTypeArgs)
    ? MeetingUserBookedCountOutputType 
    : S extends { select: any } & (MeetingUserBookedCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MeetingUserBookedCountOutputType ? MeetingUserBookedCountOutputType[P] : never
  } 
      : MeetingUserBookedCountOutputType




  // Custom InputTypes

  /**
   * MeetingUserBookedCountOutputType without action
   */
  export type MeetingUserBookedCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBookedCountOutputType
     */
    select?: MeetingUserBookedCountOutputTypeSelect | null
  }



  /**
   * Count Type MeetingRoomCountOutputType
   */


  export type MeetingRoomCountOutputType = {
    MeetingUserBooked: number
    MeetingRoomBooked: number
  }

  export type MeetingRoomCountOutputTypeSelect = {
    MeetingUserBooked?: boolean
    MeetingRoomBooked?: boolean
  }

  export type MeetingRoomCountOutputTypeGetPayload<S extends boolean | null | undefined | MeetingRoomCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingRoomCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (MeetingRoomCountOutputTypeArgs)
    ? MeetingRoomCountOutputType 
    : S extends { select: any } & (MeetingRoomCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof MeetingRoomCountOutputType ? MeetingRoomCountOutputType[P] : never
  } 
      : MeetingRoomCountOutputType




  // Custom InputTypes

  /**
   * MeetingRoomCountOutputType without action
   */
  export type MeetingRoomCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomCountOutputType
     */
    select?: MeetingRoomCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaCategoryCountOutputType
   */


  export type TriviaCategoryCountOutputType = {
    triviaQuiz: number
    triviaRound: number
  }

  export type TriviaCategoryCountOutputTypeSelect = {
    triviaQuiz?: boolean
    triviaRound?: boolean
  }

  export type TriviaCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaCategoryCountOutputTypeArgs)
    ? TriviaCategoryCountOutputType 
    : S extends { select: any } & (TriviaCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaCategoryCountOutputType ? TriviaCategoryCountOutputType[P] : never
  } 
      : TriviaCategoryCountOutputType




  // Custom InputTypes

  /**
   * TriviaCategoryCountOutputType without action
   */
  export type TriviaCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategoryCountOutputType
     */
    select?: TriviaCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaQuizCountOutputType
   */


  export type TriviaQuizCountOutputType = {
    triviaRoundQuiz: number
    TriviaChoice: number
  }

  export type TriviaQuizCountOutputTypeSelect = {
    triviaRoundQuiz?: boolean
    TriviaChoice?: boolean
  }

  export type TriviaQuizCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaQuizCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaQuizCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaQuizCountOutputTypeArgs)
    ? TriviaQuizCountOutputType 
    : S extends { select: any } & (TriviaQuizCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaQuizCountOutputType ? TriviaQuizCountOutputType[P] : never
  } 
      : TriviaQuizCountOutputType




  // Custom InputTypes

  /**
   * TriviaQuizCountOutputType without action
   */
  export type TriviaQuizCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuizCountOutputType
     */
    select?: TriviaQuizCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaChoiceCountOutputType
   */


  export type TriviaChoiceCountOutputType = {
    triviaRoundQuizChoice: number
  }

  export type TriviaChoiceCountOutputTypeSelect = {
    triviaRoundQuizChoice?: boolean
  }

  export type TriviaChoiceCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaChoiceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaChoiceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaChoiceCountOutputTypeArgs)
    ? TriviaChoiceCountOutputType 
    : S extends { select: any } & (TriviaChoiceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaChoiceCountOutputType ? TriviaChoiceCountOutputType[P] : never
  } 
      : TriviaChoiceCountOutputType




  // Custom InputTypes

  /**
   * TriviaChoiceCountOutputType without action
   */
  export type TriviaChoiceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoiceCountOutputType
     */
    select?: TriviaChoiceCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaRoundCountOutputType
   */


  export type TriviaRoundCountOutputType = {
    triviaRoundQuiz: number
  }

  export type TriviaRoundCountOutputTypeSelect = {
    triviaRoundQuiz?: boolean
  }

  export type TriviaRoundCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaRoundCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundCountOutputTypeArgs)
    ? TriviaRoundCountOutputType 
    : S extends { select: any } & (TriviaRoundCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaRoundCountOutputType ? TriviaRoundCountOutputType[P] : never
  } 
      : TriviaRoundCountOutputType




  // Custom InputTypes

  /**
   * TriviaRoundCountOutputType without action
   */
  export type TriviaRoundCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundCountOutputType
     */
    select?: TriviaRoundCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaRoundQuizCountOutputType
   */


  export type TriviaRoundQuizCountOutputType = {
    triviaRoundQuizChoice: number
  }

  export type TriviaRoundQuizCountOutputTypeSelect = {
    triviaRoundQuizChoice?: boolean
  }

  export type TriviaRoundQuizCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaRoundQuizCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundQuizCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundQuizCountOutputTypeArgs)
    ? TriviaRoundQuizCountOutputType 
    : S extends { select: any } & (TriviaRoundQuizCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaRoundQuizCountOutputType ? TriviaRoundQuizCountOutputType[P] : never
  } 
      : TriviaRoundQuizCountOutputType




  // Custom InputTypes

  /**
   * TriviaRoundQuizCountOutputType without action
   */
  export type TriviaRoundQuizCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizCountOutputType
     */
    select?: TriviaRoundQuizCountOutputTypeSelect | null
  }



  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    fromFolowing: number
    toFollowing: number
    post: number
    fromDirectMessage: number
    toDirectMessage: number
    Reply: number
  }

  export type UserCountOutputTypeSelect = {
    fromFolowing?: boolean
    toFollowing?: boolean
    post?: boolean
    fromDirectMessage?: boolean
    toDirectMessage?: boolean
    Reply?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type PostCountOutputType
   */


  export type PostCountOutputType = {
    reply: number
    postOnHashtag: number
  }

  export type PostCountOutputTypeSelect = {
    reply?: boolean
    postOnHashtag?: boolean
  }

  export type PostCountOutputTypeGetPayload<S extends boolean | null | undefined | PostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (PostCountOutputTypeArgs)
    ? PostCountOutputType 
    : S extends { select: any } & (PostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof PostCountOutputType ? PostCountOutputType[P] : never
  } 
      : PostCountOutputType




  // Custom InputTypes

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect | null
  }



  /**
   * Count Type HashtagCountOutputType
   */


  export type HashtagCountOutputType = {
    postOnHashtag: number
  }

  export type HashtagCountOutputTypeSelect = {
    postOnHashtag?: boolean
  }

  export type HashtagCountOutputTypeGetPayload<S extends boolean | null | undefined | HashtagCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HashtagCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HashtagCountOutputTypeArgs)
    ? HashtagCountOutputType 
    : S extends { select: any } & (HashtagCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HashtagCountOutputType ? HashtagCountOutputType[P] : never
  } 
      : HashtagCountOutputType




  // Custom InputTypes

  /**
   * HashtagCountOutputType without action
   */
  export type HashtagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HashtagCountOutputType
     */
    select?: HashtagCountOutputTypeSelect | null
  }



  /**
   * Count Type WashingBranchCountOutputType
   */


  export type WashingBranchCountOutputType = {
    WashingMachine: number
    WashingUseHistory: number
  }

  export type WashingBranchCountOutputTypeSelect = {
    WashingMachine?: boolean
    WashingUseHistory?: boolean
  }

  export type WashingBranchCountOutputTypeGetPayload<S extends boolean | null | undefined | WashingBranchCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingBranchCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WashingBranchCountOutputTypeArgs)
    ? WashingBranchCountOutputType 
    : S extends { select: any } & (WashingBranchCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WashingBranchCountOutputType ? WashingBranchCountOutputType[P] : never
  } 
      : WashingBranchCountOutputType




  // Custom InputTypes

  /**
   * WashingBranchCountOutputType without action
   */
  export type WashingBranchCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WashingBranchCountOutputType
     */
    select?: WashingBranchCountOutputTypeSelect | null
  }



  /**
   * Count Type WashingMachineCountOutputType
   */


  export type WashingMachineCountOutputType = {
    WashingMachineMaintenance: number
    WashingUseHistory: number
    WashingMachineOnProgram: number
  }

  export type WashingMachineCountOutputTypeSelect = {
    WashingMachineMaintenance?: boolean
    WashingUseHistory?: boolean
    WashingMachineOnProgram?: boolean
  }

  export type WashingMachineCountOutputTypeGetPayload<S extends boolean | null | undefined | WashingMachineCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachineCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineCountOutputTypeArgs)
    ? WashingMachineCountOutputType 
    : S extends { select: any } & (WashingMachineCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WashingMachineCountOutputType ? WashingMachineCountOutputType[P] : never
  } 
      : WashingMachineCountOutputType




  // Custom InputTypes

  /**
   * WashingMachineCountOutputType without action
   */
  export type WashingMachineCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineCountOutputType
     */
    select?: WashingMachineCountOutputTypeSelect | null
  }



  /**
   * Count Type WashingMachineProgramCountOutputType
   */


  export type WashingMachineProgramCountOutputType = {
    WashingUseHistory: number
    WashingMachineOnProgram: number
  }

  export type WashingMachineProgramCountOutputTypeSelect = {
    WashingUseHistory?: boolean
    WashingMachineOnProgram?: boolean
  }

  export type WashingMachineProgramCountOutputTypeGetPayload<S extends boolean | null | undefined | WashingMachineProgramCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachineProgramCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineProgramCountOutputTypeArgs)
    ? WashingMachineProgramCountOutputType 
    : S extends { select: any } & (WashingMachineProgramCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WashingMachineProgramCountOutputType ? WashingMachineProgramCountOutputType[P] : never
  } 
      : WashingMachineProgramCountOutputType




  // Custom InputTypes

  /**
   * WashingMachineProgramCountOutputType without action
   */
  export type WashingMachineProgramCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgramCountOutputType
     */
    select?: WashingMachineProgramCountOutputTypeSelect | null
  }



  /**
   * Count Type WashingUserCountOutputType
   */


  export type WashingUserCountOutputType = {
    WashingTopUp: number
    WashingUseHistory: number
  }

  export type WashingUserCountOutputTypeSelect = {
    WashingTopUp?: boolean
    WashingUseHistory?: boolean
  }

  export type WashingUserCountOutputTypeGetPayload<S extends boolean | null | undefined | WashingUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (WashingUserCountOutputTypeArgs)
    ? WashingUserCountOutputType 
    : S extends { select: any } & (WashingUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof WashingUserCountOutputType ? WashingUserCountOutputType[P] : never
  } 
      : WashingUserCountOutputType




  // Custom InputTypes

  /**
   * WashingUserCountOutputType without action
   */
  export type WashingUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the WashingUserCountOutputType
     */
    select?: WashingUserCountOutputTypeSelect | null
  }



  /**
   * Count Type YTUserCountOutputType
   */


  export type YTUserCountOutputType = {
    ChanelOnUser: number
    YTAdmin: number
    YTComment: number
    YTSubComment: number
    YTSubscribe: number
  }

  export type YTUserCountOutputTypeSelect = {
    ChanelOnUser?: boolean
    YTAdmin?: boolean
    YTComment?: boolean
    YTSubComment?: boolean
    YTSubscribe?: boolean
  }

  export type YTUserCountOutputTypeGetPayload<S extends boolean | null | undefined | YTUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YTUserCountOutputTypeArgs)
    ? YTUserCountOutputType 
    : S extends { select: any } & (YTUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YTUserCountOutputType ? YTUserCountOutputType[P] : never
  } 
      : YTUserCountOutputType




  // Custom InputTypes

  /**
   * YTUserCountOutputType without action
   */
  export type YTUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YTUserCountOutputType
     */
    select?: YTUserCountOutputTypeSelect | null
  }



  /**
   * Count Type YTChanelCountOutputType
   */


  export type YTChanelCountOutputType = {
    ChanelOnUser: number
    YTAdmin: number
    YTVideo: number
    YTSubscribe: number
  }

  export type YTChanelCountOutputTypeSelect = {
    ChanelOnUser?: boolean
    YTAdmin?: boolean
    YTVideo?: boolean
    YTSubscribe?: boolean
  }

  export type YTChanelCountOutputTypeGetPayload<S extends boolean | null | undefined | YTChanelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTChanelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YTChanelCountOutputTypeArgs)
    ? YTChanelCountOutputType 
    : S extends { select: any } & (YTChanelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YTChanelCountOutputType ? YTChanelCountOutputType[P] : never
  } 
      : YTChanelCountOutputType




  // Custom InputTypes

  /**
   * YTChanelCountOutputType without action
   */
  export type YTChanelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YTChanelCountOutputType
     */
    select?: YTChanelCountOutputTypeSelect | null
  }



  /**
   * Count Type YTRoleCountOutputType
   */


  export type YTRoleCountOutputType = {
    YTAdmin: number
    YTRolePermission: number
  }

  export type YTRoleCountOutputTypeSelect = {
    YTAdmin?: boolean
    YTRolePermission?: boolean
  }

  export type YTRoleCountOutputTypeGetPayload<S extends boolean | null | undefined | YTRoleCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTRoleCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YTRoleCountOutputTypeArgs)
    ? YTRoleCountOutputType 
    : S extends { select: any } & (YTRoleCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YTRoleCountOutputType ? YTRoleCountOutputType[P] : never
  } 
      : YTRoleCountOutputType




  // Custom InputTypes

  /**
   * YTRoleCountOutputType without action
   */
  export type YTRoleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YTRoleCountOutputType
     */
    select?: YTRoleCountOutputTypeSelect | null
  }



  /**
   * Count Type YTVideoCountOutputType
   */


  export type YTVideoCountOutputType = {
    YTComment: number
  }

  export type YTVideoCountOutputTypeSelect = {
    YTComment?: boolean
  }

  export type YTVideoCountOutputTypeGetPayload<S extends boolean | null | undefined | YTVideoCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTVideoCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YTVideoCountOutputTypeArgs)
    ? YTVideoCountOutputType 
    : S extends { select: any } & (YTVideoCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YTVideoCountOutputType ? YTVideoCountOutputType[P] : never
  } 
      : YTVideoCountOutputType




  // Custom InputTypes

  /**
   * YTVideoCountOutputType without action
   */
  export type YTVideoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YTVideoCountOutputType
     */
    select?: YTVideoCountOutputTypeSelect | null
  }



  /**
   * Count Type YTCommentCountOutputType
   */


  export type YTCommentCountOutputType = {
    YTSubComment: number
  }

  export type YTCommentCountOutputTypeSelect = {
    YTSubComment?: boolean
  }

  export type YTCommentCountOutputTypeGetPayload<S extends boolean | null | undefined | YTCommentCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTCommentCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YTCommentCountOutputTypeArgs)
    ? YTCommentCountOutputType 
    : S extends { select: any } & (YTCommentCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YTCommentCountOutputType ? YTCommentCountOutputType[P] : never
  } 
      : YTCommentCountOutputType




  // Custom InputTypes

  /**
   * YTCommentCountOutputType without action
   */
  export type YTCommentCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YTCommentCountOutputType
     */
    select?: YTCommentCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model BinKitchenCategory
   */


  export type AggregateBinKitchenCategory = {
    _count: BinKitchenCategoryCountAggregateOutputType | null
    _avg: BinKitchenCategoryAvgAggregateOutputType | null
    _sum: BinKitchenCategorySumAggregateOutputType | null
    _min: BinKitchenCategoryMinAggregateOutputType | null
    _max: BinKitchenCategoryMaxAggregateOutputType | null
  }

  export type BinKitchenCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type BinKitchenCategorySumAggregateOutputType = {
    id: number | null
  }

  export type BinKitchenCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenCategoryAvgAggregateInputType = {
    id?: true
  }

  export type BinKitchenCategorySumAggregateInputType = {
    id?: true
  }

  export type BinKitchenCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenCategoryAggregateArgs = {
    /**
     * Filter which BinKitchenCategory to aggregate.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenCategories
    **/
    _count?: true | BinKitchenCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenCategoryMaxAggregateInputType
  }

  export type GetBinKitchenCategoryAggregateType<T extends BinKitchenCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenCategory[P]>
      : GetScalarType<T[P], AggregateBinKitchenCategory[P]>
  }




  export type BinKitchenCategoryGroupByArgs = {
    where?: BinKitchenCategoryWhereInput
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithAggregationInput>
    by: BinKitchenCategoryScalarFieldEnum[]
    having?: BinKitchenCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenCategoryCountAggregateInputType | true
    _avg?: BinKitchenCategoryAvgAggregateInputType
    _sum?: BinKitchenCategorySumAggregateInputType
    _min?: BinKitchenCategoryMinAggregateInputType
    _max?: BinKitchenCategoryMaxAggregateInputType
  }


  export type BinKitchenCategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenCategoryCountAggregateOutputType | null
    _avg: BinKitchenCategoryAvgAggregateOutputType | null
    _sum: BinKitchenCategorySumAggregateOutputType | null
    _min: BinKitchenCategoryMinAggregateOutputType | null
    _max: BinKitchenCategoryMaxAggregateOutputType | null
  }

  type GetBinKitchenCategoryGroupByPayload<T extends BinKitchenCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenCategorySelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    BinKitchenMenu?: boolean | BinKitchenCategory$BinKitchenMenuArgs
    _count?: boolean | BinKitchenCategoryCountOutputTypeArgs
  }


  export type BinKitchenCategoryInclude = {
    BinKitchenMenu?: boolean | BinKitchenCategory$BinKitchenMenuArgs
    _count?: boolean | BinKitchenCategoryCountOutputTypeArgs
  }

  export type BinKitchenCategoryGetPayload<S extends boolean | null | undefined | BinKitchenCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenCategory :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenCategoryArgs | BinKitchenCategoryFindManyArgs)
    ? BinKitchenCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'BinKitchenMenu' ? Array < BinKitchenMenuGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenCategoryArgs | BinKitchenCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'BinKitchenMenu' ? Array < BinKitchenMenuGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenCategory ? BinKitchenCategory[P] : never
  } 
      : BinKitchenCategory


  type BinKitchenCategoryCountArgs = 
    Omit<BinKitchenCategoryFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenCategoryCountAggregateInputType | true
    }

  export interface BinKitchenCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenCategory that matches the filter.
     * @param {BinKitchenCategoryFindUniqueArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenCategory'> extends True ? Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>> : Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | null, null>

    /**
     * Find one BinKitchenCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenCategoryFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Find the first BinKitchenCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindFirstArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenCategory'> extends True ? Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>> : Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindFirstOrThrowArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindFirstOrThrowArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Find zero or more BinKitchenCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenCategories
     * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
     * 
     * // Get first 10 BinKitchenCategories
     * const binKitchenCategories = await prisma.binKitchenCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenCategoryWithIdOnly = await prisma.binKitchenCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenCategoryFindManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenCategoryGetPayload<T>>>

    /**
     * Create a BinKitchenCategory.
     * @param {BinKitchenCategoryCreateArgs} args - Arguments to create a BinKitchenCategory.
     * @example
     * // Create one BinKitchenCategory
     * const BinKitchenCategory = await prisma.binKitchenCategory.create({
     *   data: {
     *     // ... data to create a BinKitchenCategory
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenCategoryCreateArgs>(
      args: SelectSubset<T, BinKitchenCategoryCreateArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Create many BinKitchenCategories.
     *     @param {BinKitchenCategoryCreateManyArgs} args - Arguments to create many BinKitchenCategories.
     *     @example
     *     // Create many BinKitchenCategories
     *     const binKitchenCategory = await prisma.binKitchenCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenCategoryCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenCategory.
     * @param {BinKitchenCategoryDeleteArgs} args - Arguments to delete one BinKitchenCategory.
     * @example
     * // Delete one BinKitchenCategory
     * const BinKitchenCategory = await prisma.binKitchenCategory.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenCategory
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenCategoryDeleteArgs>(
      args: SelectSubset<T, BinKitchenCategoryDeleteArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Update one BinKitchenCategory.
     * @param {BinKitchenCategoryUpdateArgs} args - Arguments to update one BinKitchenCategory.
     * @example
     * // Update one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenCategoryUpdateArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpdateArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Delete zero or more BinKitchenCategories.
     * @param {BinKitchenCategoryDeleteManyArgs} args - Arguments to filter BinKitchenCategories to delete.
     * @example
     * // Delete a few BinKitchenCategories
     * const { count } = await prisma.binKitchenCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenCategoryDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenCategories
     * const binKitchenCategory = await prisma.binKitchenCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenCategoryUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenCategory.
     * @param {BinKitchenCategoryUpsertArgs} args - Arguments to update or create a BinKitchenCategory.
     * @example
     * // Update or create a BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.upsert({
     *   create: {
     *     // ... data to create a BinKitchenCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenCategory we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenCategoryUpsertArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpsertArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Count the number of BinKitchenCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryCountArgs} args - Arguments to filter BinKitchenCategories to count.
     * @example
     * // Count the number of BinKitchenCategories
     * const count = await prisma.binKitchenCategory.count({
     *   where: {
     *     // ... the filter for the BinKitchenCategories we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenCategoryCountArgs>(
      args?: Subset<T, BinKitchenCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenCategoryAggregateArgs>(args: Subset<T, BinKitchenCategoryAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenCategoryAggregateType<T>>

    /**
     * Group by BinKitchenCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    BinKitchenMenu<T extends BinKitchenCategory$BinKitchenMenuArgs= {}>(args?: Subset<T, BinKitchenCategory$BinKitchenMenuArgs>): Prisma.PrismaPromise<Array<BinKitchenMenuGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenCategory base type for findUnique actions
   */
  export type BinKitchenCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }

  /**
   * BinKitchenCategory findUnique
   */
  export interface BinKitchenCategoryFindUniqueArgs extends BinKitchenCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenCategory findUniqueOrThrow
   */
  export type BinKitchenCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory base type for findFirst actions
   */
  export type BinKitchenCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenCategories.
     */
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }

  /**
   * BinKitchenCategory findFirst
   */
  export interface BinKitchenCategoryFindFirstArgs extends BinKitchenCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenCategory findFirstOrThrow
   */
  export type BinKitchenCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenCategories.
     */
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }


  /**
   * BinKitchenCategory findMany
   */
  export type BinKitchenCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategories to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }


  /**
   * BinKitchenCategory create
   */
  export type BinKitchenCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The data needed to create a BinKitchenCategory.
     */
    data: XOR<BinKitchenCategoryCreateInput, BinKitchenCategoryUncheckedCreateInput>
  }


  /**
   * BinKitchenCategory createMany
   */
  export type BinKitchenCategoryCreateManyArgs = {
    /**
     * The data used to create many BinKitchenCategories.
     */
    data: Enumerable<BinKitchenCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenCategory update
   */
  export type BinKitchenCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The data needed to update a BinKitchenCategory.
     */
    data: XOR<BinKitchenCategoryUpdateInput, BinKitchenCategoryUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenCategory to update.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory updateMany
   */
  export type BinKitchenCategoryUpdateManyArgs = {
    /**
     * The data used to update BinKitchenCategories.
     */
    data: XOR<BinKitchenCategoryUpdateManyMutationInput, BinKitchenCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenCategories to update
     */
    where?: BinKitchenCategoryWhereInput
  }


  /**
   * BinKitchenCategory upsert
   */
  export type BinKitchenCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The filter to search for the BinKitchenCategory to update in case it exists.
     */
    where: BinKitchenCategoryWhereUniqueInput
    /**
     * In case the BinKitchenCategory found by the `where` argument doesn't exist, create a new BinKitchenCategory with this data.
     */
    create: XOR<BinKitchenCategoryCreateInput, BinKitchenCategoryUncheckedCreateInput>
    /**
     * In case the BinKitchenCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenCategoryUpdateInput, BinKitchenCategoryUncheckedUpdateInput>
  }


  /**
   * BinKitchenCategory delete
   */
  export type BinKitchenCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter which BinKitchenCategory to delete.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory deleteMany
   */
  export type BinKitchenCategoryDeleteManyArgs = {
    /**
     * Filter which BinKitchenCategories to delete
     */
    where?: BinKitchenCategoryWhereInput
  }


  /**
   * BinKitchenCategory.BinKitchenMenu
   */
  export type BinKitchenCategory$BinKitchenMenuArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    where?: BinKitchenMenuWhereInput
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    cursor?: BinKitchenMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenCategory without action
   */
  export type BinKitchenCategoryArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
  }



  /**
   * Model BinKitchenMenu
   */


  export type AggregateBinKitchenMenu = {
    _count: BinKitchenMenuCountAggregateOutputType | null
    _avg: BinKitchenMenuAvgAggregateOutputType | null
    _sum: BinKitchenMenuSumAggregateOutputType | null
    _min: BinKitchenMenuMinAggregateOutputType | null
    _max: BinKitchenMenuMaxAggregateOutputType | null
  }

  export type BinKitchenMenuAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type BinKitchenMenuSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type BinKitchenMenuMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenMenuMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenMenuCountAggregateOutputType = {
    id: number
    name: number
    image: number
    price: number
    categoryName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenMenuAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type BinKitchenMenuSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type BinKitchenMenuMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenMenuMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenMenuCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenMenuAggregateArgs = {
    /**
     * Filter which BinKitchenMenu to aggregate.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenMenus
    **/
    _count?: true | BinKitchenMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenMenuMaxAggregateInputType
  }

  export type GetBinKitchenMenuAggregateType<T extends BinKitchenMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenMenu[P]>
      : GetScalarType<T[P], AggregateBinKitchenMenu[P]>
  }




  export type BinKitchenMenuGroupByArgs = {
    where?: BinKitchenMenuWhereInput
    orderBy?: Enumerable<BinKitchenMenuOrderByWithAggregationInput>
    by: BinKitchenMenuScalarFieldEnum[]
    having?: BinKitchenMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenMenuCountAggregateInputType | true
    _avg?: BinKitchenMenuAvgAggregateInputType
    _sum?: BinKitchenMenuSumAggregateInputType
    _min?: BinKitchenMenuMinAggregateInputType
    _max?: BinKitchenMenuMaxAggregateInputType
  }


  export type BinKitchenMenuGroupByOutputType = {
    id: number
    name: string
    image: string
    price: number
    categoryName: string | null
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenMenuCountAggregateOutputType | null
    _avg: BinKitchenMenuAvgAggregateOutputType | null
    _sum: BinKitchenMenuSumAggregateOutputType | null
    _min: BinKitchenMenuMinAggregateOutputType | null
    _max: BinKitchenMenuMaxAggregateOutputType | null
  }

  type GetBinKitchenMenuGroupByPayload<T extends BinKitchenMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenMenuGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenMenuGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenMenuSelect = {
    id?: boolean
    name?: boolean
    image?: boolean
    price?: boolean
    category?: boolean | BinKitchenCategoryArgs
    categoryName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    BinKitchenOrderItem?: boolean | BinKitchenMenu$BinKitchenOrderItemArgs
    _count?: boolean | BinKitchenMenuCountOutputTypeArgs
  }


  export type BinKitchenMenuInclude = {
    category?: boolean | BinKitchenCategoryArgs
    BinKitchenOrderItem?: boolean | BinKitchenMenu$BinKitchenOrderItemArgs
    _count?: boolean | BinKitchenMenuCountOutputTypeArgs
  }

  export type BinKitchenMenuGetPayload<S extends boolean | null | undefined | BinKitchenMenuArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenMenu :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenMenuArgs | BinKitchenMenuFindManyArgs)
    ? BinKitchenMenu  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? BinKitchenCategoryGetPayload<S['include'][P]> | null :
        P extends 'BinKitchenOrderItem' ? Array < BinKitchenOrderItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenMenuCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenMenuArgs | BinKitchenMenuFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? BinKitchenCategoryGetPayload<S['select'][P]> | null :
        P extends 'BinKitchenOrderItem' ? Array < BinKitchenOrderItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenMenuCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenMenu ? BinKitchenMenu[P] : never
  } 
      : BinKitchenMenu


  type BinKitchenMenuCountArgs = 
    Omit<BinKitchenMenuFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenMenuCountAggregateInputType | true
    }

  export interface BinKitchenMenuDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenMenu that matches the filter.
     * @param {BinKitchenMenuFindUniqueArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenMenuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenMenuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenMenu'> extends True ? Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>> : Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | null, null>

    /**
     * Find one BinKitchenMenu that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenMenuFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenMenuFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Find the first BinKitchenMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindFirstArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenMenuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenMenuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenMenu'> extends True ? Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>> : Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenMenu that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindFirstOrThrowArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenMenuFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindFirstOrThrowArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Find zero or more BinKitchenMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenMenus
     * const binKitchenMenus = await prisma.binKitchenMenu.findMany()
     * 
     * // Get first 10 BinKitchenMenus
     * const binKitchenMenus = await prisma.binKitchenMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenMenuWithIdOnly = await prisma.binKitchenMenu.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenMenuFindManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenMenuGetPayload<T>>>

    /**
     * Create a BinKitchenMenu.
     * @param {BinKitchenMenuCreateArgs} args - Arguments to create a BinKitchenMenu.
     * @example
     * // Create one BinKitchenMenu
     * const BinKitchenMenu = await prisma.binKitchenMenu.create({
     *   data: {
     *     // ... data to create a BinKitchenMenu
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenMenuCreateArgs>(
      args: SelectSubset<T, BinKitchenMenuCreateArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Create many BinKitchenMenus.
     *     @param {BinKitchenMenuCreateManyArgs} args - Arguments to create many BinKitchenMenus.
     *     @example
     *     // Create many BinKitchenMenus
     *     const binKitchenMenu = await prisma.binKitchenMenu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenMenuCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenMenu.
     * @param {BinKitchenMenuDeleteArgs} args - Arguments to delete one BinKitchenMenu.
     * @example
     * // Delete one BinKitchenMenu
     * const BinKitchenMenu = await prisma.binKitchenMenu.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenMenu
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenMenuDeleteArgs>(
      args: SelectSubset<T, BinKitchenMenuDeleteArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Update one BinKitchenMenu.
     * @param {BinKitchenMenuUpdateArgs} args - Arguments to update one BinKitchenMenu.
     * @example
     * // Update one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenMenuUpdateArgs>(
      args: SelectSubset<T, BinKitchenMenuUpdateArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Delete zero or more BinKitchenMenus.
     * @param {BinKitchenMenuDeleteManyArgs} args - Arguments to filter BinKitchenMenus to delete.
     * @example
     * // Delete a few BinKitchenMenus
     * const { count } = await prisma.binKitchenMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenMenuDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenMenus
     * const binKitchenMenu = await prisma.binKitchenMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenMenuUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenMenuUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenMenu.
     * @param {BinKitchenMenuUpsertArgs} args - Arguments to update or create a BinKitchenMenu.
     * @example
     * // Update or create a BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.upsert({
     *   create: {
     *     // ... data to create a BinKitchenMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenMenu we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenMenuUpsertArgs>(
      args: SelectSubset<T, BinKitchenMenuUpsertArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Count the number of BinKitchenMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuCountArgs} args - Arguments to filter BinKitchenMenus to count.
     * @example
     * // Count the number of BinKitchenMenus
     * const count = await prisma.binKitchenMenu.count({
     *   where: {
     *     // ... the filter for the BinKitchenMenus we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenMenuCountArgs>(
      args?: Subset<T, BinKitchenMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenMenuAggregateArgs>(args: Subset<T, BinKitchenMenuAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenMenuAggregateType<T>>

    /**
     * Group by BinKitchenMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenMenuGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenMenuClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends BinKitchenCategoryArgs= {}>(args?: Subset<T, BinKitchenCategoryArgs>): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | Null>;

    BinKitchenOrderItem<T extends BinKitchenMenu$BinKitchenOrderItemArgs= {}>(args?: Subset<T, BinKitchenMenu$BinKitchenOrderItemArgs>): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenMenu base type for findUnique actions
   */
  export type BinKitchenMenuFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where: BinKitchenMenuWhereUniqueInput
  }

  /**
   * BinKitchenMenu findUnique
   */
  export interface BinKitchenMenuFindUniqueArgs extends BinKitchenMenuFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenMenu findUniqueOrThrow
   */
  export type BinKitchenMenuFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu base type for findFirst actions
   */
  export type BinKitchenMenuFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenMenus.
     */
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }

  /**
   * BinKitchenMenu findFirst
   */
  export interface BinKitchenMenuFindFirstArgs extends BinKitchenMenuFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenMenu findFirstOrThrow
   */
  export type BinKitchenMenuFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenMenus.
     */
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenMenu findMany
   */
  export type BinKitchenMenuFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenus to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenMenu create
   */
  export type BinKitchenMenuCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The data needed to create a BinKitchenMenu.
     */
    data: XOR<BinKitchenMenuCreateInput, BinKitchenMenuUncheckedCreateInput>
  }


  /**
   * BinKitchenMenu createMany
   */
  export type BinKitchenMenuCreateManyArgs = {
    /**
     * The data used to create many BinKitchenMenus.
     */
    data: Enumerable<BinKitchenMenuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenMenu update
   */
  export type BinKitchenMenuUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The data needed to update a BinKitchenMenu.
     */
    data: XOR<BinKitchenMenuUpdateInput, BinKitchenMenuUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenMenu to update.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu updateMany
   */
  export type BinKitchenMenuUpdateManyArgs = {
    /**
     * The data used to update BinKitchenMenus.
     */
    data: XOR<BinKitchenMenuUpdateManyMutationInput, BinKitchenMenuUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenMenus to update
     */
    where?: BinKitchenMenuWhereInput
  }


  /**
   * BinKitchenMenu upsert
   */
  export type BinKitchenMenuUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The filter to search for the BinKitchenMenu to update in case it exists.
     */
    where: BinKitchenMenuWhereUniqueInput
    /**
     * In case the BinKitchenMenu found by the `where` argument doesn't exist, create a new BinKitchenMenu with this data.
     */
    create: XOR<BinKitchenMenuCreateInput, BinKitchenMenuUncheckedCreateInput>
    /**
     * In case the BinKitchenMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenMenuUpdateInput, BinKitchenMenuUncheckedUpdateInput>
  }


  /**
   * BinKitchenMenu delete
   */
  export type BinKitchenMenuDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter which BinKitchenMenu to delete.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu deleteMany
   */
  export type BinKitchenMenuDeleteManyArgs = {
    /**
     * Filter which BinKitchenMenus to delete
     */
    where?: BinKitchenMenuWhereInput
  }


  /**
   * BinKitchenMenu.BinKitchenOrderItem
   */
  export type BinKitchenMenu$BinKitchenOrderItemArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    cursor?: BinKitchenOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenMenu without action
   */
  export type BinKitchenMenuArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
  }



  /**
   * Model BinKitchenOrder
   */


  export type AggregateBinKitchenOrder = {
    _count: BinKitchenOrderCountAggregateOutputType | null
    _avg: BinKitchenOrderAvgAggregateOutputType | null
    _sum: BinKitchenOrderSumAggregateOutputType | null
    _min: BinKitchenOrderMinAggregateOutputType | null
    _max: BinKitchenOrderMaxAggregateOutputType | null
  }

  export type BinKitchenOrderAvgAggregateOutputType = {
    id: number | null
    tableId: number | null
  }

  export type BinKitchenOrderSumAggregateOutputType = {
    id: number | null
    tableId: number | null
  }

  export type BinKitchenOrderMinAggregateOutputType = {
    id: number | null
    status: string | null
    tableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderMaxAggregateOutputType = {
    id: number | null
    status: string | null
    tableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderCountAggregateOutputType = {
    id: number
    status: number
    tableId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenOrderAvgAggregateInputType = {
    id?: true
    tableId?: true
  }

  export type BinKitchenOrderSumAggregateInputType = {
    id?: true
    tableId?: true
  }

  export type BinKitchenOrderMinAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderMaxAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderCountAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenOrderAggregateArgs = {
    /**
     * Filter which BinKitchenOrder to aggregate.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenOrders
    **/
    _count?: true | BinKitchenOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenOrderMaxAggregateInputType
  }

  export type GetBinKitchenOrderAggregateType<T extends BinKitchenOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenOrder[P]>
      : GetScalarType<T[P], AggregateBinKitchenOrder[P]>
  }




  export type BinKitchenOrderGroupByArgs = {
    where?: BinKitchenOrderWhereInput
    orderBy?: Enumerable<BinKitchenOrderOrderByWithAggregationInput>
    by: BinKitchenOrderScalarFieldEnum[]
    having?: BinKitchenOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenOrderCountAggregateInputType | true
    _avg?: BinKitchenOrderAvgAggregateInputType
    _sum?: BinKitchenOrderSumAggregateInputType
    _min?: BinKitchenOrderMinAggregateInputType
    _max?: BinKitchenOrderMaxAggregateInputType
  }


  export type BinKitchenOrderGroupByOutputType = {
    id: number
    status: string
    tableId: number
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenOrderCountAggregateOutputType | null
    _avg: BinKitchenOrderAvgAggregateOutputType | null
    _sum: BinKitchenOrderSumAggregateOutputType | null
    _min: BinKitchenOrderMinAggregateOutputType | null
    _max: BinKitchenOrderMaxAggregateOutputType | null
  }

  type GetBinKitchenOrderGroupByPayload<T extends BinKitchenOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenOrderGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenOrderGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenOrderSelect = {
    id?: boolean
    status?: boolean
    tableId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    BinKitchenOrderItem?: boolean | BinKitchenOrder$BinKitchenOrderItemArgs
    _count?: boolean | BinKitchenOrderCountOutputTypeArgs
  }


  export type BinKitchenOrderInclude = {
    BinKitchenOrderItem?: boolean | BinKitchenOrder$BinKitchenOrderItemArgs
    _count?: boolean | BinKitchenOrderCountOutputTypeArgs
  }

  export type BinKitchenOrderGetPayload<S extends boolean | null | undefined | BinKitchenOrderArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrder :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderArgs | BinKitchenOrderFindManyArgs)
    ? BinKitchenOrder  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'BinKitchenOrderItem' ? Array < BinKitchenOrderItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenOrderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenOrderArgs | BinKitchenOrderFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'BinKitchenOrderItem' ? Array < BinKitchenOrderItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenOrderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenOrder ? BinKitchenOrder[P] : never
  } 
      : BinKitchenOrder


  type BinKitchenOrderCountArgs = 
    Omit<BinKitchenOrderFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenOrderCountAggregateInputType | true
    }

  export interface BinKitchenOrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenOrder that matches the filter.
     * @param {BinKitchenOrderFindUniqueArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenOrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenOrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenOrder'> extends True ? Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>> : Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | null, null>

    /**
     * Find one BinKitchenOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenOrderFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenOrderFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Find the first BinKitchenOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindFirstArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenOrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenOrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenOrder'> extends True ? Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>> : Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenOrder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindFirstOrThrowArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenOrderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindFirstOrThrowArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Find zero or more BinKitchenOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenOrders
     * const binKitchenOrders = await prisma.binKitchenOrder.findMany()
     * 
     * // Get first 10 BinKitchenOrders
     * const binKitchenOrders = await prisma.binKitchenOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenOrderWithIdOnly = await prisma.binKitchenOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenOrderFindManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenOrderGetPayload<T>>>

    /**
     * Create a BinKitchenOrder.
     * @param {BinKitchenOrderCreateArgs} args - Arguments to create a BinKitchenOrder.
     * @example
     * // Create one BinKitchenOrder
     * const BinKitchenOrder = await prisma.binKitchenOrder.create({
     *   data: {
     *     // ... data to create a BinKitchenOrder
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenOrderCreateArgs>(
      args: SelectSubset<T, BinKitchenOrderCreateArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Create many BinKitchenOrders.
     *     @param {BinKitchenOrderCreateManyArgs} args - Arguments to create many BinKitchenOrders.
     *     @example
     *     // Create many BinKitchenOrders
     *     const binKitchenOrder = await prisma.binKitchenOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenOrderCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenOrder.
     * @param {BinKitchenOrderDeleteArgs} args - Arguments to delete one BinKitchenOrder.
     * @example
     * // Delete one BinKitchenOrder
     * const BinKitchenOrder = await prisma.binKitchenOrder.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenOrder
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenOrderDeleteArgs>(
      args: SelectSubset<T, BinKitchenOrderDeleteArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Update one BinKitchenOrder.
     * @param {BinKitchenOrderUpdateArgs} args - Arguments to update one BinKitchenOrder.
     * @example
     * // Update one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenOrderUpdateArgs>(
      args: SelectSubset<T, BinKitchenOrderUpdateArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Delete zero or more BinKitchenOrders.
     * @param {BinKitchenOrderDeleteManyArgs} args - Arguments to filter BinKitchenOrders to delete.
     * @example
     * // Delete a few BinKitchenOrders
     * const { count } = await prisma.binKitchenOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenOrderDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenOrders
     * const binKitchenOrder = await prisma.binKitchenOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenOrderUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenOrderUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenOrder.
     * @param {BinKitchenOrderUpsertArgs} args - Arguments to update or create a BinKitchenOrder.
     * @example
     * // Update or create a BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.upsert({
     *   create: {
     *     // ... data to create a BinKitchenOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenOrder we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenOrderUpsertArgs>(
      args: SelectSubset<T, BinKitchenOrderUpsertArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Count the number of BinKitchenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderCountArgs} args - Arguments to filter BinKitchenOrders to count.
     * @example
     * // Count the number of BinKitchenOrders
     * const count = await prisma.binKitchenOrder.count({
     *   where: {
     *     // ... the filter for the BinKitchenOrders we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenOrderCountArgs>(
      args?: Subset<T, BinKitchenOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenOrderAggregateArgs>(args: Subset<T, BinKitchenOrderAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenOrderAggregateType<T>>

    /**
     * Group by BinKitchenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenOrderGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenOrderClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    BinKitchenOrderItem<T extends BinKitchenOrder$BinKitchenOrderItemArgs= {}>(args?: Subset<T, BinKitchenOrder$BinKitchenOrderItemArgs>): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenOrder base type for findUnique actions
   */
  export type BinKitchenOrderFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where: BinKitchenOrderWhereUniqueInput
  }

  /**
   * BinKitchenOrder findUnique
   */
  export interface BinKitchenOrderFindUniqueArgs extends BinKitchenOrderFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrder findUniqueOrThrow
   */
  export type BinKitchenOrderFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder base type for findFirst actions
   */
  export type BinKitchenOrderFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrders.
     */
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }

  /**
   * BinKitchenOrder findFirst
   */
  export interface BinKitchenOrderFindFirstArgs extends BinKitchenOrderFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrder findFirstOrThrow
   */
  export type BinKitchenOrderFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrders.
     */
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }


  /**
   * BinKitchenOrder findMany
   */
  export type BinKitchenOrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrders to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }


  /**
   * BinKitchenOrder create
   */
  export type BinKitchenOrderCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The data needed to create a BinKitchenOrder.
     */
    data: XOR<BinKitchenOrderCreateInput, BinKitchenOrderUncheckedCreateInput>
  }


  /**
   * BinKitchenOrder createMany
   */
  export type BinKitchenOrderCreateManyArgs = {
    /**
     * The data used to create many BinKitchenOrders.
     */
    data: Enumerable<BinKitchenOrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenOrder update
   */
  export type BinKitchenOrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The data needed to update a BinKitchenOrder.
     */
    data: XOR<BinKitchenOrderUpdateInput, BinKitchenOrderUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenOrder to update.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder updateMany
   */
  export type BinKitchenOrderUpdateManyArgs = {
    /**
     * The data used to update BinKitchenOrders.
     */
    data: XOR<BinKitchenOrderUpdateManyMutationInput, BinKitchenOrderUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenOrders to update
     */
    where?: BinKitchenOrderWhereInput
  }


  /**
   * BinKitchenOrder upsert
   */
  export type BinKitchenOrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The filter to search for the BinKitchenOrder to update in case it exists.
     */
    where: BinKitchenOrderWhereUniqueInput
    /**
     * In case the BinKitchenOrder found by the `where` argument doesn't exist, create a new BinKitchenOrder with this data.
     */
    create: XOR<BinKitchenOrderCreateInput, BinKitchenOrderUncheckedCreateInput>
    /**
     * In case the BinKitchenOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenOrderUpdateInput, BinKitchenOrderUncheckedUpdateInput>
  }


  /**
   * BinKitchenOrder delete
   */
  export type BinKitchenOrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter which BinKitchenOrder to delete.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder deleteMany
   */
  export type BinKitchenOrderDeleteManyArgs = {
    /**
     * Filter which BinKitchenOrders to delete
     */
    where?: BinKitchenOrderWhereInput
  }


  /**
   * BinKitchenOrder.BinKitchenOrderItem
   */
  export type BinKitchenOrder$BinKitchenOrderItemArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    cursor?: BinKitchenOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrder without action
   */
  export type BinKitchenOrderArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
  }



  /**
   * Model BinKitchenOrderItem
   */


  export type AggregateBinKitchenOrderItem = {
    _count: BinKitchenOrderItemCountAggregateOutputType | null
    _avg: BinKitchenOrderItemAvgAggregateOutputType | null
    _sum: BinKitchenOrderItemSumAggregateOutputType | null
    _min: BinKitchenOrderItemMinAggregateOutputType | null
    _max: BinKitchenOrderItemMaxAggregateOutputType | null
  }

  export type BinKitchenOrderItemAvgAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type BinKitchenOrderItemSumAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type BinKitchenOrderItemMinAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderItemMaxAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderItemCountAggregateOutputType = {
    id: number
    menuId: number
    orderId: number
    quantity: number
    totalPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenOrderItemAvgAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
  }

  export type BinKitchenOrderItemSumAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
  }

  export type BinKitchenOrderItemMinAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderItemMaxAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderItemCountAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenOrderItemAggregateArgs = {
    /**
     * Filter which BinKitchenOrderItem to aggregate.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenOrderItems
    **/
    _count?: true | BinKitchenOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenOrderItemMaxAggregateInputType
  }

  export type GetBinKitchenOrderItemAggregateType<T extends BinKitchenOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenOrderItem[P]>
      : GetScalarType<T[P], AggregateBinKitchenOrderItem[P]>
  }




  export type BinKitchenOrderItemGroupByArgs = {
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithAggregationInput>
    by: BinKitchenOrderItemScalarFieldEnum[]
    having?: BinKitchenOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenOrderItemCountAggregateInputType | true
    _avg?: BinKitchenOrderItemAvgAggregateInputType
    _sum?: BinKitchenOrderItemSumAggregateInputType
    _min?: BinKitchenOrderItemMinAggregateInputType
    _max?: BinKitchenOrderItemMaxAggregateInputType
  }


  export type BinKitchenOrderItemGroupByOutputType = {
    id: number
    menuId: number
    orderId: number | null
    quantity: number
    totalPrice: number
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenOrderItemCountAggregateOutputType | null
    _avg: BinKitchenOrderItemAvgAggregateOutputType | null
    _sum: BinKitchenOrderItemSumAggregateOutputType | null
    _min: BinKitchenOrderItemMinAggregateOutputType | null
    _max: BinKitchenOrderItemMaxAggregateOutputType | null
  }

  type GetBinKitchenOrderItemGroupByPayload<T extends BinKitchenOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenOrderItemSelect = {
    id?: boolean
    menu?: boolean | BinKitchenMenuArgs
    menuId?: boolean
    order?: boolean | BinKitchenOrderArgs
    orderId?: boolean
    quantity?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type BinKitchenOrderItemInclude = {
    menu?: boolean | BinKitchenMenuArgs
    order?: boolean | BinKitchenOrderArgs
  }

  export type BinKitchenOrderItemGetPayload<S extends boolean | null | undefined | BinKitchenOrderItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrderItem :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderItemArgs | BinKitchenOrderItemFindManyArgs)
    ? BinKitchenOrderItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'menu' ? BinKitchenMenuGetPayload<S['include'][P]> :
        P extends 'order' ? BinKitchenOrderGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (BinKitchenOrderItemArgs | BinKitchenOrderItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'menu' ? BinKitchenMenuGetPayload<S['select'][P]> :
        P extends 'order' ? BinKitchenOrderGetPayload<S['select'][P]> | null :  P extends keyof BinKitchenOrderItem ? BinKitchenOrderItem[P] : never
  } 
      : BinKitchenOrderItem


  type BinKitchenOrderItemCountArgs = 
    Omit<BinKitchenOrderItemFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenOrderItemCountAggregateInputType | true
    }

  export interface BinKitchenOrderItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenOrderItem that matches the filter.
     * @param {BinKitchenOrderItemFindUniqueArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenOrderItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenOrderItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenOrderItem'> extends True ? Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>> : Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T> | null, null>

    /**
     * Find one BinKitchenOrderItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenOrderItemFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenOrderItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Find the first BinKitchenOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindFirstArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenOrderItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenOrderItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenOrderItem'> extends True ? Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>> : Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenOrderItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindFirstOrThrowArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenOrderItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindFirstOrThrowArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Find zero or more BinKitchenOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenOrderItems
     * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany()
     * 
     * // Get first 10 BinKitchenOrderItems
     * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenOrderItemWithIdOnly = await prisma.binKitchenOrderItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenOrderItemFindManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>>

    /**
     * Create a BinKitchenOrderItem.
     * @param {BinKitchenOrderItemCreateArgs} args - Arguments to create a BinKitchenOrderItem.
     * @example
     * // Create one BinKitchenOrderItem
     * const BinKitchenOrderItem = await prisma.binKitchenOrderItem.create({
     *   data: {
     *     // ... data to create a BinKitchenOrderItem
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenOrderItemCreateArgs>(
      args: SelectSubset<T, BinKitchenOrderItemCreateArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Create many BinKitchenOrderItems.
     *     @param {BinKitchenOrderItemCreateManyArgs} args - Arguments to create many BinKitchenOrderItems.
     *     @example
     *     // Create many BinKitchenOrderItems
     *     const binKitchenOrderItem = await prisma.binKitchenOrderItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenOrderItemCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenOrderItem.
     * @param {BinKitchenOrderItemDeleteArgs} args - Arguments to delete one BinKitchenOrderItem.
     * @example
     * // Delete one BinKitchenOrderItem
     * const BinKitchenOrderItem = await prisma.binKitchenOrderItem.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenOrderItem
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenOrderItemDeleteArgs>(
      args: SelectSubset<T, BinKitchenOrderItemDeleteArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Update one BinKitchenOrderItem.
     * @param {BinKitchenOrderItemUpdateArgs} args - Arguments to update one BinKitchenOrderItem.
     * @example
     * // Update one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenOrderItemUpdateArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpdateArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Delete zero or more BinKitchenOrderItems.
     * @param {BinKitchenOrderItemDeleteManyArgs} args - Arguments to filter BinKitchenOrderItems to delete.
     * @example
     * // Delete a few BinKitchenOrderItems
     * const { count } = await prisma.binKitchenOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenOrderItemDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenOrderItems
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenOrderItemUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenOrderItem.
     * @param {BinKitchenOrderItemUpsertArgs} args - Arguments to update or create a BinKitchenOrderItem.
     * @example
     * // Update or create a BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.upsert({
     *   create: {
     *     // ... data to create a BinKitchenOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenOrderItem we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenOrderItemUpsertArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpsertArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Count the number of BinKitchenOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemCountArgs} args - Arguments to filter BinKitchenOrderItems to count.
     * @example
     * // Count the number of BinKitchenOrderItems
     * const count = await prisma.binKitchenOrderItem.count({
     *   where: {
     *     // ... the filter for the BinKitchenOrderItems we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenOrderItemCountArgs>(
      args?: Subset<T, BinKitchenOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenOrderItemAggregateArgs>(args: Subset<T, BinKitchenOrderItemAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenOrderItemAggregateType<T>>

    /**
     * Group by BinKitchenOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenOrderItemClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    menu<T extends BinKitchenMenuArgs= {}>(args?: Subset<T, BinKitchenMenuArgs>): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | Null>;

    order<T extends BinKitchenOrderArgs= {}>(args?: Subset<T, BinKitchenOrderArgs>): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenOrderItem base type for findUnique actions
   */
  export type BinKitchenOrderItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }

  /**
   * BinKitchenOrderItem findUnique
   */
  export interface BinKitchenOrderItemFindUniqueArgs extends BinKitchenOrderItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrderItem findUniqueOrThrow
   */
  export type BinKitchenOrderItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem base type for findFirst actions
   */
  export type BinKitchenOrderItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrderItems.
     */
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }

  /**
   * BinKitchenOrderItem findFirst
   */
  export interface BinKitchenOrderItemFindFirstArgs extends BinKitchenOrderItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrderItem findFirstOrThrow
   */
  export type BinKitchenOrderItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrderItems.
     */
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrderItem findMany
   */
  export type BinKitchenOrderItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItems to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrderItem create
   */
  export type BinKitchenOrderItemCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The data needed to create a BinKitchenOrderItem.
     */
    data: XOR<BinKitchenOrderItemCreateInput, BinKitchenOrderItemUncheckedCreateInput>
  }


  /**
   * BinKitchenOrderItem createMany
   */
  export type BinKitchenOrderItemCreateManyArgs = {
    /**
     * The data used to create many BinKitchenOrderItems.
     */
    data: Enumerable<BinKitchenOrderItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenOrderItem update
   */
  export type BinKitchenOrderItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The data needed to update a BinKitchenOrderItem.
     */
    data: XOR<BinKitchenOrderItemUpdateInput, BinKitchenOrderItemUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenOrderItem to update.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem updateMany
   */
  export type BinKitchenOrderItemUpdateManyArgs = {
    /**
     * The data used to update BinKitchenOrderItems.
     */
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenOrderItems to update
     */
    where?: BinKitchenOrderItemWhereInput
  }


  /**
   * BinKitchenOrderItem upsert
   */
  export type BinKitchenOrderItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The filter to search for the BinKitchenOrderItem to update in case it exists.
     */
    where: BinKitchenOrderItemWhereUniqueInput
    /**
     * In case the BinKitchenOrderItem found by the `where` argument doesn't exist, create a new BinKitchenOrderItem with this data.
     */
    create: XOR<BinKitchenOrderItemCreateInput, BinKitchenOrderItemUncheckedCreateInput>
    /**
     * In case the BinKitchenOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenOrderItemUpdateInput, BinKitchenOrderItemUncheckedUpdateInput>
  }


  /**
   * BinKitchenOrderItem delete
   */
  export type BinKitchenOrderItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter which BinKitchenOrderItem to delete.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem deleteMany
   */
  export type BinKitchenOrderItemDeleteManyArgs = {
    /**
     * Filter which BinKitchenOrderItems to delete
     */
    where?: BinKitchenOrderItemWhereInput
  }


  /**
   * BinKitchenOrderItem without action
   */
  export type BinKitchenOrderItemArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
  }



  /**
   * Model FBUser
   */


  export type AggregateFBUser = {
    _count: FBUserCountAggregateOutputType | null
    _avg: FBUserAvgAggregateOutputType | null
    _sum: FBUserSumAggregateOutputType | null
    _min: FBUserMinAggregateOutputType | null
    _max: FBUserMaxAggregateOutputType | null
  }

  export type FBUserAvgAggregateOutputType = {
    id: number | null
  }

  export type FBUserSumAggregateOutputType = {
    id: number | null
  }

  export type FBUserMinAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    coverImage: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    coverImage: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBUserCountAggregateOutputType = {
    id: number
    name: number
    profileImage: number
    coverImage: number
    bio: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FBUserAvgAggregateInputType = {
    id?: true
  }

  export type FBUserSumAggregateInputType = {
    id?: true
  }

  export type FBUserMinAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    coverImage?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBUserMaxAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    coverImage?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBUserCountAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    coverImage?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FBUserAggregateArgs = {
    /**
     * Filter which FBUser to aggregate.
     */
    where?: FBUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBUsers to fetch.
     */
    orderBy?: Enumerable<FBUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FBUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FBUsers
    **/
    _count?: true | FBUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FBUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FBUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FBUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FBUserMaxAggregateInputType
  }

  export type GetFBUserAggregateType<T extends FBUserAggregateArgs> = {
        [P in keyof T & keyof AggregateFBUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFBUser[P]>
      : GetScalarType<T[P], AggregateFBUser[P]>
  }




  export type FBUserGroupByArgs = {
    where?: FBUserWhereInput
    orderBy?: Enumerable<FBUserOrderByWithAggregationInput>
    by: FBUserScalarFieldEnum[]
    having?: FBUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FBUserCountAggregateInputType | true
    _avg?: FBUserAvgAggregateInputType
    _sum?: FBUserSumAggregateInputType
    _min?: FBUserMinAggregateInputType
    _max?: FBUserMaxAggregateInputType
  }


  export type FBUserGroupByOutputType = {
    id: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt: Date
    updatedAt: Date
    _count: FBUserCountAggregateOutputType | null
    _avg: FBUserAvgAggregateOutputType | null
    _sum: FBUserSumAggregateOutputType | null
    _min: FBUserMinAggregateOutputType | null
    _max: FBUserMaxAggregateOutputType | null
  }

  type GetFBUserGroupByPayload<T extends FBUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FBUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FBUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FBUserGroupByOutputType[P]>
            : GetScalarType<T[P], FBUserGroupByOutputType[P]>
        }
      >
    >


  export type FBUserSelect = {
    id?: boolean
    name?: boolean
    profileImage?: boolean
    coverImage?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromFriends?: boolean | FBUser$fromFriendsArgs
    toFriends?: boolean | FBUser$toFriendsArgs
    Comment?: boolean | FBUser$CommentArgs
    SubComment?: boolean | FBUser$SubCommentArgs
    GroupOnUser?: boolean | FBUser$GroupOnUserArgs
    Like?: boolean | FBUser$LikeArgs
    Share?: boolean | FBUser$ShareArgs
    fromDirectMsg?: boolean | FBUser$fromDirectMsgArgs
    toDirectMsg?: boolean | FBUser$toDirectMsgArgs
    postByUser?: boolean | FBUser$postByUserArgs
    postInUser?: boolean | FBUser$postInUserArgs
    _count?: boolean | FBUserCountOutputTypeArgs
  }


  export type FBUserInclude = {
    fromFriends?: boolean | FBUser$fromFriendsArgs
    toFriends?: boolean | FBUser$toFriendsArgs
    Comment?: boolean | FBUser$CommentArgs
    SubComment?: boolean | FBUser$SubCommentArgs
    GroupOnUser?: boolean | FBUser$GroupOnUserArgs
    Like?: boolean | FBUser$LikeArgs
    Share?: boolean | FBUser$ShareArgs
    fromDirectMsg?: boolean | FBUser$fromDirectMsgArgs
    toDirectMsg?: boolean | FBUser$toDirectMsgArgs
    postByUser?: boolean | FBUser$postByUserArgs
    postInUser?: boolean | FBUser$postInUserArgs
    _count?: boolean | FBUserCountOutputTypeArgs
  }

  export type FBUserGetPayload<S extends boolean | null | undefined | FBUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBUser :
    S extends undefined ? never :
    S extends { include: any } & (FBUserArgs | FBUserFindManyArgs)
    ? FBUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'fromFriends' ? Array < FriendsGetPayload<S['include'][P]>>  :
        P extends 'toFriends' ? Array < FriendsGetPayload<S['include'][P]>>  :
        P extends 'Comment' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'SubComment' ? Array < SubCommentGetPayload<S['include'][P]>>  :
        P extends 'GroupOnUser' ? Array < GroupOnUserGetPayload<S['include'][P]>>  :
        P extends 'Like' ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends 'Share' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends 'fromDirectMsg' ? Array < FBDirectMsgGetPayload<S['include'][P]>>  :
        P extends 'toDirectMsg' ? Array < FBDirectMsgGetPayload<S['include'][P]>>  :
        P extends 'postByUser' ? Array < FBPostGetPayload<S['include'][P]>>  :
        P extends 'postInUser' ? Array < FBPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? FBUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FBUserArgs | FBUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'fromFriends' ? Array < FriendsGetPayload<S['select'][P]>>  :
        P extends 'toFriends' ? Array < FriendsGetPayload<S['select'][P]>>  :
        P extends 'Comment' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'SubComment' ? Array < SubCommentGetPayload<S['select'][P]>>  :
        P extends 'GroupOnUser' ? Array < GroupOnUserGetPayload<S['select'][P]>>  :
        P extends 'Like' ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends 'Share' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends 'fromDirectMsg' ? Array < FBDirectMsgGetPayload<S['select'][P]>>  :
        P extends 'toDirectMsg' ? Array < FBDirectMsgGetPayload<S['select'][P]>>  :
        P extends 'postByUser' ? Array < FBPostGetPayload<S['select'][P]>>  :
        P extends 'postInUser' ? Array < FBPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? FBUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FBUser ? FBUser[P] : never
  } 
      : FBUser


  type FBUserCountArgs = 
    Omit<FBUserFindManyArgs, 'select' | 'include'> & {
      select?: FBUserCountAggregateInputType | true
    }

  export interface FBUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FBUser that matches the filter.
     * @param {FBUserFindUniqueArgs} args - Arguments to find a FBUser
     * @example
     * // Get one FBUser
     * const fBUser = await prisma.fBUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FBUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FBUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FBUser'> extends True ? Prisma__FBUserClient<FBUserGetPayload<T>> : Prisma__FBUserClient<FBUserGetPayload<T> | null, null>

    /**
     * Find one FBUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FBUserFindUniqueOrThrowArgs} args - Arguments to find a FBUser
     * @example
     * // Get one FBUser
     * const fBUser = await prisma.fBUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FBUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FBUserFindUniqueOrThrowArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Find the first FBUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserFindFirstArgs} args - Arguments to find a FBUser
     * @example
     * // Get one FBUser
     * const fBUser = await prisma.fBUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FBUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FBUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FBUser'> extends True ? Prisma__FBUserClient<FBUserGetPayload<T>> : Prisma__FBUserClient<FBUserGetPayload<T> | null, null>

    /**
     * Find the first FBUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserFindFirstOrThrowArgs} args - Arguments to find a FBUser
     * @example
     * // Get one FBUser
     * const fBUser = await prisma.fBUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FBUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FBUserFindFirstOrThrowArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Find zero or more FBUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FBUsers
     * const fBUsers = await prisma.fBUser.findMany()
     * 
     * // Get first 10 FBUsers
     * const fBUsers = await prisma.fBUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fBUserWithIdOnly = await prisma.fBUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FBUserFindManyArgs>(
      args?: SelectSubset<T, FBUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<FBUserGetPayload<T>>>

    /**
     * Create a FBUser.
     * @param {FBUserCreateArgs} args - Arguments to create a FBUser.
     * @example
     * // Create one FBUser
     * const FBUser = await prisma.fBUser.create({
     *   data: {
     *     // ... data to create a FBUser
     *   }
     * })
     * 
    **/
    create<T extends FBUserCreateArgs>(
      args: SelectSubset<T, FBUserCreateArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Create many FBUsers.
     *     @param {FBUserCreateManyArgs} args - Arguments to create many FBUsers.
     *     @example
     *     // Create many FBUsers
     *     const fBUser = await prisma.fBUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FBUserCreateManyArgs>(
      args?: SelectSubset<T, FBUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FBUser.
     * @param {FBUserDeleteArgs} args - Arguments to delete one FBUser.
     * @example
     * // Delete one FBUser
     * const FBUser = await prisma.fBUser.delete({
     *   where: {
     *     // ... filter to delete one FBUser
     *   }
     * })
     * 
    **/
    delete<T extends FBUserDeleteArgs>(
      args: SelectSubset<T, FBUserDeleteArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Update one FBUser.
     * @param {FBUserUpdateArgs} args - Arguments to update one FBUser.
     * @example
     * // Update one FBUser
     * const fBUser = await prisma.fBUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FBUserUpdateArgs>(
      args: SelectSubset<T, FBUserUpdateArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Delete zero or more FBUsers.
     * @param {FBUserDeleteManyArgs} args - Arguments to filter FBUsers to delete.
     * @example
     * // Delete a few FBUsers
     * const { count } = await prisma.fBUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FBUserDeleteManyArgs>(
      args?: SelectSubset<T, FBUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FBUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FBUsers
     * const fBUser = await prisma.fBUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FBUserUpdateManyArgs>(
      args: SelectSubset<T, FBUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FBUser.
     * @param {FBUserUpsertArgs} args - Arguments to update or create a FBUser.
     * @example
     * // Update or create a FBUser
     * const fBUser = await prisma.fBUser.upsert({
     *   create: {
     *     // ... data to create a FBUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FBUser we want to update
     *   }
     * })
    **/
    upsert<T extends FBUserUpsertArgs>(
      args: SelectSubset<T, FBUserUpsertArgs>
    ): Prisma__FBUserClient<FBUserGetPayload<T>>

    /**
     * Count the number of FBUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserCountArgs} args - Arguments to filter FBUsers to count.
     * @example
     * // Count the number of FBUsers
     * const count = await prisma.fBUser.count({
     *   where: {
     *     // ... the filter for the FBUsers we want to count
     *   }
     * })
    **/
    count<T extends FBUserCountArgs>(
      args?: Subset<T, FBUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FBUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FBUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FBUserAggregateArgs>(args: Subset<T, FBUserAggregateArgs>): Prisma.PrismaPromise<GetFBUserAggregateType<T>>

    /**
     * Group by FBUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FBUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FBUserGroupByArgs['orderBy'] }
        : { orderBy?: FBUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FBUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFBUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FBUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FBUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    fromFriends<T extends FBUser$fromFriendsArgs= {}>(args?: Subset<T, FBUser$fromFriendsArgs>): Prisma.PrismaPromise<Array<FriendsGetPayload<T>>| Null>;

    toFriends<T extends FBUser$toFriendsArgs= {}>(args?: Subset<T, FBUser$toFriendsArgs>): Prisma.PrismaPromise<Array<FriendsGetPayload<T>>| Null>;

    Comment<T extends FBUser$CommentArgs= {}>(args?: Subset<T, FBUser$CommentArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    SubComment<T extends FBUser$SubCommentArgs= {}>(args?: Subset<T, FBUser$SubCommentArgs>): Prisma.PrismaPromise<Array<SubCommentGetPayload<T>>| Null>;

    GroupOnUser<T extends FBUser$GroupOnUserArgs= {}>(args?: Subset<T, FBUser$GroupOnUserArgs>): Prisma.PrismaPromise<Array<GroupOnUserGetPayload<T>>| Null>;

    Like<T extends FBUser$LikeArgs= {}>(args?: Subset<T, FBUser$LikeArgs>): Prisma.PrismaPromise<Array<LikeGetPayload<T>>| Null>;

    Share<T extends FBUser$ShareArgs= {}>(args?: Subset<T, FBUser$ShareArgs>): Prisma.PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    fromDirectMsg<T extends FBUser$fromDirectMsgArgs= {}>(args?: Subset<T, FBUser$fromDirectMsgArgs>): Prisma.PrismaPromise<Array<FBDirectMsgGetPayload<T>>| Null>;

    toDirectMsg<T extends FBUser$toDirectMsgArgs= {}>(args?: Subset<T, FBUser$toDirectMsgArgs>): Prisma.PrismaPromise<Array<FBDirectMsgGetPayload<T>>| Null>;

    postByUser<T extends FBUser$postByUserArgs= {}>(args?: Subset<T, FBUser$postByUserArgs>): Prisma.PrismaPromise<Array<FBPostGetPayload<T>>| Null>;

    postInUser<T extends FBUser$postInUserArgs= {}>(args?: Subset<T, FBUser$postInUserArgs>): Prisma.PrismaPromise<Array<FBPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FBUser base type for findUnique actions
   */
  export type FBUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter, which FBUser to fetch.
     */
    where: FBUserWhereUniqueInput
  }

  /**
   * FBUser findUnique
   */
  export interface FBUserFindUniqueArgs extends FBUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBUser findUniqueOrThrow
   */
  export type FBUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter, which FBUser to fetch.
     */
    where: FBUserWhereUniqueInput
  }


  /**
   * FBUser base type for findFirst actions
   */
  export type FBUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter, which FBUser to fetch.
     */
    where?: FBUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBUsers to fetch.
     */
    orderBy?: Enumerable<FBUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBUsers.
     */
    cursor?: FBUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBUsers.
     */
    distinct?: Enumerable<FBUserScalarFieldEnum>
  }

  /**
   * FBUser findFirst
   */
  export interface FBUserFindFirstArgs extends FBUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBUser findFirstOrThrow
   */
  export type FBUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter, which FBUser to fetch.
     */
    where?: FBUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBUsers to fetch.
     */
    orderBy?: Enumerable<FBUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBUsers.
     */
    cursor?: FBUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBUsers.
     */
    distinct?: Enumerable<FBUserScalarFieldEnum>
  }


  /**
   * FBUser findMany
   */
  export type FBUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter, which FBUsers to fetch.
     */
    where?: FBUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBUsers to fetch.
     */
    orderBy?: Enumerable<FBUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FBUsers.
     */
    cursor?: FBUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBUsers.
     */
    skip?: number
    distinct?: Enumerable<FBUserScalarFieldEnum>
  }


  /**
   * FBUser create
   */
  export type FBUserCreateArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * The data needed to create a FBUser.
     */
    data: XOR<FBUserCreateInput, FBUserUncheckedCreateInput>
  }


  /**
   * FBUser createMany
   */
  export type FBUserCreateManyArgs = {
    /**
     * The data used to create many FBUsers.
     */
    data: Enumerable<FBUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FBUser update
   */
  export type FBUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * The data needed to update a FBUser.
     */
    data: XOR<FBUserUpdateInput, FBUserUncheckedUpdateInput>
    /**
     * Choose, which FBUser to update.
     */
    where: FBUserWhereUniqueInput
  }


  /**
   * FBUser updateMany
   */
  export type FBUserUpdateManyArgs = {
    /**
     * The data used to update FBUsers.
     */
    data: XOR<FBUserUpdateManyMutationInput, FBUserUncheckedUpdateManyInput>
    /**
     * Filter which FBUsers to update
     */
    where?: FBUserWhereInput
  }


  /**
   * FBUser upsert
   */
  export type FBUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * The filter to search for the FBUser to update in case it exists.
     */
    where: FBUserWhereUniqueInput
    /**
     * In case the FBUser found by the `where` argument doesn't exist, create a new FBUser with this data.
     */
    create: XOR<FBUserCreateInput, FBUserUncheckedCreateInput>
    /**
     * In case the FBUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FBUserUpdateInput, FBUserUncheckedUpdateInput>
  }


  /**
   * FBUser delete
   */
  export type FBUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
    /**
     * Filter which FBUser to delete.
     */
    where: FBUserWhereUniqueInput
  }


  /**
   * FBUser deleteMany
   */
  export type FBUserDeleteManyArgs = {
    /**
     * Filter which FBUsers to delete
     */
    where?: FBUserWhereInput
  }


  /**
   * FBUser.fromFriends
   */
  export type FBUser$fromFriendsArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    where?: FriendsWhereInput
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    cursor?: FriendsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendsScalarFieldEnum>
  }


  /**
   * FBUser.toFriends
   */
  export type FBUser$toFriendsArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    where?: FriendsWhereInput
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    cursor?: FriendsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FriendsScalarFieldEnum>
  }


  /**
   * FBUser.Comment
   */
  export type FBUser$CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * FBUser.SubComment
   */
  export type FBUser$SubCommentArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    where?: SubCommentWhereInput
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    cursor?: SubCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubCommentScalarFieldEnum>
  }


  /**
   * FBUser.GroupOnUser
   */
  export type FBUser$GroupOnUserArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    where?: GroupOnUserWhereInput
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    cursor?: GroupOnUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupOnUserScalarFieldEnum>
  }


  /**
   * FBUser.Like
   */
  export type FBUser$LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * FBUser.Share
   */
  export type FBUser$ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * FBUser.fromDirectMsg
   */
  export type FBUser$fromDirectMsgArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    where?: FBDirectMsgWhereInput
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    cursor?: FBDirectMsgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBDirectMsgScalarFieldEnum>
  }


  /**
   * FBUser.toDirectMsg
   */
  export type FBUser$toDirectMsgArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    where?: FBDirectMsgWhereInput
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    cursor?: FBDirectMsgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBDirectMsgScalarFieldEnum>
  }


  /**
   * FBUser.postByUser
   */
  export type FBUser$postByUserArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    where?: FBPostWhereInput
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    cursor?: FBPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }


  /**
   * FBUser.postInUser
   */
  export type FBUser$postInUserArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    where?: FBPostWhereInput
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    cursor?: FBPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }


  /**
   * FBUser without action
   */
  export type FBUserArgs = {
    /**
     * Select specific fields to fetch from the FBUser
     */
    select?: FBUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBUserInclude | null
  }



  /**
   * Model Friends
   */


  export type AggregateFriends = {
    _count: FriendsCountAggregateOutputType | null
    _avg: FriendsAvgAggregateOutputType | null
    _sum: FriendsSumAggregateOutputType | null
    _min: FriendsMinAggregateOutputType | null
    _max: FriendsMaxAggregateOutputType | null
  }

  export type FriendsAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FriendsSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FriendsMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendsMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FriendsCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FriendsAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FriendsSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FriendsMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendsMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FriendsCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FriendsAggregateArgs = {
    /**
     * Filter which Friends to aggregate.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Friends
    **/
    _count?: true | FriendsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FriendsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FriendsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FriendsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FriendsMaxAggregateInputType
  }

  export type GetFriendsAggregateType<T extends FriendsAggregateArgs> = {
        [P in keyof T & keyof AggregateFriends]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFriends[P]>
      : GetScalarType<T[P], AggregateFriends[P]>
  }




  export type FriendsGroupByArgs = {
    where?: FriendsWhereInput
    orderBy?: Enumerable<FriendsOrderByWithAggregationInput>
    by: FriendsScalarFieldEnum[]
    having?: FriendsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FriendsCountAggregateInputType | true
    _avg?: FriendsAvgAggregateInputType
    _sum?: FriendsSumAggregateInputType
    _min?: FriendsMinAggregateInputType
    _max?: FriendsMaxAggregateInputType
  }


  export type FriendsGroupByOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    createdAt: Date
    updatedAt: Date
    _count: FriendsCountAggregateOutputType | null
    _avg: FriendsAvgAggregateOutputType | null
    _sum: FriendsSumAggregateOutputType | null
    _min: FriendsMinAggregateOutputType | null
    _max: FriendsMaxAggregateOutputType | null
  }

  type GetFriendsGroupByPayload<T extends FriendsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FriendsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FriendsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FriendsGroupByOutputType[P]>
            : GetScalarType<T[P], FriendsGroupByOutputType[P]>
        }
      >
    >


  export type FriendsSelect = {
    id?: boolean
    from?: boolean | FBUserArgs
    fromUserId?: boolean
    to?: boolean | FBUserArgs
    toUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FriendsInclude = {
    from?: boolean | FBUserArgs
    to?: boolean | FBUserArgs
  }

  export type FriendsGetPayload<S extends boolean | null | undefined | FriendsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Friends :
    S extends undefined ? never :
    S extends { include: any } & (FriendsArgs | FriendsFindManyArgs)
    ? Friends  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'from' ? FBUserGetPayload<S['include'][P]> :
        P extends 'to' ? FBUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FriendsArgs | FriendsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'from' ? FBUserGetPayload<S['select'][P]> :
        P extends 'to' ? FBUserGetPayload<S['select'][P]> :  P extends keyof Friends ? Friends[P] : never
  } 
      : Friends


  type FriendsCountArgs = 
    Omit<FriendsFindManyArgs, 'select' | 'include'> & {
      select?: FriendsCountAggregateInputType | true
    }

  export interface FriendsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Friends that matches the filter.
     * @param {FriendsFindUniqueArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FriendsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FriendsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Friends'> extends True ? Prisma__FriendsClient<FriendsGetPayload<T>> : Prisma__FriendsClient<FriendsGetPayload<T> | null, null>

    /**
     * Find one Friends that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FriendsFindUniqueOrThrowArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FriendsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FriendsFindUniqueOrThrowArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Find the first Friends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindFirstArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FriendsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FriendsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Friends'> extends True ? Prisma__FriendsClient<FriendsGetPayload<T>> : Prisma__FriendsClient<FriendsGetPayload<T> | null, null>

    /**
     * Find the first Friends that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindFirstOrThrowArgs} args - Arguments to find a Friends
     * @example
     * // Get one Friends
     * const friends = await prisma.friends.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FriendsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FriendsFindFirstOrThrowArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Find zero or more Friends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Friends
     * const friends = await prisma.friends.findMany()
     * 
     * // Get first 10 Friends
     * const friends = await prisma.friends.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const friendsWithIdOnly = await prisma.friends.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FriendsFindManyArgs>(
      args?: SelectSubset<T, FriendsFindManyArgs>
    ): Prisma.PrismaPromise<Array<FriendsGetPayload<T>>>

    /**
     * Create a Friends.
     * @param {FriendsCreateArgs} args - Arguments to create a Friends.
     * @example
     * // Create one Friends
     * const Friends = await prisma.friends.create({
     *   data: {
     *     // ... data to create a Friends
     *   }
     * })
     * 
    **/
    create<T extends FriendsCreateArgs>(
      args: SelectSubset<T, FriendsCreateArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Create many Friends.
     *     @param {FriendsCreateManyArgs} args - Arguments to create many Friends.
     *     @example
     *     // Create many Friends
     *     const friends = await prisma.friends.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FriendsCreateManyArgs>(
      args?: SelectSubset<T, FriendsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Friends.
     * @param {FriendsDeleteArgs} args - Arguments to delete one Friends.
     * @example
     * // Delete one Friends
     * const Friends = await prisma.friends.delete({
     *   where: {
     *     // ... filter to delete one Friends
     *   }
     * })
     * 
    **/
    delete<T extends FriendsDeleteArgs>(
      args: SelectSubset<T, FriendsDeleteArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Update one Friends.
     * @param {FriendsUpdateArgs} args - Arguments to update one Friends.
     * @example
     * // Update one Friends
     * const friends = await prisma.friends.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FriendsUpdateArgs>(
      args: SelectSubset<T, FriendsUpdateArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Delete zero or more Friends.
     * @param {FriendsDeleteManyArgs} args - Arguments to filter Friends to delete.
     * @example
     * // Delete a few Friends
     * const { count } = await prisma.friends.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FriendsDeleteManyArgs>(
      args?: SelectSubset<T, FriendsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Friends
     * const friends = await prisma.friends.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FriendsUpdateManyArgs>(
      args: SelectSubset<T, FriendsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Friends.
     * @param {FriendsUpsertArgs} args - Arguments to update or create a Friends.
     * @example
     * // Update or create a Friends
     * const friends = await prisma.friends.upsert({
     *   create: {
     *     // ... data to create a Friends
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Friends we want to update
     *   }
     * })
    **/
    upsert<T extends FriendsUpsertArgs>(
      args: SelectSubset<T, FriendsUpsertArgs>
    ): Prisma__FriendsClient<FriendsGetPayload<T>>

    /**
     * Count the number of Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsCountArgs} args - Arguments to filter Friends to count.
     * @example
     * // Count the number of Friends
     * const count = await prisma.friends.count({
     *   where: {
     *     // ... the filter for the Friends we want to count
     *   }
     * })
    **/
    count<T extends FriendsCountArgs>(
      args?: Subset<T, FriendsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FriendsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FriendsAggregateArgs>(args: Subset<T, FriendsAggregateArgs>): Prisma.PrismaPromise<GetFriendsAggregateType<T>>

    /**
     * Group by Friends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FriendsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FriendsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FriendsGroupByArgs['orderBy'] }
        : { orderBy?: FriendsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FriendsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFriendsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Friends.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FriendsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    from<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    to<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Friends base type for findUnique actions
   */
  export type FriendsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where: FriendsWhereUniqueInput
  }

  /**
   * Friends findUnique
   */
  export interface FriendsFindUniqueArgs extends FriendsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friends findUniqueOrThrow
   */
  export type FriendsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends base type for findFirst actions
   */
  export type FriendsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: Enumerable<FriendsScalarFieldEnum>
  }

  /**
   * Friends findFirst
   */
  export interface FriendsFindFirstArgs extends FriendsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Friends findFirstOrThrow
   */
  export type FriendsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Friends.
     */
    distinct?: Enumerable<FriendsScalarFieldEnum>
  }


  /**
   * Friends findMany
   */
  export type FriendsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter, which Friends to fetch.
     */
    where?: FriendsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Friends to fetch.
     */
    orderBy?: Enumerable<FriendsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Friends.
     */
    cursor?: FriendsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Friends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Friends.
     */
    skip?: number
    distinct?: Enumerable<FriendsScalarFieldEnum>
  }


  /**
   * Friends create
   */
  export type FriendsCreateArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * The data needed to create a Friends.
     */
    data: XOR<FriendsCreateInput, FriendsUncheckedCreateInput>
  }


  /**
   * Friends createMany
   */
  export type FriendsCreateManyArgs = {
    /**
     * The data used to create many Friends.
     */
    data: Enumerable<FriendsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Friends update
   */
  export type FriendsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * The data needed to update a Friends.
     */
    data: XOR<FriendsUpdateInput, FriendsUncheckedUpdateInput>
    /**
     * Choose, which Friends to update.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends updateMany
   */
  export type FriendsUpdateManyArgs = {
    /**
     * The data used to update Friends.
     */
    data: XOR<FriendsUpdateManyMutationInput, FriendsUncheckedUpdateManyInput>
    /**
     * Filter which Friends to update
     */
    where?: FriendsWhereInput
  }


  /**
   * Friends upsert
   */
  export type FriendsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * The filter to search for the Friends to update in case it exists.
     */
    where: FriendsWhereUniqueInput
    /**
     * In case the Friends found by the `where` argument doesn't exist, create a new Friends with this data.
     */
    create: XOR<FriendsCreateInput, FriendsUncheckedCreateInput>
    /**
     * In case the Friends was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FriendsUpdateInput, FriendsUncheckedUpdateInput>
  }


  /**
   * Friends delete
   */
  export type FriendsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
    /**
     * Filter which Friends to delete.
     */
    where: FriendsWhereUniqueInput
  }


  /**
   * Friends deleteMany
   */
  export type FriendsDeleteManyArgs = {
    /**
     * Filter which Friends to delete
     */
    where?: FriendsWhereInput
  }


  /**
   * Friends without action
   */
  export type FriendsArgs = {
    /**
     * Select specific fields to fetch from the Friends
     */
    select?: FriendsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FriendsInclude | null
  }



  /**
   * Model FBPost
   */


  export type AggregateFBPost = {
    _count: FBPostCountAggregateOutputType | null
    _avg: FBPostAvgAggregateOutputType | null
    _sum: FBPostSumAggregateOutputType | null
    _min: FBPostMinAggregateOutputType | null
    _max: FBPostMaxAggregateOutputType | null
  }

  export type FBPostAvgAggregateOutputType = {
    id: number | null
    postByUserId: number | null
    postInUserId: number | null
    groupId: number | null
  }

  export type FBPostSumAggregateOutputType = {
    id: number | null
    postByUserId: number | null
    postInUserId: number | null
    groupId: number | null
  }

  export type FBPostMinAggregateOutputType = {
    id: number | null
    postByUserId: number | null
    postInUserId: number | null
    postDetail: string | null
    image: string | null
    groupId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBPostMaxAggregateOutputType = {
    id: number | null
    postByUserId: number | null
    postInUserId: number | null
    postDetail: string | null
    image: string | null
    groupId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBPostCountAggregateOutputType = {
    id: number
    postByUserId: number
    postInUserId: number
    postDetail: number
    image: number
    groupId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FBPostAvgAggregateInputType = {
    id?: true
    postByUserId?: true
    postInUserId?: true
    groupId?: true
  }

  export type FBPostSumAggregateInputType = {
    id?: true
    postByUserId?: true
    postInUserId?: true
    groupId?: true
  }

  export type FBPostMinAggregateInputType = {
    id?: true
    postByUserId?: true
    postInUserId?: true
    postDetail?: true
    image?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBPostMaxAggregateInputType = {
    id?: true
    postByUserId?: true
    postInUserId?: true
    postDetail?: true
    image?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBPostCountAggregateInputType = {
    id?: true
    postByUserId?: true
    postInUserId?: true
    postDetail?: true
    image?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FBPostAggregateArgs = {
    /**
     * Filter which FBPost to aggregate.
     */
    where?: FBPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPosts to fetch.
     */
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FBPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FBPosts
    **/
    _count?: true | FBPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FBPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FBPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FBPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FBPostMaxAggregateInputType
  }

  export type GetFBPostAggregateType<T extends FBPostAggregateArgs> = {
        [P in keyof T & keyof AggregateFBPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFBPost[P]>
      : GetScalarType<T[P], AggregateFBPost[P]>
  }




  export type FBPostGroupByArgs = {
    where?: FBPostWhereInput
    orderBy?: Enumerable<FBPostOrderByWithAggregationInput>
    by: FBPostScalarFieldEnum[]
    having?: FBPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FBPostCountAggregateInputType | true
    _avg?: FBPostAvgAggregateInputType
    _sum?: FBPostSumAggregateInputType
    _min?: FBPostMinAggregateInputType
    _max?: FBPostMaxAggregateInputType
  }


  export type FBPostGroupByOutputType = {
    id: number
    postByUserId: number | null
    postInUserId: number | null
    postDetail: string | null
    image: string | null
    groupId: number | null
    createdAt: Date
    updatedAt: Date
    _count: FBPostCountAggregateOutputType | null
    _avg: FBPostAvgAggregateOutputType | null
    _sum: FBPostSumAggregateOutputType | null
    _min: FBPostMinAggregateOutputType | null
    _max: FBPostMaxAggregateOutputType | null
  }

  type GetFBPostGroupByPayload<T extends FBPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FBPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FBPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FBPostGroupByOutputType[P]>
            : GetScalarType<T[P], FBPostGroupByOutputType[P]>
        }
      >
    >


  export type FBPostSelect = {
    id?: boolean
    postByUser?: boolean | FBUserArgs
    postByUserId?: boolean
    postInUser?: boolean | FBUserArgs
    postInUserId?: boolean
    postDetail?: boolean
    image?: boolean
    group?: boolean | GroupArgs
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Comment?: boolean | FBPost$CommentArgs
    Like?: boolean | FBPost$LikeArgs
    Share?: boolean | FBPost$ShareArgs
    PostOnHashtag?: boolean | FBPost$PostOnHashtagArgs
    _count?: boolean | FBPostCountOutputTypeArgs
  }


  export type FBPostInclude = {
    postByUser?: boolean | FBUserArgs
    postInUser?: boolean | FBUserArgs
    group?: boolean | GroupArgs
    Comment?: boolean | FBPost$CommentArgs
    Like?: boolean | FBPost$LikeArgs
    Share?: boolean | FBPost$ShareArgs
    PostOnHashtag?: boolean | FBPost$PostOnHashtagArgs
    _count?: boolean | FBPostCountOutputTypeArgs
  }

  export type FBPostGetPayload<S extends boolean | null | undefined | FBPostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBPost :
    S extends undefined ? never :
    S extends { include: any } & (FBPostArgs | FBPostFindManyArgs)
    ? FBPost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'postByUser' ? FBUserGetPayload<S['include'][P]> | null :
        P extends 'postInUser' ? FBUserGetPayload<S['include'][P]> | null :
        P extends 'group' ? GroupGetPayload<S['include'][P]> | null :
        P extends 'Comment' ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'Like' ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends 'Share' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends 'PostOnHashtag' ? Array < FBPostOnHashtagGetPayload<S['include'][P]>>  :
        P extends '_count' ? FBPostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FBPostArgs | FBPostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'postByUser' ? FBUserGetPayload<S['select'][P]> | null :
        P extends 'postInUser' ? FBUserGetPayload<S['select'][P]> | null :
        P extends 'group' ? GroupGetPayload<S['select'][P]> | null :
        P extends 'Comment' ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'Like' ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends 'Share' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends 'PostOnHashtag' ? Array < FBPostOnHashtagGetPayload<S['select'][P]>>  :
        P extends '_count' ? FBPostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FBPost ? FBPost[P] : never
  } 
      : FBPost


  type FBPostCountArgs = 
    Omit<FBPostFindManyArgs, 'select' | 'include'> & {
      select?: FBPostCountAggregateInputType | true
    }

  export interface FBPostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FBPost that matches the filter.
     * @param {FBPostFindUniqueArgs} args - Arguments to find a FBPost
     * @example
     * // Get one FBPost
     * const fBPost = await prisma.fBPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FBPostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FBPostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FBPost'> extends True ? Prisma__FBPostClient<FBPostGetPayload<T>> : Prisma__FBPostClient<FBPostGetPayload<T> | null, null>

    /**
     * Find one FBPost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FBPostFindUniqueOrThrowArgs} args - Arguments to find a FBPost
     * @example
     * // Get one FBPost
     * const fBPost = await prisma.fBPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FBPostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FBPostFindUniqueOrThrowArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Find the first FBPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostFindFirstArgs} args - Arguments to find a FBPost
     * @example
     * // Get one FBPost
     * const fBPost = await prisma.fBPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FBPostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FBPostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FBPost'> extends True ? Prisma__FBPostClient<FBPostGetPayload<T>> : Prisma__FBPostClient<FBPostGetPayload<T> | null, null>

    /**
     * Find the first FBPost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostFindFirstOrThrowArgs} args - Arguments to find a FBPost
     * @example
     * // Get one FBPost
     * const fBPost = await prisma.fBPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FBPostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FBPostFindFirstOrThrowArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Find zero or more FBPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FBPosts
     * const fBPosts = await prisma.fBPost.findMany()
     * 
     * // Get first 10 FBPosts
     * const fBPosts = await prisma.fBPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fBPostWithIdOnly = await prisma.fBPost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FBPostFindManyArgs>(
      args?: SelectSubset<T, FBPostFindManyArgs>
    ): Prisma.PrismaPromise<Array<FBPostGetPayload<T>>>

    /**
     * Create a FBPost.
     * @param {FBPostCreateArgs} args - Arguments to create a FBPost.
     * @example
     * // Create one FBPost
     * const FBPost = await prisma.fBPost.create({
     *   data: {
     *     // ... data to create a FBPost
     *   }
     * })
     * 
    **/
    create<T extends FBPostCreateArgs>(
      args: SelectSubset<T, FBPostCreateArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Create many FBPosts.
     *     @param {FBPostCreateManyArgs} args - Arguments to create many FBPosts.
     *     @example
     *     // Create many FBPosts
     *     const fBPost = await prisma.fBPost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FBPostCreateManyArgs>(
      args?: SelectSubset<T, FBPostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FBPost.
     * @param {FBPostDeleteArgs} args - Arguments to delete one FBPost.
     * @example
     * // Delete one FBPost
     * const FBPost = await prisma.fBPost.delete({
     *   where: {
     *     // ... filter to delete one FBPost
     *   }
     * })
     * 
    **/
    delete<T extends FBPostDeleteArgs>(
      args: SelectSubset<T, FBPostDeleteArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Update one FBPost.
     * @param {FBPostUpdateArgs} args - Arguments to update one FBPost.
     * @example
     * // Update one FBPost
     * const fBPost = await prisma.fBPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FBPostUpdateArgs>(
      args: SelectSubset<T, FBPostUpdateArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Delete zero or more FBPosts.
     * @param {FBPostDeleteManyArgs} args - Arguments to filter FBPosts to delete.
     * @example
     * // Delete a few FBPosts
     * const { count } = await prisma.fBPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FBPostDeleteManyArgs>(
      args?: SelectSubset<T, FBPostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FBPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FBPosts
     * const fBPost = await prisma.fBPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FBPostUpdateManyArgs>(
      args: SelectSubset<T, FBPostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FBPost.
     * @param {FBPostUpsertArgs} args - Arguments to update or create a FBPost.
     * @example
     * // Update or create a FBPost
     * const fBPost = await prisma.fBPost.upsert({
     *   create: {
     *     // ... data to create a FBPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FBPost we want to update
     *   }
     * })
    **/
    upsert<T extends FBPostUpsertArgs>(
      args: SelectSubset<T, FBPostUpsertArgs>
    ): Prisma__FBPostClient<FBPostGetPayload<T>>

    /**
     * Count the number of FBPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostCountArgs} args - Arguments to filter FBPosts to count.
     * @example
     * // Count the number of FBPosts
     * const count = await prisma.fBPost.count({
     *   where: {
     *     // ... the filter for the FBPosts we want to count
     *   }
     * })
    **/
    count<T extends FBPostCountArgs>(
      args?: Subset<T, FBPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FBPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FBPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FBPostAggregateArgs>(args: Subset<T, FBPostAggregateArgs>): Prisma.PrismaPromise<GetFBPostAggregateType<T>>

    /**
     * Group by FBPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FBPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FBPostGroupByArgs['orderBy'] }
        : { orderBy?: FBPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FBPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFBPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FBPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FBPostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    postByUser<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    postInUser<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    group<T extends GroupArgs= {}>(args?: Subset<T, GroupArgs>): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    Comment<T extends FBPost$CommentArgs= {}>(args?: Subset<T, FBPost$CommentArgs>): Prisma.PrismaPromise<Array<CommentGetPayload<T>>| Null>;

    Like<T extends FBPost$LikeArgs= {}>(args?: Subset<T, FBPost$LikeArgs>): Prisma.PrismaPromise<Array<LikeGetPayload<T>>| Null>;

    Share<T extends FBPost$ShareArgs= {}>(args?: Subset<T, FBPost$ShareArgs>): Prisma.PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    PostOnHashtag<T extends FBPost$PostOnHashtagArgs= {}>(args?: Subset<T, FBPost$PostOnHashtagArgs>): Prisma.PrismaPromise<Array<FBPostOnHashtagGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FBPost base type for findUnique actions
   */
  export type FBPostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter, which FBPost to fetch.
     */
    where: FBPostWhereUniqueInput
  }

  /**
   * FBPost findUnique
   */
  export interface FBPostFindUniqueArgs extends FBPostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBPost findUniqueOrThrow
   */
  export type FBPostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter, which FBPost to fetch.
     */
    where: FBPostWhereUniqueInput
  }


  /**
   * FBPost base type for findFirst actions
   */
  export type FBPostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter, which FBPost to fetch.
     */
    where?: FBPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPosts to fetch.
     */
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBPosts.
     */
    cursor?: FBPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBPosts.
     */
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }

  /**
   * FBPost findFirst
   */
  export interface FBPostFindFirstArgs extends FBPostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBPost findFirstOrThrow
   */
  export type FBPostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter, which FBPost to fetch.
     */
    where?: FBPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPosts to fetch.
     */
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBPosts.
     */
    cursor?: FBPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBPosts.
     */
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }


  /**
   * FBPost findMany
   */
  export type FBPostFindManyArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter, which FBPosts to fetch.
     */
    where?: FBPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPosts to fetch.
     */
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FBPosts.
     */
    cursor?: FBPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPosts.
     */
    skip?: number
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }


  /**
   * FBPost create
   */
  export type FBPostCreateArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * The data needed to create a FBPost.
     */
    data: XOR<FBPostCreateInput, FBPostUncheckedCreateInput>
  }


  /**
   * FBPost createMany
   */
  export type FBPostCreateManyArgs = {
    /**
     * The data used to create many FBPosts.
     */
    data: Enumerable<FBPostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FBPost update
   */
  export type FBPostUpdateArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * The data needed to update a FBPost.
     */
    data: XOR<FBPostUpdateInput, FBPostUncheckedUpdateInput>
    /**
     * Choose, which FBPost to update.
     */
    where: FBPostWhereUniqueInput
  }


  /**
   * FBPost updateMany
   */
  export type FBPostUpdateManyArgs = {
    /**
     * The data used to update FBPosts.
     */
    data: XOR<FBPostUpdateManyMutationInput, FBPostUncheckedUpdateManyInput>
    /**
     * Filter which FBPosts to update
     */
    where?: FBPostWhereInput
  }


  /**
   * FBPost upsert
   */
  export type FBPostUpsertArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * The filter to search for the FBPost to update in case it exists.
     */
    where: FBPostWhereUniqueInput
    /**
     * In case the FBPost found by the `where` argument doesn't exist, create a new FBPost with this data.
     */
    create: XOR<FBPostCreateInput, FBPostUncheckedCreateInput>
    /**
     * In case the FBPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FBPostUpdateInput, FBPostUncheckedUpdateInput>
  }


  /**
   * FBPost delete
   */
  export type FBPostDeleteArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    /**
     * Filter which FBPost to delete.
     */
    where: FBPostWhereUniqueInput
  }


  /**
   * FBPost deleteMany
   */
  export type FBPostDeleteManyArgs = {
    /**
     * Filter which FBPosts to delete
     */
    where?: FBPostWhereInput
  }


  /**
   * FBPost.Comment
   */
  export type FBPost$CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * FBPost.Like
   */
  export type FBPost$LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * FBPost.Share
   */
  export type FBPost$ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * FBPost.PostOnHashtag
   */
  export type FBPost$PostOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    where?: FBPostOnHashtagWhereInput
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    cursor?: FBPostOnHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBPostOnHashtagScalarFieldEnum>
  }


  /**
   * FBPost without action
   */
  export type FBPostArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type CommentSumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type CommentMinAggregateOutputType = {
    id: number | null
    postId: number | null
    commentDetail: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    commentDetail: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    postId: number
    commentDetail: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    postId?: true
    commentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    postId?: true
    commentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    postId?: true
    commentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CommentAggregateArgs = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs = {
    where?: CommentWhereInput
    orderBy?: Enumerable<CommentOrderByWithAggregationInput>
    by: CommentScalarFieldEnum[]
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _avg?: CommentAvgAggregateInputType
    _sum?: CommentSumAggregateInputType
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }


  export type CommentGroupByOutputType = {
    id: number
    postId: number
    commentDetail: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: CommentCountAggregateOutputType | null
    _avg: CommentAvgAggregateOutputType | null
    _sum: CommentSumAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect = {
    id?: boolean
    post?: boolean | FBPostArgs
    postId?: boolean
    commentDetail?: boolean
    fromUserId?: boolean | FBUserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    SubComment?: boolean | Comment$SubCommentArgs
    _count?: boolean | CommentCountOutputTypeArgs
  }


  export type CommentInclude = {
    post?: boolean | FBPostArgs
    fromUserId?: boolean | FBUserArgs
    SubComment?: boolean | Comment$SubCommentArgs
    _count?: boolean | CommentCountOutputTypeArgs
  }

  export type CommentGetPayload<S extends boolean | null | undefined | CommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comment :
    S extends undefined ? never :
    S extends { include: any } & (CommentArgs | CommentFindManyArgs)
    ? Comment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? FBPostGetPayload<S['include'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['include'][P]> :
        P extends 'SubComment' ? Array < SubCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? CommentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CommentArgs | CommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? FBPostGetPayload<S['select'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['select'][P]> :
        P extends 'SubComment' ? Array < SubCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? CommentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Comment ? Comment[P] : never
  } 
      : Comment


  type CommentCountArgs = 
    Omit<CommentFindManyArgs, 'select' | 'include'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comment'> extends True ? Prisma__CommentClient<CommentGetPayload<T>> : Prisma__CommentClient<CommentGetPayload<T> | null, null>

    /**
     * Find the first Comment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs>(
      args?: SelectSubset<T, CommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<CommentGetPayload<T>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: SelectSubset<T, CommentCreateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs>(
      args?: SelectSubset<T, CommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: SelectSubset<T, CommentDeleteArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: SelectSubset<T, CommentUpdateArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: SelectSubset<T, CommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: SelectSubset<T, CommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: SelectSubset<T, CommentUpsertArgs>
    ): Prisma__CommentClient<CommentGetPayload<T>>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends FBPostArgs= {}>(args?: Subset<T, FBPostArgs>): Prisma__FBPostClient<FBPostGetPayload<T> | Null>;

    fromUserId<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    SubComment<T extends Comment$SubCommentArgs= {}>(args?: Subset<T, Comment$SubCommentArgs>): Prisma.PrismaPromise<Array<SubCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comment base type for findUnique actions
   */
  export type CommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUnique
   */
  export interface CommentFindUniqueArgs extends CommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment base type for findFirst actions
   */
  export type CommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }

  /**
   * Comment findFirst
   */
  export interface CommentFindFirstArgs extends CommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type CommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: Enumerable<CommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }


  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs = {
    /**
     * The data used to create many Comments.
     */
    data: Enumerable<CommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }


  /**
   * Comment.SubComment
   */
  export type Comment$SubCommentArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    where?: SubCommentWhereInput
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    cursor?: SubCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<SubCommentScalarFieldEnum>
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CommentInclude | null
  }



  /**
   * Model SubComment
   */


  export type AggregateSubComment = {
    _count: SubCommentCountAggregateOutputType | null
    _avg: SubCommentAvgAggregateOutputType | null
    _sum: SubCommentSumAggregateOutputType | null
    _min: SubCommentMinAggregateOutputType | null
    _max: SubCommentMaxAggregateOutputType | null
  }

  export type SubCommentAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
  }

  export type SubCommentSumAggregateOutputType = {
    id: number | null
    commentId: number | null
    userId: number | null
  }

  export type SubCommentMinAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentDetail: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubCommentMaxAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentDetail: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubCommentCountAggregateOutputType = {
    id: number
    commentId: number
    subCommentDetail: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubCommentAvgAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
  }

  export type SubCommentSumAggregateInputType = {
    id?: true
    commentId?: true
    userId?: true
  }

  export type SubCommentMinAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubCommentMaxAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubCommentCountAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubCommentAggregateArgs = {
    /**
     * Filter which SubComment to aggregate.
     */
    where?: SubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubComments to fetch.
     */
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubComments
    **/
    _count?: true | SubCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubCommentMaxAggregateInputType
  }

  export type GetSubCommentAggregateType<T extends SubCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateSubComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubComment[P]>
      : GetScalarType<T[P], AggregateSubComment[P]>
  }




  export type SubCommentGroupByArgs = {
    where?: SubCommentWhereInput
    orderBy?: Enumerable<SubCommentOrderByWithAggregationInput>
    by: SubCommentScalarFieldEnum[]
    having?: SubCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubCommentCountAggregateInputType | true
    _avg?: SubCommentAvgAggregateInputType
    _sum?: SubCommentSumAggregateInputType
    _min?: SubCommentMinAggregateInputType
    _max?: SubCommentMaxAggregateInputType
  }


  export type SubCommentGroupByOutputType = {
    id: number
    commentId: number
    subCommentDetail: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: SubCommentCountAggregateOutputType | null
    _avg: SubCommentAvgAggregateOutputType | null
    _sum: SubCommentSumAggregateOutputType | null
    _min: SubCommentMinAggregateOutputType | null
    _max: SubCommentMaxAggregateOutputType | null
  }

  type GetSubCommentGroupByPayload<T extends SubCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<SubCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubCommentGroupByOutputType[P]>
            : GetScalarType<T[P], SubCommentGroupByOutputType[P]>
        }
      >
    >


  export type SubCommentSelect = {
    id?: boolean
    comment?: boolean | CommentArgs
    commentId?: boolean
    subCommentDetail?: boolean
    fromUserId?: boolean | FBUserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type SubCommentInclude = {
    comment?: boolean | CommentArgs
    fromUserId?: boolean | FBUserArgs
  }

  export type SubCommentGetPayload<S extends boolean | null | undefined | SubCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? SubComment :
    S extends undefined ? never :
    S extends { include: any } & (SubCommentArgs | SubCommentFindManyArgs)
    ? SubComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comment' ? CommentGetPayload<S['include'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (SubCommentArgs | SubCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comment' ? CommentGetPayload<S['select'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['select'][P]> :  P extends keyof SubComment ? SubComment[P] : never
  } 
      : SubComment


  type SubCommentCountArgs = 
    Omit<SubCommentFindManyArgs, 'select' | 'include'> & {
      select?: SubCommentCountAggregateInputType | true
    }

  export interface SubCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one SubComment that matches the filter.
     * @param {SubCommentFindUniqueArgs} args - Arguments to find a SubComment
     * @example
     * // Get one SubComment
     * const subComment = await prisma.subComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SubCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SubComment'> extends True ? Prisma__SubCommentClient<SubCommentGetPayload<T>> : Prisma__SubCommentClient<SubCommentGetPayload<T> | null, null>

    /**
     * Find one SubComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubCommentFindUniqueOrThrowArgs} args - Arguments to find a SubComment
     * @example
     * // Get one SubComment
     * const subComment = await prisma.subComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SubCommentFindUniqueOrThrowArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Find the first SubComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentFindFirstArgs} args - Arguments to find a SubComment
     * @example
     * // Get one SubComment
     * const subComment = await prisma.subComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SubCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SubComment'> extends True ? Prisma__SubCommentClient<SubCommentGetPayload<T>> : Prisma__SubCommentClient<SubCommentGetPayload<T> | null, null>

    /**
     * Find the first SubComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentFindFirstOrThrowArgs} args - Arguments to find a SubComment
     * @example
     * // Get one SubComment
     * const subComment = await prisma.subComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SubCommentFindFirstOrThrowArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Find zero or more SubComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubComments
     * const subComments = await prisma.subComment.findMany()
     * 
     * // Get first 10 SubComments
     * const subComments = await prisma.subComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subCommentWithIdOnly = await prisma.subComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SubCommentFindManyArgs>(
      args?: SelectSubset<T, SubCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<SubCommentGetPayload<T>>>

    /**
     * Create a SubComment.
     * @param {SubCommentCreateArgs} args - Arguments to create a SubComment.
     * @example
     * // Create one SubComment
     * const SubComment = await prisma.subComment.create({
     *   data: {
     *     // ... data to create a SubComment
     *   }
     * })
     * 
    **/
    create<T extends SubCommentCreateArgs>(
      args: SelectSubset<T, SubCommentCreateArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Create many SubComments.
     *     @param {SubCommentCreateManyArgs} args - Arguments to create many SubComments.
     *     @example
     *     // Create many SubComments
     *     const subComment = await prisma.subComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubCommentCreateManyArgs>(
      args?: SelectSubset<T, SubCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubComment.
     * @param {SubCommentDeleteArgs} args - Arguments to delete one SubComment.
     * @example
     * // Delete one SubComment
     * const SubComment = await prisma.subComment.delete({
     *   where: {
     *     // ... filter to delete one SubComment
     *   }
     * })
     * 
    **/
    delete<T extends SubCommentDeleteArgs>(
      args: SelectSubset<T, SubCommentDeleteArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Update one SubComment.
     * @param {SubCommentUpdateArgs} args - Arguments to update one SubComment.
     * @example
     * // Update one SubComment
     * const subComment = await prisma.subComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubCommentUpdateArgs>(
      args: SelectSubset<T, SubCommentUpdateArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Delete zero or more SubComments.
     * @param {SubCommentDeleteManyArgs} args - Arguments to filter SubComments to delete.
     * @example
     * // Delete a few SubComments
     * const { count } = await prisma.subComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubCommentDeleteManyArgs>(
      args?: SelectSubset<T, SubCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubComments
     * const subComment = await prisma.subComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubCommentUpdateManyArgs>(
      args: SelectSubset<T, SubCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubComment.
     * @param {SubCommentUpsertArgs} args - Arguments to update or create a SubComment.
     * @example
     * // Update or create a SubComment
     * const subComment = await prisma.subComment.upsert({
     *   create: {
     *     // ... data to create a SubComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubComment we want to update
     *   }
     * })
    **/
    upsert<T extends SubCommentUpsertArgs>(
      args: SelectSubset<T, SubCommentUpsertArgs>
    ): Prisma__SubCommentClient<SubCommentGetPayload<T>>

    /**
     * Count the number of SubComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentCountArgs} args - Arguments to filter SubComments to count.
     * @example
     * // Count the number of SubComments
     * const count = await prisma.subComment.count({
     *   where: {
     *     // ... the filter for the SubComments we want to count
     *   }
     * })
    **/
    count<T extends SubCommentCountArgs>(
      args?: Subset<T, SubCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubCommentAggregateArgs>(args: Subset<T, SubCommentAggregateArgs>): Prisma.PrismaPromise<GetSubCommentAggregateType<T>>

    /**
     * Group by SubComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubCommentGroupByArgs['orderBy'] }
        : { orderBy?: SubCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for SubComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SubCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comment<T extends CommentArgs= {}>(args?: Subset<T, CommentArgs>): Prisma__CommentClient<CommentGetPayload<T> | Null>;

    fromUserId<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * SubComment base type for findUnique actions
   */
  export type SubCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter, which SubComment to fetch.
     */
    where: SubCommentWhereUniqueInput
  }

  /**
   * SubComment findUnique
   */
  export interface SubCommentFindUniqueArgs extends SubCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SubComment findUniqueOrThrow
   */
  export type SubCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter, which SubComment to fetch.
     */
    where: SubCommentWhereUniqueInput
  }


  /**
   * SubComment base type for findFirst actions
   */
  export type SubCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter, which SubComment to fetch.
     */
    where?: SubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubComments to fetch.
     */
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubComments.
     */
    cursor?: SubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubComments.
     */
    distinct?: Enumerable<SubCommentScalarFieldEnum>
  }

  /**
   * SubComment findFirst
   */
  export interface SubCommentFindFirstArgs extends SubCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * SubComment findFirstOrThrow
   */
  export type SubCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter, which SubComment to fetch.
     */
    where?: SubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubComments to fetch.
     */
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubComments.
     */
    cursor?: SubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubComments.
     */
    distinct?: Enumerable<SubCommentScalarFieldEnum>
  }


  /**
   * SubComment findMany
   */
  export type SubCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter, which SubComments to fetch.
     */
    where?: SubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubComments to fetch.
     */
    orderBy?: Enumerable<SubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubComments.
     */
    cursor?: SubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubComments.
     */
    skip?: number
    distinct?: Enumerable<SubCommentScalarFieldEnum>
  }


  /**
   * SubComment create
   */
  export type SubCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * The data needed to create a SubComment.
     */
    data: XOR<SubCommentCreateInput, SubCommentUncheckedCreateInput>
  }


  /**
   * SubComment createMany
   */
  export type SubCommentCreateManyArgs = {
    /**
     * The data used to create many SubComments.
     */
    data: Enumerable<SubCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SubComment update
   */
  export type SubCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * The data needed to update a SubComment.
     */
    data: XOR<SubCommentUpdateInput, SubCommentUncheckedUpdateInput>
    /**
     * Choose, which SubComment to update.
     */
    where: SubCommentWhereUniqueInput
  }


  /**
   * SubComment updateMany
   */
  export type SubCommentUpdateManyArgs = {
    /**
     * The data used to update SubComments.
     */
    data: XOR<SubCommentUpdateManyMutationInput, SubCommentUncheckedUpdateManyInput>
    /**
     * Filter which SubComments to update
     */
    where?: SubCommentWhereInput
  }


  /**
   * SubComment upsert
   */
  export type SubCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * The filter to search for the SubComment to update in case it exists.
     */
    where: SubCommentWhereUniqueInput
    /**
     * In case the SubComment found by the `where` argument doesn't exist, create a new SubComment with this data.
     */
    create: XOR<SubCommentCreateInput, SubCommentUncheckedCreateInput>
    /**
     * In case the SubComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubCommentUpdateInput, SubCommentUncheckedUpdateInput>
  }


  /**
   * SubComment delete
   */
  export type SubCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
    /**
     * Filter which SubComment to delete.
     */
    where: SubCommentWhereUniqueInput
  }


  /**
   * SubComment deleteMany
   */
  export type SubCommentDeleteManyArgs = {
    /**
     * Filter which SubComments to delete
     */
    where?: SubCommentWhereInput
  }


  /**
   * SubComment without action
   */
  export type SubCommentArgs = {
    /**
     * Select specific fields to fetch from the SubComment
     */
    select?: SubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubCommentInclude | null
  }



  /**
   * Model Like
   */


  export type AggregateLike = {
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    likeTypeId: number | null
  }

  export type LikeSumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    likeTypeId: number | null
  }

  export type LikeMinAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    likeTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    likeTypeId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    likeTypeId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LikeAggregateArgs = {
    /**
     * Filter which Like to aggregate.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends LikeAggregateArgs> = {
        [P in keyof T & keyof AggregateLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLike[P]>
      : GetScalarType<T[P], AggregateLike[P]>
  }




  export type LikeGroupByArgs = {
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByWithAggregationInput>
    by: LikeScalarFieldEnum[]
    having?: LikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeCountAggregateInputType | true
    _avg?: LikeAvgAggregateInputType
    _sum?: LikeSumAggregateInputType
    _min?: LikeMinAggregateInputType
    _max?: LikeMaxAggregateInputType
  }


  export type LikeGroupByOutputType = {
    id: number
    postId: number
    userId: number
    likeTypeId: number
    createdAt: Date
    updatedAt: Date
    _count: LikeCountAggregateOutputType | null
    _avg: LikeAvgAggregateOutputType | null
    _sum: LikeSumAggregateOutputType | null
    _min: LikeMinAggregateOutputType | null
    _max: LikeMaxAggregateOutputType | null
  }

  type GetLikeGroupByPayload<T extends LikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeGroupByOutputType[P]>
        }
      >
    >


  export type LikeSelect = {
    id?: boolean
    post?: boolean | FBPostArgs
    postId?: boolean
    fromUserId?: boolean | FBUserArgs
    userId?: boolean
    likeType?: boolean | LikeTypeArgs
    likeTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LikeInclude = {
    post?: boolean | FBPostArgs
    fromUserId?: boolean | FBUserArgs
    likeType?: boolean | LikeTypeArgs
  }

  export type LikeGetPayload<S extends boolean | null | undefined | LikeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Like :
    S extends undefined ? never :
    S extends { include: any } & (LikeArgs | LikeFindManyArgs)
    ? Like  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? FBPostGetPayload<S['include'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['include'][P]> :
        P extends 'likeType' ? LikeTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LikeArgs | LikeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? FBPostGetPayload<S['select'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['select'][P]> :
        P extends 'likeType' ? LikeTypeGetPayload<S['select'][P]> :  P extends keyof Like ? Like[P] : never
  } 
      : Like


  type LikeCountArgs = 
    Omit<LikeFindManyArgs, 'select' | 'include'> & {
      select?: LikeCountAggregateInputType | true
    }

  export interface LikeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Like that matches the filter.
     * @param {LikeFindUniqueArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LikeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Like'> extends True ? Prisma__LikeClient<LikeGetPayload<T>> : Prisma__LikeClient<LikeGetPayload<T> | null, null>

    /**
     * Find one Like that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikeFindUniqueOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LikeFindUniqueOrThrowArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Find the first Like that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LikeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Like'> extends True ? Prisma__LikeClient<LikeGetPayload<T>> : Prisma__LikeClient<LikeGetPayload<T> | null, null>

    /**
     * Find the first Like that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindFirstOrThrowArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LikeFindFirstOrThrowArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeFindManyArgs>(
      args?: SelectSubset<T, LikeFindManyArgs>
    ): Prisma.PrismaPromise<Array<LikeGetPayload<T>>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends LikeCreateArgs>(
      args: SelectSubset<T, LikeCreateArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Create many Likes.
     *     @param {LikeCreateManyArgs} args - Arguments to create many Likes.
     *     @example
     *     // Create many Likes
     *     const like = await prisma.like.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeCreateManyArgs>(
      args?: SelectSubset<T, LikeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends LikeDeleteArgs>(
      args: SelectSubset<T, LikeDeleteArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeUpdateArgs>(
      args: SelectSubset<T, LikeUpdateArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeDeleteManyArgs>(
      args?: SelectSubset<T, LikeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeUpdateManyArgs>(
      args: SelectSubset<T, LikeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends LikeUpsertArgs>(
      args: SelectSubset<T, LikeUpsertArgs>
    ): Prisma__LikeClient<LikeGetPayload<T>>

    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikeCountArgs>(
      args?: Subset<T, LikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeAggregateArgs>(args: Subset<T, LikeAggregateArgs>): Prisma.PrismaPromise<GetLikeAggregateType<T>>

    /**
     * Group by Like.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeGroupByArgs['orderBy'] }
        : { orderBy?: LikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends FBPostArgs= {}>(args?: Subset<T, FBPostArgs>): Prisma__FBPostClient<FBPostGetPayload<T> | Null>;

    fromUserId<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    likeType<T extends LikeTypeArgs= {}>(args?: Subset<T, LikeTypeArgs>): Prisma__LikeTypeClient<LikeTypeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Like base type for findUnique actions
   */
  export type LikeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }

  /**
   * Like findUnique
   */
  export interface LikeFindUniqueArgs extends LikeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Like findUniqueOrThrow
   */
  export type LikeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
     */
    where: LikeWhereUniqueInput
  }


  /**
   * Like base type for findFirst actions
   */
  export type LikeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: Enumerable<LikeScalarFieldEnum>
  }

  /**
   * Like findFirst
   */
  export interface LikeFindFirstArgs extends LikeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Like findFirstOrThrow
   */
  export type LikeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like findMany
   */
  export type LikeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like create
   */
  export type LikeCreateArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * The data needed to create a Like.
     */
    data: XOR<LikeCreateInput, LikeUncheckedCreateInput>
  }


  /**
   * Like createMany
   */
  export type LikeCreateManyArgs = {
    /**
     * The data used to create many Likes.
     */
    data: Enumerable<LikeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Like update
   */
  export type LikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * The data needed to update a Like.
     */
    data: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
    /**
     * Choose, which Like to update.
     */
    where: LikeWhereUniqueInput
  }


  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikeWhereInput
  }


  /**
   * Like upsert
   */
  export type LikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * The filter to search for the Like to update in case it exists.
     */
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
     */
    create: XOR<LikeCreateInput, LikeUncheckedCreateInput>
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeUpdateInput, LikeUncheckedUpdateInput>
  }


  /**
   * Like delete
   */
  export type LikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    /**
     * Filter which Like to delete.
     */
    where: LikeWhereUniqueInput
  }


  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs = {
    /**
     * Filter which Likes to delete
     */
    where?: LikeWhereInput
  }


  /**
   * Like without action
   */
  export type LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
  }



  /**
   * Model Share
   */


  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  export type ShareAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    shareStatusId: number | null
  }

  export type ShareSumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    shareStatusId: number | null
  }

  export type ShareMinAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    shareStatusId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
    shareStatusId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareCountAggregateOutputType = {
    id: number
    postId: number
    userId: number
    shareStatusId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShareAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    shareStatusId?: true
  }

  export type ShareSumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    shareStatusId?: true
  }

  export type ShareMinAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    shareStatusId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareMaxAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    shareStatusId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareCountAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
    shareStatusId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShareAggregateArgs = {
    /**
     * Filter which Share to aggregate.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | ShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareMaxAggregateInputType
  }

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
        [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>
  }




  export type ShareGroupByArgs = {
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithAggregationInput>
    by: ShareScalarFieldEnum[]
    having?: ShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareCountAggregateInputType | true
    _avg?: ShareAvgAggregateInputType
    _sum?: ShareSumAggregateInputType
    _min?: ShareMinAggregateInputType
    _max?: ShareMaxAggregateInputType
  }


  export type ShareGroupByOutputType = {
    id: number
    postId: number
    userId: number
    shareStatusId: number
    createdAt: Date
    updatedAt: Date
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareGroupByOutputType[P]>
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
        }
      >
    >


  export type ShareSelect = {
    id?: boolean
    post?: boolean | FBPostArgs
    postId?: boolean
    fromUserId?: boolean | FBUserArgs
    userId?: boolean
    shareStatus?: boolean | ShareStatusArgs
    shareStatusId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type ShareInclude = {
    post?: boolean | FBPostArgs
    fromUserId?: boolean | FBUserArgs
    shareStatus?: boolean | ShareStatusArgs
  }

  export type ShareGetPayload<S extends boolean | null | undefined | ShareArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Share :
    S extends undefined ? never :
    S extends { include: any } & (ShareArgs | ShareFindManyArgs)
    ? Share  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? FBPostGetPayload<S['include'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['include'][P]> :
        P extends 'shareStatus' ? ShareStatusGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ShareArgs | ShareFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? FBPostGetPayload<S['select'][P]> :
        P extends 'fromUserId' ? FBUserGetPayload<S['select'][P]> :
        P extends 'shareStatus' ? ShareStatusGetPayload<S['select'][P]> :  P extends keyof Share ? Share[P] : never
  } 
      : Share


  type ShareCountArgs = 
    Omit<ShareFindManyArgs, 'select' | 'include'> & {
      select?: ShareCountAggregateInputType | true
    }

  export interface ShareDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShareFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShareFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find one Share that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShareFindUniqueOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShareFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShareFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Share'> extends True ? Prisma__ShareClient<ShareGetPayload<T>> : Prisma__ShareClient<ShareGetPayload<T> | null, null>

    /**
     * Find the first Share that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShareFindFirstOrThrowArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShareFindManyArgs>(
      args?: SelectSubset<T, ShareFindManyArgs>
    ): Prisma.PrismaPromise<Array<ShareGetPayload<T>>>

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     * 
    **/
    create<T extends ShareCreateArgs>(
      args: SelectSubset<T, ShareCreateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Create many Shares.
     *     @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     *     @example
     *     // Create many Shares
     *     const share = await prisma.share.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShareCreateManyArgs>(
      args?: SelectSubset<T, ShareCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     * 
    **/
    delete<T extends ShareDeleteArgs>(
      args: SelectSubset<T, ShareDeleteArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShareUpdateArgs>(
      args: SelectSubset<T, ShareUpdateArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShareDeleteManyArgs>(
      args?: SelectSubset<T, ShareDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShareUpdateManyArgs>(
      args: SelectSubset<T, ShareUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
    **/
    upsert<T extends ShareUpsertArgs>(
      args: SelectSubset<T, ShareUpsertArgs>
    ): Prisma__ShareClient<ShareGetPayload<T>>

    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareAggregateArgs>(args: Subset<T, ShareAggregateArgs>): Prisma.PrismaPromise<GetShareAggregateType<T>>

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShareClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends FBPostArgs= {}>(args?: Subset<T, FBPostArgs>): Prisma__FBPostClient<FBPostGetPayload<T> | Null>;

    fromUserId<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    shareStatus<T extends ShareStatusArgs= {}>(args?: Subset<T, ShareStatusArgs>): Prisma__ShareStatusClient<ShareStatusGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Share base type for findUnique actions
   */
  export type ShareFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findUnique
   */
  export interface ShareFindUniqueArgs extends ShareFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share base type for findFirst actions
   */
  export type ShareFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: Enumerable<ShareScalarFieldEnum>
  }

  /**
   * Share findFirst
   */
  export interface ShareFindFirstArgs extends ShareFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share findMany
   */
  export type ShareFindManyArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * Share create
   */
  export type ShareCreateArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The data needed to create a Share.
     */
    data: XOR<ShareCreateInput, ShareUncheckedCreateInput>
  }


  /**
   * Share createMany
   */
  export type ShareCreateManyArgs = {
    /**
     * The data used to create many Shares.
     */
    data: Enumerable<ShareCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Share update
   */
  export type ShareUpdateArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The data needed to update a Share.
     */
    data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
    /**
     * Choose, which Share to update.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs = {
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput
  }


  /**
   * Share upsert
   */
  export type ShareUpsertArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * The filter to search for the Share to update in case it exists.
     */
    where: ShareWhereUniqueInput
    /**
     * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
     */
    create: XOR<ShareCreateInput, ShareUncheckedCreateInput>
    /**
     * In case the Share was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
  }


  /**
   * Share delete
   */
  export type ShareDeleteArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    /**
     * Filter which Share to delete.
     */
    where: ShareWhereUniqueInput
  }


  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs = {
    /**
     * Filter which Shares to delete
     */
    where?: ShareWhereInput
  }


  /**
   * Share without action
   */
  export type ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
  }



  /**
   * Model Group
   */


  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    groupName: number
    groupImage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    groupName?: true
    groupImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    groupName?: true
    groupImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    groupName?: true
    groupImage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupAggregateArgs = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs = {
    where?: GroupWhereInput
    orderBy?: Enumerable<GroupOrderByWithAggregationInput>
    by: GroupScalarFieldEnum[]
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }


  export type GroupGroupByOutputType = {
    id: number
    groupName: string
    groupImage: string
    createdAt: Date
    updatedAt: Date
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect = {
    id?: boolean
    groupName?: boolean
    groupImage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    GroupOnUser?: boolean | Group$GroupOnUserArgs
    FBPost?: boolean | Group$FBPostArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }


  export type GroupInclude = {
    GroupOnUser?: boolean | Group$GroupOnUserArgs
    FBPost?: boolean | Group$FBPostArgs
    _count?: boolean | GroupCountOutputTypeArgs
  }

  export type GroupGetPayload<S extends boolean | null | undefined | GroupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Group :
    S extends undefined ? never :
    S extends { include: any } & (GroupArgs | GroupFindManyArgs)
    ? Group  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'GroupOnUser' ? Array < GroupOnUserGetPayload<S['include'][P]>>  :
        P extends 'FBPost' ? Array < FBPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupArgs | GroupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'GroupOnUser' ? Array < GroupOnUserGetPayload<S['select'][P]>>  :
        P extends 'FBPost' ? Array < FBPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? GroupCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Group ? Group[P] : never
  } 
      : Group


  type GroupCountArgs = 
    Omit<GroupFindManyArgs, 'select' | 'include'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find one Group that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Group'> extends True ? Prisma__GroupClient<GroupGetPayload<T>> : Prisma__GroupClient<GroupGetPayload<T> | null, null>

    /**
     * Find the first Group that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs>(
      args?: SelectSubset<T, GroupFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupGetPayload<T>>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs>(
      args: SelectSubset<T, GroupCreateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Create many Groups.
     *     @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     *     @example
     *     // Create many Groups
     *     const group = await prisma.group.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupCreateManyArgs>(
      args?: SelectSubset<T, GroupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs>(
      args: SelectSubset<T, GroupDeleteArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs>(
      args: SelectSubset<T, GroupUpdateArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs>(
      args?: SelectSubset<T, GroupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs>(
      args: SelectSubset<T, GroupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs>(
      args: SelectSubset<T, GroupUpsertArgs>
    ): Prisma__GroupClient<GroupGetPayload<T>>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    GroupOnUser<T extends Group$GroupOnUserArgs= {}>(args?: Subset<T, Group$GroupOnUserArgs>): Prisma.PrismaPromise<Array<GroupOnUserGetPayload<T>>| Null>;

    FBPost<T extends Group$FBPostArgs= {}>(args?: Subset<T, Group$FBPostArgs>): Prisma.PrismaPromise<Array<FBPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Group base type for findUnique actions
   */
  export type GroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUnique
   */
  export interface GroupFindUniqueArgs extends GroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group base type for findFirst actions
   */
  export type GroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }

  /**
   * Group findFirst
   */
  export interface GroupFindFirstArgs extends GroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group findMany
   */
  export type GroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: Enumerable<GroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: Enumerable<GroupScalarFieldEnum>
  }


  /**
   * Group create
   */
  export type GroupCreateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }


  /**
   * Group createMany
   */
  export type GroupCreateManyArgs = {
    /**
     * The data used to create many Groups.
     */
    data: Enumerable<GroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Group update
   */
  export type GroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }


  /**
   * Group upsert
   */
  export type GroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }


  /**
   * Group delete
   */
  export type GroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }


  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }


  /**
   * Group.GroupOnUser
   */
  export type Group$GroupOnUserArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    where?: GroupOnUserWhereInput
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    cursor?: GroupOnUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GroupOnUserScalarFieldEnum>
  }


  /**
   * Group.FBPost
   */
  export type Group$FBPostArgs = {
    /**
     * Select specific fields to fetch from the FBPost
     */
    select?: FBPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostInclude | null
    where?: FBPostWhereInput
    orderBy?: Enumerable<FBPostOrderByWithRelationInput>
    cursor?: FBPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBPostScalarFieldEnum>
  }


  /**
   * Group without action
   */
  export type GroupArgs = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupInclude | null
  }



  /**
   * Model GroupOnUser
   */


  export type AggregateGroupOnUser = {
    _count: GroupOnUserCountAggregateOutputType | null
    _avg: GroupOnUserAvgAggregateOutputType | null
    _sum: GroupOnUserSumAggregateOutputType | null
    _min: GroupOnUserMinAggregateOutputType | null
    _max: GroupOnUserMaxAggregateOutputType | null
  }

  export type GroupOnUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    groupId: number | null
  }

  export type GroupOnUserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    groupId: number | null
  }

  export type GroupOnUserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    groupId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupOnUserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    groupId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupOnUserCountAggregateOutputType = {
    id: number
    userId: number
    groupId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupOnUserAvgAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
  }

  export type GroupOnUserSumAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
  }

  export type GroupOnUserMinAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupOnUserMaxAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupOnUserCountAggregateInputType = {
    id?: true
    userId?: true
    groupId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupOnUserAggregateArgs = {
    /**
     * Filter which GroupOnUser to aggregate.
     */
    where?: GroupOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOnUsers to fetch.
     */
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupOnUsers
    **/
    _count?: true | GroupOnUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupOnUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupOnUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupOnUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupOnUserMaxAggregateInputType
  }

  export type GetGroupOnUserAggregateType<T extends GroupOnUserAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupOnUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupOnUser[P]>
      : GetScalarType<T[P], AggregateGroupOnUser[P]>
  }




  export type GroupOnUserGroupByArgs = {
    where?: GroupOnUserWhereInput
    orderBy?: Enumerable<GroupOnUserOrderByWithAggregationInput>
    by: GroupOnUserScalarFieldEnum[]
    having?: GroupOnUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupOnUserCountAggregateInputType | true
    _avg?: GroupOnUserAvgAggregateInputType
    _sum?: GroupOnUserSumAggregateInputType
    _min?: GroupOnUserMinAggregateInputType
    _max?: GroupOnUserMaxAggregateInputType
  }


  export type GroupOnUserGroupByOutputType = {
    id: number
    userId: number
    groupId: number
    createdAt: Date
    updatedAt: Date
    _count: GroupOnUserCountAggregateOutputType | null
    _avg: GroupOnUserAvgAggregateOutputType | null
    _sum: GroupOnUserSumAggregateOutputType | null
    _min: GroupOnUserMinAggregateOutputType | null
    _max: GroupOnUserMaxAggregateOutputType | null
  }

  type GetGroupOnUserGroupByPayload<T extends GroupOnUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GroupOnUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupOnUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupOnUserGroupByOutputType[P]>
            : GetScalarType<T[P], GroupOnUserGroupByOutputType[P]>
        }
      >
    >


  export type GroupOnUserSelect = {
    id?: boolean
    user?: boolean | FBUserArgs
    userId?: boolean
    group?: boolean | GroupArgs
    groupId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type GroupOnUserInclude = {
    user?: boolean | FBUserArgs
    group?: boolean | GroupArgs
  }

  export type GroupOnUserGetPayload<S extends boolean | null | undefined | GroupOnUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GroupOnUser :
    S extends undefined ? never :
    S extends { include: any } & (GroupOnUserArgs | GroupOnUserFindManyArgs)
    ? GroupOnUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? FBUserGetPayload<S['include'][P]> :
        P extends 'group' ? GroupGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GroupOnUserArgs | GroupOnUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? FBUserGetPayload<S['select'][P]> :
        P extends 'group' ? GroupGetPayload<S['select'][P]> :  P extends keyof GroupOnUser ? GroupOnUser[P] : never
  } 
      : GroupOnUser


  type GroupOnUserCountArgs = 
    Omit<GroupOnUserFindManyArgs, 'select' | 'include'> & {
      select?: GroupOnUserCountAggregateInputType | true
    }

  export interface GroupOnUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GroupOnUser that matches the filter.
     * @param {GroupOnUserFindUniqueArgs} args - Arguments to find a GroupOnUser
     * @example
     * // Get one GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupOnUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupOnUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupOnUser'> extends True ? Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>> : Prisma__GroupOnUserClient<GroupOnUserGetPayload<T> | null, null>

    /**
     * Find one GroupOnUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupOnUserFindUniqueOrThrowArgs} args - Arguments to find a GroupOnUser
     * @example
     * // Get one GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupOnUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GroupOnUserFindUniqueOrThrowArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Find the first GroupOnUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserFindFirstArgs} args - Arguments to find a GroupOnUser
     * @example
     * // Get one GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupOnUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupOnUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupOnUser'> extends True ? Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>> : Prisma__GroupOnUserClient<GroupOnUserGetPayload<T> | null, null>

    /**
     * Find the first GroupOnUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserFindFirstOrThrowArgs} args - Arguments to find a GroupOnUser
     * @example
     * // Get one GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupOnUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GroupOnUserFindFirstOrThrowArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Find zero or more GroupOnUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupOnUsers
     * const groupOnUsers = await prisma.groupOnUser.findMany()
     * 
     * // Get first 10 GroupOnUsers
     * const groupOnUsers = await prisma.groupOnUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupOnUserWithIdOnly = await prisma.groupOnUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupOnUserFindManyArgs>(
      args?: SelectSubset<T, GroupOnUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<GroupOnUserGetPayload<T>>>

    /**
     * Create a GroupOnUser.
     * @param {GroupOnUserCreateArgs} args - Arguments to create a GroupOnUser.
     * @example
     * // Create one GroupOnUser
     * const GroupOnUser = await prisma.groupOnUser.create({
     *   data: {
     *     // ... data to create a GroupOnUser
     *   }
     * })
     * 
    **/
    create<T extends GroupOnUserCreateArgs>(
      args: SelectSubset<T, GroupOnUserCreateArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Create many GroupOnUsers.
     *     @param {GroupOnUserCreateManyArgs} args - Arguments to create many GroupOnUsers.
     *     @example
     *     // Create many GroupOnUsers
     *     const groupOnUser = await prisma.groupOnUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GroupOnUserCreateManyArgs>(
      args?: SelectSubset<T, GroupOnUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GroupOnUser.
     * @param {GroupOnUserDeleteArgs} args - Arguments to delete one GroupOnUser.
     * @example
     * // Delete one GroupOnUser
     * const GroupOnUser = await prisma.groupOnUser.delete({
     *   where: {
     *     // ... filter to delete one GroupOnUser
     *   }
     * })
     * 
    **/
    delete<T extends GroupOnUserDeleteArgs>(
      args: SelectSubset<T, GroupOnUserDeleteArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Update one GroupOnUser.
     * @param {GroupOnUserUpdateArgs} args - Arguments to update one GroupOnUser.
     * @example
     * // Update one GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupOnUserUpdateArgs>(
      args: SelectSubset<T, GroupOnUserUpdateArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Delete zero or more GroupOnUsers.
     * @param {GroupOnUserDeleteManyArgs} args - Arguments to filter GroupOnUsers to delete.
     * @example
     * // Delete a few GroupOnUsers
     * const { count } = await prisma.groupOnUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupOnUserDeleteManyArgs>(
      args?: SelectSubset<T, GroupOnUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupOnUsers
     * const groupOnUser = await prisma.groupOnUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupOnUserUpdateManyArgs>(
      args: SelectSubset<T, GroupOnUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupOnUser.
     * @param {GroupOnUserUpsertArgs} args - Arguments to update or create a GroupOnUser.
     * @example
     * // Update or create a GroupOnUser
     * const groupOnUser = await prisma.groupOnUser.upsert({
     *   create: {
     *     // ... data to create a GroupOnUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupOnUser we want to update
     *   }
     * })
    **/
    upsert<T extends GroupOnUserUpsertArgs>(
      args: SelectSubset<T, GroupOnUserUpsertArgs>
    ): Prisma__GroupOnUserClient<GroupOnUserGetPayload<T>>

    /**
     * Count the number of GroupOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserCountArgs} args - Arguments to filter GroupOnUsers to count.
     * @example
     * // Count the number of GroupOnUsers
     * const count = await prisma.groupOnUser.count({
     *   where: {
     *     // ... the filter for the GroupOnUsers we want to count
     *   }
     * })
    **/
    count<T extends GroupOnUserCountArgs>(
      args?: Subset<T, GroupOnUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupOnUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupOnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupOnUserAggregateArgs>(args: Subset<T, GroupOnUserAggregateArgs>): Prisma.PrismaPromise<GetGroupOnUserAggregateType<T>>

    /**
     * Group by GroupOnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOnUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupOnUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupOnUserGroupByArgs['orderBy'] }
        : { orderBy?: GroupOnUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupOnUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupOnUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupOnUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupOnUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    group<T extends GroupArgs= {}>(args?: Subset<T, GroupArgs>): Prisma__GroupClient<GroupGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GroupOnUser base type for findUnique actions
   */
  export type GroupOnUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter, which GroupOnUser to fetch.
     */
    where: GroupOnUserWhereUniqueInput
  }

  /**
   * GroupOnUser findUnique
   */
  export interface GroupOnUserFindUniqueArgs extends GroupOnUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupOnUser findUniqueOrThrow
   */
  export type GroupOnUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter, which GroupOnUser to fetch.
     */
    where: GroupOnUserWhereUniqueInput
  }


  /**
   * GroupOnUser base type for findFirst actions
   */
  export type GroupOnUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter, which GroupOnUser to fetch.
     */
    where?: GroupOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOnUsers to fetch.
     */
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupOnUsers.
     */
    cursor?: GroupOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupOnUsers.
     */
    distinct?: Enumerable<GroupOnUserScalarFieldEnum>
  }

  /**
   * GroupOnUser findFirst
   */
  export interface GroupOnUserFindFirstArgs extends GroupOnUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GroupOnUser findFirstOrThrow
   */
  export type GroupOnUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter, which GroupOnUser to fetch.
     */
    where?: GroupOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOnUsers to fetch.
     */
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupOnUsers.
     */
    cursor?: GroupOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupOnUsers.
     */
    distinct?: Enumerable<GroupOnUserScalarFieldEnum>
  }


  /**
   * GroupOnUser findMany
   */
  export type GroupOnUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter, which GroupOnUsers to fetch.
     */
    where?: GroupOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOnUsers to fetch.
     */
    orderBy?: Enumerable<GroupOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupOnUsers.
     */
    cursor?: GroupOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOnUsers.
     */
    skip?: number
    distinct?: Enumerable<GroupOnUserScalarFieldEnum>
  }


  /**
   * GroupOnUser create
   */
  export type GroupOnUserCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * The data needed to create a GroupOnUser.
     */
    data: XOR<GroupOnUserCreateInput, GroupOnUserUncheckedCreateInput>
  }


  /**
   * GroupOnUser createMany
   */
  export type GroupOnUserCreateManyArgs = {
    /**
     * The data used to create many GroupOnUsers.
     */
    data: Enumerable<GroupOnUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GroupOnUser update
   */
  export type GroupOnUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * The data needed to update a GroupOnUser.
     */
    data: XOR<GroupOnUserUpdateInput, GroupOnUserUncheckedUpdateInput>
    /**
     * Choose, which GroupOnUser to update.
     */
    where: GroupOnUserWhereUniqueInput
  }


  /**
   * GroupOnUser updateMany
   */
  export type GroupOnUserUpdateManyArgs = {
    /**
     * The data used to update GroupOnUsers.
     */
    data: XOR<GroupOnUserUpdateManyMutationInput, GroupOnUserUncheckedUpdateManyInput>
    /**
     * Filter which GroupOnUsers to update
     */
    where?: GroupOnUserWhereInput
  }


  /**
   * GroupOnUser upsert
   */
  export type GroupOnUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * The filter to search for the GroupOnUser to update in case it exists.
     */
    where: GroupOnUserWhereUniqueInput
    /**
     * In case the GroupOnUser found by the `where` argument doesn't exist, create a new GroupOnUser with this data.
     */
    create: XOR<GroupOnUserCreateInput, GroupOnUserUncheckedCreateInput>
    /**
     * In case the GroupOnUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupOnUserUpdateInput, GroupOnUserUncheckedUpdateInput>
  }


  /**
   * GroupOnUser delete
   */
  export type GroupOnUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
    /**
     * Filter which GroupOnUser to delete.
     */
    where: GroupOnUserWhereUniqueInput
  }


  /**
   * GroupOnUser deleteMany
   */
  export type GroupOnUserDeleteManyArgs = {
    /**
     * Filter which GroupOnUsers to delete
     */
    where?: GroupOnUserWhereInput
  }


  /**
   * GroupOnUser without action
   */
  export type GroupOnUserArgs = {
    /**
     * Select specific fields to fetch from the GroupOnUser
     */
    select?: GroupOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOnUserInclude | null
  }



  /**
   * Model LikeType
   */


  export type AggregateLikeType = {
    _count: LikeTypeCountAggregateOutputType | null
    _avg: LikeTypeAvgAggregateOutputType | null
    _sum: LikeTypeSumAggregateOutputType | null
    _min: LikeTypeMinAggregateOutputType | null
    _max: LikeTypeMaxAggregateOutputType | null
  }

  export type LikeTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type LikeTypeSumAggregateOutputType = {
    id: number | null
  }

  export type LikeTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeTypeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LikeTypeAvgAggregateInputType = {
    id?: true
  }

  export type LikeTypeSumAggregateInputType = {
    id?: true
  }

  export type LikeTypeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeTypeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeTypeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LikeTypeAggregateArgs = {
    /**
     * Filter which LikeType to aggregate.
     */
    where?: LikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeTypes to fetch.
     */
    orderBy?: Enumerable<LikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LikeTypes
    **/
    _count?: true | LikeTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikeTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikeTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikeTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikeTypeMaxAggregateInputType
  }

  export type GetLikeTypeAggregateType<T extends LikeTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateLikeType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikeType[P]>
      : GetScalarType<T[P], AggregateLikeType[P]>
  }




  export type LikeTypeGroupByArgs = {
    where?: LikeTypeWhereInput
    orderBy?: Enumerable<LikeTypeOrderByWithAggregationInput>
    by: LikeTypeScalarFieldEnum[]
    having?: LikeTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikeTypeCountAggregateInputType | true
    _avg?: LikeTypeAvgAggregateInputType
    _sum?: LikeTypeSumAggregateInputType
    _min?: LikeTypeMinAggregateInputType
    _max?: LikeTypeMaxAggregateInputType
  }


  export type LikeTypeGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: LikeTypeCountAggregateOutputType | null
    _avg: LikeTypeAvgAggregateOutputType | null
    _sum: LikeTypeSumAggregateOutputType | null
    _min: LikeTypeMinAggregateOutputType | null
    _max: LikeTypeMaxAggregateOutputType | null
  }

  type GetLikeTypeGroupByPayload<T extends LikeTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LikeTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikeTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikeTypeGroupByOutputType[P]>
            : GetScalarType<T[P], LikeTypeGroupByOutputType[P]>
        }
      >
    >


  export type LikeTypeSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Like?: boolean | LikeType$LikeArgs
    _count?: boolean | LikeTypeCountOutputTypeArgs
  }


  export type LikeTypeInclude = {
    Like?: boolean | LikeType$LikeArgs
    _count?: boolean | LikeTypeCountOutputTypeArgs
  }

  export type LikeTypeGetPayload<S extends boolean | null | undefined | LikeTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LikeType :
    S extends undefined ? never :
    S extends { include: any } & (LikeTypeArgs | LikeTypeFindManyArgs)
    ? LikeType  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Like' ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends '_count' ? LikeTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LikeTypeArgs | LikeTypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Like' ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends '_count' ? LikeTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LikeType ? LikeType[P] : never
  } 
      : LikeType


  type LikeTypeCountArgs = 
    Omit<LikeTypeFindManyArgs, 'select' | 'include'> & {
      select?: LikeTypeCountAggregateInputType | true
    }

  export interface LikeTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LikeType that matches the filter.
     * @param {LikeTypeFindUniqueArgs} args - Arguments to find a LikeType
     * @example
     * // Get one LikeType
     * const likeType = await prisma.likeType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikeTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LikeTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LikeType'> extends True ? Prisma__LikeTypeClient<LikeTypeGetPayload<T>> : Prisma__LikeTypeClient<LikeTypeGetPayload<T> | null, null>

    /**
     * Find one LikeType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LikeTypeFindUniqueOrThrowArgs} args - Arguments to find a LikeType
     * @example
     * // Get one LikeType
     * const likeType = await prisma.likeType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LikeTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LikeTypeFindUniqueOrThrowArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Find the first LikeType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeFindFirstArgs} args - Arguments to find a LikeType
     * @example
     * // Get one LikeType
     * const likeType = await prisma.likeType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikeTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LikeTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LikeType'> extends True ? Prisma__LikeTypeClient<LikeTypeGetPayload<T>> : Prisma__LikeTypeClient<LikeTypeGetPayload<T> | null, null>

    /**
     * Find the first LikeType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeFindFirstOrThrowArgs} args - Arguments to find a LikeType
     * @example
     * // Get one LikeType
     * const likeType = await prisma.likeType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LikeTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LikeTypeFindFirstOrThrowArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Find zero or more LikeTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LikeTypes
     * const likeTypes = await prisma.likeType.findMany()
     * 
     * // Get first 10 LikeTypes
     * const likeTypes = await prisma.likeType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeTypeWithIdOnly = await prisma.likeType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikeTypeFindManyArgs>(
      args?: SelectSubset<T, LikeTypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<LikeTypeGetPayload<T>>>

    /**
     * Create a LikeType.
     * @param {LikeTypeCreateArgs} args - Arguments to create a LikeType.
     * @example
     * // Create one LikeType
     * const LikeType = await prisma.likeType.create({
     *   data: {
     *     // ... data to create a LikeType
     *   }
     * })
     * 
    **/
    create<T extends LikeTypeCreateArgs>(
      args: SelectSubset<T, LikeTypeCreateArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Create many LikeTypes.
     *     @param {LikeTypeCreateManyArgs} args - Arguments to create many LikeTypes.
     *     @example
     *     // Create many LikeTypes
     *     const likeType = await prisma.likeType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LikeTypeCreateManyArgs>(
      args?: SelectSubset<T, LikeTypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LikeType.
     * @param {LikeTypeDeleteArgs} args - Arguments to delete one LikeType.
     * @example
     * // Delete one LikeType
     * const LikeType = await prisma.likeType.delete({
     *   where: {
     *     // ... filter to delete one LikeType
     *   }
     * })
     * 
    **/
    delete<T extends LikeTypeDeleteArgs>(
      args: SelectSubset<T, LikeTypeDeleteArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Update one LikeType.
     * @param {LikeTypeUpdateArgs} args - Arguments to update one LikeType.
     * @example
     * // Update one LikeType
     * const likeType = await prisma.likeType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeTypeUpdateArgs>(
      args: SelectSubset<T, LikeTypeUpdateArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Delete zero or more LikeTypes.
     * @param {LikeTypeDeleteManyArgs} args - Arguments to filter LikeTypes to delete.
     * @example
     * // Delete a few LikeTypes
     * const { count } = await prisma.likeType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeTypeDeleteManyArgs>(
      args?: SelectSubset<T, LikeTypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LikeTypes
     * const likeType = await prisma.likeType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeTypeUpdateManyArgs>(
      args: SelectSubset<T, LikeTypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LikeType.
     * @param {LikeTypeUpsertArgs} args - Arguments to update or create a LikeType.
     * @example
     * // Update or create a LikeType
     * const likeType = await prisma.likeType.upsert({
     *   create: {
     *     // ... data to create a LikeType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LikeType we want to update
     *   }
     * })
    **/
    upsert<T extends LikeTypeUpsertArgs>(
      args: SelectSubset<T, LikeTypeUpsertArgs>
    ): Prisma__LikeTypeClient<LikeTypeGetPayload<T>>

    /**
     * Count the number of LikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeCountArgs} args - Arguments to filter LikeTypes to count.
     * @example
     * // Count the number of LikeTypes
     * const count = await prisma.likeType.count({
     *   where: {
     *     // ... the filter for the LikeTypes we want to count
     *   }
     * })
    **/
    count<T extends LikeTypeCountArgs>(
      args?: Subset<T, LikeTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikeTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikeTypeAggregateArgs>(args: Subset<T, LikeTypeAggregateArgs>): Prisma.PrismaPromise<GetLikeTypeAggregateType<T>>

    /**
     * Group by LikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikeTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikeTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikeTypeGroupByArgs['orderBy'] }
        : { orderBy?: LikeTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikeTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikeTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LikeType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikeTypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Like<T extends LikeType$LikeArgs= {}>(args?: Subset<T, LikeType$LikeArgs>): Prisma.PrismaPromise<Array<LikeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LikeType base type for findUnique actions
   */
  export type LikeTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter, which LikeType to fetch.
     */
    where: LikeTypeWhereUniqueInput
  }

  /**
   * LikeType findUnique
   */
  export interface LikeTypeFindUniqueArgs extends LikeTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LikeType findUniqueOrThrow
   */
  export type LikeTypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter, which LikeType to fetch.
     */
    where: LikeTypeWhereUniqueInput
  }


  /**
   * LikeType base type for findFirst actions
   */
  export type LikeTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter, which LikeType to fetch.
     */
    where?: LikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeTypes to fetch.
     */
    orderBy?: Enumerable<LikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeTypes.
     */
    cursor?: LikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeTypes.
     */
    distinct?: Enumerable<LikeTypeScalarFieldEnum>
  }

  /**
   * LikeType findFirst
   */
  export interface LikeTypeFindFirstArgs extends LikeTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LikeType findFirstOrThrow
   */
  export type LikeTypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter, which LikeType to fetch.
     */
    where?: LikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeTypes to fetch.
     */
    orderBy?: Enumerable<LikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LikeTypes.
     */
    cursor?: LikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LikeTypes.
     */
    distinct?: Enumerable<LikeTypeScalarFieldEnum>
  }


  /**
   * LikeType findMany
   */
  export type LikeTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter, which LikeTypes to fetch.
     */
    where?: LikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LikeTypes to fetch.
     */
    orderBy?: Enumerable<LikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LikeTypes.
     */
    cursor?: LikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LikeTypes.
     */
    skip?: number
    distinct?: Enumerable<LikeTypeScalarFieldEnum>
  }


  /**
   * LikeType create
   */
  export type LikeTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * The data needed to create a LikeType.
     */
    data: XOR<LikeTypeCreateInput, LikeTypeUncheckedCreateInput>
  }


  /**
   * LikeType createMany
   */
  export type LikeTypeCreateManyArgs = {
    /**
     * The data used to create many LikeTypes.
     */
    data: Enumerable<LikeTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LikeType update
   */
  export type LikeTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * The data needed to update a LikeType.
     */
    data: XOR<LikeTypeUpdateInput, LikeTypeUncheckedUpdateInput>
    /**
     * Choose, which LikeType to update.
     */
    where: LikeTypeWhereUniqueInput
  }


  /**
   * LikeType updateMany
   */
  export type LikeTypeUpdateManyArgs = {
    /**
     * The data used to update LikeTypes.
     */
    data: XOR<LikeTypeUpdateManyMutationInput, LikeTypeUncheckedUpdateManyInput>
    /**
     * Filter which LikeTypes to update
     */
    where?: LikeTypeWhereInput
  }


  /**
   * LikeType upsert
   */
  export type LikeTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * The filter to search for the LikeType to update in case it exists.
     */
    where: LikeTypeWhereUniqueInput
    /**
     * In case the LikeType found by the `where` argument doesn't exist, create a new LikeType with this data.
     */
    create: XOR<LikeTypeCreateInput, LikeTypeUncheckedCreateInput>
    /**
     * In case the LikeType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikeTypeUpdateInput, LikeTypeUncheckedUpdateInput>
  }


  /**
   * LikeType delete
   */
  export type LikeTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
    /**
     * Filter which LikeType to delete.
     */
    where: LikeTypeWhereUniqueInput
  }


  /**
   * LikeType deleteMany
   */
  export type LikeTypeDeleteManyArgs = {
    /**
     * Filter which LikeTypes to delete
     */
    where?: LikeTypeWhereInput
  }


  /**
   * LikeType.Like
   */
  export type LikeType$LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
     */
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeInclude | null
    where?: LikeWhereInput
    orderBy?: Enumerable<LikeOrderByWithRelationInput>
    cursor?: LikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * LikeType without action
   */
  export type LikeTypeArgs = {
    /**
     * Select specific fields to fetch from the LikeType
     */
    select?: LikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LikeTypeInclude | null
  }



  /**
   * Model ShareStatus
   */


  export type AggregateShareStatus = {
    _count: ShareStatusCountAggregateOutputType | null
    _avg: ShareStatusAvgAggregateOutputType | null
    _sum: ShareStatusSumAggregateOutputType | null
    _min: ShareStatusMinAggregateOutputType | null
    _max: ShareStatusMaxAggregateOutputType | null
  }

  export type ShareStatusAvgAggregateOutputType = {
    id: number | null
  }

  export type ShareStatusSumAggregateOutputType = {
    id: number | null
  }

  export type ShareStatusMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareStatusMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareStatusCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShareStatusAvgAggregateInputType = {
    id?: true
  }

  export type ShareStatusSumAggregateInputType = {
    id?: true
  }

  export type ShareStatusMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareStatusMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareStatusCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShareStatusAggregateArgs = {
    /**
     * Filter which ShareStatus to aggregate.
     */
    where?: ShareStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareStatuses to fetch.
     */
    orderBy?: Enumerable<ShareStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareStatuses
    **/
    _count?: true | ShareStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareStatusMaxAggregateInputType
  }

  export type GetShareStatusAggregateType<T extends ShareStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateShareStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareStatus[P]>
      : GetScalarType<T[P], AggregateShareStatus[P]>
  }




  export type ShareStatusGroupByArgs = {
    where?: ShareStatusWhereInput
    orderBy?: Enumerable<ShareStatusOrderByWithAggregationInput>
    by: ShareStatusScalarFieldEnum[]
    having?: ShareStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareStatusCountAggregateInputType | true
    _avg?: ShareStatusAvgAggregateInputType
    _sum?: ShareStatusSumAggregateInputType
    _min?: ShareStatusMinAggregateInputType
    _max?: ShareStatusMaxAggregateInputType
  }


  export type ShareStatusGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: ShareStatusCountAggregateOutputType | null
    _avg: ShareStatusAvgAggregateOutputType | null
    _sum: ShareStatusSumAggregateOutputType | null
    _min: ShareStatusMinAggregateOutputType | null
    _max: ShareStatusMaxAggregateOutputType | null
  }

  type GetShareStatusGroupByPayload<T extends ShareStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ShareStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareStatusGroupByOutputType[P]>
            : GetScalarType<T[P], ShareStatusGroupByOutputType[P]>
        }
      >
    >


  export type ShareStatusSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Share?: boolean | ShareStatus$ShareArgs
    _count?: boolean | ShareStatusCountOutputTypeArgs
  }


  export type ShareStatusInclude = {
    Share?: boolean | ShareStatus$ShareArgs
    _count?: boolean | ShareStatusCountOutputTypeArgs
  }

  export type ShareStatusGetPayload<S extends boolean | null | undefined | ShareStatusArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ShareStatus :
    S extends undefined ? never :
    S extends { include: any } & (ShareStatusArgs | ShareStatusFindManyArgs)
    ? ShareStatus  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Share' ? Array < ShareGetPayload<S['include'][P]>>  :
        P extends '_count' ? ShareStatusCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ShareStatusArgs | ShareStatusFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Share' ? Array < ShareGetPayload<S['select'][P]>>  :
        P extends '_count' ? ShareStatusCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof ShareStatus ? ShareStatus[P] : never
  } 
      : ShareStatus


  type ShareStatusCountArgs = 
    Omit<ShareStatusFindManyArgs, 'select' | 'include'> & {
      select?: ShareStatusCountAggregateInputType | true
    }

  export interface ShareStatusDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ShareStatus that matches the filter.
     * @param {ShareStatusFindUniqueArgs} args - Arguments to find a ShareStatus
     * @example
     * // Get one ShareStatus
     * const shareStatus = await prisma.shareStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ShareStatusFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ShareStatusFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ShareStatus'> extends True ? Prisma__ShareStatusClient<ShareStatusGetPayload<T>> : Prisma__ShareStatusClient<ShareStatusGetPayload<T> | null, null>

    /**
     * Find one ShareStatus that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ShareStatusFindUniqueOrThrowArgs} args - Arguments to find a ShareStatus
     * @example
     * // Get one ShareStatus
     * const shareStatus = await prisma.shareStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ShareStatusFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ShareStatusFindUniqueOrThrowArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Find the first ShareStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusFindFirstArgs} args - Arguments to find a ShareStatus
     * @example
     * // Get one ShareStatus
     * const shareStatus = await prisma.shareStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ShareStatusFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ShareStatusFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ShareStatus'> extends True ? Prisma__ShareStatusClient<ShareStatusGetPayload<T>> : Prisma__ShareStatusClient<ShareStatusGetPayload<T> | null, null>

    /**
     * Find the first ShareStatus that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusFindFirstOrThrowArgs} args - Arguments to find a ShareStatus
     * @example
     * // Get one ShareStatus
     * const shareStatus = await prisma.shareStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ShareStatusFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ShareStatusFindFirstOrThrowArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Find zero or more ShareStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareStatuses
     * const shareStatuses = await prisma.shareStatus.findMany()
     * 
     * // Get first 10 ShareStatuses
     * const shareStatuses = await prisma.shareStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareStatusWithIdOnly = await prisma.shareStatus.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ShareStatusFindManyArgs>(
      args?: SelectSubset<T, ShareStatusFindManyArgs>
    ): Prisma.PrismaPromise<Array<ShareStatusGetPayload<T>>>

    /**
     * Create a ShareStatus.
     * @param {ShareStatusCreateArgs} args - Arguments to create a ShareStatus.
     * @example
     * // Create one ShareStatus
     * const ShareStatus = await prisma.shareStatus.create({
     *   data: {
     *     // ... data to create a ShareStatus
     *   }
     * })
     * 
    **/
    create<T extends ShareStatusCreateArgs>(
      args: SelectSubset<T, ShareStatusCreateArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Create many ShareStatuses.
     *     @param {ShareStatusCreateManyArgs} args - Arguments to create many ShareStatuses.
     *     @example
     *     // Create many ShareStatuses
     *     const shareStatus = await prisma.shareStatus.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ShareStatusCreateManyArgs>(
      args?: SelectSubset<T, ShareStatusCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShareStatus.
     * @param {ShareStatusDeleteArgs} args - Arguments to delete one ShareStatus.
     * @example
     * // Delete one ShareStatus
     * const ShareStatus = await prisma.shareStatus.delete({
     *   where: {
     *     // ... filter to delete one ShareStatus
     *   }
     * })
     * 
    **/
    delete<T extends ShareStatusDeleteArgs>(
      args: SelectSubset<T, ShareStatusDeleteArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Update one ShareStatus.
     * @param {ShareStatusUpdateArgs} args - Arguments to update one ShareStatus.
     * @example
     * // Update one ShareStatus
     * const shareStatus = await prisma.shareStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ShareStatusUpdateArgs>(
      args: SelectSubset<T, ShareStatusUpdateArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Delete zero or more ShareStatuses.
     * @param {ShareStatusDeleteManyArgs} args - Arguments to filter ShareStatuses to delete.
     * @example
     * // Delete a few ShareStatuses
     * const { count } = await prisma.shareStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ShareStatusDeleteManyArgs>(
      args?: SelectSubset<T, ShareStatusDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareStatuses
     * const shareStatus = await prisma.shareStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ShareStatusUpdateManyArgs>(
      args: SelectSubset<T, ShareStatusUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareStatus.
     * @param {ShareStatusUpsertArgs} args - Arguments to update or create a ShareStatus.
     * @example
     * // Update or create a ShareStatus
     * const shareStatus = await prisma.shareStatus.upsert({
     *   create: {
     *     // ... data to create a ShareStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareStatus we want to update
     *   }
     * })
    **/
    upsert<T extends ShareStatusUpsertArgs>(
      args: SelectSubset<T, ShareStatusUpsertArgs>
    ): Prisma__ShareStatusClient<ShareStatusGetPayload<T>>

    /**
     * Count the number of ShareStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusCountArgs} args - Arguments to filter ShareStatuses to count.
     * @example
     * // Count the number of ShareStatuses
     * const count = await prisma.shareStatus.count({
     *   where: {
     *     // ... the filter for the ShareStatuses we want to count
     *   }
     * })
    **/
    count<T extends ShareStatusCountArgs>(
      args?: Subset<T, ShareStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareStatusAggregateArgs>(args: Subset<T, ShareStatusAggregateArgs>): Prisma.PrismaPromise<GetShareStatusAggregateType<T>>

    /**
     * Group by ShareStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareStatusGroupByArgs['orderBy'] }
        : { orderBy?: ShareStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ShareStatusClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Share<T extends ShareStatus$ShareArgs= {}>(args?: Subset<T, ShareStatus$ShareArgs>): Prisma.PrismaPromise<Array<ShareGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ShareStatus base type for findUnique actions
   */
  export type ShareStatusFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter, which ShareStatus to fetch.
     */
    where: ShareStatusWhereUniqueInput
  }

  /**
   * ShareStatus findUnique
   */
  export interface ShareStatusFindUniqueArgs extends ShareStatusFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShareStatus findUniqueOrThrow
   */
  export type ShareStatusFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter, which ShareStatus to fetch.
     */
    where: ShareStatusWhereUniqueInput
  }


  /**
   * ShareStatus base type for findFirst actions
   */
  export type ShareStatusFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter, which ShareStatus to fetch.
     */
    where?: ShareStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareStatuses to fetch.
     */
    orderBy?: Enumerable<ShareStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareStatuses.
     */
    cursor?: ShareStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareStatuses.
     */
    distinct?: Enumerable<ShareStatusScalarFieldEnum>
  }

  /**
   * ShareStatus findFirst
   */
  export interface ShareStatusFindFirstArgs extends ShareStatusFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ShareStatus findFirstOrThrow
   */
  export type ShareStatusFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter, which ShareStatus to fetch.
     */
    where?: ShareStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareStatuses to fetch.
     */
    orderBy?: Enumerable<ShareStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareStatuses.
     */
    cursor?: ShareStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareStatuses.
     */
    distinct?: Enumerable<ShareStatusScalarFieldEnum>
  }


  /**
   * ShareStatus findMany
   */
  export type ShareStatusFindManyArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter, which ShareStatuses to fetch.
     */
    where?: ShareStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareStatuses to fetch.
     */
    orderBy?: Enumerable<ShareStatusOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareStatuses.
     */
    cursor?: ShareStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareStatuses.
     */
    skip?: number
    distinct?: Enumerable<ShareStatusScalarFieldEnum>
  }


  /**
   * ShareStatus create
   */
  export type ShareStatusCreateArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * The data needed to create a ShareStatus.
     */
    data: XOR<ShareStatusCreateInput, ShareStatusUncheckedCreateInput>
  }


  /**
   * ShareStatus createMany
   */
  export type ShareStatusCreateManyArgs = {
    /**
     * The data used to create many ShareStatuses.
     */
    data: Enumerable<ShareStatusCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ShareStatus update
   */
  export type ShareStatusUpdateArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * The data needed to update a ShareStatus.
     */
    data: XOR<ShareStatusUpdateInput, ShareStatusUncheckedUpdateInput>
    /**
     * Choose, which ShareStatus to update.
     */
    where: ShareStatusWhereUniqueInput
  }


  /**
   * ShareStatus updateMany
   */
  export type ShareStatusUpdateManyArgs = {
    /**
     * The data used to update ShareStatuses.
     */
    data: XOR<ShareStatusUpdateManyMutationInput, ShareStatusUncheckedUpdateManyInput>
    /**
     * Filter which ShareStatuses to update
     */
    where?: ShareStatusWhereInput
  }


  /**
   * ShareStatus upsert
   */
  export type ShareStatusUpsertArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * The filter to search for the ShareStatus to update in case it exists.
     */
    where: ShareStatusWhereUniqueInput
    /**
     * In case the ShareStatus found by the `where` argument doesn't exist, create a new ShareStatus with this data.
     */
    create: XOR<ShareStatusCreateInput, ShareStatusUncheckedCreateInput>
    /**
     * In case the ShareStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareStatusUpdateInput, ShareStatusUncheckedUpdateInput>
  }


  /**
   * ShareStatus delete
   */
  export type ShareStatusDeleteArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
    /**
     * Filter which ShareStatus to delete.
     */
    where: ShareStatusWhereUniqueInput
  }


  /**
   * ShareStatus deleteMany
   */
  export type ShareStatusDeleteManyArgs = {
    /**
     * Filter which ShareStatuses to delete
     */
    where?: ShareStatusWhereInput
  }


  /**
   * ShareStatus.Share
   */
  export type ShareStatus$ShareArgs = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareInclude | null
    where?: ShareWhereInput
    orderBy?: Enumerable<ShareOrderByWithRelationInput>
    cursor?: ShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ShareScalarFieldEnum>
  }


  /**
   * ShareStatus without action
   */
  export type ShareStatusArgs = {
    /**
     * Select specific fields to fetch from the ShareStatus
     */
    select?: ShareStatusSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ShareStatusInclude | null
  }



  /**
   * Model FBDirectMsg
   */


  export type AggregateFBDirectMsg = {
    _count: FBDirectMsgCountAggregateOutputType | null
    _avg: FBDirectMsgAvgAggregateOutputType | null
    _sum: FBDirectMsgSumAggregateOutputType | null
    _min: FBDirectMsgMinAggregateOutputType | null
    _max: FBDirectMsgMaxAggregateOutputType | null
  }

  export type FBDirectMsgAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FBDirectMsgSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FBDirectMsgMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    msgDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBDirectMsgMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    msgDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBDirectMsgCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    msgDetail: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FBDirectMsgAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FBDirectMsgSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FBDirectMsgMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBDirectMsgMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBDirectMsgCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FBDirectMsgAggregateArgs = {
    /**
     * Filter which FBDirectMsg to aggregate.
     */
    where?: FBDirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBDirectMsgs to fetch.
     */
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FBDirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBDirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBDirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FBDirectMsgs
    **/
    _count?: true | FBDirectMsgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FBDirectMsgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FBDirectMsgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FBDirectMsgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FBDirectMsgMaxAggregateInputType
  }

  export type GetFBDirectMsgAggregateType<T extends FBDirectMsgAggregateArgs> = {
        [P in keyof T & keyof AggregateFBDirectMsg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFBDirectMsg[P]>
      : GetScalarType<T[P], AggregateFBDirectMsg[P]>
  }




  export type FBDirectMsgGroupByArgs = {
    where?: FBDirectMsgWhereInput
    orderBy?: Enumerable<FBDirectMsgOrderByWithAggregationInput>
    by: FBDirectMsgScalarFieldEnum[]
    having?: FBDirectMsgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FBDirectMsgCountAggregateInputType | true
    _avg?: FBDirectMsgAvgAggregateInputType
    _sum?: FBDirectMsgSumAggregateInputType
    _min?: FBDirectMsgMinAggregateInputType
    _max?: FBDirectMsgMaxAggregateInputType
  }


  export type FBDirectMsgGroupByOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt: Date
    updatedAt: Date
    _count: FBDirectMsgCountAggregateOutputType | null
    _avg: FBDirectMsgAvgAggregateOutputType | null
    _sum: FBDirectMsgSumAggregateOutputType | null
    _min: FBDirectMsgMinAggregateOutputType | null
    _max: FBDirectMsgMaxAggregateOutputType | null
  }

  type GetFBDirectMsgGroupByPayload<T extends FBDirectMsgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FBDirectMsgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FBDirectMsgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FBDirectMsgGroupByOutputType[P]>
            : GetScalarType<T[P], FBDirectMsgGroupByOutputType[P]>
        }
      >
    >


  export type FBDirectMsgSelect = {
    id?: boolean
    from?: boolean | FBUserArgs
    fromUserId?: boolean
    to?: boolean | FBUserArgs
    toUserId?: boolean
    msgDetail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FBDirectMsgInclude = {
    from?: boolean | FBUserArgs
    to?: boolean | FBUserArgs
  }

  export type FBDirectMsgGetPayload<S extends boolean | null | undefined | FBDirectMsgArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBDirectMsg :
    S extends undefined ? never :
    S extends { include: any } & (FBDirectMsgArgs | FBDirectMsgFindManyArgs)
    ? FBDirectMsg  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'from' ? FBUserGetPayload<S['include'][P]> :
        P extends 'to' ? FBUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FBDirectMsgArgs | FBDirectMsgFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'from' ? FBUserGetPayload<S['select'][P]> :
        P extends 'to' ? FBUserGetPayload<S['select'][P]> :  P extends keyof FBDirectMsg ? FBDirectMsg[P] : never
  } 
      : FBDirectMsg


  type FBDirectMsgCountArgs = 
    Omit<FBDirectMsgFindManyArgs, 'select' | 'include'> & {
      select?: FBDirectMsgCountAggregateInputType | true
    }

  export interface FBDirectMsgDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FBDirectMsg that matches the filter.
     * @param {FBDirectMsgFindUniqueArgs} args - Arguments to find a FBDirectMsg
     * @example
     * // Get one FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FBDirectMsgFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FBDirectMsgFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FBDirectMsg'> extends True ? Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>> : Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T> | null, null>

    /**
     * Find one FBDirectMsg that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FBDirectMsgFindUniqueOrThrowArgs} args - Arguments to find a FBDirectMsg
     * @example
     * // Get one FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FBDirectMsgFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FBDirectMsgFindUniqueOrThrowArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Find the first FBDirectMsg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgFindFirstArgs} args - Arguments to find a FBDirectMsg
     * @example
     * // Get one FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FBDirectMsgFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FBDirectMsgFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FBDirectMsg'> extends True ? Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>> : Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T> | null, null>

    /**
     * Find the first FBDirectMsg that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgFindFirstOrThrowArgs} args - Arguments to find a FBDirectMsg
     * @example
     * // Get one FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FBDirectMsgFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FBDirectMsgFindFirstOrThrowArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Find zero or more FBDirectMsgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FBDirectMsgs
     * const fBDirectMsgs = await prisma.fBDirectMsg.findMany()
     * 
     * // Get first 10 FBDirectMsgs
     * const fBDirectMsgs = await prisma.fBDirectMsg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fBDirectMsgWithIdOnly = await prisma.fBDirectMsg.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FBDirectMsgFindManyArgs>(
      args?: SelectSubset<T, FBDirectMsgFindManyArgs>
    ): Prisma.PrismaPromise<Array<FBDirectMsgGetPayload<T>>>

    /**
     * Create a FBDirectMsg.
     * @param {FBDirectMsgCreateArgs} args - Arguments to create a FBDirectMsg.
     * @example
     * // Create one FBDirectMsg
     * const FBDirectMsg = await prisma.fBDirectMsg.create({
     *   data: {
     *     // ... data to create a FBDirectMsg
     *   }
     * })
     * 
    **/
    create<T extends FBDirectMsgCreateArgs>(
      args: SelectSubset<T, FBDirectMsgCreateArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Create many FBDirectMsgs.
     *     @param {FBDirectMsgCreateManyArgs} args - Arguments to create many FBDirectMsgs.
     *     @example
     *     // Create many FBDirectMsgs
     *     const fBDirectMsg = await prisma.fBDirectMsg.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FBDirectMsgCreateManyArgs>(
      args?: SelectSubset<T, FBDirectMsgCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FBDirectMsg.
     * @param {FBDirectMsgDeleteArgs} args - Arguments to delete one FBDirectMsg.
     * @example
     * // Delete one FBDirectMsg
     * const FBDirectMsg = await prisma.fBDirectMsg.delete({
     *   where: {
     *     // ... filter to delete one FBDirectMsg
     *   }
     * })
     * 
    **/
    delete<T extends FBDirectMsgDeleteArgs>(
      args: SelectSubset<T, FBDirectMsgDeleteArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Update one FBDirectMsg.
     * @param {FBDirectMsgUpdateArgs} args - Arguments to update one FBDirectMsg.
     * @example
     * // Update one FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FBDirectMsgUpdateArgs>(
      args: SelectSubset<T, FBDirectMsgUpdateArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Delete zero or more FBDirectMsgs.
     * @param {FBDirectMsgDeleteManyArgs} args - Arguments to filter FBDirectMsgs to delete.
     * @example
     * // Delete a few FBDirectMsgs
     * const { count } = await prisma.fBDirectMsg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FBDirectMsgDeleteManyArgs>(
      args?: SelectSubset<T, FBDirectMsgDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FBDirectMsgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FBDirectMsgs
     * const fBDirectMsg = await prisma.fBDirectMsg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FBDirectMsgUpdateManyArgs>(
      args: SelectSubset<T, FBDirectMsgUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FBDirectMsg.
     * @param {FBDirectMsgUpsertArgs} args - Arguments to update or create a FBDirectMsg.
     * @example
     * // Update or create a FBDirectMsg
     * const fBDirectMsg = await prisma.fBDirectMsg.upsert({
     *   create: {
     *     // ... data to create a FBDirectMsg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FBDirectMsg we want to update
     *   }
     * })
    **/
    upsert<T extends FBDirectMsgUpsertArgs>(
      args: SelectSubset<T, FBDirectMsgUpsertArgs>
    ): Prisma__FBDirectMsgClient<FBDirectMsgGetPayload<T>>

    /**
     * Count the number of FBDirectMsgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgCountArgs} args - Arguments to filter FBDirectMsgs to count.
     * @example
     * // Count the number of FBDirectMsgs
     * const count = await prisma.fBDirectMsg.count({
     *   where: {
     *     // ... the filter for the FBDirectMsgs we want to count
     *   }
     * })
    **/
    count<T extends FBDirectMsgCountArgs>(
      args?: Subset<T, FBDirectMsgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FBDirectMsgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FBDirectMsg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FBDirectMsgAggregateArgs>(args: Subset<T, FBDirectMsgAggregateArgs>): Prisma.PrismaPromise<GetFBDirectMsgAggregateType<T>>

    /**
     * Group by FBDirectMsg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBDirectMsgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FBDirectMsgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FBDirectMsgGroupByArgs['orderBy'] }
        : { orderBy?: FBDirectMsgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FBDirectMsgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFBDirectMsgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FBDirectMsg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FBDirectMsgClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    from<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    to<T extends FBUserArgs= {}>(args?: Subset<T, FBUserArgs>): Prisma__FBUserClient<FBUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FBDirectMsg base type for findUnique actions
   */
  export type FBDirectMsgFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter, which FBDirectMsg to fetch.
     */
    where: FBDirectMsgWhereUniqueInput
  }

  /**
   * FBDirectMsg findUnique
   */
  export interface FBDirectMsgFindUniqueArgs extends FBDirectMsgFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBDirectMsg findUniqueOrThrow
   */
  export type FBDirectMsgFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter, which FBDirectMsg to fetch.
     */
    where: FBDirectMsgWhereUniqueInput
  }


  /**
   * FBDirectMsg base type for findFirst actions
   */
  export type FBDirectMsgFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter, which FBDirectMsg to fetch.
     */
    where?: FBDirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBDirectMsgs to fetch.
     */
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBDirectMsgs.
     */
    cursor?: FBDirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBDirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBDirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBDirectMsgs.
     */
    distinct?: Enumerable<FBDirectMsgScalarFieldEnum>
  }

  /**
   * FBDirectMsg findFirst
   */
  export interface FBDirectMsgFindFirstArgs extends FBDirectMsgFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBDirectMsg findFirstOrThrow
   */
  export type FBDirectMsgFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter, which FBDirectMsg to fetch.
     */
    where?: FBDirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBDirectMsgs to fetch.
     */
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBDirectMsgs.
     */
    cursor?: FBDirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBDirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBDirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBDirectMsgs.
     */
    distinct?: Enumerable<FBDirectMsgScalarFieldEnum>
  }


  /**
   * FBDirectMsg findMany
   */
  export type FBDirectMsgFindManyArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter, which FBDirectMsgs to fetch.
     */
    where?: FBDirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBDirectMsgs to fetch.
     */
    orderBy?: Enumerable<FBDirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FBDirectMsgs.
     */
    cursor?: FBDirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBDirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBDirectMsgs.
     */
    skip?: number
    distinct?: Enumerable<FBDirectMsgScalarFieldEnum>
  }


  /**
   * FBDirectMsg create
   */
  export type FBDirectMsgCreateArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * The data needed to create a FBDirectMsg.
     */
    data: XOR<FBDirectMsgCreateInput, FBDirectMsgUncheckedCreateInput>
  }


  /**
   * FBDirectMsg createMany
   */
  export type FBDirectMsgCreateManyArgs = {
    /**
     * The data used to create many FBDirectMsgs.
     */
    data: Enumerable<FBDirectMsgCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FBDirectMsg update
   */
  export type FBDirectMsgUpdateArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * The data needed to update a FBDirectMsg.
     */
    data: XOR<FBDirectMsgUpdateInput, FBDirectMsgUncheckedUpdateInput>
    /**
     * Choose, which FBDirectMsg to update.
     */
    where: FBDirectMsgWhereUniqueInput
  }


  /**
   * FBDirectMsg updateMany
   */
  export type FBDirectMsgUpdateManyArgs = {
    /**
     * The data used to update FBDirectMsgs.
     */
    data: XOR<FBDirectMsgUpdateManyMutationInput, FBDirectMsgUncheckedUpdateManyInput>
    /**
     * Filter which FBDirectMsgs to update
     */
    where?: FBDirectMsgWhereInput
  }


  /**
   * FBDirectMsg upsert
   */
  export type FBDirectMsgUpsertArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * The filter to search for the FBDirectMsg to update in case it exists.
     */
    where: FBDirectMsgWhereUniqueInput
    /**
     * In case the FBDirectMsg found by the `where` argument doesn't exist, create a new FBDirectMsg with this data.
     */
    create: XOR<FBDirectMsgCreateInput, FBDirectMsgUncheckedCreateInput>
    /**
     * In case the FBDirectMsg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FBDirectMsgUpdateInput, FBDirectMsgUncheckedUpdateInput>
  }


  /**
   * FBDirectMsg delete
   */
  export type FBDirectMsgDeleteArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
    /**
     * Filter which FBDirectMsg to delete.
     */
    where: FBDirectMsgWhereUniqueInput
  }


  /**
   * FBDirectMsg deleteMany
   */
  export type FBDirectMsgDeleteManyArgs = {
    /**
     * Filter which FBDirectMsgs to delete
     */
    where?: FBDirectMsgWhereInput
  }


  /**
   * FBDirectMsg without action
   */
  export type FBDirectMsgArgs = {
    /**
     * Select specific fields to fetch from the FBDirectMsg
     */
    select?: FBDirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBDirectMsgInclude | null
  }



  /**
   * Model FBHashtag
   */


  export type AggregateFBHashtag = {
    _count: FBHashtagCountAggregateOutputType | null
    _avg: FBHashtagAvgAggregateOutputType | null
    _sum: FBHashtagSumAggregateOutputType | null
    _min: FBHashtagMinAggregateOutputType | null
    _max: FBHashtagMaxAggregateOutputType | null
  }

  export type FBHashtagAvgAggregateOutputType = {
    id: number | null
  }

  export type FBHashtagSumAggregateOutputType = {
    id: number | null
  }

  export type FBHashtagMinAggregateOutputType = {
    id: number | null
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBHashtagMaxAggregateOutputType = {
    id: number | null
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBHashtagCountAggregateOutputType = {
    id: number
    hashtag: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FBHashtagAvgAggregateInputType = {
    id?: true
  }

  export type FBHashtagSumAggregateInputType = {
    id?: true
  }

  export type FBHashtagMinAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBHashtagMaxAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBHashtagCountAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FBHashtagAggregateArgs = {
    /**
     * Filter which FBHashtag to aggregate.
     */
    where?: FBHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBHashtags to fetch.
     */
    orderBy?: Enumerable<FBHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FBHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FBHashtags
    **/
    _count?: true | FBHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FBHashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FBHashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FBHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FBHashtagMaxAggregateInputType
  }

  export type GetFBHashtagAggregateType<T extends FBHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregateFBHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFBHashtag[P]>
      : GetScalarType<T[P], AggregateFBHashtag[P]>
  }




  export type FBHashtagGroupByArgs = {
    where?: FBHashtagWhereInput
    orderBy?: Enumerable<FBHashtagOrderByWithAggregationInput>
    by: FBHashtagScalarFieldEnum[]
    having?: FBHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FBHashtagCountAggregateInputType | true
    _avg?: FBHashtagAvgAggregateInputType
    _sum?: FBHashtagSumAggregateInputType
    _min?: FBHashtagMinAggregateInputType
    _max?: FBHashtagMaxAggregateInputType
  }


  export type FBHashtagGroupByOutputType = {
    id: number
    hashtag: string
    createdAt: Date
    updatedAt: Date
    _count: FBHashtagCountAggregateOutputType | null
    _avg: FBHashtagAvgAggregateOutputType | null
    _sum: FBHashtagSumAggregateOutputType | null
    _min: FBHashtagMinAggregateOutputType | null
    _max: FBHashtagMaxAggregateOutputType | null
  }

  type GetFBHashtagGroupByPayload<T extends FBHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FBHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FBHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FBHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], FBHashtagGroupByOutputType[P]>
        }
      >
    >


  export type FBHashtagSelect = {
    id?: boolean
    hashtag?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    PostOnHashtag?: boolean | FBHashtag$PostOnHashtagArgs
    _count?: boolean | FBHashtagCountOutputTypeArgs
  }


  export type FBHashtagInclude = {
    PostOnHashtag?: boolean | FBHashtag$PostOnHashtagArgs
    _count?: boolean | FBHashtagCountOutputTypeArgs
  }

  export type FBHashtagGetPayload<S extends boolean | null | undefined | FBHashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBHashtag :
    S extends undefined ? never :
    S extends { include: any } & (FBHashtagArgs | FBHashtagFindManyArgs)
    ? FBHashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'PostOnHashtag' ? Array < FBPostOnHashtagGetPayload<S['include'][P]>>  :
        P extends '_count' ? FBHashtagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FBHashtagArgs | FBHashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'PostOnHashtag' ? Array < FBPostOnHashtagGetPayload<S['select'][P]>>  :
        P extends '_count' ? FBHashtagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FBHashtag ? FBHashtag[P] : never
  } 
      : FBHashtag


  type FBHashtagCountArgs = 
    Omit<FBHashtagFindManyArgs, 'select' | 'include'> & {
      select?: FBHashtagCountAggregateInputType | true
    }

  export interface FBHashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FBHashtag that matches the filter.
     * @param {FBHashtagFindUniqueArgs} args - Arguments to find a FBHashtag
     * @example
     * // Get one FBHashtag
     * const fBHashtag = await prisma.fBHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FBHashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FBHashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FBHashtag'> extends True ? Prisma__FBHashtagClient<FBHashtagGetPayload<T>> : Prisma__FBHashtagClient<FBHashtagGetPayload<T> | null, null>

    /**
     * Find one FBHashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FBHashtagFindUniqueOrThrowArgs} args - Arguments to find a FBHashtag
     * @example
     * // Get one FBHashtag
     * const fBHashtag = await prisma.fBHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FBHashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FBHashtagFindUniqueOrThrowArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Find the first FBHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagFindFirstArgs} args - Arguments to find a FBHashtag
     * @example
     * // Get one FBHashtag
     * const fBHashtag = await prisma.fBHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FBHashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FBHashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FBHashtag'> extends True ? Prisma__FBHashtagClient<FBHashtagGetPayload<T>> : Prisma__FBHashtagClient<FBHashtagGetPayload<T> | null, null>

    /**
     * Find the first FBHashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagFindFirstOrThrowArgs} args - Arguments to find a FBHashtag
     * @example
     * // Get one FBHashtag
     * const fBHashtag = await prisma.fBHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FBHashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FBHashtagFindFirstOrThrowArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Find zero or more FBHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FBHashtags
     * const fBHashtags = await prisma.fBHashtag.findMany()
     * 
     * // Get first 10 FBHashtags
     * const fBHashtags = await prisma.fBHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fBHashtagWithIdOnly = await prisma.fBHashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FBHashtagFindManyArgs>(
      args?: SelectSubset<T, FBHashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<FBHashtagGetPayload<T>>>

    /**
     * Create a FBHashtag.
     * @param {FBHashtagCreateArgs} args - Arguments to create a FBHashtag.
     * @example
     * // Create one FBHashtag
     * const FBHashtag = await prisma.fBHashtag.create({
     *   data: {
     *     // ... data to create a FBHashtag
     *   }
     * })
     * 
    **/
    create<T extends FBHashtagCreateArgs>(
      args: SelectSubset<T, FBHashtagCreateArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Create many FBHashtags.
     *     @param {FBHashtagCreateManyArgs} args - Arguments to create many FBHashtags.
     *     @example
     *     // Create many FBHashtags
     *     const fBHashtag = await prisma.fBHashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FBHashtagCreateManyArgs>(
      args?: SelectSubset<T, FBHashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FBHashtag.
     * @param {FBHashtagDeleteArgs} args - Arguments to delete one FBHashtag.
     * @example
     * // Delete one FBHashtag
     * const FBHashtag = await prisma.fBHashtag.delete({
     *   where: {
     *     // ... filter to delete one FBHashtag
     *   }
     * })
     * 
    **/
    delete<T extends FBHashtagDeleteArgs>(
      args: SelectSubset<T, FBHashtagDeleteArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Update one FBHashtag.
     * @param {FBHashtagUpdateArgs} args - Arguments to update one FBHashtag.
     * @example
     * // Update one FBHashtag
     * const fBHashtag = await prisma.fBHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FBHashtagUpdateArgs>(
      args: SelectSubset<T, FBHashtagUpdateArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Delete zero or more FBHashtags.
     * @param {FBHashtagDeleteManyArgs} args - Arguments to filter FBHashtags to delete.
     * @example
     * // Delete a few FBHashtags
     * const { count } = await prisma.fBHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FBHashtagDeleteManyArgs>(
      args?: SelectSubset<T, FBHashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FBHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FBHashtags
     * const fBHashtag = await prisma.fBHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FBHashtagUpdateManyArgs>(
      args: SelectSubset<T, FBHashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FBHashtag.
     * @param {FBHashtagUpsertArgs} args - Arguments to update or create a FBHashtag.
     * @example
     * // Update or create a FBHashtag
     * const fBHashtag = await prisma.fBHashtag.upsert({
     *   create: {
     *     // ... data to create a FBHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FBHashtag we want to update
     *   }
     * })
    **/
    upsert<T extends FBHashtagUpsertArgs>(
      args: SelectSubset<T, FBHashtagUpsertArgs>
    ): Prisma__FBHashtagClient<FBHashtagGetPayload<T>>

    /**
     * Count the number of FBHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagCountArgs} args - Arguments to filter FBHashtags to count.
     * @example
     * // Count the number of FBHashtags
     * const count = await prisma.fBHashtag.count({
     *   where: {
     *     // ... the filter for the FBHashtags we want to count
     *   }
     * })
    **/
    count<T extends FBHashtagCountArgs>(
      args?: Subset<T, FBHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FBHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FBHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FBHashtagAggregateArgs>(args: Subset<T, FBHashtagAggregateArgs>): Prisma.PrismaPromise<GetFBHashtagAggregateType<T>>

    /**
     * Group by FBHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FBHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FBHashtagGroupByArgs['orderBy'] }
        : { orderBy?: FBHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FBHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFBHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FBHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FBHashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    PostOnHashtag<T extends FBHashtag$PostOnHashtagArgs= {}>(args?: Subset<T, FBHashtag$PostOnHashtagArgs>): Prisma.PrismaPromise<Array<FBPostOnHashtagGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FBHashtag base type for findUnique actions
   */
  export type FBHashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter, which FBHashtag to fetch.
     */
    where: FBHashtagWhereUniqueInput
  }

  /**
   * FBHashtag findUnique
   */
  export interface FBHashtagFindUniqueArgs extends FBHashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBHashtag findUniqueOrThrow
   */
  export type FBHashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter, which FBHashtag to fetch.
     */
    where: FBHashtagWhereUniqueInput
  }


  /**
   * FBHashtag base type for findFirst actions
   */
  export type FBHashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter, which FBHashtag to fetch.
     */
    where?: FBHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBHashtags to fetch.
     */
    orderBy?: Enumerable<FBHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBHashtags.
     */
    cursor?: FBHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBHashtags.
     */
    distinct?: Enumerable<FBHashtagScalarFieldEnum>
  }

  /**
   * FBHashtag findFirst
   */
  export interface FBHashtagFindFirstArgs extends FBHashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBHashtag findFirstOrThrow
   */
  export type FBHashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter, which FBHashtag to fetch.
     */
    where?: FBHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBHashtags to fetch.
     */
    orderBy?: Enumerable<FBHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBHashtags.
     */
    cursor?: FBHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBHashtags.
     */
    distinct?: Enumerable<FBHashtagScalarFieldEnum>
  }


  /**
   * FBHashtag findMany
   */
  export type FBHashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter, which FBHashtags to fetch.
     */
    where?: FBHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBHashtags to fetch.
     */
    orderBy?: Enumerable<FBHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FBHashtags.
     */
    cursor?: FBHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBHashtags.
     */
    skip?: number
    distinct?: Enumerable<FBHashtagScalarFieldEnum>
  }


  /**
   * FBHashtag create
   */
  export type FBHashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * The data needed to create a FBHashtag.
     */
    data: XOR<FBHashtagCreateInput, FBHashtagUncheckedCreateInput>
  }


  /**
   * FBHashtag createMany
   */
  export type FBHashtagCreateManyArgs = {
    /**
     * The data used to create many FBHashtags.
     */
    data: Enumerable<FBHashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FBHashtag update
   */
  export type FBHashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * The data needed to update a FBHashtag.
     */
    data: XOR<FBHashtagUpdateInput, FBHashtagUncheckedUpdateInput>
    /**
     * Choose, which FBHashtag to update.
     */
    where: FBHashtagWhereUniqueInput
  }


  /**
   * FBHashtag updateMany
   */
  export type FBHashtagUpdateManyArgs = {
    /**
     * The data used to update FBHashtags.
     */
    data: XOR<FBHashtagUpdateManyMutationInput, FBHashtagUncheckedUpdateManyInput>
    /**
     * Filter which FBHashtags to update
     */
    where?: FBHashtagWhereInput
  }


  /**
   * FBHashtag upsert
   */
  export type FBHashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * The filter to search for the FBHashtag to update in case it exists.
     */
    where: FBHashtagWhereUniqueInput
    /**
     * In case the FBHashtag found by the `where` argument doesn't exist, create a new FBHashtag with this data.
     */
    create: XOR<FBHashtagCreateInput, FBHashtagUncheckedCreateInput>
    /**
     * In case the FBHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FBHashtagUpdateInput, FBHashtagUncheckedUpdateInput>
  }


  /**
   * FBHashtag delete
   */
  export type FBHashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
    /**
     * Filter which FBHashtag to delete.
     */
    where: FBHashtagWhereUniqueInput
  }


  /**
   * FBHashtag deleteMany
   */
  export type FBHashtagDeleteManyArgs = {
    /**
     * Filter which FBHashtags to delete
     */
    where?: FBHashtagWhereInput
  }


  /**
   * FBHashtag.PostOnHashtag
   */
  export type FBHashtag$PostOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    where?: FBPostOnHashtagWhereInput
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    cursor?: FBPostOnHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FBPostOnHashtagScalarFieldEnum>
  }


  /**
   * FBHashtag without action
   */
  export type FBHashtagArgs = {
    /**
     * Select specific fields to fetch from the FBHashtag
     */
    select?: FBHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBHashtagInclude | null
  }



  /**
   * Model FBPostOnHashtag
   */


  export type AggregateFBPostOnHashtag = {
    _count: FBPostOnHashtagCountAggregateOutputType | null
    _avg: FBPostOnHashtagAvgAggregateOutputType | null
    _sum: FBPostOnHashtagSumAggregateOutputType | null
    _min: FBPostOnHashtagMinAggregateOutputType | null
    _max: FBPostOnHashtagMaxAggregateOutputType | null
  }

  export type FBPostOnHashtagAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
  }

  export type FBPostOnHashtagSumAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
  }

  export type FBPostOnHashtagMinAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBPostOnHashtagMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FBPostOnHashtagCountAggregateOutputType = {
    id: number
    postId: number
    hashtagId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FBPostOnHashtagAvgAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
  }

  export type FBPostOnHashtagSumAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
  }

  export type FBPostOnHashtagMinAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBPostOnHashtagMaxAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FBPostOnHashtagCountAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FBPostOnHashtagAggregateArgs = {
    /**
     * Filter which FBPostOnHashtag to aggregate.
     */
    where?: FBPostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPostOnHashtags to fetch.
     */
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FBPostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FBPostOnHashtags
    **/
    _count?: true | FBPostOnHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FBPostOnHashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FBPostOnHashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FBPostOnHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FBPostOnHashtagMaxAggregateInputType
  }

  export type GetFBPostOnHashtagAggregateType<T extends FBPostOnHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregateFBPostOnHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFBPostOnHashtag[P]>
      : GetScalarType<T[P], AggregateFBPostOnHashtag[P]>
  }




  export type FBPostOnHashtagGroupByArgs = {
    where?: FBPostOnHashtagWhereInput
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithAggregationInput>
    by: FBPostOnHashtagScalarFieldEnum[]
    having?: FBPostOnHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FBPostOnHashtagCountAggregateInputType | true
    _avg?: FBPostOnHashtagAvgAggregateInputType
    _sum?: FBPostOnHashtagSumAggregateInputType
    _min?: FBPostOnHashtagMinAggregateInputType
    _max?: FBPostOnHashtagMaxAggregateInputType
  }


  export type FBPostOnHashtagGroupByOutputType = {
    id: number
    postId: number
    hashtagId: number
    createdAt: Date
    updatedAt: Date
    _count: FBPostOnHashtagCountAggregateOutputType | null
    _avg: FBPostOnHashtagAvgAggregateOutputType | null
    _sum: FBPostOnHashtagSumAggregateOutputType | null
    _min: FBPostOnHashtagMinAggregateOutputType | null
    _max: FBPostOnHashtagMaxAggregateOutputType | null
  }

  type GetFBPostOnHashtagGroupByPayload<T extends FBPostOnHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FBPostOnHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FBPostOnHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FBPostOnHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], FBPostOnHashtagGroupByOutputType[P]>
        }
      >
    >


  export type FBPostOnHashtagSelect = {
    id?: boolean
    post?: boolean | FBPostArgs
    hashtag?: boolean | FBHashtagArgs
    postId?: boolean
    hashtagId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FBPostOnHashtagInclude = {
    post?: boolean | FBPostArgs
    hashtag?: boolean | FBHashtagArgs
  }

  export type FBPostOnHashtagGetPayload<S extends boolean | null | undefined | FBPostOnHashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FBPostOnHashtag :
    S extends undefined ? never :
    S extends { include: any } & (FBPostOnHashtagArgs | FBPostOnHashtagFindManyArgs)
    ? FBPostOnHashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? FBPostGetPayload<S['include'][P]> :
        P extends 'hashtag' ? FBHashtagGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FBPostOnHashtagArgs | FBPostOnHashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? FBPostGetPayload<S['select'][P]> :
        P extends 'hashtag' ? FBHashtagGetPayload<S['select'][P]> :  P extends keyof FBPostOnHashtag ? FBPostOnHashtag[P] : never
  } 
      : FBPostOnHashtag


  type FBPostOnHashtagCountArgs = 
    Omit<FBPostOnHashtagFindManyArgs, 'select' | 'include'> & {
      select?: FBPostOnHashtagCountAggregateInputType | true
    }

  export interface FBPostOnHashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FBPostOnHashtag that matches the filter.
     * @param {FBPostOnHashtagFindUniqueArgs} args - Arguments to find a FBPostOnHashtag
     * @example
     * // Get one FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FBPostOnHashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FBPostOnHashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FBPostOnHashtag'> extends True ? Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>> : Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T> | null, null>

    /**
     * Find one FBPostOnHashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FBPostOnHashtagFindUniqueOrThrowArgs} args - Arguments to find a FBPostOnHashtag
     * @example
     * // Get one FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FBPostOnHashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FBPostOnHashtagFindUniqueOrThrowArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Find the first FBPostOnHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagFindFirstArgs} args - Arguments to find a FBPostOnHashtag
     * @example
     * // Get one FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FBPostOnHashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FBPostOnHashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FBPostOnHashtag'> extends True ? Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>> : Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T> | null, null>

    /**
     * Find the first FBPostOnHashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagFindFirstOrThrowArgs} args - Arguments to find a FBPostOnHashtag
     * @example
     * // Get one FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FBPostOnHashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FBPostOnHashtagFindFirstOrThrowArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Find zero or more FBPostOnHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FBPostOnHashtags
     * const fBPostOnHashtags = await prisma.fBPostOnHashtag.findMany()
     * 
     * // Get first 10 FBPostOnHashtags
     * const fBPostOnHashtags = await prisma.fBPostOnHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fBPostOnHashtagWithIdOnly = await prisma.fBPostOnHashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FBPostOnHashtagFindManyArgs>(
      args?: SelectSubset<T, FBPostOnHashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<FBPostOnHashtagGetPayload<T>>>

    /**
     * Create a FBPostOnHashtag.
     * @param {FBPostOnHashtagCreateArgs} args - Arguments to create a FBPostOnHashtag.
     * @example
     * // Create one FBPostOnHashtag
     * const FBPostOnHashtag = await prisma.fBPostOnHashtag.create({
     *   data: {
     *     // ... data to create a FBPostOnHashtag
     *   }
     * })
     * 
    **/
    create<T extends FBPostOnHashtagCreateArgs>(
      args: SelectSubset<T, FBPostOnHashtagCreateArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Create many FBPostOnHashtags.
     *     @param {FBPostOnHashtagCreateManyArgs} args - Arguments to create many FBPostOnHashtags.
     *     @example
     *     // Create many FBPostOnHashtags
     *     const fBPostOnHashtag = await prisma.fBPostOnHashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FBPostOnHashtagCreateManyArgs>(
      args?: SelectSubset<T, FBPostOnHashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FBPostOnHashtag.
     * @param {FBPostOnHashtagDeleteArgs} args - Arguments to delete one FBPostOnHashtag.
     * @example
     * // Delete one FBPostOnHashtag
     * const FBPostOnHashtag = await prisma.fBPostOnHashtag.delete({
     *   where: {
     *     // ... filter to delete one FBPostOnHashtag
     *   }
     * })
     * 
    **/
    delete<T extends FBPostOnHashtagDeleteArgs>(
      args: SelectSubset<T, FBPostOnHashtagDeleteArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Update one FBPostOnHashtag.
     * @param {FBPostOnHashtagUpdateArgs} args - Arguments to update one FBPostOnHashtag.
     * @example
     * // Update one FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FBPostOnHashtagUpdateArgs>(
      args: SelectSubset<T, FBPostOnHashtagUpdateArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Delete zero or more FBPostOnHashtags.
     * @param {FBPostOnHashtagDeleteManyArgs} args - Arguments to filter FBPostOnHashtags to delete.
     * @example
     * // Delete a few FBPostOnHashtags
     * const { count } = await prisma.fBPostOnHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FBPostOnHashtagDeleteManyArgs>(
      args?: SelectSubset<T, FBPostOnHashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FBPostOnHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FBPostOnHashtags
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FBPostOnHashtagUpdateManyArgs>(
      args: SelectSubset<T, FBPostOnHashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FBPostOnHashtag.
     * @param {FBPostOnHashtagUpsertArgs} args - Arguments to update or create a FBPostOnHashtag.
     * @example
     * // Update or create a FBPostOnHashtag
     * const fBPostOnHashtag = await prisma.fBPostOnHashtag.upsert({
     *   create: {
     *     // ... data to create a FBPostOnHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FBPostOnHashtag we want to update
     *   }
     * })
    **/
    upsert<T extends FBPostOnHashtagUpsertArgs>(
      args: SelectSubset<T, FBPostOnHashtagUpsertArgs>
    ): Prisma__FBPostOnHashtagClient<FBPostOnHashtagGetPayload<T>>

    /**
     * Count the number of FBPostOnHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagCountArgs} args - Arguments to filter FBPostOnHashtags to count.
     * @example
     * // Count the number of FBPostOnHashtags
     * const count = await prisma.fBPostOnHashtag.count({
     *   where: {
     *     // ... the filter for the FBPostOnHashtags we want to count
     *   }
     * })
    **/
    count<T extends FBPostOnHashtagCountArgs>(
      args?: Subset<T, FBPostOnHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FBPostOnHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FBPostOnHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FBPostOnHashtagAggregateArgs>(args: Subset<T, FBPostOnHashtagAggregateArgs>): Prisma.PrismaPromise<GetFBPostOnHashtagAggregateType<T>>

    /**
     * Group by FBPostOnHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FBPostOnHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FBPostOnHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FBPostOnHashtagGroupByArgs['orderBy'] }
        : { orderBy?: FBPostOnHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FBPostOnHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFBPostOnHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FBPostOnHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FBPostOnHashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends FBPostArgs= {}>(args?: Subset<T, FBPostArgs>): Prisma__FBPostClient<FBPostGetPayload<T> | Null>;

    hashtag<T extends FBHashtagArgs= {}>(args?: Subset<T, FBHashtagArgs>): Prisma__FBHashtagClient<FBHashtagGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FBPostOnHashtag base type for findUnique actions
   */
  export type FBPostOnHashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter, which FBPostOnHashtag to fetch.
     */
    where: FBPostOnHashtagWhereUniqueInput
  }

  /**
   * FBPostOnHashtag findUnique
   */
  export interface FBPostOnHashtagFindUniqueArgs extends FBPostOnHashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBPostOnHashtag findUniqueOrThrow
   */
  export type FBPostOnHashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter, which FBPostOnHashtag to fetch.
     */
    where: FBPostOnHashtagWhereUniqueInput
  }


  /**
   * FBPostOnHashtag base type for findFirst actions
   */
  export type FBPostOnHashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter, which FBPostOnHashtag to fetch.
     */
    where?: FBPostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPostOnHashtags to fetch.
     */
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBPostOnHashtags.
     */
    cursor?: FBPostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBPostOnHashtags.
     */
    distinct?: Enumerable<FBPostOnHashtagScalarFieldEnum>
  }

  /**
   * FBPostOnHashtag findFirst
   */
  export interface FBPostOnHashtagFindFirstArgs extends FBPostOnHashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FBPostOnHashtag findFirstOrThrow
   */
  export type FBPostOnHashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter, which FBPostOnHashtag to fetch.
     */
    where?: FBPostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPostOnHashtags to fetch.
     */
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FBPostOnHashtags.
     */
    cursor?: FBPostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FBPostOnHashtags.
     */
    distinct?: Enumerable<FBPostOnHashtagScalarFieldEnum>
  }


  /**
   * FBPostOnHashtag findMany
   */
  export type FBPostOnHashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter, which FBPostOnHashtags to fetch.
     */
    where?: FBPostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FBPostOnHashtags to fetch.
     */
    orderBy?: Enumerable<FBPostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FBPostOnHashtags.
     */
    cursor?: FBPostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FBPostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FBPostOnHashtags.
     */
    skip?: number
    distinct?: Enumerable<FBPostOnHashtagScalarFieldEnum>
  }


  /**
   * FBPostOnHashtag create
   */
  export type FBPostOnHashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * The data needed to create a FBPostOnHashtag.
     */
    data: XOR<FBPostOnHashtagCreateInput, FBPostOnHashtagUncheckedCreateInput>
  }


  /**
   * FBPostOnHashtag createMany
   */
  export type FBPostOnHashtagCreateManyArgs = {
    /**
     * The data used to create many FBPostOnHashtags.
     */
    data: Enumerable<FBPostOnHashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FBPostOnHashtag update
   */
  export type FBPostOnHashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * The data needed to update a FBPostOnHashtag.
     */
    data: XOR<FBPostOnHashtagUpdateInput, FBPostOnHashtagUncheckedUpdateInput>
    /**
     * Choose, which FBPostOnHashtag to update.
     */
    where: FBPostOnHashtagWhereUniqueInput
  }


  /**
   * FBPostOnHashtag updateMany
   */
  export type FBPostOnHashtagUpdateManyArgs = {
    /**
     * The data used to update FBPostOnHashtags.
     */
    data: XOR<FBPostOnHashtagUpdateManyMutationInput, FBPostOnHashtagUncheckedUpdateManyInput>
    /**
     * Filter which FBPostOnHashtags to update
     */
    where?: FBPostOnHashtagWhereInput
  }


  /**
   * FBPostOnHashtag upsert
   */
  export type FBPostOnHashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * The filter to search for the FBPostOnHashtag to update in case it exists.
     */
    where: FBPostOnHashtagWhereUniqueInput
    /**
     * In case the FBPostOnHashtag found by the `where` argument doesn't exist, create a new FBPostOnHashtag with this data.
     */
    create: XOR<FBPostOnHashtagCreateInput, FBPostOnHashtagUncheckedCreateInput>
    /**
     * In case the FBPostOnHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FBPostOnHashtagUpdateInput, FBPostOnHashtagUncheckedUpdateInput>
  }


  /**
   * FBPostOnHashtag delete
   */
  export type FBPostOnHashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
    /**
     * Filter which FBPostOnHashtag to delete.
     */
    where: FBPostOnHashtagWhereUniqueInput
  }


  /**
   * FBPostOnHashtag deleteMany
   */
  export type FBPostOnHashtagDeleteManyArgs = {
    /**
     * Filter which FBPostOnHashtags to delete
     */
    where?: FBPostOnHashtagWhereInput
  }


  /**
   * FBPostOnHashtag without action
   */
  export type FBPostOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the FBPostOnHashtag
     */
    select?: FBPostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FBPostOnHashtagInclude | null
  }



  /**
   * Model LibraryUniversity
   */


  export type AggregateLibraryUniversity = {
    _count: LibraryUniversityCountAggregateOutputType | null
    _avg: LibraryUniversityAvgAggregateOutputType | null
    _sum: LibraryUniversitySumAggregateOutputType | null
    _min: LibraryUniversityMinAggregateOutputType | null
    _max: LibraryUniversityMaxAggregateOutputType | null
  }

  export type LibraryUniversityAvgAggregateOutputType = {
    id: number | null
  }

  export type LibraryUniversitySumAggregateOutputType = {
    id: number | null
  }

  export type LibraryUniversityMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryUniversityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryUniversityCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryUniversityAvgAggregateInputType = {
    id?: true
  }

  export type LibraryUniversitySumAggregateInputType = {
    id?: true
  }

  export type LibraryUniversityMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryUniversityMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryUniversityCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryUniversityAggregateArgs = {
    /**
     * Filter which LibraryUniversity to aggregate.
     */
    where?: LibraryUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryUniversities to fetch.
     */
    orderBy?: Enumerable<LibraryUniversityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryUniversities
    **/
    _count?: true | LibraryUniversityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryUniversityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryUniversitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryUniversityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryUniversityMaxAggregateInputType
  }

  export type GetLibraryUniversityAggregateType<T extends LibraryUniversityAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryUniversity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryUniversity[P]>
      : GetScalarType<T[P], AggregateLibraryUniversity[P]>
  }




  export type LibraryUniversityGroupByArgs = {
    where?: LibraryUniversityWhereInput
    orderBy?: Enumerable<LibraryUniversityOrderByWithAggregationInput>
    by: LibraryUniversityScalarFieldEnum[]
    having?: LibraryUniversityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryUniversityCountAggregateInputType | true
    _avg?: LibraryUniversityAvgAggregateInputType
    _sum?: LibraryUniversitySumAggregateInputType
    _min?: LibraryUniversityMinAggregateInputType
    _max?: LibraryUniversityMaxAggregateInputType
  }


  export type LibraryUniversityGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryUniversityCountAggregateOutputType | null
    _avg: LibraryUniversityAvgAggregateOutputType | null
    _sum: LibraryUniversitySumAggregateOutputType | null
    _min: LibraryUniversityMinAggregateOutputType | null
    _max: LibraryUniversityMaxAggregateOutputType | null
  }

  type GetLibraryUniversityGroupByPayload<T extends LibraryUniversityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryUniversityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryUniversityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryUniversityGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryUniversityGroupByOutputType[P]>
        }
      >
    >


  export type LibraryUniversitySelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    libraryBook?: boolean | LibraryUniversity$libraryBookArgs
    libraryBookCopy?: boolean | LibraryUniversity$libraryBookCopyArgs
    fromUniversity?: boolean | LibraryUniversity$fromUniversityArgs
    toUniversity?: boolean | LibraryUniversity$toUniversityArgs
    libraryStudentBorrowing?: boolean | LibraryUniversity$libraryStudentBorrowingArgs
    _count?: boolean | LibraryUniversityCountOutputTypeArgs
  }


  export type LibraryUniversityInclude = {
    libraryBook?: boolean | LibraryUniversity$libraryBookArgs
    libraryBookCopy?: boolean | LibraryUniversity$libraryBookCopyArgs
    fromUniversity?: boolean | LibraryUniversity$fromUniversityArgs
    toUniversity?: boolean | LibraryUniversity$toUniversityArgs
    libraryStudentBorrowing?: boolean | LibraryUniversity$libraryStudentBorrowingArgs
    _count?: boolean | LibraryUniversityCountOutputTypeArgs
  }

  export type LibraryUniversityGetPayload<S extends boolean | null | undefined | LibraryUniversityArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryUniversity :
    S extends undefined ? never :
    S extends { include: any } & (LibraryUniversityArgs | LibraryUniversityFindManyArgs)
    ? LibraryUniversity  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'libraryBook' ? Array < LibraryBookGetPayload<S['include'][P]>>  :
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['include'][P]>>  :
        P extends 'fromUniversity' ? Array < LibraryStudentRequestGetPayload<S['include'][P]>>  :
        P extends 'toUniversity' ? Array < LibraryStudentRequestGetPayload<S['include'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryUniversityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryUniversityArgs | LibraryUniversityFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'libraryBook' ? Array < LibraryBookGetPayload<S['select'][P]>>  :
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['select'][P]>>  :
        P extends 'fromUniversity' ? Array < LibraryStudentRequestGetPayload<S['select'][P]>>  :
        P extends 'toUniversity' ? Array < LibraryStudentRequestGetPayload<S['select'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryUniversityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryUniversity ? LibraryUniversity[P] : never
  } 
      : LibraryUniversity


  type LibraryUniversityCountArgs = 
    Omit<LibraryUniversityFindManyArgs, 'select' | 'include'> & {
      select?: LibraryUniversityCountAggregateInputType | true
    }

  export interface LibraryUniversityDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryUniversity that matches the filter.
     * @param {LibraryUniversityFindUniqueArgs} args - Arguments to find a LibraryUniversity
     * @example
     * // Get one LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryUniversityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryUniversityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryUniversity'> extends True ? Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>> : Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | null, null>

    /**
     * Find one LibraryUniversity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryUniversityFindUniqueOrThrowArgs} args - Arguments to find a LibraryUniversity
     * @example
     * // Get one LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryUniversityFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryUniversityFindUniqueOrThrowArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Find the first LibraryUniversity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityFindFirstArgs} args - Arguments to find a LibraryUniversity
     * @example
     * // Get one LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryUniversityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryUniversityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryUniversity'> extends True ? Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>> : Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | null, null>

    /**
     * Find the first LibraryUniversity that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityFindFirstOrThrowArgs} args - Arguments to find a LibraryUniversity
     * @example
     * // Get one LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryUniversityFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryUniversityFindFirstOrThrowArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Find zero or more LibraryUniversities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryUniversities
     * const libraryUniversities = await prisma.libraryUniversity.findMany()
     * 
     * // Get first 10 LibraryUniversities
     * const libraryUniversities = await prisma.libraryUniversity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryUniversityWithIdOnly = await prisma.libraryUniversity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryUniversityFindManyArgs>(
      args?: SelectSubset<T, LibraryUniversityFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryUniversityGetPayload<T>>>

    /**
     * Create a LibraryUniversity.
     * @param {LibraryUniversityCreateArgs} args - Arguments to create a LibraryUniversity.
     * @example
     * // Create one LibraryUniversity
     * const LibraryUniversity = await prisma.libraryUniversity.create({
     *   data: {
     *     // ... data to create a LibraryUniversity
     *   }
     * })
     * 
    **/
    create<T extends LibraryUniversityCreateArgs>(
      args: SelectSubset<T, LibraryUniversityCreateArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Create many LibraryUniversities.
     *     @param {LibraryUniversityCreateManyArgs} args - Arguments to create many LibraryUniversities.
     *     @example
     *     // Create many LibraryUniversities
     *     const libraryUniversity = await prisma.libraryUniversity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryUniversityCreateManyArgs>(
      args?: SelectSubset<T, LibraryUniversityCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryUniversity.
     * @param {LibraryUniversityDeleteArgs} args - Arguments to delete one LibraryUniversity.
     * @example
     * // Delete one LibraryUniversity
     * const LibraryUniversity = await prisma.libraryUniversity.delete({
     *   where: {
     *     // ... filter to delete one LibraryUniversity
     *   }
     * })
     * 
    **/
    delete<T extends LibraryUniversityDeleteArgs>(
      args: SelectSubset<T, LibraryUniversityDeleteArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Update one LibraryUniversity.
     * @param {LibraryUniversityUpdateArgs} args - Arguments to update one LibraryUniversity.
     * @example
     * // Update one LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryUniversityUpdateArgs>(
      args: SelectSubset<T, LibraryUniversityUpdateArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Delete zero or more LibraryUniversities.
     * @param {LibraryUniversityDeleteManyArgs} args - Arguments to filter LibraryUniversities to delete.
     * @example
     * // Delete a few LibraryUniversities
     * const { count } = await prisma.libraryUniversity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryUniversityDeleteManyArgs>(
      args?: SelectSubset<T, LibraryUniversityDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryUniversities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryUniversities
     * const libraryUniversity = await prisma.libraryUniversity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryUniversityUpdateManyArgs>(
      args: SelectSubset<T, LibraryUniversityUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryUniversity.
     * @param {LibraryUniversityUpsertArgs} args - Arguments to update or create a LibraryUniversity.
     * @example
     * // Update or create a LibraryUniversity
     * const libraryUniversity = await prisma.libraryUniversity.upsert({
     *   create: {
     *     // ... data to create a LibraryUniversity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryUniversity we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryUniversityUpsertArgs>(
      args: SelectSubset<T, LibraryUniversityUpsertArgs>
    ): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T>>

    /**
     * Count the number of LibraryUniversities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityCountArgs} args - Arguments to filter LibraryUniversities to count.
     * @example
     * // Count the number of LibraryUniversities
     * const count = await prisma.libraryUniversity.count({
     *   where: {
     *     // ... the filter for the LibraryUniversities we want to count
     *   }
     * })
    **/
    count<T extends LibraryUniversityCountArgs>(
      args?: Subset<T, LibraryUniversityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryUniversityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryUniversity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryUniversityAggregateArgs>(args: Subset<T, LibraryUniversityAggregateArgs>): Prisma.PrismaPromise<GetLibraryUniversityAggregateType<T>>

    /**
     * Group by LibraryUniversity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryUniversityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryUniversityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryUniversityGroupByArgs['orderBy'] }
        : { orderBy?: LibraryUniversityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryUniversityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryUniversityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryUniversity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryUniversityClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    libraryBook<T extends LibraryUniversity$libraryBookArgs= {}>(args?: Subset<T, LibraryUniversity$libraryBookArgs>): Prisma.PrismaPromise<Array<LibraryBookGetPayload<T>>| Null>;

    libraryBookCopy<T extends LibraryUniversity$libraryBookCopyArgs= {}>(args?: Subset<T, LibraryUniversity$libraryBookCopyArgs>): Prisma.PrismaPromise<Array<LibraryBookCopyGetPayload<T>>| Null>;

    fromUniversity<T extends LibraryUniversity$fromUniversityArgs= {}>(args?: Subset<T, LibraryUniversity$fromUniversityArgs>): Prisma.PrismaPromise<Array<LibraryStudentRequestGetPayload<T>>| Null>;

    toUniversity<T extends LibraryUniversity$toUniversityArgs= {}>(args?: Subset<T, LibraryUniversity$toUniversityArgs>): Prisma.PrismaPromise<Array<LibraryStudentRequestGetPayload<T>>| Null>;

    libraryStudentBorrowing<T extends LibraryUniversity$libraryStudentBorrowingArgs= {}>(args?: Subset<T, LibraryUniversity$libraryStudentBorrowingArgs>): Prisma.PrismaPromise<Array<LibraryStudentBorrowingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryUniversity base type for findUnique actions
   */
  export type LibraryUniversityFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter, which LibraryUniversity to fetch.
     */
    where: LibraryUniversityWhereUniqueInput
  }

  /**
   * LibraryUniversity findUnique
   */
  export interface LibraryUniversityFindUniqueArgs extends LibraryUniversityFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryUniversity findUniqueOrThrow
   */
  export type LibraryUniversityFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter, which LibraryUniversity to fetch.
     */
    where: LibraryUniversityWhereUniqueInput
  }


  /**
   * LibraryUniversity base type for findFirst actions
   */
  export type LibraryUniversityFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter, which LibraryUniversity to fetch.
     */
    where?: LibraryUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryUniversities to fetch.
     */
    orderBy?: Enumerable<LibraryUniversityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryUniversities.
     */
    cursor?: LibraryUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryUniversities.
     */
    distinct?: Enumerable<LibraryUniversityScalarFieldEnum>
  }

  /**
   * LibraryUniversity findFirst
   */
  export interface LibraryUniversityFindFirstArgs extends LibraryUniversityFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryUniversity findFirstOrThrow
   */
  export type LibraryUniversityFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter, which LibraryUniversity to fetch.
     */
    where?: LibraryUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryUniversities to fetch.
     */
    orderBy?: Enumerable<LibraryUniversityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryUniversities.
     */
    cursor?: LibraryUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryUniversities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryUniversities.
     */
    distinct?: Enumerable<LibraryUniversityScalarFieldEnum>
  }


  /**
   * LibraryUniversity findMany
   */
  export type LibraryUniversityFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter, which LibraryUniversities to fetch.
     */
    where?: LibraryUniversityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryUniversities to fetch.
     */
    orderBy?: Enumerable<LibraryUniversityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryUniversities.
     */
    cursor?: LibraryUniversityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryUniversities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryUniversities.
     */
    skip?: number
    distinct?: Enumerable<LibraryUniversityScalarFieldEnum>
  }


  /**
   * LibraryUniversity create
   */
  export type LibraryUniversityCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * The data needed to create a LibraryUniversity.
     */
    data: XOR<LibraryUniversityCreateInput, LibraryUniversityUncheckedCreateInput>
  }


  /**
   * LibraryUniversity createMany
   */
  export type LibraryUniversityCreateManyArgs = {
    /**
     * The data used to create many LibraryUniversities.
     */
    data: Enumerable<LibraryUniversityCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryUniversity update
   */
  export type LibraryUniversityUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * The data needed to update a LibraryUniversity.
     */
    data: XOR<LibraryUniversityUpdateInput, LibraryUniversityUncheckedUpdateInput>
    /**
     * Choose, which LibraryUniversity to update.
     */
    where: LibraryUniversityWhereUniqueInput
  }


  /**
   * LibraryUniversity updateMany
   */
  export type LibraryUniversityUpdateManyArgs = {
    /**
     * The data used to update LibraryUniversities.
     */
    data: XOR<LibraryUniversityUpdateManyMutationInput, LibraryUniversityUncheckedUpdateManyInput>
    /**
     * Filter which LibraryUniversities to update
     */
    where?: LibraryUniversityWhereInput
  }


  /**
   * LibraryUniversity upsert
   */
  export type LibraryUniversityUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * The filter to search for the LibraryUniversity to update in case it exists.
     */
    where: LibraryUniversityWhereUniqueInput
    /**
     * In case the LibraryUniversity found by the `where` argument doesn't exist, create a new LibraryUniversity with this data.
     */
    create: XOR<LibraryUniversityCreateInput, LibraryUniversityUncheckedCreateInput>
    /**
     * In case the LibraryUniversity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryUniversityUpdateInput, LibraryUniversityUncheckedUpdateInput>
  }


  /**
   * LibraryUniversity delete
   */
  export type LibraryUniversityDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
    /**
     * Filter which LibraryUniversity to delete.
     */
    where: LibraryUniversityWhereUniqueInput
  }


  /**
   * LibraryUniversity deleteMany
   */
  export type LibraryUniversityDeleteManyArgs = {
    /**
     * Filter which LibraryUniversities to delete
     */
    where?: LibraryUniversityWhereInput
  }


  /**
   * LibraryUniversity.libraryBook
   */
  export type LibraryUniversity$libraryBookArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    where?: LibraryBookWhereInput
    orderBy?: Enumerable<LibraryBookOrderByWithRelationInput>
    cursor?: LibraryBookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryBookScalarFieldEnum>
  }


  /**
   * LibraryUniversity.libraryBookCopy
   */
  export type LibraryUniversity$libraryBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    where?: LibraryBookCopyWhereInput
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    cursor?: LibraryBookCopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }


  /**
   * LibraryUniversity.fromUniversity
   */
  export type LibraryUniversity$fromUniversityArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    where?: LibraryStudentRequestWhereInput
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    cursor?: LibraryStudentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryUniversity.toUniversity
   */
  export type LibraryUniversity$toUniversityArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    where?: LibraryStudentRequestWhereInput
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    cursor?: LibraryStudentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryUniversity.libraryStudentBorrowing
   */
  export type LibraryUniversity$libraryStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    where?: LibraryStudentBorrowingWhereInput
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }


  /**
   * LibraryUniversity without action
   */
  export type LibraryUniversityArgs = {
    /**
     * Select specific fields to fetch from the LibraryUniversity
     */
    select?: LibraryUniversitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryUniversityInclude | null
  }



  /**
   * Model LibraryStudent
   */


  export type AggregateLibraryStudent = {
    _count: LibraryStudentCountAggregateOutputType | null
    _avg: LibraryStudentAvgAggregateOutputType | null
    _sum: LibraryStudentSumAggregateOutputType | null
    _min: LibraryStudentMinAggregateOutputType | null
    _max: LibraryStudentMaxAggregateOutputType | null
  }

  export type LibraryStudentAvgAggregateOutputType = {
    id: number | null
  }

  export type LibraryStudentSumAggregateOutputType = {
    id: number | null
  }

  export type LibraryStudentMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryStudentAvgAggregateInputType = {
    id?: true
  }

  export type LibraryStudentSumAggregateInputType = {
    id?: true
  }

  export type LibraryStudentMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryStudentAggregateArgs = {
    /**
     * Filter which LibraryStudent to aggregate.
     */
    where?: LibraryStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudents to fetch.
     */
    orderBy?: Enumerable<LibraryStudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryStudents
    **/
    _count?: true | LibraryStudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryStudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryStudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryStudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryStudentMaxAggregateInputType
  }

  export type GetLibraryStudentAggregateType<T extends LibraryStudentAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryStudent[P]>
      : GetScalarType<T[P], AggregateLibraryStudent[P]>
  }




  export type LibraryStudentGroupByArgs = {
    where?: LibraryStudentWhereInput
    orderBy?: Enumerable<LibraryStudentOrderByWithAggregationInput>
    by: LibraryStudentScalarFieldEnum[]
    having?: LibraryStudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryStudentCountAggregateInputType | true
    _avg?: LibraryStudentAvgAggregateInputType
    _sum?: LibraryStudentSumAggregateInputType
    _min?: LibraryStudentMinAggregateInputType
    _max?: LibraryStudentMaxAggregateInputType
  }


  export type LibraryStudentGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryStudentCountAggregateOutputType | null
    _avg: LibraryStudentAvgAggregateOutputType | null
    _sum: LibraryStudentSumAggregateOutputType | null
    _min: LibraryStudentMinAggregateOutputType | null
    _max: LibraryStudentMaxAggregateOutputType | null
  }

  type GetLibraryStudentGroupByPayload<T extends LibraryStudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryStudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryStudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryStudentGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryStudentGroupByOutputType[P]>
        }
      >
    >


  export type LibraryStudentSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    libraryBookCopy?: boolean | LibraryStudent$libraryBookCopyArgs
    historyOfBookCopy?: boolean | LibraryStudent$historyOfBookCopyArgs
    libraryHistoryOfStudentBorrowing?: boolean | LibraryStudent$libraryHistoryOfStudentBorrowingArgs
    libraryStudentBorrowing?: boolean | LibraryStudent$libraryStudentBorrowingArgs
    _count?: boolean | LibraryStudentCountOutputTypeArgs
  }


  export type LibraryStudentInclude = {
    libraryBookCopy?: boolean | LibraryStudent$libraryBookCopyArgs
    historyOfBookCopy?: boolean | LibraryStudent$historyOfBookCopyArgs
    libraryHistoryOfStudentBorrowing?: boolean | LibraryStudent$libraryHistoryOfStudentBorrowingArgs
    libraryStudentBorrowing?: boolean | LibraryStudent$libraryStudentBorrowingArgs
    _count?: boolean | LibraryStudentCountOutputTypeArgs
  }

  export type LibraryStudentGetPayload<S extends boolean | null | undefined | LibraryStudentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryStudent :
    S extends undefined ? never :
    S extends { include: any } & (LibraryStudentArgs | LibraryStudentFindManyArgs)
    ? LibraryStudent  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['include'][P]>>  :
        P extends 'historyOfBookCopy' ? Array < LibraryHistoryOfBookCopyGetPayload<S['include'][P]>>  :
        P extends 'libraryHistoryOfStudentBorrowing' ? Array < LibraryStudentRequestGetPayload<S['include'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryStudentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryStudentArgs | LibraryStudentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['select'][P]>>  :
        P extends 'historyOfBookCopy' ? Array < LibraryHistoryOfBookCopyGetPayload<S['select'][P]>>  :
        P extends 'libraryHistoryOfStudentBorrowing' ? Array < LibraryStudentRequestGetPayload<S['select'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryStudentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryStudent ? LibraryStudent[P] : never
  } 
      : LibraryStudent


  type LibraryStudentCountArgs = 
    Omit<LibraryStudentFindManyArgs, 'select' | 'include'> & {
      select?: LibraryStudentCountAggregateInputType | true
    }

  export interface LibraryStudentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryStudent that matches the filter.
     * @param {LibraryStudentFindUniqueArgs} args - Arguments to find a LibraryStudent
     * @example
     * // Get one LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryStudentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryStudentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryStudent'> extends True ? Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>> : Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | null, null>

    /**
     * Find one LibraryStudent that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryStudentFindUniqueOrThrowArgs} args - Arguments to find a LibraryStudent
     * @example
     * // Get one LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryStudentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentFindUniqueOrThrowArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Find the first LibraryStudent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentFindFirstArgs} args - Arguments to find a LibraryStudent
     * @example
     * // Get one LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryStudentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryStudentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryStudent'> extends True ? Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>> : Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | null, null>

    /**
     * Find the first LibraryStudent that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentFindFirstOrThrowArgs} args - Arguments to find a LibraryStudent
     * @example
     * // Get one LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryStudentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentFindFirstOrThrowArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Find zero or more LibraryStudents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryStudents
     * const libraryStudents = await prisma.libraryStudent.findMany()
     * 
     * // Get first 10 LibraryStudents
     * const libraryStudents = await prisma.libraryStudent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryStudentWithIdOnly = await prisma.libraryStudent.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryStudentFindManyArgs>(
      args?: SelectSubset<T, LibraryStudentFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryStudentGetPayload<T>>>

    /**
     * Create a LibraryStudent.
     * @param {LibraryStudentCreateArgs} args - Arguments to create a LibraryStudent.
     * @example
     * // Create one LibraryStudent
     * const LibraryStudent = await prisma.libraryStudent.create({
     *   data: {
     *     // ... data to create a LibraryStudent
     *   }
     * })
     * 
    **/
    create<T extends LibraryStudentCreateArgs>(
      args: SelectSubset<T, LibraryStudentCreateArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Create many LibraryStudents.
     *     @param {LibraryStudentCreateManyArgs} args - Arguments to create many LibraryStudents.
     *     @example
     *     // Create many LibraryStudents
     *     const libraryStudent = await prisma.libraryStudent.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryStudentCreateManyArgs>(
      args?: SelectSubset<T, LibraryStudentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryStudent.
     * @param {LibraryStudentDeleteArgs} args - Arguments to delete one LibraryStudent.
     * @example
     * // Delete one LibraryStudent
     * const LibraryStudent = await prisma.libraryStudent.delete({
     *   where: {
     *     // ... filter to delete one LibraryStudent
     *   }
     * })
     * 
    **/
    delete<T extends LibraryStudentDeleteArgs>(
      args: SelectSubset<T, LibraryStudentDeleteArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Update one LibraryStudent.
     * @param {LibraryStudentUpdateArgs} args - Arguments to update one LibraryStudent.
     * @example
     * // Update one LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryStudentUpdateArgs>(
      args: SelectSubset<T, LibraryStudentUpdateArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Delete zero or more LibraryStudents.
     * @param {LibraryStudentDeleteManyArgs} args - Arguments to filter LibraryStudents to delete.
     * @example
     * // Delete a few LibraryStudents
     * const { count } = await prisma.libraryStudent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryStudentDeleteManyArgs>(
      args?: SelectSubset<T, LibraryStudentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryStudents
     * const libraryStudent = await prisma.libraryStudent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryStudentUpdateManyArgs>(
      args: SelectSubset<T, LibraryStudentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryStudent.
     * @param {LibraryStudentUpsertArgs} args - Arguments to update or create a LibraryStudent.
     * @example
     * // Update or create a LibraryStudent
     * const libraryStudent = await prisma.libraryStudent.upsert({
     *   create: {
     *     // ... data to create a LibraryStudent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryStudent we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryStudentUpsertArgs>(
      args: SelectSubset<T, LibraryStudentUpsertArgs>
    ): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T>>

    /**
     * Count the number of LibraryStudents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentCountArgs} args - Arguments to filter LibraryStudents to count.
     * @example
     * // Count the number of LibraryStudents
     * const count = await prisma.libraryStudent.count({
     *   where: {
     *     // ... the filter for the LibraryStudents we want to count
     *   }
     * })
    **/
    count<T extends LibraryStudentCountArgs>(
      args?: Subset<T, LibraryStudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryStudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryStudentAggregateArgs>(args: Subset<T, LibraryStudentAggregateArgs>): Prisma.PrismaPromise<GetLibraryStudentAggregateType<T>>

    /**
     * Group by LibraryStudent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryStudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryStudentGroupByArgs['orderBy'] }
        : { orderBy?: LibraryStudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryStudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryStudent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryStudentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    libraryBookCopy<T extends LibraryStudent$libraryBookCopyArgs= {}>(args?: Subset<T, LibraryStudent$libraryBookCopyArgs>): Prisma.PrismaPromise<Array<LibraryBookCopyGetPayload<T>>| Null>;

    historyOfBookCopy<T extends LibraryStudent$historyOfBookCopyArgs= {}>(args?: Subset<T, LibraryStudent$historyOfBookCopyArgs>): Prisma.PrismaPromise<Array<LibraryHistoryOfBookCopyGetPayload<T>>| Null>;

    libraryHistoryOfStudentBorrowing<T extends LibraryStudent$libraryHistoryOfStudentBorrowingArgs= {}>(args?: Subset<T, LibraryStudent$libraryHistoryOfStudentBorrowingArgs>): Prisma.PrismaPromise<Array<LibraryStudentRequestGetPayload<T>>| Null>;

    libraryStudentBorrowing<T extends LibraryStudent$libraryStudentBorrowingArgs= {}>(args?: Subset<T, LibraryStudent$libraryStudentBorrowingArgs>): Prisma.PrismaPromise<Array<LibraryStudentBorrowingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryStudent base type for findUnique actions
   */
  export type LibraryStudentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter, which LibraryStudent to fetch.
     */
    where: LibraryStudentWhereUniqueInput
  }

  /**
   * LibraryStudent findUnique
   */
  export interface LibraryStudentFindUniqueArgs extends LibraryStudentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudent findUniqueOrThrow
   */
  export type LibraryStudentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter, which LibraryStudent to fetch.
     */
    where: LibraryStudentWhereUniqueInput
  }


  /**
   * LibraryStudent base type for findFirst actions
   */
  export type LibraryStudentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter, which LibraryStudent to fetch.
     */
    where?: LibraryStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudents to fetch.
     */
    orderBy?: Enumerable<LibraryStudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudents.
     */
    cursor?: LibraryStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudents.
     */
    distinct?: Enumerable<LibraryStudentScalarFieldEnum>
  }

  /**
   * LibraryStudent findFirst
   */
  export interface LibraryStudentFindFirstArgs extends LibraryStudentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudent findFirstOrThrow
   */
  export type LibraryStudentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter, which LibraryStudent to fetch.
     */
    where?: LibraryStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudents to fetch.
     */
    orderBy?: Enumerable<LibraryStudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudents.
     */
    cursor?: LibraryStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudents.
     */
    distinct?: Enumerable<LibraryStudentScalarFieldEnum>
  }


  /**
   * LibraryStudent findMany
   */
  export type LibraryStudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter, which LibraryStudents to fetch.
     */
    where?: LibraryStudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudents to fetch.
     */
    orderBy?: Enumerable<LibraryStudentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryStudents.
     */
    cursor?: LibraryStudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudents.
     */
    skip?: number
    distinct?: Enumerable<LibraryStudentScalarFieldEnum>
  }


  /**
   * LibraryStudent create
   */
  export type LibraryStudentCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * The data needed to create a LibraryStudent.
     */
    data: XOR<LibraryStudentCreateInput, LibraryStudentUncheckedCreateInput>
  }


  /**
   * LibraryStudent createMany
   */
  export type LibraryStudentCreateManyArgs = {
    /**
     * The data used to create many LibraryStudents.
     */
    data: Enumerable<LibraryStudentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryStudent update
   */
  export type LibraryStudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * The data needed to update a LibraryStudent.
     */
    data: XOR<LibraryStudentUpdateInput, LibraryStudentUncheckedUpdateInput>
    /**
     * Choose, which LibraryStudent to update.
     */
    where: LibraryStudentWhereUniqueInput
  }


  /**
   * LibraryStudent updateMany
   */
  export type LibraryStudentUpdateManyArgs = {
    /**
     * The data used to update LibraryStudents.
     */
    data: XOR<LibraryStudentUpdateManyMutationInput, LibraryStudentUncheckedUpdateManyInput>
    /**
     * Filter which LibraryStudents to update
     */
    where?: LibraryStudentWhereInput
  }


  /**
   * LibraryStudent upsert
   */
  export type LibraryStudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * The filter to search for the LibraryStudent to update in case it exists.
     */
    where: LibraryStudentWhereUniqueInput
    /**
     * In case the LibraryStudent found by the `where` argument doesn't exist, create a new LibraryStudent with this data.
     */
    create: XOR<LibraryStudentCreateInput, LibraryStudentUncheckedCreateInput>
    /**
     * In case the LibraryStudent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryStudentUpdateInput, LibraryStudentUncheckedUpdateInput>
  }


  /**
   * LibraryStudent delete
   */
  export type LibraryStudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
    /**
     * Filter which LibraryStudent to delete.
     */
    where: LibraryStudentWhereUniqueInput
  }


  /**
   * LibraryStudent deleteMany
   */
  export type LibraryStudentDeleteManyArgs = {
    /**
     * Filter which LibraryStudents to delete
     */
    where?: LibraryStudentWhereInput
  }


  /**
   * LibraryStudent.libraryBookCopy
   */
  export type LibraryStudent$libraryBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    where?: LibraryBookCopyWhereInput
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    cursor?: LibraryBookCopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }


  /**
   * LibraryStudent.historyOfBookCopy
   */
  export type LibraryStudent$historyOfBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    where?: LibraryHistoryOfBookCopyWhereInput
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryHistoryOfBookCopyScalarFieldEnum>
  }


  /**
   * LibraryStudent.libraryHistoryOfStudentBorrowing
   */
  export type LibraryStudent$libraryHistoryOfStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    where?: LibraryStudentRequestWhereInput
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    cursor?: LibraryStudentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryStudent.libraryStudentBorrowing
   */
  export type LibraryStudent$libraryStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    where?: LibraryStudentBorrowingWhereInput
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }


  /**
   * LibraryStudent without action
   */
  export type LibraryStudentArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudent
     */
    select?: LibraryStudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentInclude | null
  }



  /**
   * Model LibraryBook
   */


  export type AggregateLibraryBook = {
    _count: LibraryBookCountAggregateOutputType | null
    _avg: LibraryBookAvgAggregateOutputType | null
    _sum: LibraryBookSumAggregateOutputType | null
    _min: LibraryBookMinAggregateOutputType | null
    _max: LibraryBookMaxAggregateOutputType | null
  }

  export type LibraryBookAvgAggregateOutputType = {
    id: number | null
    universityId: number | null
  }

  export type LibraryBookSumAggregateOutputType = {
    id: number | null
    universityId: number | null
  }

  export type LibraryBookMinAggregateOutputType = {
    id: number | null
    universityId: number | null
    name: string | null
    isbn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryBookMaxAggregateOutputType = {
    id: number | null
    universityId: number | null
    name: string | null
    isbn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryBookCountAggregateOutputType = {
    id: number
    universityId: number
    name: number
    isbn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryBookAvgAggregateInputType = {
    id?: true
    universityId?: true
  }

  export type LibraryBookSumAggregateInputType = {
    id?: true
    universityId?: true
  }

  export type LibraryBookMinAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryBookMaxAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryBookCountAggregateInputType = {
    id?: true
    universityId?: true
    name?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryBookAggregateArgs = {
    /**
     * Filter which LibraryBook to aggregate.
     */
    where?: LibraryBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBooks to fetch.
     */
    orderBy?: Enumerable<LibraryBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryBooks
    **/
    _count?: true | LibraryBookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryBookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryBookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryBookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryBookMaxAggregateInputType
  }

  export type GetLibraryBookAggregateType<T extends LibraryBookAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryBook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryBook[P]>
      : GetScalarType<T[P], AggregateLibraryBook[P]>
  }




  export type LibraryBookGroupByArgs = {
    where?: LibraryBookWhereInput
    orderBy?: Enumerable<LibraryBookOrderByWithAggregationInput>
    by: LibraryBookScalarFieldEnum[]
    having?: LibraryBookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryBookCountAggregateInputType | true
    _avg?: LibraryBookAvgAggregateInputType
    _sum?: LibraryBookSumAggregateInputType
    _min?: LibraryBookMinAggregateInputType
    _max?: LibraryBookMaxAggregateInputType
  }


  export type LibraryBookGroupByOutputType = {
    id: number
    universityId: number
    name: string
    isbn: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryBookCountAggregateOutputType | null
    _avg: LibraryBookAvgAggregateOutputType | null
    _sum: LibraryBookSumAggregateOutputType | null
    _min: LibraryBookMinAggregateOutputType | null
    _max: LibraryBookMaxAggregateOutputType | null
  }

  type GetLibraryBookGroupByPayload<T extends LibraryBookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryBookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryBookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryBookGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryBookGroupByOutputType[P]>
        }
      >
    >


  export type LibraryBookSelect = {
    id?: boolean
    university?: boolean | LibraryUniversityArgs
    universityId?: boolean
    name?: boolean
    isbn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    libraryBookCopy?: boolean | LibraryBook$libraryBookCopyArgs
    bookOnAuthor?: boolean | LibraryBook$bookOnAuthorArgs
    bookOnCategory?: boolean | LibraryBook$bookOnCategoryArgs
    _count?: boolean | LibraryBookCountOutputTypeArgs
  }


  export type LibraryBookInclude = {
    university?: boolean | LibraryUniversityArgs
    libraryBookCopy?: boolean | LibraryBook$libraryBookCopyArgs
    bookOnAuthor?: boolean | LibraryBook$bookOnAuthorArgs
    bookOnCategory?: boolean | LibraryBook$bookOnCategoryArgs
    _count?: boolean | LibraryBookCountOutputTypeArgs
  }

  export type LibraryBookGetPayload<S extends boolean | null | undefined | LibraryBookArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryBook :
    S extends undefined ? never :
    S extends { include: any } & (LibraryBookArgs | LibraryBookFindManyArgs)
    ? LibraryBook  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'university' ? LibraryUniversityGetPayload<S['include'][P]> :
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['include'][P]>>  :
        P extends 'bookOnAuthor' ? Array < BookOnAuthorGetPayload<S['include'][P]>>  :
        P extends 'bookOnCategory' ? Array < BookOnCategoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryBookCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryBookArgs | LibraryBookFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'university' ? LibraryUniversityGetPayload<S['select'][P]> :
        P extends 'libraryBookCopy' ? Array < LibraryBookCopyGetPayload<S['select'][P]>>  :
        P extends 'bookOnAuthor' ? Array < BookOnAuthorGetPayload<S['select'][P]>>  :
        P extends 'bookOnCategory' ? Array < BookOnCategoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryBookCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryBook ? LibraryBook[P] : never
  } 
      : LibraryBook


  type LibraryBookCountArgs = 
    Omit<LibraryBookFindManyArgs, 'select' | 'include'> & {
      select?: LibraryBookCountAggregateInputType | true
    }

  export interface LibraryBookDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryBook that matches the filter.
     * @param {LibraryBookFindUniqueArgs} args - Arguments to find a LibraryBook
     * @example
     * // Get one LibraryBook
     * const libraryBook = await prisma.libraryBook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryBookFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryBookFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryBook'> extends True ? Prisma__LibraryBookClient<LibraryBookGetPayload<T>> : Prisma__LibraryBookClient<LibraryBookGetPayload<T> | null, null>

    /**
     * Find one LibraryBook that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryBookFindUniqueOrThrowArgs} args - Arguments to find a LibraryBook
     * @example
     * // Get one LibraryBook
     * const libraryBook = await prisma.libraryBook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryBookFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryBookFindUniqueOrThrowArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Find the first LibraryBook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookFindFirstArgs} args - Arguments to find a LibraryBook
     * @example
     * // Get one LibraryBook
     * const libraryBook = await prisma.libraryBook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryBookFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryBookFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryBook'> extends True ? Prisma__LibraryBookClient<LibraryBookGetPayload<T>> : Prisma__LibraryBookClient<LibraryBookGetPayload<T> | null, null>

    /**
     * Find the first LibraryBook that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookFindFirstOrThrowArgs} args - Arguments to find a LibraryBook
     * @example
     * // Get one LibraryBook
     * const libraryBook = await prisma.libraryBook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryBookFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryBookFindFirstOrThrowArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Find zero or more LibraryBooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryBooks
     * const libraryBooks = await prisma.libraryBook.findMany()
     * 
     * // Get first 10 LibraryBooks
     * const libraryBooks = await prisma.libraryBook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryBookWithIdOnly = await prisma.libraryBook.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryBookFindManyArgs>(
      args?: SelectSubset<T, LibraryBookFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryBookGetPayload<T>>>

    /**
     * Create a LibraryBook.
     * @param {LibraryBookCreateArgs} args - Arguments to create a LibraryBook.
     * @example
     * // Create one LibraryBook
     * const LibraryBook = await prisma.libraryBook.create({
     *   data: {
     *     // ... data to create a LibraryBook
     *   }
     * })
     * 
    **/
    create<T extends LibraryBookCreateArgs>(
      args: SelectSubset<T, LibraryBookCreateArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Create many LibraryBooks.
     *     @param {LibraryBookCreateManyArgs} args - Arguments to create many LibraryBooks.
     *     @example
     *     // Create many LibraryBooks
     *     const libraryBook = await prisma.libraryBook.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryBookCreateManyArgs>(
      args?: SelectSubset<T, LibraryBookCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryBook.
     * @param {LibraryBookDeleteArgs} args - Arguments to delete one LibraryBook.
     * @example
     * // Delete one LibraryBook
     * const LibraryBook = await prisma.libraryBook.delete({
     *   where: {
     *     // ... filter to delete one LibraryBook
     *   }
     * })
     * 
    **/
    delete<T extends LibraryBookDeleteArgs>(
      args: SelectSubset<T, LibraryBookDeleteArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Update one LibraryBook.
     * @param {LibraryBookUpdateArgs} args - Arguments to update one LibraryBook.
     * @example
     * // Update one LibraryBook
     * const libraryBook = await prisma.libraryBook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryBookUpdateArgs>(
      args: SelectSubset<T, LibraryBookUpdateArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Delete zero or more LibraryBooks.
     * @param {LibraryBookDeleteManyArgs} args - Arguments to filter LibraryBooks to delete.
     * @example
     * // Delete a few LibraryBooks
     * const { count } = await prisma.libraryBook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryBookDeleteManyArgs>(
      args?: SelectSubset<T, LibraryBookDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryBooks
     * const libraryBook = await prisma.libraryBook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryBookUpdateManyArgs>(
      args: SelectSubset<T, LibraryBookUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryBook.
     * @param {LibraryBookUpsertArgs} args - Arguments to update or create a LibraryBook.
     * @example
     * // Update or create a LibraryBook
     * const libraryBook = await prisma.libraryBook.upsert({
     *   create: {
     *     // ... data to create a LibraryBook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryBook we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryBookUpsertArgs>(
      args: SelectSubset<T, LibraryBookUpsertArgs>
    ): Prisma__LibraryBookClient<LibraryBookGetPayload<T>>

    /**
     * Count the number of LibraryBooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCountArgs} args - Arguments to filter LibraryBooks to count.
     * @example
     * // Count the number of LibraryBooks
     * const count = await prisma.libraryBook.count({
     *   where: {
     *     // ... the filter for the LibraryBooks we want to count
     *   }
     * })
    **/
    count<T extends LibraryBookCountArgs>(
      args?: Subset<T, LibraryBookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryBookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryBookAggregateArgs>(args: Subset<T, LibraryBookAggregateArgs>): Prisma.PrismaPromise<GetLibraryBookAggregateType<T>>

    /**
     * Group by LibraryBook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryBookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryBookGroupByArgs['orderBy'] }
        : { orderBy?: LibraryBookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryBookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryBookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryBook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryBookClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    university<T extends LibraryUniversityArgs= {}>(args?: Subset<T, LibraryUniversityArgs>): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | Null>;

    libraryBookCopy<T extends LibraryBook$libraryBookCopyArgs= {}>(args?: Subset<T, LibraryBook$libraryBookCopyArgs>): Prisma.PrismaPromise<Array<LibraryBookCopyGetPayload<T>>| Null>;

    bookOnAuthor<T extends LibraryBook$bookOnAuthorArgs= {}>(args?: Subset<T, LibraryBook$bookOnAuthorArgs>): Prisma.PrismaPromise<Array<BookOnAuthorGetPayload<T>>| Null>;

    bookOnCategory<T extends LibraryBook$bookOnCategoryArgs= {}>(args?: Subset<T, LibraryBook$bookOnCategoryArgs>): Prisma.PrismaPromise<Array<BookOnCategoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryBook base type for findUnique actions
   */
  export type LibraryBookFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter, which LibraryBook to fetch.
     */
    where: LibraryBookWhereUniqueInput
  }

  /**
   * LibraryBook findUnique
   */
  export interface LibraryBookFindUniqueArgs extends LibraryBookFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryBook findUniqueOrThrow
   */
  export type LibraryBookFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter, which LibraryBook to fetch.
     */
    where: LibraryBookWhereUniqueInput
  }


  /**
   * LibraryBook base type for findFirst actions
   */
  export type LibraryBookFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter, which LibraryBook to fetch.
     */
    where?: LibraryBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBooks to fetch.
     */
    orderBy?: Enumerable<LibraryBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryBooks.
     */
    cursor?: LibraryBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryBooks.
     */
    distinct?: Enumerable<LibraryBookScalarFieldEnum>
  }

  /**
   * LibraryBook findFirst
   */
  export interface LibraryBookFindFirstArgs extends LibraryBookFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryBook findFirstOrThrow
   */
  export type LibraryBookFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter, which LibraryBook to fetch.
     */
    where?: LibraryBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBooks to fetch.
     */
    orderBy?: Enumerable<LibraryBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryBooks.
     */
    cursor?: LibraryBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryBooks.
     */
    distinct?: Enumerable<LibraryBookScalarFieldEnum>
  }


  /**
   * LibraryBook findMany
   */
  export type LibraryBookFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter, which LibraryBooks to fetch.
     */
    where?: LibraryBookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBooks to fetch.
     */
    orderBy?: Enumerable<LibraryBookOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryBooks.
     */
    cursor?: LibraryBookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBooks.
     */
    skip?: number
    distinct?: Enumerable<LibraryBookScalarFieldEnum>
  }


  /**
   * LibraryBook create
   */
  export type LibraryBookCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * The data needed to create a LibraryBook.
     */
    data: XOR<LibraryBookCreateInput, LibraryBookUncheckedCreateInput>
  }


  /**
   * LibraryBook createMany
   */
  export type LibraryBookCreateManyArgs = {
    /**
     * The data used to create many LibraryBooks.
     */
    data: Enumerable<LibraryBookCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryBook update
   */
  export type LibraryBookUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * The data needed to update a LibraryBook.
     */
    data: XOR<LibraryBookUpdateInput, LibraryBookUncheckedUpdateInput>
    /**
     * Choose, which LibraryBook to update.
     */
    where: LibraryBookWhereUniqueInput
  }


  /**
   * LibraryBook updateMany
   */
  export type LibraryBookUpdateManyArgs = {
    /**
     * The data used to update LibraryBooks.
     */
    data: XOR<LibraryBookUpdateManyMutationInput, LibraryBookUncheckedUpdateManyInput>
    /**
     * Filter which LibraryBooks to update
     */
    where?: LibraryBookWhereInput
  }


  /**
   * LibraryBook upsert
   */
  export type LibraryBookUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * The filter to search for the LibraryBook to update in case it exists.
     */
    where: LibraryBookWhereUniqueInput
    /**
     * In case the LibraryBook found by the `where` argument doesn't exist, create a new LibraryBook with this data.
     */
    create: XOR<LibraryBookCreateInput, LibraryBookUncheckedCreateInput>
    /**
     * In case the LibraryBook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryBookUpdateInput, LibraryBookUncheckedUpdateInput>
  }


  /**
   * LibraryBook delete
   */
  export type LibraryBookDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
    /**
     * Filter which LibraryBook to delete.
     */
    where: LibraryBookWhereUniqueInput
  }


  /**
   * LibraryBook deleteMany
   */
  export type LibraryBookDeleteManyArgs = {
    /**
     * Filter which LibraryBooks to delete
     */
    where?: LibraryBookWhereInput
  }


  /**
   * LibraryBook.libraryBookCopy
   */
  export type LibraryBook$libraryBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    where?: LibraryBookCopyWhereInput
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    cursor?: LibraryBookCopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }


  /**
   * LibraryBook.bookOnAuthor
   */
  export type LibraryBook$bookOnAuthorArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    where?: BookOnAuthorWhereInput
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    cursor?: BookOnAuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookOnAuthorScalarFieldEnum>
  }


  /**
   * LibraryBook.bookOnCategory
   */
  export type LibraryBook$bookOnCategoryArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    where?: BookOnCategoryWhereInput
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    cursor?: BookOnCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookOnCategoryScalarFieldEnum>
  }


  /**
   * LibraryBook without action
   */
  export type LibraryBookArgs = {
    /**
     * Select specific fields to fetch from the LibraryBook
     */
    select?: LibraryBookSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookInclude | null
  }



  /**
   * Model LibraryBookCopy
   */


  export type AggregateLibraryBookCopy = {
    _count: LibraryBookCopyCountAggregateOutputType | null
    _avg: LibraryBookCopyAvgAggregateOutputType | null
    _sum: LibraryBookCopySumAggregateOutputType | null
    _min: LibraryBookCopyMinAggregateOutputType | null
    _max: LibraryBookCopyMaxAggregateOutputType | null
  }

  export type LibraryBookCopyAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    atUniversityId: number | null
    currentBorrowBytudentId: number | null
  }

  export type LibraryBookCopySumAggregateOutputType = {
    id: number | null
    bookId: number | null
    atUniversityId: number | null
    currentBorrowBytudentId: number | null
  }

  export type LibraryBookCopyMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    atUniversityId: number | null
    currentBorrowBytudentId: number | null
    status: string | null
    isbn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryBookCopyMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    atUniversityId: number | null
    currentBorrowBytudentId: number | null
    status: string | null
    isbn: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryBookCopyCountAggregateOutputType = {
    id: number
    bookId: number
    atUniversityId: number
    currentBorrowBytudentId: number
    status: number
    isbn: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryBookCopyAvgAggregateInputType = {
    id?: true
    bookId?: true
    atUniversityId?: true
    currentBorrowBytudentId?: true
  }

  export type LibraryBookCopySumAggregateInputType = {
    id?: true
    bookId?: true
    atUniversityId?: true
    currentBorrowBytudentId?: true
  }

  export type LibraryBookCopyMinAggregateInputType = {
    id?: true
    bookId?: true
    atUniversityId?: true
    currentBorrowBytudentId?: true
    status?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryBookCopyMaxAggregateInputType = {
    id?: true
    bookId?: true
    atUniversityId?: true
    currentBorrowBytudentId?: true
    status?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryBookCopyCountAggregateInputType = {
    id?: true
    bookId?: true
    atUniversityId?: true
    currentBorrowBytudentId?: true
    status?: true
    isbn?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryBookCopyAggregateArgs = {
    /**
     * Filter which LibraryBookCopy to aggregate.
     */
    where?: LibraryBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryBookCopies
    **/
    _count?: true | LibraryBookCopyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryBookCopyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryBookCopySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryBookCopyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryBookCopyMaxAggregateInputType
  }

  export type GetLibraryBookCopyAggregateType<T extends LibraryBookCopyAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryBookCopy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryBookCopy[P]>
      : GetScalarType<T[P], AggregateLibraryBookCopy[P]>
  }




  export type LibraryBookCopyGroupByArgs = {
    where?: LibraryBookCopyWhereInput
    orderBy?: Enumerable<LibraryBookCopyOrderByWithAggregationInput>
    by: LibraryBookCopyScalarFieldEnum[]
    having?: LibraryBookCopyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryBookCopyCountAggregateInputType | true
    _avg?: LibraryBookCopyAvgAggregateInputType
    _sum?: LibraryBookCopySumAggregateInputType
    _min?: LibraryBookCopyMinAggregateInputType
    _max?: LibraryBookCopyMaxAggregateInputType
  }


  export type LibraryBookCopyGroupByOutputType = {
    id: number
    bookId: number
    atUniversityId: number | null
    currentBorrowBytudentId: number | null
    status: string
    isbn: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryBookCopyCountAggregateOutputType | null
    _avg: LibraryBookCopyAvgAggregateOutputType | null
    _sum: LibraryBookCopySumAggregateOutputType | null
    _min: LibraryBookCopyMinAggregateOutputType | null
    _max: LibraryBookCopyMaxAggregateOutputType | null
  }

  type GetLibraryBookCopyGroupByPayload<T extends LibraryBookCopyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryBookCopyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryBookCopyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryBookCopyGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryBookCopyGroupByOutputType[P]>
        }
      >
    >


  export type LibraryBookCopySelect = {
    id?: boolean
    book?: boolean | LibraryBookArgs
    bookId?: boolean
    atUniversity?: boolean | LibraryUniversityArgs
    atUniversityId?: boolean
    currentBorrowByStudent?: boolean | LibraryStudentArgs
    currentBorrowBytudentId?: boolean
    status?: boolean
    isbn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    historyOfBookCopy?: boolean | LibraryBookCopy$historyOfBookCopyArgs
    libraryHistoryOfStudentBorrowing?: boolean | LibraryBookCopy$libraryHistoryOfStudentBorrowingArgs
    libraryStudentBorrowing?: boolean | LibraryBookCopy$libraryStudentBorrowingArgs
    _count?: boolean | LibraryBookCopyCountOutputTypeArgs
  }


  export type LibraryBookCopyInclude = {
    book?: boolean | LibraryBookArgs
    atUniversity?: boolean | LibraryUniversityArgs
    currentBorrowByStudent?: boolean | LibraryStudentArgs
    historyOfBookCopy?: boolean | LibraryBookCopy$historyOfBookCopyArgs
    libraryHistoryOfStudentBorrowing?: boolean | LibraryBookCopy$libraryHistoryOfStudentBorrowingArgs
    libraryStudentBorrowing?: boolean | LibraryBookCopy$libraryStudentBorrowingArgs
    _count?: boolean | LibraryBookCopyCountOutputTypeArgs
  }

  export type LibraryBookCopyGetPayload<S extends boolean | null | undefined | LibraryBookCopyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryBookCopy :
    S extends undefined ? never :
    S extends { include: any } & (LibraryBookCopyArgs | LibraryBookCopyFindManyArgs)
    ? LibraryBookCopy  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'book' ? LibraryBookGetPayload<S['include'][P]> :
        P extends 'atUniversity' ? LibraryUniversityGetPayload<S['include'][P]> | null :
        P extends 'currentBorrowByStudent' ? LibraryStudentGetPayload<S['include'][P]> | null :
        P extends 'historyOfBookCopy' ? Array < LibraryHistoryOfBookCopyGetPayload<S['include'][P]>>  :
        P extends 'libraryHistoryOfStudentBorrowing' ? Array < LibraryStudentRequestGetPayload<S['include'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryBookCopyCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryBookCopyArgs | LibraryBookCopyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'book' ? LibraryBookGetPayload<S['select'][P]> :
        P extends 'atUniversity' ? LibraryUniversityGetPayload<S['select'][P]> | null :
        P extends 'currentBorrowByStudent' ? LibraryStudentGetPayload<S['select'][P]> | null :
        P extends 'historyOfBookCopy' ? Array < LibraryHistoryOfBookCopyGetPayload<S['select'][P]>>  :
        P extends 'libraryHistoryOfStudentBorrowing' ? Array < LibraryStudentRequestGetPayload<S['select'][P]>>  :
        P extends 'libraryStudentBorrowing' ? Array < LibraryStudentBorrowingGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryBookCopyCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryBookCopy ? LibraryBookCopy[P] : never
  } 
      : LibraryBookCopy


  type LibraryBookCopyCountArgs = 
    Omit<LibraryBookCopyFindManyArgs, 'select' | 'include'> & {
      select?: LibraryBookCopyCountAggregateInputType | true
    }

  export interface LibraryBookCopyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryBookCopy that matches the filter.
     * @param {LibraryBookCopyFindUniqueArgs} args - Arguments to find a LibraryBookCopy
     * @example
     * // Get one LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryBookCopyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryBookCopyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryBookCopy'> extends True ? Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>> : Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T> | null, null>

    /**
     * Find one LibraryBookCopy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryBookCopyFindUniqueOrThrowArgs} args - Arguments to find a LibraryBookCopy
     * @example
     * // Get one LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryBookCopyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryBookCopyFindUniqueOrThrowArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Find the first LibraryBookCopy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyFindFirstArgs} args - Arguments to find a LibraryBookCopy
     * @example
     * // Get one LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryBookCopyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryBookCopyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryBookCopy'> extends True ? Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>> : Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T> | null, null>

    /**
     * Find the first LibraryBookCopy that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyFindFirstOrThrowArgs} args - Arguments to find a LibraryBookCopy
     * @example
     * // Get one LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryBookCopyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryBookCopyFindFirstOrThrowArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Find zero or more LibraryBookCopies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryBookCopies
     * const libraryBookCopies = await prisma.libraryBookCopy.findMany()
     * 
     * // Get first 10 LibraryBookCopies
     * const libraryBookCopies = await prisma.libraryBookCopy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryBookCopyWithIdOnly = await prisma.libraryBookCopy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryBookCopyFindManyArgs>(
      args?: SelectSubset<T, LibraryBookCopyFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryBookCopyGetPayload<T>>>

    /**
     * Create a LibraryBookCopy.
     * @param {LibraryBookCopyCreateArgs} args - Arguments to create a LibraryBookCopy.
     * @example
     * // Create one LibraryBookCopy
     * const LibraryBookCopy = await prisma.libraryBookCopy.create({
     *   data: {
     *     // ... data to create a LibraryBookCopy
     *   }
     * })
     * 
    **/
    create<T extends LibraryBookCopyCreateArgs>(
      args: SelectSubset<T, LibraryBookCopyCreateArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Create many LibraryBookCopies.
     *     @param {LibraryBookCopyCreateManyArgs} args - Arguments to create many LibraryBookCopies.
     *     @example
     *     // Create many LibraryBookCopies
     *     const libraryBookCopy = await prisma.libraryBookCopy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryBookCopyCreateManyArgs>(
      args?: SelectSubset<T, LibraryBookCopyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryBookCopy.
     * @param {LibraryBookCopyDeleteArgs} args - Arguments to delete one LibraryBookCopy.
     * @example
     * // Delete one LibraryBookCopy
     * const LibraryBookCopy = await prisma.libraryBookCopy.delete({
     *   where: {
     *     // ... filter to delete one LibraryBookCopy
     *   }
     * })
     * 
    **/
    delete<T extends LibraryBookCopyDeleteArgs>(
      args: SelectSubset<T, LibraryBookCopyDeleteArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Update one LibraryBookCopy.
     * @param {LibraryBookCopyUpdateArgs} args - Arguments to update one LibraryBookCopy.
     * @example
     * // Update one LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryBookCopyUpdateArgs>(
      args: SelectSubset<T, LibraryBookCopyUpdateArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Delete zero or more LibraryBookCopies.
     * @param {LibraryBookCopyDeleteManyArgs} args - Arguments to filter LibraryBookCopies to delete.
     * @example
     * // Delete a few LibraryBookCopies
     * const { count } = await prisma.libraryBookCopy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryBookCopyDeleteManyArgs>(
      args?: SelectSubset<T, LibraryBookCopyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryBookCopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryBookCopies
     * const libraryBookCopy = await prisma.libraryBookCopy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryBookCopyUpdateManyArgs>(
      args: SelectSubset<T, LibraryBookCopyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryBookCopy.
     * @param {LibraryBookCopyUpsertArgs} args - Arguments to update or create a LibraryBookCopy.
     * @example
     * // Update or create a LibraryBookCopy
     * const libraryBookCopy = await prisma.libraryBookCopy.upsert({
     *   create: {
     *     // ... data to create a LibraryBookCopy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryBookCopy we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryBookCopyUpsertArgs>(
      args: SelectSubset<T, LibraryBookCopyUpsertArgs>
    ): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T>>

    /**
     * Count the number of LibraryBookCopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyCountArgs} args - Arguments to filter LibraryBookCopies to count.
     * @example
     * // Count the number of LibraryBookCopies
     * const count = await prisma.libraryBookCopy.count({
     *   where: {
     *     // ... the filter for the LibraryBookCopies we want to count
     *   }
     * })
    **/
    count<T extends LibraryBookCopyCountArgs>(
      args?: Subset<T, LibraryBookCopyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryBookCopyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryBookCopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryBookCopyAggregateArgs>(args: Subset<T, LibraryBookCopyAggregateArgs>): Prisma.PrismaPromise<GetLibraryBookCopyAggregateType<T>>

    /**
     * Group by LibraryBookCopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryBookCopyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryBookCopyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryBookCopyGroupByArgs['orderBy'] }
        : { orderBy?: LibraryBookCopyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryBookCopyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryBookCopyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryBookCopy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryBookCopyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends LibraryBookArgs= {}>(args?: Subset<T, LibraryBookArgs>): Prisma__LibraryBookClient<LibraryBookGetPayload<T> | Null>;

    atUniversity<T extends LibraryUniversityArgs= {}>(args?: Subset<T, LibraryUniversityArgs>): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | Null>;

    currentBorrowByStudent<T extends LibraryStudentArgs= {}>(args?: Subset<T, LibraryStudentArgs>): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | Null>;

    historyOfBookCopy<T extends LibraryBookCopy$historyOfBookCopyArgs= {}>(args?: Subset<T, LibraryBookCopy$historyOfBookCopyArgs>): Prisma.PrismaPromise<Array<LibraryHistoryOfBookCopyGetPayload<T>>| Null>;

    libraryHistoryOfStudentBorrowing<T extends LibraryBookCopy$libraryHistoryOfStudentBorrowingArgs= {}>(args?: Subset<T, LibraryBookCopy$libraryHistoryOfStudentBorrowingArgs>): Prisma.PrismaPromise<Array<LibraryStudentRequestGetPayload<T>>| Null>;

    libraryStudentBorrowing<T extends LibraryBookCopy$libraryStudentBorrowingArgs= {}>(args?: Subset<T, LibraryBookCopy$libraryStudentBorrowingArgs>): Prisma.PrismaPromise<Array<LibraryStudentBorrowingGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryBookCopy base type for findUnique actions
   */
  export type LibraryBookCopyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter, which LibraryBookCopy to fetch.
     */
    where: LibraryBookCopyWhereUniqueInput
  }

  /**
   * LibraryBookCopy findUnique
   */
  export interface LibraryBookCopyFindUniqueArgs extends LibraryBookCopyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryBookCopy findUniqueOrThrow
   */
  export type LibraryBookCopyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter, which LibraryBookCopy to fetch.
     */
    where: LibraryBookCopyWhereUniqueInput
  }


  /**
   * LibraryBookCopy base type for findFirst actions
   */
  export type LibraryBookCopyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter, which LibraryBookCopy to fetch.
     */
    where?: LibraryBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryBookCopies.
     */
    cursor?: LibraryBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryBookCopies.
     */
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }

  /**
   * LibraryBookCopy findFirst
   */
  export interface LibraryBookCopyFindFirstArgs extends LibraryBookCopyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryBookCopy findFirstOrThrow
   */
  export type LibraryBookCopyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter, which LibraryBookCopy to fetch.
     */
    where?: LibraryBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryBookCopies.
     */
    cursor?: LibraryBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryBookCopies.
     */
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }


  /**
   * LibraryBookCopy findMany
   */
  export type LibraryBookCopyFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter, which LibraryBookCopies to fetch.
     */
    where?: LibraryBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryBookCopies.
     */
    cursor?: LibraryBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryBookCopies.
     */
    skip?: number
    distinct?: Enumerable<LibraryBookCopyScalarFieldEnum>
  }


  /**
   * LibraryBookCopy create
   */
  export type LibraryBookCopyCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * The data needed to create a LibraryBookCopy.
     */
    data: XOR<LibraryBookCopyCreateInput, LibraryBookCopyUncheckedCreateInput>
  }


  /**
   * LibraryBookCopy createMany
   */
  export type LibraryBookCopyCreateManyArgs = {
    /**
     * The data used to create many LibraryBookCopies.
     */
    data: Enumerable<LibraryBookCopyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryBookCopy update
   */
  export type LibraryBookCopyUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * The data needed to update a LibraryBookCopy.
     */
    data: XOR<LibraryBookCopyUpdateInput, LibraryBookCopyUncheckedUpdateInput>
    /**
     * Choose, which LibraryBookCopy to update.
     */
    where: LibraryBookCopyWhereUniqueInput
  }


  /**
   * LibraryBookCopy updateMany
   */
  export type LibraryBookCopyUpdateManyArgs = {
    /**
     * The data used to update LibraryBookCopies.
     */
    data: XOR<LibraryBookCopyUpdateManyMutationInput, LibraryBookCopyUncheckedUpdateManyInput>
    /**
     * Filter which LibraryBookCopies to update
     */
    where?: LibraryBookCopyWhereInput
  }


  /**
   * LibraryBookCopy upsert
   */
  export type LibraryBookCopyUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * The filter to search for the LibraryBookCopy to update in case it exists.
     */
    where: LibraryBookCopyWhereUniqueInput
    /**
     * In case the LibraryBookCopy found by the `where` argument doesn't exist, create a new LibraryBookCopy with this data.
     */
    create: XOR<LibraryBookCopyCreateInput, LibraryBookCopyUncheckedCreateInput>
    /**
     * In case the LibraryBookCopy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryBookCopyUpdateInput, LibraryBookCopyUncheckedUpdateInput>
  }


  /**
   * LibraryBookCopy delete
   */
  export type LibraryBookCopyDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
    /**
     * Filter which LibraryBookCopy to delete.
     */
    where: LibraryBookCopyWhereUniqueInput
  }


  /**
   * LibraryBookCopy deleteMany
   */
  export type LibraryBookCopyDeleteManyArgs = {
    /**
     * Filter which LibraryBookCopies to delete
     */
    where?: LibraryBookCopyWhereInput
  }


  /**
   * LibraryBookCopy.historyOfBookCopy
   */
  export type LibraryBookCopy$historyOfBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    where?: LibraryHistoryOfBookCopyWhereInput
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryHistoryOfBookCopyScalarFieldEnum>
  }


  /**
   * LibraryBookCopy.libraryHistoryOfStudentBorrowing
   */
  export type LibraryBookCopy$libraryHistoryOfStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    where?: LibraryStudentRequestWhereInput
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    cursor?: LibraryStudentRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryBookCopy.libraryStudentBorrowing
   */
  export type LibraryBookCopy$libraryStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    where?: LibraryStudentBorrowingWhereInput
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }


  /**
   * LibraryBookCopy without action
   */
  export type LibraryBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryBookCopy
     */
    select?: LibraryBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryBookCopyInclude | null
  }



  /**
   * Model LibraryHistoryOfBookCopy
   */


  export type AggregateLibraryHistoryOfBookCopy = {
    _count: LibraryHistoryOfBookCopyCountAggregateOutputType | null
    _avg: LibraryHistoryOfBookCopyAvgAggregateOutputType | null
    _sum: LibraryHistoryOfBookCopySumAggregateOutputType | null
    _min: LibraryHistoryOfBookCopyMinAggregateOutputType | null
    _max: LibraryHistoryOfBookCopyMaxAggregateOutputType | null
  }

  export type LibraryHistoryOfBookCopyAvgAggregateOutputType = {
    id: number | null
    copyId: number | null
    oncetBorrowBytudentId: number | null
  }

  export type LibraryHistoryOfBookCopySumAggregateOutputType = {
    id: number | null
    copyId: number | null
    oncetBorrowBytudentId: number | null
  }

  export type LibraryHistoryOfBookCopyMinAggregateOutputType = {
    id: number | null
    copyId: number | null
    oncetBorrowBytudentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryHistoryOfBookCopyMaxAggregateOutputType = {
    id: number | null
    copyId: number | null
    oncetBorrowBytudentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryHistoryOfBookCopyCountAggregateOutputType = {
    id: number
    copyId: number
    oncetBorrowBytudentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryHistoryOfBookCopyAvgAggregateInputType = {
    id?: true
    copyId?: true
    oncetBorrowBytudentId?: true
  }

  export type LibraryHistoryOfBookCopySumAggregateInputType = {
    id?: true
    copyId?: true
    oncetBorrowBytudentId?: true
  }

  export type LibraryHistoryOfBookCopyMinAggregateInputType = {
    id?: true
    copyId?: true
    oncetBorrowBytudentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryHistoryOfBookCopyMaxAggregateInputType = {
    id?: true
    copyId?: true
    oncetBorrowBytudentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryHistoryOfBookCopyCountAggregateInputType = {
    id?: true
    copyId?: true
    oncetBorrowBytudentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryHistoryOfBookCopyAggregateArgs = {
    /**
     * Filter which LibraryHistoryOfBookCopy to aggregate.
     */
    where?: LibraryHistoryOfBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryHistoryOfBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryHistoryOfBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryHistoryOfBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryHistoryOfBookCopies
    **/
    _count?: true | LibraryHistoryOfBookCopyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryHistoryOfBookCopyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryHistoryOfBookCopySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryHistoryOfBookCopyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryHistoryOfBookCopyMaxAggregateInputType
  }

  export type GetLibraryHistoryOfBookCopyAggregateType<T extends LibraryHistoryOfBookCopyAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryHistoryOfBookCopy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryHistoryOfBookCopy[P]>
      : GetScalarType<T[P], AggregateLibraryHistoryOfBookCopy[P]>
  }




  export type LibraryHistoryOfBookCopyGroupByArgs = {
    where?: LibraryHistoryOfBookCopyWhereInput
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithAggregationInput>
    by: LibraryHistoryOfBookCopyScalarFieldEnum[]
    having?: LibraryHistoryOfBookCopyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryHistoryOfBookCopyCountAggregateInputType | true
    _avg?: LibraryHistoryOfBookCopyAvgAggregateInputType
    _sum?: LibraryHistoryOfBookCopySumAggregateInputType
    _min?: LibraryHistoryOfBookCopyMinAggregateInputType
    _max?: LibraryHistoryOfBookCopyMaxAggregateInputType
  }


  export type LibraryHistoryOfBookCopyGroupByOutputType = {
    id: number
    copyId: number
    oncetBorrowBytudentId: number | null
    createdAt: Date
    updatedAt: Date
    _count: LibraryHistoryOfBookCopyCountAggregateOutputType | null
    _avg: LibraryHistoryOfBookCopyAvgAggregateOutputType | null
    _sum: LibraryHistoryOfBookCopySumAggregateOutputType | null
    _min: LibraryHistoryOfBookCopyMinAggregateOutputType | null
    _max: LibraryHistoryOfBookCopyMaxAggregateOutputType | null
  }

  type GetLibraryHistoryOfBookCopyGroupByPayload<T extends LibraryHistoryOfBookCopyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryHistoryOfBookCopyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryHistoryOfBookCopyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryHistoryOfBookCopyGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryHistoryOfBookCopyGroupByOutputType[P]>
        }
      >
    >


  export type LibraryHistoryOfBookCopySelect = {
    id?: boolean
    copy?: boolean | LibraryBookCopyArgs
    copyId?: boolean
    onceBorrowByStudent?: boolean | LibraryStudentArgs
    oncetBorrowBytudentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LibraryHistoryOfBookCopyInclude = {
    copy?: boolean | LibraryBookCopyArgs
    onceBorrowByStudent?: boolean | LibraryStudentArgs
  }

  export type LibraryHistoryOfBookCopyGetPayload<S extends boolean | null | undefined | LibraryHistoryOfBookCopyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryHistoryOfBookCopy :
    S extends undefined ? never :
    S extends { include: any } & (LibraryHistoryOfBookCopyArgs | LibraryHistoryOfBookCopyFindManyArgs)
    ? LibraryHistoryOfBookCopy  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'copy' ? LibraryBookCopyGetPayload<S['include'][P]> :
        P extends 'onceBorrowByStudent' ? LibraryStudentGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (LibraryHistoryOfBookCopyArgs | LibraryHistoryOfBookCopyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'copy' ? LibraryBookCopyGetPayload<S['select'][P]> :
        P extends 'onceBorrowByStudent' ? LibraryStudentGetPayload<S['select'][P]> | null :  P extends keyof LibraryHistoryOfBookCopy ? LibraryHistoryOfBookCopy[P] : never
  } 
      : LibraryHistoryOfBookCopy


  type LibraryHistoryOfBookCopyCountArgs = 
    Omit<LibraryHistoryOfBookCopyFindManyArgs, 'select' | 'include'> & {
      select?: LibraryHistoryOfBookCopyCountAggregateInputType | true
    }

  export interface LibraryHistoryOfBookCopyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryHistoryOfBookCopy that matches the filter.
     * @param {LibraryHistoryOfBookCopyFindUniqueArgs} args - Arguments to find a LibraryHistoryOfBookCopy
     * @example
     * // Get one LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryHistoryOfBookCopyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryHistoryOfBookCopy'> extends True ? Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>> : Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T> | null, null>

    /**
     * Find one LibraryHistoryOfBookCopy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryHistoryOfBookCopyFindUniqueOrThrowArgs} args - Arguments to find a LibraryHistoryOfBookCopy
     * @example
     * // Get one LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryHistoryOfBookCopyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyFindUniqueOrThrowArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Find the first LibraryHistoryOfBookCopy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyFindFirstArgs} args - Arguments to find a LibraryHistoryOfBookCopy
     * @example
     * // Get one LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryHistoryOfBookCopyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryHistoryOfBookCopy'> extends True ? Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>> : Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T> | null, null>

    /**
     * Find the first LibraryHistoryOfBookCopy that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyFindFirstOrThrowArgs} args - Arguments to find a LibraryHistoryOfBookCopy
     * @example
     * // Get one LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryHistoryOfBookCopyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyFindFirstOrThrowArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Find zero or more LibraryHistoryOfBookCopies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryHistoryOfBookCopies
     * const libraryHistoryOfBookCopies = await prisma.libraryHistoryOfBookCopy.findMany()
     * 
     * // Get first 10 LibraryHistoryOfBookCopies
     * const libraryHistoryOfBookCopies = await prisma.libraryHistoryOfBookCopy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryHistoryOfBookCopyWithIdOnly = await prisma.libraryHistoryOfBookCopy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryHistoryOfBookCopyFindManyArgs>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryHistoryOfBookCopyGetPayload<T>>>

    /**
     * Create a LibraryHistoryOfBookCopy.
     * @param {LibraryHistoryOfBookCopyCreateArgs} args - Arguments to create a LibraryHistoryOfBookCopy.
     * @example
     * // Create one LibraryHistoryOfBookCopy
     * const LibraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.create({
     *   data: {
     *     // ... data to create a LibraryHistoryOfBookCopy
     *   }
     * })
     * 
    **/
    create<T extends LibraryHistoryOfBookCopyCreateArgs>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyCreateArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Create many LibraryHistoryOfBookCopies.
     *     @param {LibraryHistoryOfBookCopyCreateManyArgs} args - Arguments to create many LibraryHistoryOfBookCopies.
     *     @example
     *     // Create many LibraryHistoryOfBookCopies
     *     const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryHistoryOfBookCopyCreateManyArgs>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryHistoryOfBookCopy.
     * @param {LibraryHistoryOfBookCopyDeleteArgs} args - Arguments to delete one LibraryHistoryOfBookCopy.
     * @example
     * // Delete one LibraryHistoryOfBookCopy
     * const LibraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.delete({
     *   where: {
     *     // ... filter to delete one LibraryHistoryOfBookCopy
     *   }
     * })
     * 
    **/
    delete<T extends LibraryHistoryOfBookCopyDeleteArgs>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyDeleteArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Update one LibraryHistoryOfBookCopy.
     * @param {LibraryHistoryOfBookCopyUpdateArgs} args - Arguments to update one LibraryHistoryOfBookCopy.
     * @example
     * // Update one LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryHistoryOfBookCopyUpdateArgs>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyUpdateArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Delete zero or more LibraryHistoryOfBookCopies.
     * @param {LibraryHistoryOfBookCopyDeleteManyArgs} args - Arguments to filter LibraryHistoryOfBookCopies to delete.
     * @example
     * // Delete a few LibraryHistoryOfBookCopies
     * const { count } = await prisma.libraryHistoryOfBookCopy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryHistoryOfBookCopyDeleteManyArgs>(
      args?: SelectSubset<T, LibraryHistoryOfBookCopyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryHistoryOfBookCopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryHistoryOfBookCopies
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryHistoryOfBookCopyUpdateManyArgs>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryHistoryOfBookCopy.
     * @param {LibraryHistoryOfBookCopyUpsertArgs} args - Arguments to update or create a LibraryHistoryOfBookCopy.
     * @example
     * // Update or create a LibraryHistoryOfBookCopy
     * const libraryHistoryOfBookCopy = await prisma.libraryHistoryOfBookCopy.upsert({
     *   create: {
     *     // ... data to create a LibraryHistoryOfBookCopy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryHistoryOfBookCopy we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryHistoryOfBookCopyUpsertArgs>(
      args: SelectSubset<T, LibraryHistoryOfBookCopyUpsertArgs>
    ): Prisma__LibraryHistoryOfBookCopyClient<LibraryHistoryOfBookCopyGetPayload<T>>

    /**
     * Count the number of LibraryHistoryOfBookCopies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyCountArgs} args - Arguments to filter LibraryHistoryOfBookCopies to count.
     * @example
     * // Count the number of LibraryHistoryOfBookCopies
     * const count = await prisma.libraryHistoryOfBookCopy.count({
     *   where: {
     *     // ... the filter for the LibraryHistoryOfBookCopies we want to count
     *   }
     * })
    **/
    count<T extends LibraryHistoryOfBookCopyCountArgs>(
      args?: Subset<T, LibraryHistoryOfBookCopyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryHistoryOfBookCopyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryHistoryOfBookCopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryHistoryOfBookCopyAggregateArgs>(args: Subset<T, LibraryHistoryOfBookCopyAggregateArgs>): Prisma.PrismaPromise<GetLibraryHistoryOfBookCopyAggregateType<T>>

    /**
     * Group by LibraryHistoryOfBookCopy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryHistoryOfBookCopyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryHistoryOfBookCopyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryHistoryOfBookCopyGroupByArgs['orderBy'] }
        : { orderBy?: LibraryHistoryOfBookCopyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryHistoryOfBookCopyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryHistoryOfBookCopyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryHistoryOfBookCopy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryHistoryOfBookCopyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    copy<T extends LibraryBookCopyArgs= {}>(args?: Subset<T, LibraryBookCopyArgs>): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T> | Null>;

    onceBorrowByStudent<T extends LibraryStudentArgs= {}>(args?: Subset<T, LibraryStudentArgs>): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryHistoryOfBookCopy base type for findUnique actions
   */
  export type LibraryHistoryOfBookCopyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter, which LibraryHistoryOfBookCopy to fetch.
     */
    where: LibraryHistoryOfBookCopyWhereUniqueInput
  }

  /**
   * LibraryHistoryOfBookCopy findUnique
   */
  export interface LibraryHistoryOfBookCopyFindUniqueArgs extends LibraryHistoryOfBookCopyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryHistoryOfBookCopy findUniqueOrThrow
   */
  export type LibraryHistoryOfBookCopyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter, which LibraryHistoryOfBookCopy to fetch.
     */
    where: LibraryHistoryOfBookCopyWhereUniqueInput
  }


  /**
   * LibraryHistoryOfBookCopy base type for findFirst actions
   */
  export type LibraryHistoryOfBookCopyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter, which LibraryHistoryOfBookCopy to fetch.
     */
    where?: LibraryHistoryOfBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryHistoryOfBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryHistoryOfBookCopies.
     */
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryHistoryOfBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryHistoryOfBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryHistoryOfBookCopies.
     */
    distinct?: Enumerable<LibraryHistoryOfBookCopyScalarFieldEnum>
  }

  /**
   * LibraryHistoryOfBookCopy findFirst
   */
  export interface LibraryHistoryOfBookCopyFindFirstArgs extends LibraryHistoryOfBookCopyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryHistoryOfBookCopy findFirstOrThrow
   */
  export type LibraryHistoryOfBookCopyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter, which LibraryHistoryOfBookCopy to fetch.
     */
    where?: LibraryHistoryOfBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryHistoryOfBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryHistoryOfBookCopies.
     */
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryHistoryOfBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryHistoryOfBookCopies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryHistoryOfBookCopies.
     */
    distinct?: Enumerable<LibraryHistoryOfBookCopyScalarFieldEnum>
  }


  /**
   * LibraryHistoryOfBookCopy findMany
   */
  export type LibraryHistoryOfBookCopyFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter, which LibraryHistoryOfBookCopies to fetch.
     */
    where?: LibraryHistoryOfBookCopyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryHistoryOfBookCopies to fetch.
     */
    orderBy?: Enumerable<LibraryHistoryOfBookCopyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryHistoryOfBookCopies.
     */
    cursor?: LibraryHistoryOfBookCopyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryHistoryOfBookCopies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryHistoryOfBookCopies.
     */
    skip?: number
    distinct?: Enumerable<LibraryHistoryOfBookCopyScalarFieldEnum>
  }


  /**
   * LibraryHistoryOfBookCopy create
   */
  export type LibraryHistoryOfBookCopyCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * The data needed to create a LibraryHistoryOfBookCopy.
     */
    data: XOR<LibraryHistoryOfBookCopyCreateInput, LibraryHistoryOfBookCopyUncheckedCreateInput>
  }


  /**
   * LibraryHistoryOfBookCopy createMany
   */
  export type LibraryHistoryOfBookCopyCreateManyArgs = {
    /**
     * The data used to create many LibraryHistoryOfBookCopies.
     */
    data: Enumerable<LibraryHistoryOfBookCopyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryHistoryOfBookCopy update
   */
  export type LibraryHistoryOfBookCopyUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * The data needed to update a LibraryHistoryOfBookCopy.
     */
    data: XOR<LibraryHistoryOfBookCopyUpdateInput, LibraryHistoryOfBookCopyUncheckedUpdateInput>
    /**
     * Choose, which LibraryHistoryOfBookCopy to update.
     */
    where: LibraryHistoryOfBookCopyWhereUniqueInput
  }


  /**
   * LibraryHistoryOfBookCopy updateMany
   */
  export type LibraryHistoryOfBookCopyUpdateManyArgs = {
    /**
     * The data used to update LibraryHistoryOfBookCopies.
     */
    data: XOR<LibraryHistoryOfBookCopyUpdateManyMutationInput, LibraryHistoryOfBookCopyUncheckedUpdateManyInput>
    /**
     * Filter which LibraryHistoryOfBookCopies to update
     */
    where?: LibraryHistoryOfBookCopyWhereInput
  }


  /**
   * LibraryHistoryOfBookCopy upsert
   */
  export type LibraryHistoryOfBookCopyUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * The filter to search for the LibraryHistoryOfBookCopy to update in case it exists.
     */
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    /**
     * In case the LibraryHistoryOfBookCopy found by the `where` argument doesn't exist, create a new LibraryHistoryOfBookCopy with this data.
     */
    create: XOR<LibraryHistoryOfBookCopyCreateInput, LibraryHistoryOfBookCopyUncheckedCreateInput>
    /**
     * In case the LibraryHistoryOfBookCopy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryHistoryOfBookCopyUpdateInput, LibraryHistoryOfBookCopyUncheckedUpdateInput>
  }


  /**
   * LibraryHistoryOfBookCopy delete
   */
  export type LibraryHistoryOfBookCopyDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
    /**
     * Filter which LibraryHistoryOfBookCopy to delete.
     */
    where: LibraryHistoryOfBookCopyWhereUniqueInput
  }


  /**
   * LibraryHistoryOfBookCopy deleteMany
   */
  export type LibraryHistoryOfBookCopyDeleteManyArgs = {
    /**
     * Filter which LibraryHistoryOfBookCopies to delete
     */
    where?: LibraryHistoryOfBookCopyWhereInput
  }


  /**
   * LibraryHistoryOfBookCopy without action
   */
  export type LibraryHistoryOfBookCopyArgs = {
    /**
     * Select specific fields to fetch from the LibraryHistoryOfBookCopy
     */
    select?: LibraryHistoryOfBookCopySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryHistoryOfBookCopyInclude | null
  }



  /**
   * Model LibraryCategory
   */


  export type AggregateLibraryCategory = {
    _count: LibraryCategoryCountAggregateOutputType | null
    _avg: LibraryCategoryAvgAggregateOutputType | null
    _sum: LibraryCategorySumAggregateOutputType | null
    _min: LibraryCategoryMinAggregateOutputType | null
    _max: LibraryCategoryMaxAggregateOutputType | null
  }

  export type LibraryCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type LibraryCategorySumAggregateOutputType = {
    id: number | null
  }

  export type LibraryCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryCategoryAvgAggregateInputType = {
    id?: true
  }

  export type LibraryCategorySumAggregateInputType = {
    id?: true
  }

  export type LibraryCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryCategoryAggregateArgs = {
    /**
     * Filter which LibraryCategory to aggregate.
     */
    where?: LibraryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryCategories to fetch.
     */
    orderBy?: Enumerable<LibraryCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryCategories
    **/
    _count?: true | LibraryCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryCategoryMaxAggregateInputType
  }

  export type GetLibraryCategoryAggregateType<T extends LibraryCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryCategory[P]>
      : GetScalarType<T[P], AggregateLibraryCategory[P]>
  }




  export type LibraryCategoryGroupByArgs = {
    where?: LibraryCategoryWhereInput
    orderBy?: Enumerable<LibraryCategoryOrderByWithAggregationInput>
    by: LibraryCategoryScalarFieldEnum[]
    having?: LibraryCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryCategoryCountAggregateInputType | true
    _avg?: LibraryCategoryAvgAggregateInputType
    _sum?: LibraryCategorySumAggregateInputType
    _min?: LibraryCategoryMinAggregateInputType
    _max?: LibraryCategoryMaxAggregateInputType
  }


  export type LibraryCategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryCategoryCountAggregateOutputType | null
    _avg: LibraryCategoryAvgAggregateOutputType | null
    _sum: LibraryCategorySumAggregateOutputType | null
    _min: LibraryCategoryMinAggregateOutputType | null
    _max: LibraryCategoryMaxAggregateOutputType | null
  }

  type GetLibraryCategoryGroupByPayload<T extends LibraryCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryCategoryGroupByOutputType[P]>
        }
      >
    >


  export type LibraryCategorySelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookOnCategory?: boolean | LibraryCategory$bookOnCategoryArgs
    _count?: boolean | LibraryCategoryCountOutputTypeArgs
  }


  export type LibraryCategoryInclude = {
    bookOnCategory?: boolean | LibraryCategory$bookOnCategoryArgs
    _count?: boolean | LibraryCategoryCountOutputTypeArgs
  }

  export type LibraryCategoryGetPayload<S extends boolean | null | undefined | LibraryCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryCategory :
    S extends undefined ? never :
    S extends { include: any } & (LibraryCategoryArgs | LibraryCategoryFindManyArgs)
    ? LibraryCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'bookOnCategory' ? Array < BookOnCategoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryCategoryArgs | LibraryCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'bookOnCategory' ? Array < BookOnCategoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryCategory ? LibraryCategory[P] : never
  } 
      : LibraryCategory


  type LibraryCategoryCountArgs = 
    Omit<LibraryCategoryFindManyArgs, 'select' | 'include'> & {
      select?: LibraryCategoryCountAggregateInputType | true
    }

  export interface LibraryCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryCategory that matches the filter.
     * @param {LibraryCategoryFindUniqueArgs} args - Arguments to find a LibraryCategory
     * @example
     * // Get one LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryCategory'> extends True ? Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>> : Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T> | null, null>

    /**
     * Find one LibraryCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryCategoryFindUniqueOrThrowArgs} args - Arguments to find a LibraryCategory
     * @example
     * // Get one LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryCategoryFindUniqueOrThrowArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Find the first LibraryCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryFindFirstArgs} args - Arguments to find a LibraryCategory
     * @example
     * // Get one LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryCategory'> extends True ? Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>> : Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T> | null, null>

    /**
     * Find the first LibraryCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryFindFirstOrThrowArgs} args - Arguments to find a LibraryCategory
     * @example
     * // Get one LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryCategoryFindFirstOrThrowArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Find zero or more LibraryCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryCategories
     * const libraryCategories = await prisma.libraryCategory.findMany()
     * 
     * // Get first 10 LibraryCategories
     * const libraryCategories = await prisma.libraryCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryCategoryWithIdOnly = await prisma.libraryCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryCategoryFindManyArgs>(
      args?: SelectSubset<T, LibraryCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryCategoryGetPayload<T>>>

    /**
     * Create a LibraryCategory.
     * @param {LibraryCategoryCreateArgs} args - Arguments to create a LibraryCategory.
     * @example
     * // Create one LibraryCategory
     * const LibraryCategory = await prisma.libraryCategory.create({
     *   data: {
     *     // ... data to create a LibraryCategory
     *   }
     * })
     * 
    **/
    create<T extends LibraryCategoryCreateArgs>(
      args: SelectSubset<T, LibraryCategoryCreateArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Create many LibraryCategories.
     *     @param {LibraryCategoryCreateManyArgs} args - Arguments to create many LibraryCategories.
     *     @example
     *     // Create many LibraryCategories
     *     const libraryCategory = await prisma.libraryCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryCategoryCreateManyArgs>(
      args?: SelectSubset<T, LibraryCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryCategory.
     * @param {LibraryCategoryDeleteArgs} args - Arguments to delete one LibraryCategory.
     * @example
     * // Delete one LibraryCategory
     * const LibraryCategory = await prisma.libraryCategory.delete({
     *   where: {
     *     // ... filter to delete one LibraryCategory
     *   }
     * })
     * 
    **/
    delete<T extends LibraryCategoryDeleteArgs>(
      args: SelectSubset<T, LibraryCategoryDeleteArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Update one LibraryCategory.
     * @param {LibraryCategoryUpdateArgs} args - Arguments to update one LibraryCategory.
     * @example
     * // Update one LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryCategoryUpdateArgs>(
      args: SelectSubset<T, LibraryCategoryUpdateArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Delete zero or more LibraryCategories.
     * @param {LibraryCategoryDeleteManyArgs} args - Arguments to filter LibraryCategories to delete.
     * @example
     * // Delete a few LibraryCategories
     * const { count } = await prisma.libraryCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryCategoryDeleteManyArgs>(
      args?: SelectSubset<T, LibraryCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryCategories
     * const libraryCategory = await prisma.libraryCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryCategoryUpdateManyArgs>(
      args: SelectSubset<T, LibraryCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryCategory.
     * @param {LibraryCategoryUpsertArgs} args - Arguments to update or create a LibraryCategory.
     * @example
     * // Update or create a LibraryCategory
     * const libraryCategory = await prisma.libraryCategory.upsert({
     *   create: {
     *     // ... data to create a LibraryCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryCategory we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryCategoryUpsertArgs>(
      args: SelectSubset<T, LibraryCategoryUpsertArgs>
    ): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T>>

    /**
     * Count the number of LibraryCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryCountArgs} args - Arguments to filter LibraryCategories to count.
     * @example
     * // Count the number of LibraryCategories
     * const count = await prisma.libraryCategory.count({
     *   where: {
     *     // ... the filter for the LibraryCategories we want to count
     *   }
     * })
    **/
    count<T extends LibraryCategoryCountArgs>(
      args?: Subset<T, LibraryCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryCategoryAggregateArgs>(args: Subset<T, LibraryCategoryAggregateArgs>): Prisma.PrismaPromise<GetLibraryCategoryAggregateType<T>>

    /**
     * Group by LibraryCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryCategoryGroupByArgs['orderBy'] }
        : { orderBy?: LibraryCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bookOnCategory<T extends LibraryCategory$bookOnCategoryArgs= {}>(args?: Subset<T, LibraryCategory$bookOnCategoryArgs>): Prisma.PrismaPromise<Array<BookOnCategoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryCategory base type for findUnique actions
   */
  export type LibraryCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter, which LibraryCategory to fetch.
     */
    where: LibraryCategoryWhereUniqueInput
  }

  /**
   * LibraryCategory findUnique
   */
  export interface LibraryCategoryFindUniqueArgs extends LibraryCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryCategory findUniqueOrThrow
   */
  export type LibraryCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter, which LibraryCategory to fetch.
     */
    where: LibraryCategoryWhereUniqueInput
  }


  /**
   * LibraryCategory base type for findFirst actions
   */
  export type LibraryCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter, which LibraryCategory to fetch.
     */
    where?: LibraryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryCategories to fetch.
     */
    orderBy?: Enumerable<LibraryCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryCategories.
     */
    cursor?: LibraryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryCategories.
     */
    distinct?: Enumerable<LibraryCategoryScalarFieldEnum>
  }

  /**
   * LibraryCategory findFirst
   */
  export interface LibraryCategoryFindFirstArgs extends LibraryCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryCategory findFirstOrThrow
   */
  export type LibraryCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter, which LibraryCategory to fetch.
     */
    where?: LibraryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryCategories to fetch.
     */
    orderBy?: Enumerable<LibraryCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryCategories.
     */
    cursor?: LibraryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryCategories.
     */
    distinct?: Enumerable<LibraryCategoryScalarFieldEnum>
  }


  /**
   * LibraryCategory findMany
   */
  export type LibraryCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter, which LibraryCategories to fetch.
     */
    where?: LibraryCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryCategories to fetch.
     */
    orderBy?: Enumerable<LibraryCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryCategories.
     */
    cursor?: LibraryCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryCategories.
     */
    skip?: number
    distinct?: Enumerable<LibraryCategoryScalarFieldEnum>
  }


  /**
   * LibraryCategory create
   */
  export type LibraryCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * The data needed to create a LibraryCategory.
     */
    data: XOR<LibraryCategoryCreateInput, LibraryCategoryUncheckedCreateInput>
  }


  /**
   * LibraryCategory createMany
   */
  export type LibraryCategoryCreateManyArgs = {
    /**
     * The data used to create many LibraryCategories.
     */
    data: Enumerable<LibraryCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryCategory update
   */
  export type LibraryCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * The data needed to update a LibraryCategory.
     */
    data: XOR<LibraryCategoryUpdateInput, LibraryCategoryUncheckedUpdateInput>
    /**
     * Choose, which LibraryCategory to update.
     */
    where: LibraryCategoryWhereUniqueInput
  }


  /**
   * LibraryCategory updateMany
   */
  export type LibraryCategoryUpdateManyArgs = {
    /**
     * The data used to update LibraryCategories.
     */
    data: XOR<LibraryCategoryUpdateManyMutationInput, LibraryCategoryUncheckedUpdateManyInput>
    /**
     * Filter which LibraryCategories to update
     */
    where?: LibraryCategoryWhereInput
  }


  /**
   * LibraryCategory upsert
   */
  export type LibraryCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * The filter to search for the LibraryCategory to update in case it exists.
     */
    where: LibraryCategoryWhereUniqueInput
    /**
     * In case the LibraryCategory found by the `where` argument doesn't exist, create a new LibraryCategory with this data.
     */
    create: XOR<LibraryCategoryCreateInput, LibraryCategoryUncheckedCreateInput>
    /**
     * In case the LibraryCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryCategoryUpdateInput, LibraryCategoryUncheckedUpdateInput>
  }


  /**
   * LibraryCategory delete
   */
  export type LibraryCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
    /**
     * Filter which LibraryCategory to delete.
     */
    where: LibraryCategoryWhereUniqueInput
  }


  /**
   * LibraryCategory deleteMany
   */
  export type LibraryCategoryDeleteManyArgs = {
    /**
     * Filter which LibraryCategories to delete
     */
    where?: LibraryCategoryWhereInput
  }


  /**
   * LibraryCategory.bookOnCategory
   */
  export type LibraryCategory$bookOnCategoryArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    where?: BookOnCategoryWhereInput
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    cursor?: BookOnCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookOnCategoryScalarFieldEnum>
  }


  /**
   * LibraryCategory without action
   */
  export type LibraryCategoryArgs = {
    /**
     * Select specific fields to fetch from the LibraryCategory
     */
    select?: LibraryCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryCategoryInclude | null
  }



  /**
   * Model LibraryAuthor
   */


  export type AggregateLibraryAuthor = {
    _count: LibraryAuthorCountAggregateOutputType | null
    _avg: LibraryAuthorAvgAggregateOutputType | null
    _sum: LibraryAuthorSumAggregateOutputType | null
    _min: LibraryAuthorMinAggregateOutputType | null
    _max: LibraryAuthorMaxAggregateOutputType | null
  }

  export type LibraryAuthorAvgAggregateOutputType = {
    id: number | null
  }

  export type LibraryAuthorSumAggregateOutputType = {
    id: number | null
  }

  export type LibraryAuthorMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryAuthorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryAuthorCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryAuthorAvgAggregateInputType = {
    id?: true
  }

  export type LibraryAuthorSumAggregateInputType = {
    id?: true
  }

  export type LibraryAuthorMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryAuthorMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryAuthorCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryAuthorAggregateArgs = {
    /**
     * Filter which LibraryAuthor to aggregate.
     */
    where?: LibraryAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryAuthors to fetch.
     */
    orderBy?: Enumerable<LibraryAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryAuthors
    **/
    _count?: true | LibraryAuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryAuthorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryAuthorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryAuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryAuthorMaxAggregateInputType
  }

  export type GetLibraryAuthorAggregateType<T extends LibraryAuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryAuthor[P]>
      : GetScalarType<T[P], AggregateLibraryAuthor[P]>
  }




  export type LibraryAuthorGroupByArgs = {
    where?: LibraryAuthorWhereInput
    orderBy?: Enumerable<LibraryAuthorOrderByWithAggregationInput>
    by: LibraryAuthorScalarFieldEnum[]
    having?: LibraryAuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryAuthorCountAggregateInputType | true
    _avg?: LibraryAuthorAvgAggregateInputType
    _sum?: LibraryAuthorSumAggregateInputType
    _min?: LibraryAuthorMinAggregateInputType
    _max?: LibraryAuthorMaxAggregateInputType
  }


  export type LibraryAuthorGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryAuthorCountAggregateOutputType | null
    _avg: LibraryAuthorAvgAggregateOutputType | null
    _sum: LibraryAuthorSumAggregateOutputType | null
    _min: LibraryAuthorMinAggregateOutputType | null
    _max: LibraryAuthorMaxAggregateOutputType | null
  }

  type GetLibraryAuthorGroupByPayload<T extends LibraryAuthorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryAuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryAuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryAuthorGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryAuthorGroupByOutputType[P]>
        }
      >
    >


  export type LibraryAuthorSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bookOnAuthor?: boolean | LibraryAuthor$bookOnAuthorArgs
    _count?: boolean | LibraryAuthorCountOutputTypeArgs
  }


  export type LibraryAuthorInclude = {
    bookOnAuthor?: boolean | LibraryAuthor$bookOnAuthorArgs
    _count?: boolean | LibraryAuthorCountOutputTypeArgs
  }

  export type LibraryAuthorGetPayload<S extends boolean | null | undefined | LibraryAuthorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryAuthor :
    S extends undefined ? never :
    S extends { include: any } & (LibraryAuthorArgs | LibraryAuthorFindManyArgs)
    ? LibraryAuthor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'bookOnAuthor' ? Array < BookOnAuthorGetPayload<S['include'][P]>>  :
        P extends '_count' ? LibraryAuthorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryAuthorArgs | LibraryAuthorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'bookOnAuthor' ? Array < BookOnAuthorGetPayload<S['select'][P]>>  :
        P extends '_count' ? LibraryAuthorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof LibraryAuthor ? LibraryAuthor[P] : never
  } 
      : LibraryAuthor


  type LibraryAuthorCountArgs = 
    Omit<LibraryAuthorFindManyArgs, 'select' | 'include'> & {
      select?: LibraryAuthorCountAggregateInputType | true
    }

  export interface LibraryAuthorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryAuthor that matches the filter.
     * @param {LibraryAuthorFindUniqueArgs} args - Arguments to find a LibraryAuthor
     * @example
     * // Get one LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryAuthorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryAuthorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryAuthor'> extends True ? Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>> : Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T> | null, null>

    /**
     * Find one LibraryAuthor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryAuthorFindUniqueOrThrowArgs} args - Arguments to find a LibraryAuthor
     * @example
     * // Get one LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryAuthorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryAuthorFindUniqueOrThrowArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Find the first LibraryAuthor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorFindFirstArgs} args - Arguments to find a LibraryAuthor
     * @example
     * // Get one LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryAuthorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryAuthorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryAuthor'> extends True ? Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>> : Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T> | null, null>

    /**
     * Find the first LibraryAuthor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorFindFirstOrThrowArgs} args - Arguments to find a LibraryAuthor
     * @example
     * // Get one LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryAuthorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryAuthorFindFirstOrThrowArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Find zero or more LibraryAuthors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryAuthors
     * const libraryAuthors = await prisma.libraryAuthor.findMany()
     * 
     * // Get first 10 LibraryAuthors
     * const libraryAuthors = await prisma.libraryAuthor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryAuthorWithIdOnly = await prisma.libraryAuthor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryAuthorFindManyArgs>(
      args?: SelectSubset<T, LibraryAuthorFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryAuthorGetPayload<T>>>

    /**
     * Create a LibraryAuthor.
     * @param {LibraryAuthorCreateArgs} args - Arguments to create a LibraryAuthor.
     * @example
     * // Create one LibraryAuthor
     * const LibraryAuthor = await prisma.libraryAuthor.create({
     *   data: {
     *     // ... data to create a LibraryAuthor
     *   }
     * })
     * 
    **/
    create<T extends LibraryAuthorCreateArgs>(
      args: SelectSubset<T, LibraryAuthorCreateArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Create many LibraryAuthors.
     *     @param {LibraryAuthorCreateManyArgs} args - Arguments to create many LibraryAuthors.
     *     @example
     *     // Create many LibraryAuthors
     *     const libraryAuthor = await prisma.libraryAuthor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryAuthorCreateManyArgs>(
      args?: SelectSubset<T, LibraryAuthorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryAuthor.
     * @param {LibraryAuthorDeleteArgs} args - Arguments to delete one LibraryAuthor.
     * @example
     * // Delete one LibraryAuthor
     * const LibraryAuthor = await prisma.libraryAuthor.delete({
     *   where: {
     *     // ... filter to delete one LibraryAuthor
     *   }
     * })
     * 
    **/
    delete<T extends LibraryAuthorDeleteArgs>(
      args: SelectSubset<T, LibraryAuthorDeleteArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Update one LibraryAuthor.
     * @param {LibraryAuthorUpdateArgs} args - Arguments to update one LibraryAuthor.
     * @example
     * // Update one LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryAuthorUpdateArgs>(
      args: SelectSubset<T, LibraryAuthorUpdateArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Delete zero or more LibraryAuthors.
     * @param {LibraryAuthorDeleteManyArgs} args - Arguments to filter LibraryAuthors to delete.
     * @example
     * // Delete a few LibraryAuthors
     * const { count } = await prisma.libraryAuthor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryAuthorDeleteManyArgs>(
      args?: SelectSubset<T, LibraryAuthorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryAuthors
     * const libraryAuthor = await prisma.libraryAuthor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryAuthorUpdateManyArgs>(
      args: SelectSubset<T, LibraryAuthorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryAuthor.
     * @param {LibraryAuthorUpsertArgs} args - Arguments to update or create a LibraryAuthor.
     * @example
     * // Update or create a LibraryAuthor
     * const libraryAuthor = await prisma.libraryAuthor.upsert({
     *   create: {
     *     // ... data to create a LibraryAuthor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryAuthor we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryAuthorUpsertArgs>(
      args: SelectSubset<T, LibraryAuthorUpsertArgs>
    ): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T>>

    /**
     * Count the number of LibraryAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorCountArgs} args - Arguments to filter LibraryAuthors to count.
     * @example
     * // Count the number of LibraryAuthors
     * const count = await prisma.libraryAuthor.count({
     *   where: {
     *     // ... the filter for the LibraryAuthors we want to count
     *   }
     * })
    **/
    count<T extends LibraryAuthorCountArgs>(
      args?: Subset<T, LibraryAuthorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryAuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryAuthorAggregateArgs>(args: Subset<T, LibraryAuthorAggregateArgs>): Prisma.PrismaPromise<GetLibraryAuthorAggregateType<T>>

    /**
     * Group by LibraryAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryAuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryAuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryAuthorGroupByArgs['orderBy'] }
        : { orderBy?: LibraryAuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryAuthor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryAuthorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    bookOnAuthor<T extends LibraryAuthor$bookOnAuthorArgs= {}>(args?: Subset<T, LibraryAuthor$bookOnAuthorArgs>): Prisma.PrismaPromise<Array<BookOnAuthorGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryAuthor base type for findUnique actions
   */
  export type LibraryAuthorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter, which LibraryAuthor to fetch.
     */
    where: LibraryAuthorWhereUniqueInput
  }

  /**
   * LibraryAuthor findUnique
   */
  export interface LibraryAuthorFindUniqueArgs extends LibraryAuthorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryAuthor findUniqueOrThrow
   */
  export type LibraryAuthorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter, which LibraryAuthor to fetch.
     */
    where: LibraryAuthorWhereUniqueInput
  }


  /**
   * LibraryAuthor base type for findFirst actions
   */
  export type LibraryAuthorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter, which LibraryAuthor to fetch.
     */
    where?: LibraryAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryAuthors to fetch.
     */
    orderBy?: Enumerable<LibraryAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryAuthors.
     */
    cursor?: LibraryAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryAuthors.
     */
    distinct?: Enumerable<LibraryAuthorScalarFieldEnum>
  }

  /**
   * LibraryAuthor findFirst
   */
  export interface LibraryAuthorFindFirstArgs extends LibraryAuthorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryAuthor findFirstOrThrow
   */
  export type LibraryAuthorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter, which LibraryAuthor to fetch.
     */
    where?: LibraryAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryAuthors to fetch.
     */
    orderBy?: Enumerable<LibraryAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryAuthors.
     */
    cursor?: LibraryAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryAuthors.
     */
    distinct?: Enumerable<LibraryAuthorScalarFieldEnum>
  }


  /**
   * LibraryAuthor findMany
   */
  export type LibraryAuthorFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter, which LibraryAuthors to fetch.
     */
    where?: LibraryAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryAuthors to fetch.
     */
    orderBy?: Enumerable<LibraryAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryAuthors.
     */
    cursor?: LibraryAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryAuthors.
     */
    skip?: number
    distinct?: Enumerable<LibraryAuthorScalarFieldEnum>
  }


  /**
   * LibraryAuthor create
   */
  export type LibraryAuthorCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * The data needed to create a LibraryAuthor.
     */
    data: XOR<LibraryAuthorCreateInput, LibraryAuthorUncheckedCreateInput>
  }


  /**
   * LibraryAuthor createMany
   */
  export type LibraryAuthorCreateManyArgs = {
    /**
     * The data used to create many LibraryAuthors.
     */
    data: Enumerable<LibraryAuthorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryAuthor update
   */
  export type LibraryAuthorUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * The data needed to update a LibraryAuthor.
     */
    data: XOR<LibraryAuthorUpdateInput, LibraryAuthorUncheckedUpdateInput>
    /**
     * Choose, which LibraryAuthor to update.
     */
    where: LibraryAuthorWhereUniqueInput
  }


  /**
   * LibraryAuthor updateMany
   */
  export type LibraryAuthorUpdateManyArgs = {
    /**
     * The data used to update LibraryAuthors.
     */
    data: XOR<LibraryAuthorUpdateManyMutationInput, LibraryAuthorUncheckedUpdateManyInput>
    /**
     * Filter which LibraryAuthors to update
     */
    where?: LibraryAuthorWhereInput
  }


  /**
   * LibraryAuthor upsert
   */
  export type LibraryAuthorUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * The filter to search for the LibraryAuthor to update in case it exists.
     */
    where: LibraryAuthorWhereUniqueInput
    /**
     * In case the LibraryAuthor found by the `where` argument doesn't exist, create a new LibraryAuthor with this data.
     */
    create: XOR<LibraryAuthorCreateInput, LibraryAuthorUncheckedCreateInput>
    /**
     * In case the LibraryAuthor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryAuthorUpdateInput, LibraryAuthorUncheckedUpdateInput>
  }


  /**
   * LibraryAuthor delete
   */
  export type LibraryAuthorDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
    /**
     * Filter which LibraryAuthor to delete.
     */
    where: LibraryAuthorWhereUniqueInput
  }


  /**
   * LibraryAuthor deleteMany
   */
  export type LibraryAuthorDeleteManyArgs = {
    /**
     * Filter which LibraryAuthors to delete
     */
    where?: LibraryAuthorWhereInput
  }


  /**
   * LibraryAuthor.bookOnAuthor
   */
  export type LibraryAuthor$bookOnAuthorArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    where?: BookOnAuthorWhereInput
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    cursor?: BookOnAuthorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BookOnAuthorScalarFieldEnum>
  }


  /**
   * LibraryAuthor without action
   */
  export type LibraryAuthorArgs = {
    /**
     * Select specific fields to fetch from the LibraryAuthor
     */
    select?: LibraryAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryAuthorInclude | null
  }



  /**
   * Model BookOnAuthor
   */


  export type AggregateBookOnAuthor = {
    _count: BookOnAuthorCountAggregateOutputType | null
    _avg: BookOnAuthorAvgAggregateOutputType | null
    _sum: BookOnAuthorSumAggregateOutputType | null
    _min: BookOnAuthorMinAggregateOutputType | null
    _max: BookOnAuthorMaxAggregateOutputType | null
  }

  export type BookOnAuthorAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type BookOnAuthorSumAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
  }

  export type BookOnAuthorMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookOnAuthorMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    authorId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookOnAuthorCountAggregateOutputType = {
    id: number
    bookId: number
    authorId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookOnAuthorAvgAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type BookOnAuthorSumAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
  }

  export type BookOnAuthorMinAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookOnAuthorMaxAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookOnAuthorCountAggregateInputType = {
    id?: true
    bookId?: true
    authorId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookOnAuthorAggregateArgs = {
    /**
     * Filter which BookOnAuthor to aggregate.
     */
    where?: BookOnAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnAuthors to fetch.
     */
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookOnAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookOnAuthors
    **/
    _count?: true | BookOnAuthorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookOnAuthorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookOnAuthorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookOnAuthorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookOnAuthorMaxAggregateInputType
  }

  export type GetBookOnAuthorAggregateType<T extends BookOnAuthorAggregateArgs> = {
        [P in keyof T & keyof AggregateBookOnAuthor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookOnAuthor[P]>
      : GetScalarType<T[P], AggregateBookOnAuthor[P]>
  }




  export type BookOnAuthorGroupByArgs = {
    where?: BookOnAuthorWhereInput
    orderBy?: Enumerable<BookOnAuthorOrderByWithAggregationInput>
    by: BookOnAuthorScalarFieldEnum[]
    having?: BookOnAuthorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookOnAuthorCountAggregateInputType | true
    _avg?: BookOnAuthorAvgAggregateInputType
    _sum?: BookOnAuthorSumAggregateInputType
    _min?: BookOnAuthorMinAggregateInputType
    _max?: BookOnAuthorMaxAggregateInputType
  }


  export type BookOnAuthorGroupByOutputType = {
    id: number
    bookId: number
    authorId: number
    createdAt: Date
    updatedAt: Date
    _count: BookOnAuthorCountAggregateOutputType | null
    _avg: BookOnAuthorAvgAggregateOutputType | null
    _sum: BookOnAuthorSumAggregateOutputType | null
    _min: BookOnAuthorMinAggregateOutputType | null
    _max: BookOnAuthorMaxAggregateOutputType | null
  }

  type GetBookOnAuthorGroupByPayload<T extends BookOnAuthorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BookOnAuthorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookOnAuthorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookOnAuthorGroupByOutputType[P]>
            : GetScalarType<T[P], BookOnAuthorGroupByOutputType[P]>
        }
      >
    >


  export type BookOnAuthorSelect = {
    id?: boolean
    book?: boolean | LibraryBookArgs
    bookId?: boolean
    author?: boolean | LibraryAuthorArgs
    authorId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type BookOnAuthorInclude = {
    book?: boolean | LibraryBookArgs
    author?: boolean | LibraryAuthorArgs
  }

  export type BookOnAuthorGetPayload<S extends boolean | null | undefined | BookOnAuthorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BookOnAuthor :
    S extends undefined ? never :
    S extends { include: any } & (BookOnAuthorArgs | BookOnAuthorFindManyArgs)
    ? BookOnAuthor  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'book' ? LibraryBookGetPayload<S['include'][P]> :
        P extends 'author' ? LibraryAuthorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BookOnAuthorArgs | BookOnAuthorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'book' ? LibraryBookGetPayload<S['select'][P]> :
        P extends 'author' ? LibraryAuthorGetPayload<S['select'][P]> :  P extends keyof BookOnAuthor ? BookOnAuthor[P] : never
  } 
      : BookOnAuthor


  type BookOnAuthorCountArgs = 
    Omit<BookOnAuthorFindManyArgs, 'select' | 'include'> & {
      select?: BookOnAuthorCountAggregateInputType | true
    }

  export interface BookOnAuthorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BookOnAuthor that matches the filter.
     * @param {BookOnAuthorFindUniqueArgs} args - Arguments to find a BookOnAuthor
     * @example
     * // Get one BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookOnAuthorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookOnAuthorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BookOnAuthor'> extends True ? Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>> : Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T> | null, null>

    /**
     * Find one BookOnAuthor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookOnAuthorFindUniqueOrThrowArgs} args - Arguments to find a BookOnAuthor
     * @example
     * // Get one BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookOnAuthorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookOnAuthorFindUniqueOrThrowArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Find the first BookOnAuthor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorFindFirstArgs} args - Arguments to find a BookOnAuthor
     * @example
     * // Get one BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookOnAuthorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookOnAuthorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BookOnAuthor'> extends True ? Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>> : Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T> | null, null>

    /**
     * Find the first BookOnAuthor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorFindFirstOrThrowArgs} args - Arguments to find a BookOnAuthor
     * @example
     * // Get one BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookOnAuthorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookOnAuthorFindFirstOrThrowArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Find zero or more BookOnAuthors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookOnAuthors
     * const bookOnAuthors = await prisma.bookOnAuthor.findMany()
     * 
     * // Get first 10 BookOnAuthors
     * const bookOnAuthors = await prisma.bookOnAuthor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookOnAuthorWithIdOnly = await prisma.bookOnAuthor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookOnAuthorFindManyArgs>(
      args?: SelectSubset<T, BookOnAuthorFindManyArgs>
    ): Prisma.PrismaPromise<Array<BookOnAuthorGetPayload<T>>>

    /**
     * Create a BookOnAuthor.
     * @param {BookOnAuthorCreateArgs} args - Arguments to create a BookOnAuthor.
     * @example
     * // Create one BookOnAuthor
     * const BookOnAuthor = await prisma.bookOnAuthor.create({
     *   data: {
     *     // ... data to create a BookOnAuthor
     *   }
     * })
     * 
    **/
    create<T extends BookOnAuthorCreateArgs>(
      args: SelectSubset<T, BookOnAuthorCreateArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Create many BookOnAuthors.
     *     @param {BookOnAuthorCreateManyArgs} args - Arguments to create many BookOnAuthors.
     *     @example
     *     // Create many BookOnAuthors
     *     const bookOnAuthor = await prisma.bookOnAuthor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookOnAuthorCreateManyArgs>(
      args?: SelectSubset<T, BookOnAuthorCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookOnAuthor.
     * @param {BookOnAuthorDeleteArgs} args - Arguments to delete one BookOnAuthor.
     * @example
     * // Delete one BookOnAuthor
     * const BookOnAuthor = await prisma.bookOnAuthor.delete({
     *   where: {
     *     // ... filter to delete one BookOnAuthor
     *   }
     * })
     * 
    **/
    delete<T extends BookOnAuthorDeleteArgs>(
      args: SelectSubset<T, BookOnAuthorDeleteArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Update one BookOnAuthor.
     * @param {BookOnAuthorUpdateArgs} args - Arguments to update one BookOnAuthor.
     * @example
     * // Update one BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookOnAuthorUpdateArgs>(
      args: SelectSubset<T, BookOnAuthorUpdateArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Delete zero or more BookOnAuthors.
     * @param {BookOnAuthorDeleteManyArgs} args - Arguments to filter BookOnAuthors to delete.
     * @example
     * // Delete a few BookOnAuthors
     * const { count } = await prisma.bookOnAuthor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookOnAuthorDeleteManyArgs>(
      args?: SelectSubset<T, BookOnAuthorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookOnAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookOnAuthors
     * const bookOnAuthor = await prisma.bookOnAuthor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookOnAuthorUpdateManyArgs>(
      args: SelectSubset<T, BookOnAuthorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookOnAuthor.
     * @param {BookOnAuthorUpsertArgs} args - Arguments to update or create a BookOnAuthor.
     * @example
     * // Update or create a BookOnAuthor
     * const bookOnAuthor = await prisma.bookOnAuthor.upsert({
     *   create: {
     *     // ... data to create a BookOnAuthor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookOnAuthor we want to update
     *   }
     * })
    **/
    upsert<T extends BookOnAuthorUpsertArgs>(
      args: SelectSubset<T, BookOnAuthorUpsertArgs>
    ): Prisma__BookOnAuthorClient<BookOnAuthorGetPayload<T>>

    /**
     * Count the number of BookOnAuthors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorCountArgs} args - Arguments to filter BookOnAuthors to count.
     * @example
     * // Count the number of BookOnAuthors
     * const count = await prisma.bookOnAuthor.count({
     *   where: {
     *     // ... the filter for the BookOnAuthors we want to count
     *   }
     * })
    **/
    count<T extends BookOnAuthorCountArgs>(
      args?: Subset<T, BookOnAuthorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookOnAuthorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookOnAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookOnAuthorAggregateArgs>(args: Subset<T, BookOnAuthorAggregateArgs>): Prisma.PrismaPromise<GetBookOnAuthorAggregateType<T>>

    /**
     * Group by BookOnAuthor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnAuthorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookOnAuthorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookOnAuthorGroupByArgs['orderBy'] }
        : { orderBy?: BookOnAuthorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookOnAuthorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookOnAuthorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BookOnAuthor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookOnAuthorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends LibraryBookArgs= {}>(args?: Subset<T, LibraryBookArgs>): Prisma__LibraryBookClient<LibraryBookGetPayload<T> | Null>;

    author<T extends LibraryAuthorArgs= {}>(args?: Subset<T, LibraryAuthorArgs>): Prisma__LibraryAuthorClient<LibraryAuthorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BookOnAuthor base type for findUnique actions
   */
  export type BookOnAuthorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter, which BookOnAuthor to fetch.
     */
    where: BookOnAuthorWhereUniqueInput
  }

  /**
   * BookOnAuthor findUnique
   */
  export interface BookOnAuthorFindUniqueArgs extends BookOnAuthorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookOnAuthor findUniqueOrThrow
   */
  export type BookOnAuthorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter, which BookOnAuthor to fetch.
     */
    where: BookOnAuthorWhereUniqueInput
  }


  /**
   * BookOnAuthor base type for findFirst actions
   */
  export type BookOnAuthorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter, which BookOnAuthor to fetch.
     */
    where?: BookOnAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnAuthors to fetch.
     */
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookOnAuthors.
     */
    cursor?: BookOnAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookOnAuthors.
     */
    distinct?: Enumerable<BookOnAuthorScalarFieldEnum>
  }

  /**
   * BookOnAuthor findFirst
   */
  export interface BookOnAuthorFindFirstArgs extends BookOnAuthorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookOnAuthor findFirstOrThrow
   */
  export type BookOnAuthorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter, which BookOnAuthor to fetch.
     */
    where?: BookOnAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnAuthors to fetch.
     */
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookOnAuthors.
     */
    cursor?: BookOnAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnAuthors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookOnAuthors.
     */
    distinct?: Enumerable<BookOnAuthorScalarFieldEnum>
  }


  /**
   * BookOnAuthor findMany
   */
  export type BookOnAuthorFindManyArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter, which BookOnAuthors to fetch.
     */
    where?: BookOnAuthorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnAuthors to fetch.
     */
    orderBy?: Enumerable<BookOnAuthorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookOnAuthors.
     */
    cursor?: BookOnAuthorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnAuthors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnAuthors.
     */
    skip?: number
    distinct?: Enumerable<BookOnAuthorScalarFieldEnum>
  }


  /**
   * BookOnAuthor create
   */
  export type BookOnAuthorCreateArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * The data needed to create a BookOnAuthor.
     */
    data: XOR<BookOnAuthorCreateInput, BookOnAuthorUncheckedCreateInput>
  }


  /**
   * BookOnAuthor createMany
   */
  export type BookOnAuthorCreateManyArgs = {
    /**
     * The data used to create many BookOnAuthors.
     */
    data: Enumerable<BookOnAuthorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BookOnAuthor update
   */
  export type BookOnAuthorUpdateArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * The data needed to update a BookOnAuthor.
     */
    data: XOR<BookOnAuthorUpdateInput, BookOnAuthorUncheckedUpdateInput>
    /**
     * Choose, which BookOnAuthor to update.
     */
    where: BookOnAuthorWhereUniqueInput
  }


  /**
   * BookOnAuthor updateMany
   */
  export type BookOnAuthorUpdateManyArgs = {
    /**
     * The data used to update BookOnAuthors.
     */
    data: XOR<BookOnAuthorUpdateManyMutationInput, BookOnAuthorUncheckedUpdateManyInput>
    /**
     * Filter which BookOnAuthors to update
     */
    where?: BookOnAuthorWhereInput
  }


  /**
   * BookOnAuthor upsert
   */
  export type BookOnAuthorUpsertArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * The filter to search for the BookOnAuthor to update in case it exists.
     */
    where: BookOnAuthorWhereUniqueInput
    /**
     * In case the BookOnAuthor found by the `where` argument doesn't exist, create a new BookOnAuthor with this data.
     */
    create: XOR<BookOnAuthorCreateInput, BookOnAuthorUncheckedCreateInput>
    /**
     * In case the BookOnAuthor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookOnAuthorUpdateInput, BookOnAuthorUncheckedUpdateInput>
  }


  /**
   * BookOnAuthor delete
   */
  export type BookOnAuthorDeleteArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
    /**
     * Filter which BookOnAuthor to delete.
     */
    where: BookOnAuthorWhereUniqueInput
  }


  /**
   * BookOnAuthor deleteMany
   */
  export type BookOnAuthorDeleteManyArgs = {
    /**
     * Filter which BookOnAuthors to delete
     */
    where?: BookOnAuthorWhereInput
  }


  /**
   * BookOnAuthor without action
   */
  export type BookOnAuthorArgs = {
    /**
     * Select specific fields to fetch from the BookOnAuthor
     */
    select?: BookOnAuthorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnAuthorInclude | null
  }



  /**
   * Model BookOnCategory
   */


  export type AggregateBookOnCategory = {
    _count: BookOnCategoryCountAggregateOutputType | null
    _avg: BookOnCategoryAvgAggregateOutputType | null
    _sum: BookOnCategorySumAggregateOutputType | null
    _min: BookOnCategoryMinAggregateOutputType | null
    _max: BookOnCategoryMaxAggregateOutputType | null
  }

  export type BookOnCategoryAvgAggregateOutputType = {
    id: number | null
    bookId: number | null
    categoryId: number | null
  }

  export type BookOnCategorySumAggregateOutputType = {
    id: number | null
    bookId: number | null
    categoryId: number | null
  }

  export type BookOnCategoryMinAggregateOutputType = {
    id: number | null
    bookId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookOnCategoryMaxAggregateOutputType = {
    id: number | null
    bookId: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BookOnCategoryCountAggregateOutputType = {
    id: number
    bookId: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BookOnCategoryAvgAggregateInputType = {
    id?: true
    bookId?: true
    categoryId?: true
  }

  export type BookOnCategorySumAggregateInputType = {
    id?: true
    bookId?: true
    categoryId?: true
  }

  export type BookOnCategoryMinAggregateInputType = {
    id?: true
    bookId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookOnCategoryMaxAggregateInputType = {
    id?: true
    bookId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BookOnCategoryCountAggregateInputType = {
    id?: true
    bookId?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BookOnCategoryAggregateArgs = {
    /**
     * Filter which BookOnCategory to aggregate.
     */
    where?: BookOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnCategories to fetch.
     */
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookOnCategories
    **/
    _count?: true | BookOnCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookOnCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookOnCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookOnCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookOnCategoryMaxAggregateInputType
  }

  export type GetBookOnCategoryAggregateType<T extends BookOnCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBookOnCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookOnCategory[P]>
      : GetScalarType<T[P], AggregateBookOnCategory[P]>
  }




  export type BookOnCategoryGroupByArgs = {
    where?: BookOnCategoryWhereInput
    orderBy?: Enumerable<BookOnCategoryOrderByWithAggregationInput>
    by: BookOnCategoryScalarFieldEnum[]
    having?: BookOnCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookOnCategoryCountAggregateInputType | true
    _avg?: BookOnCategoryAvgAggregateInputType
    _sum?: BookOnCategorySumAggregateInputType
    _min?: BookOnCategoryMinAggregateInputType
    _max?: BookOnCategoryMaxAggregateInputType
  }


  export type BookOnCategoryGroupByOutputType = {
    id: number
    bookId: number
    categoryId: number
    createdAt: Date
    updatedAt: Date
    _count: BookOnCategoryCountAggregateOutputType | null
    _avg: BookOnCategoryAvgAggregateOutputType | null
    _sum: BookOnCategorySumAggregateOutputType | null
    _min: BookOnCategoryMinAggregateOutputType | null
    _max: BookOnCategoryMaxAggregateOutputType | null
  }

  type GetBookOnCategoryGroupByPayload<T extends BookOnCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BookOnCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookOnCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookOnCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BookOnCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BookOnCategorySelect = {
    id?: boolean
    book?: boolean | LibraryBookArgs
    bookId?: boolean
    category?: boolean | LibraryCategoryArgs
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type BookOnCategoryInclude = {
    book?: boolean | LibraryBookArgs
    category?: boolean | LibraryCategoryArgs
  }

  export type BookOnCategoryGetPayload<S extends boolean | null | undefined | BookOnCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BookOnCategory :
    S extends undefined ? never :
    S extends { include: any } & (BookOnCategoryArgs | BookOnCategoryFindManyArgs)
    ? BookOnCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'book' ? LibraryBookGetPayload<S['include'][P]> :
        P extends 'category' ? LibraryCategoryGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BookOnCategoryArgs | BookOnCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'book' ? LibraryBookGetPayload<S['select'][P]> :
        P extends 'category' ? LibraryCategoryGetPayload<S['select'][P]> :  P extends keyof BookOnCategory ? BookOnCategory[P] : never
  } 
      : BookOnCategory


  type BookOnCategoryCountArgs = 
    Omit<BookOnCategoryFindManyArgs, 'select' | 'include'> & {
      select?: BookOnCategoryCountAggregateInputType | true
    }

  export interface BookOnCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BookOnCategory that matches the filter.
     * @param {BookOnCategoryFindUniqueArgs} args - Arguments to find a BookOnCategory
     * @example
     * // Get one BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookOnCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BookOnCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BookOnCategory'> extends True ? Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>> : Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T> | null, null>

    /**
     * Find one BookOnCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookOnCategoryFindUniqueOrThrowArgs} args - Arguments to find a BookOnCategory
     * @example
     * // Get one BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookOnCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BookOnCategoryFindUniqueOrThrowArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Find the first BookOnCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryFindFirstArgs} args - Arguments to find a BookOnCategory
     * @example
     * // Get one BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookOnCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BookOnCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BookOnCategory'> extends True ? Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>> : Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T> | null, null>

    /**
     * Find the first BookOnCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryFindFirstOrThrowArgs} args - Arguments to find a BookOnCategory
     * @example
     * // Get one BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookOnCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BookOnCategoryFindFirstOrThrowArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Find zero or more BookOnCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookOnCategories
     * const bookOnCategories = await prisma.bookOnCategory.findMany()
     * 
     * // Get first 10 BookOnCategories
     * const bookOnCategories = await prisma.bookOnCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookOnCategoryWithIdOnly = await prisma.bookOnCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BookOnCategoryFindManyArgs>(
      args?: SelectSubset<T, BookOnCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<BookOnCategoryGetPayload<T>>>

    /**
     * Create a BookOnCategory.
     * @param {BookOnCategoryCreateArgs} args - Arguments to create a BookOnCategory.
     * @example
     * // Create one BookOnCategory
     * const BookOnCategory = await prisma.bookOnCategory.create({
     *   data: {
     *     // ... data to create a BookOnCategory
     *   }
     * })
     * 
    **/
    create<T extends BookOnCategoryCreateArgs>(
      args: SelectSubset<T, BookOnCategoryCreateArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Create many BookOnCategories.
     *     @param {BookOnCategoryCreateManyArgs} args - Arguments to create many BookOnCategories.
     *     @example
     *     // Create many BookOnCategories
     *     const bookOnCategory = await prisma.bookOnCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookOnCategoryCreateManyArgs>(
      args?: SelectSubset<T, BookOnCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookOnCategory.
     * @param {BookOnCategoryDeleteArgs} args - Arguments to delete one BookOnCategory.
     * @example
     * // Delete one BookOnCategory
     * const BookOnCategory = await prisma.bookOnCategory.delete({
     *   where: {
     *     // ... filter to delete one BookOnCategory
     *   }
     * })
     * 
    **/
    delete<T extends BookOnCategoryDeleteArgs>(
      args: SelectSubset<T, BookOnCategoryDeleteArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Update one BookOnCategory.
     * @param {BookOnCategoryUpdateArgs} args - Arguments to update one BookOnCategory.
     * @example
     * // Update one BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookOnCategoryUpdateArgs>(
      args: SelectSubset<T, BookOnCategoryUpdateArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Delete zero or more BookOnCategories.
     * @param {BookOnCategoryDeleteManyArgs} args - Arguments to filter BookOnCategories to delete.
     * @example
     * // Delete a few BookOnCategories
     * const { count } = await prisma.bookOnCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookOnCategoryDeleteManyArgs>(
      args?: SelectSubset<T, BookOnCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookOnCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookOnCategories
     * const bookOnCategory = await prisma.bookOnCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookOnCategoryUpdateManyArgs>(
      args: SelectSubset<T, BookOnCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookOnCategory.
     * @param {BookOnCategoryUpsertArgs} args - Arguments to update or create a BookOnCategory.
     * @example
     * // Update or create a BookOnCategory
     * const bookOnCategory = await prisma.bookOnCategory.upsert({
     *   create: {
     *     // ... data to create a BookOnCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookOnCategory we want to update
     *   }
     * })
    **/
    upsert<T extends BookOnCategoryUpsertArgs>(
      args: SelectSubset<T, BookOnCategoryUpsertArgs>
    ): Prisma__BookOnCategoryClient<BookOnCategoryGetPayload<T>>

    /**
     * Count the number of BookOnCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryCountArgs} args - Arguments to filter BookOnCategories to count.
     * @example
     * // Count the number of BookOnCategories
     * const count = await prisma.bookOnCategory.count({
     *   where: {
     *     // ... the filter for the BookOnCategories we want to count
     *   }
     * })
    **/
    count<T extends BookOnCategoryCountArgs>(
      args?: Subset<T, BookOnCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookOnCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookOnCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookOnCategoryAggregateArgs>(args: Subset<T, BookOnCategoryAggregateArgs>): Prisma.PrismaPromise<GetBookOnCategoryAggregateType<T>>

    /**
     * Group by BookOnCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookOnCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookOnCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookOnCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BookOnCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookOnCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookOnCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BookOnCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BookOnCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    book<T extends LibraryBookArgs= {}>(args?: Subset<T, LibraryBookArgs>): Prisma__LibraryBookClient<LibraryBookGetPayload<T> | Null>;

    category<T extends LibraryCategoryArgs= {}>(args?: Subset<T, LibraryCategoryArgs>): Prisma__LibraryCategoryClient<LibraryCategoryGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BookOnCategory base type for findUnique actions
   */
  export type BookOnCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter, which BookOnCategory to fetch.
     */
    where: BookOnCategoryWhereUniqueInput
  }

  /**
   * BookOnCategory findUnique
   */
  export interface BookOnCategoryFindUniqueArgs extends BookOnCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookOnCategory findUniqueOrThrow
   */
  export type BookOnCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter, which BookOnCategory to fetch.
     */
    where: BookOnCategoryWhereUniqueInput
  }


  /**
   * BookOnCategory base type for findFirst actions
   */
  export type BookOnCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter, which BookOnCategory to fetch.
     */
    where?: BookOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnCategories to fetch.
     */
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookOnCategories.
     */
    cursor?: BookOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookOnCategories.
     */
    distinct?: Enumerable<BookOnCategoryScalarFieldEnum>
  }

  /**
   * BookOnCategory findFirst
   */
  export interface BookOnCategoryFindFirstArgs extends BookOnCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BookOnCategory findFirstOrThrow
   */
  export type BookOnCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter, which BookOnCategory to fetch.
     */
    where?: BookOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnCategories to fetch.
     */
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookOnCategories.
     */
    cursor?: BookOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookOnCategories.
     */
    distinct?: Enumerable<BookOnCategoryScalarFieldEnum>
  }


  /**
   * BookOnCategory findMany
   */
  export type BookOnCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter, which BookOnCategories to fetch.
     */
    where?: BookOnCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookOnCategories to fetch.
     */
    orderBy?: Enumerable<BookOnCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookOnCategories.
     */
    cursor?: BookOnCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookOnCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookOnCategories.
     */
    skip?: number
    distinct?: Enumerable<BookOnCategoryScalarFieldEnum>
  }


  /**
   * BookOnCategory create
   */
  export type BookOnCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * The data needed to create a BookOnCategory.
     */
    data: XOR<BookOnCategoryCreateInput, BookOnCategoryUncheckedCreateInput>
  }


  /**
   * BookOnCategory createMany
   */
  export type BookOnCategoryCreateManyArgs = {
    /**
     * The data used to create many BookOnCategories.
     */
    data: Enumerable<BookOnCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BookOnCategory update
   */
  export type BookOnCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * The data needed to update a BookOnCategory.
     */
    data: XOR<BookOnCategoryUpdateInput, BookOnCategoryUncheckedUpdateInput>
    /**
     * Choose, which BookOnCategory to update.
     */
    where: BookOnCategoryWhereUniqueInput
  }


  /**
   * BookOnCategory updateMany
   */
  export type BookOnCategoryUpdateManyArgs = {
    /**
     * The data used to update BookOnCategories.
     */
    data: XOR<BookOnCategoryUpdateManyMutationInput, BookOnCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BookOnCategories to update
     */
    where?: BookOnCategoryWhereInput
  }


  /**
   * BookOnCategory upsert
   */
  export type BookOnCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * The filter to search for the BookOnCategory to update in case it exists.
     */
    where: BookOnCategoryWhereUniqueInput
    /**
     * In case the BookOnCategory found by the `where` argument doesn't exist, create a new BookOnCategory with this data.
     */
    create: XOR<BookOnCategoryCreateInput, BookOnCategoryUncheckedCreateInput>
    /**
     * In case the BookOnCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookOnCategoryUpdateInput, BookOnCategoryUncheckedUpdateInput>
  }


  /**
   * BookOnCategory delete
   */
  export type BookOnCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
    /**
     * Filter which BookOnCategory to delete.
     */
    where: BookOnCategoryWhereUniqueInput
  }


  /**
   * BookOnCategory deleteMany
   */
  export type BookOnCategoryDeleteManyArgs = {
    /**
     * Filter which BookOnCategories to delete
     */
    where?: BookOnCategoryWhereInput
  }


  /**
   * BookOnCategory without action
   */
  export type BookOnCategoryArgs = {
    /**
     * Select specific fields to fetch from the BookOnCategory
     */
    select?: BookOnCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BookOnCategoryInclude | null
  }



  /**
   * Model LibraryStudentRequest
   */


  export type AggregateLibraryStudentRequest = {
    _count: LibraryStudentRequestCountAggregateOutputType | null
    _avg: LibraryStudentRequestAvgAggregateOutputType | null
    _sum: LibraryStudentRequestSumAggregateOutputType | null
    _min: LibraryStudentRequestMinAggregateOutputType | null
    _max: LibraryStudentRequestMaxAggregateOutputType | null
  }

  export type LibraryStudentRequestAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    fromUniversityId: number | null
    toUniversityId: number | null
  }

  export type LibraryStudentRequestSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    fromUniversityId: number | null
    toUniversityId: number | null
  }

  export type LibraryStudentRequestMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    fromUniversityId: number | null
    toUniversityId: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentRequestMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    fromUniversityId: number | null
    toUniversityId: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentRequestCountAggregateOutputType = {
    id: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryStudentRequestAvgAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    fromUniversityId?: true
    toUniversityId?: true
  }

  export type LibraryStudentRequestSumAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    fromUniversityId?: true
    toUniversityId?: true
  }

  export type LibraryStudentRequestMinAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    fromUniversityId?: true
    toUniversityId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentRequestMaxAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    fromUniversityId?: true
    toUniversityId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentRequestCountAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    fromUniversityId?: true
    toUniversityId?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryStudentRequestAggregateArgs = {
    /**
     * Filter which LibraryStudentRequest to aggregate.
     */
    where?: LibraryStudentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentRequests to fetch.
     */
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryStudentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryStudentRequests
    **/
    _count?: true | LibraryStudentRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryStudentRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryStudentRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryStudentRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryStudentRequestMaxAggregateInputType
  }

  export type GetLibraryStudentRequestAggregateType<T extends LibraryStudentRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryStudentRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryStudentRequest[P]>
      : GetScalarType<T[P], AggregateLibraryStudentRequest[P]>
  }




  export type LibraryStudentRequestGroupByArgs = {
    where?: LibraryStudentRequestWhereInput
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithAggregationInput>
    by: LibraryStudentRequestScalarFieldEnum[]
    having?: LibraryStudentRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryStudentRequestCountAggregateInputType | true
    _avg?: LibraryStudentRequestAvgAggregateInputType
    _sum?: LibraryStudentRequestSumAggregateInputType
    _min?: LibraryStudentRequestMinAggregateInputType
    _max?: LibraryStudentRequestMaxAggregateInputType
  }


  export type LibraryStudentRequestGroupByOutputType = {
    id: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: LibraryStudentRequestCountAggregateOutputType | null
    _avg: LibraryStudentRequestAvgAggregateOutputType | null
    _sum: LibraryStudentRequestSumAggregateOutputType | null
    _min: LibraryStudentRequestMinAggregateOutputType | null
    _max: LibraryStudentRequestMaxAggregateOutputType | null
  }

  type GetLibraryStudentRequestGroupByPayload<T extends LibraryStudentRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryStudentRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryStudentRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryStudentRequestGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryStudentRequestGroupByOutputType[P]>
        }
      >
    >


  export type LibraryStudentRequestSelect = {
    id?: boolean
    student?: boolean | LibraryStudentArgs
    studentId?: boolean
    bookCopy?: boolean | LibraryBookCopyArgs
    bookCopyId?: boolean
    fromUniversity?: boolean | LibraryUniversityArgs
    fromUniversityId?: boolean
    toUniversity?: boolean | LibraryUniversityArgs
    toUniversityId?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LibraryStudentRequestInclude = {
    student?: boolean | LibraryStudentArgs
    bookCopy?: boolean | LibraryBookCopyArgs
    fromUniversity?: boolean | LibraryUniversityArgs
    toUniversity?: boolean | LibraryUniversityArgs
  }

  export type LibraryStudentRequestGetPayload<S extends boolean | null | undefined | LibraryStudentRequestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryStudentRequest :
    S extends undefined ? never :
    S extends { include: any } & (LibraryStudentRequestArgs | LibraryStudentRequestFindManyArgs)
    ? LibraryStudentRequest  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'student' ? LibraryStudentGetPayload<S['include'][P]> :
        P extends 'bookCopy' ? LibraryBookCopyGetPayload<S['include'][P]> :
        P extends 'fromUniversity' ? LibraryUniversityGetPayload<S['include'][P]> :
        P extends 'toUniversity' ? LibraryUniversityGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryStudentRequestArgs | LibraryStudentRequestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'student' ? LibraryStudentGetPayload<S['select'][P]> :
        P extends 'bookCopy' ? LibraryBookCopyGetPayload<S['select'][P]> :
        P extends 'fromUniversity' ? LibraryUniversityGetPayload<S['select'][P]> :
        P extends 'toUniversity' ? LibraryUniversityGetPayload<S['select'][P]> :  P extends keyof LibraryStudentRequest ? LibraryStudentRequest[P] : never
  } 
      : LibraryStudentRequest


  type LibraryStudentRequestCountArgs = 
    Omit<LibraryStudentRequestFindManyArgs, 'select' | 'include'> & {
      select?: LibraryStudentRequestCountAggregateInputType | true
    }

  export interface LibraryStudentRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryStudentRequest that matches the filter.
     * @param {LibraryStudentRequestFindUniqueArgs} args - Arguments to find a LibraryStudentRequest
     * @example
     * // Get one LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryStudentRequestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryStudentRequestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryStudentRequest'> extends True ? Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>> : Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T> | null, null>

    /**
     * Find one LibraryStudentRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryStudentRequestFindUniqueOrThrowArgs} args - Arguments to find a LibraryStudentRequest
     * @example
     * // Get one LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryStudentRequestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentRequestFindUniqueOrThrowArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Find the first LibraryStudentRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestFindFirstArgs} args - Arguments to find a LibraryStudentRequest
     * @example
     * // Get one LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryStudentRequestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryStudentRequestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryStudentRequest'> extends True ? Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>> : Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T> | null, null>

    /**
     * Find the first LibraryStudentRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestFindFirstOrThrowArgs} args - Arguments to find a LibraryStudentRequest
     * @example
     * // Get one LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryStudentRequestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentRequestFindFirstOrThrowArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Find zero or more LibraryStudentRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryStudentRequests
     * const libraryStudentRequests = await prisma.libraryStudentRequest.findMany()
     * 
     * // Get first 10 LibraryStudentRequests
     * const libraryStudentRequests = await prisma.libraryStudentRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryStudentRequestWithIdOnly = await prisma.libraryStudentRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryStudentRequestFindManyArgs>(
      args?: SelectSubset<T, LibraryStudentRequestFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryStudentRequestGetPayload<T>>>

    /**
     * Create a LibraryStudentRequest.
     * @param {LibraryStudentRequestCreateArgs} args - Arguments to create a LibraryStudentRequest.
     * @example
     * // Create one LibraryStudentRequest
     * const LibraryStudentRequest = await prisma.libraryStudentRequest.create({
     *   data: {
     *     // ... data to create a LibraryStudentRequest
     *   }
     * })
     * 
    **/
    create<T extends LibraryStudentRequestCreateArgs>(
      args: SelectSubset<T, LibraryStudentRequestCreateArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Create many LibraryStudentRequests.
     *     @param {LibraryStudentRequestCreateManyArgs} args - Arguments to create many LibraryStudentRequests.
     *     @example
     *     // Create many LibraryStudentRequests
     *     const libraryStudentRequest = await prisma.libraryStudentRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryStudentRequestCreateManyArgs>(
      args?: SelectSubset<T, LibraryStudentRequestCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryStudentRequest.
     * @param {LibraryStudentRequestDeleteArgs} args - Arguments to delete one LibraryStudentRequest.
     * @example
     * // Delete one LibraryStudentRequest
     * const LibraryStudentRequest = await prisma.libraryStudentRequest.delete({
     *   where: {
     *     // ... filter to delete one LibraryStudentRequest
     *   }
     * })
     * 
    **/
    delete<T extends LibraryStudentRequestDeleteArgs>(
      args: SelectSubset<T, LibraryStudentRequestDeleteArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Update one LibraryStudentRequest.
     * @param {LibraryStudentRequestUpdateArgs} args - Arguments to update one LibraryStudentRequest.
     * @example
     * // Update one LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryStudentRequestUpdateArgs>(
      args: SelectSubset<T, LibraryStudentRequestUpdateArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Delete zero or more LibraryStudentRequests.
     * @param {LibraryStudentRequestDeleteManyArgs} args - Arguments to filter LibraryStudentRequests to delete.
     * @example
     * // Delete a few LibraryStudentRequests
     * const { count } = await prisma.libraryStudentRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryStudentRequestDeleteManyArgs>(
      args?: SelectSubset<T, LibraryStudentRequestDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryStudentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryStudentRequests
     * const libraryStudentRequest = await prisma.libraryStudentRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryStudentRequestUpdateManyArgs>(
      args: SelectSubset<T, LibraryStudentRequestUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryStudentRequest.
     * @param {LibraryStudentRequestUpsertArgs} args - Arguments to update or create a LibraryStudentRequest.
     * @example
     * // Update or create a LibraryStudentRequest
     * const libraryStudentRequest = await prisma.libraryStudentRequest.upsert({
     *   create: {
     *     // ... data to create a LibraryStudentRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryStudentRequest we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryStudentRequestUpsertArgs>(
      args: SelectSubset<T, LibraryStudentRequestUpsertArgs>
    ): Prisma__LibraryStudentRequestClient<LibraryStudentRequestGetPayload<T>>

    /**
     * Count the number of LibraryStudentRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestCountArgs} args - Arguments to filter LibraryStudentRequests to count.
     * @example
     * // Count the number of LibraryStudentRequests
     * const count = await prisma.libraryStudentRequest.count({
     *   where: {
     *     // ... the filter for the LibraryStudentRequests we want to count
     *   }
     * })
    **/
    count<T extends LibraryStudentRequestCountArgs>(
      args?: Subset<T, LibraryStudentRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryStudentRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryStudentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryStudentRequestAggregateArgs>(args: Subset<T, LibraryStudentRequestAggregateArgs>): Prisma.PrismaPromise<GetLibraryStudentRequestAggregateType<T>>

    /**
     * Group by LibraryStudentRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryStudentRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryStudentRequestGroupByArgs['orderBy'] }
        : { orderBy?: LibraryStudentRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryStudentRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryStudentRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryStudentRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryStudentRequestClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    student<T extends LibraryStudentArgs= {}>(args?: Subset<T, LibraryStudentArgs>): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | Null>;

    bookCopy<T extends LibraryBookCopyArgs= {}>(args?: Subset<T, LibraryBookCopyArgs>): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T> | Null>;

    fromUniversity<T extends LibraryUniversityArgs= {}>(args?: Subset<T, LibraryUniversityArgs>): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | Null>;

    toUniversity<T extends LibraryUniversityArgs= {}>(args?: Subset<T, LibraryUniversityArgs>): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryStudentRequest base type for findUnique actions
   */
  export type LibraryStudentRequestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter, which LibraryStudentRequest to fetch.
     */
    where: LibraryStudentRequestWhereUniqueInput
  }

  /**
   * LibraryStudentRequest findUnique
   */
  export interface LibraryStudentRequestFindUniqueArgs extends LibraryStudentRequestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudentRequest findUniqueOrThrow
   */
  export type LibraryStudentRequestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter, which LibraryStudentRequest to fetch.
     */
    where: LibraryStudentRequestWhereUniqueInput
  }


  /**
   * LibraryStudentRequest base type for findFirst actions
   */
  export type LibraryStudentRequestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter, which LibraryStudentRequest to fetch.
     */
    where?: LibraryStudentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentRequests to fetch.
     */
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudentRequests.
     */
    cursor?: LibraryStudentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudentRequests.
     */
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }

  /**
   * LibraryStudentRequest findFirst
   */
  export interface LibraryStudentRequestFindFirstArgs extends LibraryStudentRequestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudentRequest findFirstOrThrow
   */
  export type LibraryStudentRequestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter, which LibraryStudentRequest to fetch.
     */
    where?: LibraryStudentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentRequests to fetch.
     */
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudentRequests.
     */
    cursor?: LibraryStudentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudentRequests.
     */
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryStudentRequest findMany
   */
  export type LibraryStudentRequestFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter, which LibraryStudentRequests to fetch.
     */
    where?: LibraryStudentRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentRequests to fetch.
     */
    orderBy?: Enumerable<LibraryStudentRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryStudentRequests.
     */
    cursor?: LibraryStudentRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentRequests.
     */
    skip?: number
    distinct?: Enumerable<LibraryStudentRequestScalarFieldEnum>
  }


  /**
   * LibraryStudentRequest create
   */
  export type LibraryStudentRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * The data needed to create a LibraryStudentRequest.
     */
    data: XOR<LibraryStudentRequestCreateInput, LibraryStudentRequestUncheckedCreateInput>
  }


  /**
   * LibraryStudentRequest createMany
   */
  export type LibraryStudentRequestCreateManyArgs = {
    /**
     * The data used to create many LibraryStudentRequests.
     */
    data: Enumerable<LibraryStudentRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryStudentRequest update
   */
  export type LibraryStudentRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * The data needed to update a LibraryStudentRequest.
     */
    data: XOR<LibraryStudentRequestUpdateInput, LibraryStudentRequestUncheckedUpdateInput>
    /**
     * Choose, which LibraryStudentRequest to update.
     */
    where: LibraryStudentRequestWhereUniqueInput
  }


  /**
   * LibraryStudentRequest updateMany
   */
  export type LibraryStudentRequestUpdateManyArgs = {
    /**
     * The data used to update LibraryStudentRequests.
     */
    data: XOR<LibraryStudentRequestUpdateManyMutationInput, LibraryStudentRequestUncheckedUpdateManyInput>
    /**
     * Filter which LibraryStudentRequests to update
     */
    where?: LibraryStudentRequestWhereInput
  }


  /**
   * LibraryStudentRequest upsert
   */
  export type LibraryStudentRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * The filter to search for the LibraryStudentRequest to update in case it exists.
     */
    where: LibraryStudentRequestWhereUniqueInput
    /**
     * In case the LibraryStudentRequest found by the `where` argument doesn't exist, create a new LibraryStudentRequest with this data.
     */
    create: XOR<LibraryStudentRequestCreateInput, LibraryStudentRequestUncheckedCreateInput>
    /**
     * In case the LibraryStudentRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryStudentRequestUpdateInput, LibraryStudentRequestUncheckedUpdateInput>
  }


  /**
   * LibraryStudentRequest delete
   */
  export type LibraryStudentRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
    /**
     * Filter which LibraryStudentRequest to delete.
     */
    where: LibraryStudentRequestWhereUniqueInput
  }


  /**
   * LibraryStudentRequest deleteMany
   */
  export type LibraryStudentRequestDeleteManyArgs = {
    /**
     * Filter which LibraryStudentRequests to delete
     */
    where?: LibraryStudentRequestWhereInput
  }


  /**
   * LibraryStudentRequest without action
   */
  export type LibraryStudentRequestArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentRequest
     */
    select?: LibraryStudentRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentRequestInclude | null
  }



  /**
   * Model LibraryStudentBorrowing
   */


  export type AggregateLibraryStudentBorrowing = {
    _count: LibraryStudentBorrowingCountAggregateOutputType | null
    _avg: LibraryStudentBorrowingAvgAggregateOutputType | null
    _sum: LibraryStudentBorrowingSumAggregateOutputType | null
    _min: LibraryStudentBorrowingMinAggregateOutputType | null
    _max: LibraryStudentBorrowingMaxAggregateOutputType | null
  }

  export type LibraryStudentBorrowingAvgAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    borrowFromUniversityId: number | null
  }

  export type LibraryStudentBorrowingSumAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    borrowFromUniversityId: number | null
  }

  export type LibraryStudentBorrowingMinAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    borrowingDate: Date | null
    targetReturnDate: Date | null
    actualReturnDate: Date | null
    borrowFromUniversityId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentBorrowingMaxAggregateOutputType = {
    id: number | null
    studentId: number | null
    bookCopyId: number | null
    borrowingDate: Date | null
    targetReturnDate: Date | null
    actualReturnDate: Date | null
    borrowFromUniversityId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LibraryStudentBorrowingCountAggregateOutputType = {
    id: number
    studentId: number
    bookCopyId: number
    borrowingDate: number
    targetReturnDate: number
    actualReturnDate: number
    borrowFromUniversityId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LibraryStudentBorrowingAvgAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    borrowFromUniversityId?: true
  }

  export type LibraryStudentBorrowingSumAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    borrowFromUniversityId?: true
  }

  export type LibraryStudentBorrowingMinAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    borrowingDate?: true
    targetReturnDate?: true
    actualReturnDate?: true
    borrowFromUniversityId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentBorrowingMaxAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    borrowingDate?: true
    targetReturnDate?: true
    actualReturnDate?: true
    borrowFromUniversityId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LibraryStudentBorrowingCountAggregateInputType = {
    id?: true
    studentId?: true
    bookCopyId?: true
    borrowingDate?: true
    targetReturnDate?: true
    actualReturnDate?: true
    borrowFromUniversityId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LibraryStudentBorrowingAggregateArgs = {
    /**
     * Filter which LibraryStudentBorrowing to aggregate.
     */
    where?: LibraryStudentBorrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentBorrowings to fetch.
     */
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentBorrowings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentBorrowings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LibraryStudentBorrowings
    **/
    _count?: true | LibraryStudentBorrowingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LibraryStudentBorrowingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LibraryStudentBorrowingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LibraryStudentBorrowingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LibraryStudentBorrowingMaxAggregateInputType
  }

  export type GetLibraryStudentBorrowingAggregateType<T extends LibraryStudentBorrowingAggregateArgs> = {
        [P in keyof T & keyof AggregateLibraryStudentBorrowing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLibraryStudentBorrowing[P]>
      : GetScalarType<T[P], AggregateLibraryStudentBorrowing[P]>
  }




  export type LibraryStudentBorrowingGroupByArgs = {
    where?: LibraryStudentBorrowingWhereInput
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithAggregationInput>
    by: LibraryStudentBorrowingScalarFieldEnum[]
    having?: LibraryStudentBorrowingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LibraryStudentBorrowingCountAggregateInputType | true
    _avg?: LibraryStudentBorrowingAvgAggregateInputType
    _sum?: LibraryStudentBorrowingSumAggregateInputType
    _min?: LibraryStudentBorrowingMinAggregateInputType
    _max?: LibraryStudentBorrowingMaxAggregateInputType
  }


  export type LibraryStudentBorrowingGroupByOutputType = {
    id: number
    studentId: number
    bookCopyId: number
    borrowingDate: Date
    targetReturnDate: Date
    actualReturnDate: Date | null
    borrowFromUniversityId: number
    createdAt: Date
    updatedAt: Date
    _count: LibraryStudentBorrowingCountAggregateOutputType | null
    _avg: LibraryStudentBorrowingAvgAggregateOutputType | null
    _sum: LibraryStudentBorrowingSumAggregateOutputType | null
    _min: LibraryStudentBorrowingMinAggregateOutputType | null
    _max: LibraryStudentBorrowingMaxAggregateOutputType | null
  }

  type GetLibraryStudentBorrowingGroupByPayload<T extends LibraryStudentBorrowingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<LibraryStudentBorrowingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LibraryStudentBorrowingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LibraryStudentBorrowingGroupByOutputType[P]>
            : GetScalarType<T[P], LibraryStudentBorrowingGroupByOutputType[P]>
        }
      >
    >


  export type LibraryStudentBorrowingSelect = {
    id?: boolean
    stident?: boolean | LibraryStudentArgs
    studentId?: boolean
    bookCopy?: boolean | LibraryBookCopyArgs
    bookCopyId?: boolean
    borrowingDate?: boolean
    targetReturnDate?: boolean
    actualReturnDate?: boolean
    borrowFromUniversity?: boolean | LibraryUniversityArgs
    borrowFromUniversityId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type LibraryStudentBorrowingInclude = {
    stident?: boolean | LibraryStudentArgs
    bookCopy?: boolean | LibraryBookCopyArgs
    borrowFromUniversity?: boolean | LibraryUniversityArgs
  }

  export type LibraryStudentBorrowingGetPayload<S extends boolean | null | undefined | LibraryStudentBorrowingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? LibraryStudentBorrowing :
    S extends undefined ? never :
    S extends { include: any } & (LibraryStudentBorrowingArgs | LibraryStudentBorrowingFindManyArgs)
    ? LibraryStudentBorrowing  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'stident' ? LibraryStudentGetPayload<S['include'][P]> :
        P extends 'bookCopy' ? LibraryBookCopyGetPayload<S['include'][P]> :
        P extends 'borrowFromUniversity' ? LibraryUniversityGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (LibraryStudentBorrowingArgs | LibraryStudentBorrowingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'stident' ? LibraryStudentGetPayload<S['select'][P]> :
        P extends 'bookCopy' ? LibraryBookCopyGetPayload<S['select'][P]> :
        P extends 'borrowFromUniversity' ? LibraryUniversityGetPayload<S['select'][P]> :  P extends keyof LibraryStudentBorrowing ? LibraryStudentBorrowing[P] : never
  } 
      : LibraryStudentBorrowing


  type LibraryStudentBorrowingCountArgs = 
    Omit<LibraryStudentBorrowingFindManyArgs, 'select' | 'include'> & {
      select?: LibraryStudentBorrowingCountAggregateInputType | true
    }

  export interface LibraryStudentBorrowingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one LibraryStudentBorrowing that matches the filter.
     * @param {LibraryStudentBorrowingFindUniqueArgs} args - Arguments to find a LibraryStudentBorrowing
     * @example
     * // Get one LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LibraryStudentBorrowingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LibraryStudentBorrowingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LibraryStudentBorrowing'> extends True ? Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>> : Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T> | null, null>

    /**
     * Find one LibraryStudentBorrowing that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LibraryStudentBorrowingFindUniqueOrThrowArgs} args - Arguments to find a LibraryStudentBorrowing
     * @example
     * // Get one LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LibraryStudentBorrowingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentBorrowingFindUniqueOrThrowArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Find the first LibraryStudentBorrowing that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingFindFirstArgs} args - Arguments to find a LibraryStudentBorrowing
     * @example
     * // Get one LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LibraryStudentBorrowingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LibraryStudentBorrowingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LibraryStudentBorrowing'> extends True ? Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>> : Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T> | null, null>

    /**
     * Find the first LibraryStudentBorrowing that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingFindFirstOrThrowArgs} args - Arguments to find a LibraryStudentBorrowing
     * @example
     * // Get one LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LibraryStudentBorrowingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LibraryStudentBorrowingFindFirstOrThrowArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Find zero or more LibraryStudentBorrowings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LibraryStudentBorrowings
     * const libraryStudentBorrowings = await prisma.libraryStudentBorrowing.findMany()
     * 
     * // Get first 10 LibraryStudentBorrowings
     * const libraryStudentBorrowings = await prisma.libraryStudentBorrowing.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const libraryStudentBorrowingWithIdOnly = await prisma.libraryStudentBorrowing.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LibraryStudentBorrowingFindManyArgs>(
      args?: SelectSubset<T, LibraryStudentBorrowingFindManyArgs>
    ): Prisma.PrismaPromise<Array<LibraryStudentBorrowingGetPayload<T>>>

    /**
     * Create a LibraryStudentBorrowing.
     * @param {LibraryStudentBorrowingCreateArgs} args - Arguments to create a LibraryStudentBorrowing.
     * @example
     * // Create one LibraryStudentBorrowing
     * const LibraryStudentBorrowing = await prisma.libraryStudentBorrowing.create({
     *   data: {
     *     // ... data to create a LibraryStudentBorrowing
     *   }
     * })
     * 
    **/
    create<T extends LibraryStudentBorrowingCreateArgs>(
      args: SelectSubset<T, LibraryStudentBorrowingCreateArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Create many LibraryStudentBorrowings.
     *     @param {LibraryStudentBorrowingCreateManyArgs} args - Arguments to create many LibraryStudentBorrowings.
     *     @example
     *     // Create many LibraryStudentBorrowings
     *     const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LibraryStudentBorrowingCreateManyArgs>(
      args?: SelectSubset<T, LibraryStudentBorrowingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LibraryStudentBorrowing.
     * @param {LibraryStudentBorrowingDeleteArgs} args - Arguments to delete one LibraryStudentBorrowing.
     * @example
     * // Delete one LibraryStudentBorrowing
     * const LibraryStudentBorrowing = await prisma.libraryStudentBorrowing.delete({
     *   where: {
     *     // ... filter to delete one LibraryStudentBorrowing
     *   }
     * })
     * 
    **/
    delete<T extends LibraryStudentBorrowingDeleteArgs>(
      args: SelectSubset<T, LibraryStudentBorrowingDeleteArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Update one LibraryStudentBorrowing.
     * @param {LibraryStudentBorrowingUpdateArgs} args - Arguments to update one LibraryStudentBorrowing.
     * @example
     * // Update one LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LibraryStudentBorrowingUpdateArgs>(
      args: SelectSubset<T, LibraryStudentBorrowingUpdateArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Delete zero or more LibraryStudentBorrowings.
     * @param {LibraryStudentBorrowingDeleteManyArgs} args - Arguments to filter LibraryStudentBorrowings to delete.
     * @example
     * // Delete a few LibraryStudentBorrowings
     * const { count } = await prisma.libraryStudentBorrowing.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LibraryStudentBorrowingDeleteManyArgs>(
      args?: SelectSubset<T, LibraryStudentBorrowingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LibraryStudentBorrowings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LibraryStudentBorrowings
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LibraryStudentBorrowingUpdateManyArgs>(
      args: SelectSubset<T, LibraryStudentBorrowingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LibraryStudentBorrowing.
     * @param {LibraryStudentBorrowingUpsertArgs} args - Arguments to update or create a LibraryStudentBorrowing.
     * @example
     * // Update or create a LibraryStudentBorrowing
     * const libraryStudentBorrowing = await prisma.libraryStudentBorrowing.upsert({
     *   create: {
     *     // ... data to create a LibraryStudentBorrowing
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LibraryStudentBorrowing we want to update
     *   }
     * })
    **/
    upsert<T extends LibraryStudentBorrowingUpsertArgs>(
      args: SelectSubset<T, LibraryStudentBorrowingUpsertArgs>
    ): Prisma__LibraryStudentBorrowingClient<LibraryStudentBorrowingGetPayload<T>>

    /**
     * Count the number of LibraryStudentBorrowings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingCountArgs} args - Arguments to filter LibraryStudentBorrowings to count.
     * @example
     * // Count the number of LibraryStudentBorrowings
     * const count = await prisma.libraryStudentBorrowing.count({
     *   where: {
     *     // ... the filter for the LibraryStudentBorrowings we want to count
     *   }
     * })
    **/
    count<T extends LibraryStudentBorrowingCountArgs>(
      args?: Subset<T, LibraryStudentBorrowingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LibraryStudentBorrowingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LibraryStudentBorrowing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LibraryStudentBorrowingAggregateArgs>(args: Subset<T, LibraryStudentBorrowingAggregateArgs>): Prisma.PrismaPromise<GetLibraryStudentBorrowingAggregateType<T>>

    /**
     * Group by LibraryStudentBorrowing.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LibraryStudentBorrowingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LibraryStudentBorrowingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LibraryStudentBorrowingGroupByArgs['orderBy'] }
        : { orderBy?: LibraryStudentBorrowingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LibraryStudentBorrowingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLibraryStudentBorrowingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LibraryStudentBorrowing.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LibraryStudentBorrowingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    stident<T extends LibraryStudentArgs= {}>(args?: Subset<T, LibraryStudentArgs>): Prisma__LibraryStudentClient<LibraryStudentGetPayload<T> | Null>;

    bookCopy<T extends LibraryBookCopyArgs= {}>(args?: Subset<T, LibraryBookCopyArgs>): Prisma__LibraryBookCopyClient<LibraryBookCopyGetPayload<T> | Null>;

    borrowFromUniversity<T extends LibraryUniversityArgs= {}>(args?: Subset<T, LibraryUniversityArgs>): Prisma__LibraryUniversityClient<LibraryUniversityGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LibraryStudentBorrowing base type for findUnique actions
   */
  export type LibraryStudentBorrowingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter, which LibraryStudentBorrowing to fetch.
     */
    where: LibraryStudentBorrowingWhereUniqueInput
  }

  /**
   * LibraryStudentBorrowing findUnique
   */
  export interface LibraryStudentBorrowingFindUniqueArgs extends LibraryStudentBorrowingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudentBorrowing findUniqueOrThrow
   */
  export type LibraryStudentBorrowingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter, which LibraryStudentBorrowing to fetch.
     */
    where: LibraryStudentBorrowingWhereUniqueInput
  }


  /**
   * LibraryStudentBorrowing base type for findFirst actions
   */
  export type LibraryStudentBorrowingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter, which LibraryStudentBorrowing to fetch.
     */
    where?: LibraryStudentBorrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentBorrowings to fetch.
     */
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudentBorrowings.
     */
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentBorrowings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentBorrowings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudentBorrowings.
     */
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }

  /**
   * LibraryStudentBorrowing findFirst
   */
  export interface LibraryStudentBorrowingFindFirstArgs extends LibraryStudentBorrowingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LibraryStudentBorrowing findFirstOrThrow
   */
  export type LibraryStudentBorrowingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter, which LibraryStudentBorrowing to fetch.
     */
    where?: LibraryStudentBorrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentBorrowings to fetch.
     */
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LibraryStudentBorrowings.
     */
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentBorrowings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentBorrowings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LibraryStudentBorrowings.
     */
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }


  /**
   * LibraryStudentBorrowing findMany
   */
  export type LibraryStudentBorrowingFindManyArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter, which LibraryStudentBorrowings to fetch.
     */
    where?: LibraryStudentBorrowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LibraryStudentBorrowings to fetch.
     */
    orderBy?: Enumerable<LibraryStudentBorrowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LibraryStudentBorrowings.
     */
    cursor?: LibraryStudentBorrowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LibraryStudentBorrowings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LibraryStudentBorrowings.
     */
    skip?: number
    distinct?: Enumerable<LibraryStudentBorrowingScalarFieldEnum>
  }


  /**
   * LibraryStudentBorrowing create
   */
  export type LibraryStudentBorrowingCreateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * The data needed to create a LibraryStudentBorrowing.
     */
    data: XOR<LibraryStudentBorrowingCreateInput, LibraryStudentBorrowingUncheckedCreateInput>
  }


  /**
   * LibraryStudentBorrowing createMany
   */
  export type LibraryStudentBorrowingCreateManyArgs = {
    /**
     * The data used to create many LibraryStudentBorrowings.
     */
    data: Enumerable<LibraryStudentBorrowingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * LibraryStudentBorrowing update
   */
  export type LibraryStudentBorrowingUpdateArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * The data needed to update a LibraryStudentBorrowing.
     */
    data: XOR<LibraryStudentBorrowingUpdateInput, LibraryStudentBorrowingUncheckedUpdateInput>
    /**
     * Choose, which LibraryStudentBorrowing to update.
     */
    where: LibraryStudentBorrowingWhereUniqueInput
  }


  /**
   * LibraryStudentBorrowing updateMany
   */
  export type LibraryStudentBorrowingUpdateManyArgs = {
    /**
     * The data used to update LibraryStudentBorrowings.
     */
    data: XOR<LibraryStudentBorrowingUpdateManyMutationInput, LibraryStudentBorrowingUncheckedUpdateManyInput>
    /**
     * Filter which LibraryStudentBorrowings to update
     */
    where?: LibraryStudentBorrowingWhereInput
  }


  /**
   * LibraryStudentBorrowing upsert
   */
  export type LibraryStudentBorrowingUpsertArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * The filter to search for the LibraryStudentBorrowing to update in case it exists.
     */
    where: LibraryStudentBorrowingWhereUniqueInput
    /**
     * In case the LibraryStudentBorrowing found by the `where` argument doesn't exist, create a new LibraryStudentBorrowing with this data.
     */
    create: XOR<LibraryStudentBorrowingCreateInput, LibraryStudentBorrowingUncheckedCreateInput>
    /**
     * In case the LibraryStudentBorrowing was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LibraryStudentBorrowingUpdateInput, LibraryStudentBorrowingUncheckedUpdateInput>
  }


  /**
   * LibraryStudentBorrowing delete
   */
  export type LibraryStudentBorrowingDeleteArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
    /**
     * Filter which LibraryStudentBorrowing to delete.
     */
    where: LibraryStudentBorrowingWhereUniqueInput
  }


  /**
   * LibraryStudentBorrowing deleteMany
   */
  export type LibraryStudentBorrowingDeleteManyArgs = {
    /**
     * Filter which LibraryStudentBorrowings to delete
     */
    where?: LibraryStudentBorrowingWhereInput
  }


  /**
   * LibraryStudentBorrowing without action
   */
  export type LibraryStudentBorrowingArgs = {
    /**
     * Select specific fields to fetch from the LibraryStudentBorrowing
     */
    select?: LibraryStudentBorrowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: LibraryStudentBorrowingInclude | null
  }



  /**
   * Model MeetingUser
   */


  export type AggregateMeetingUser = {
    _count: MeetingUserCountAggregateOutputType | null
    _avg: MeetingUserAvgAggregateOutputType | null
    _sum: MeetingUserSumAggregateOutputType | null
    _min: MeetingUserMinAggregateOutputType | null
    _max: MeetingUserMaxAggregateOutputType | null
  }

  export type MeetingUserAvgAggregateOutputType = {
    id: number | null
  }

  export type MeetingUserSumAggregateOutputType = {
    id: number | null
  }

  export type MeetingUserMinAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    postion: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    postion: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserCountAggregateOutputType = {
    id: number
    name: number
    profileImage: number
    postion: number
    bio: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingUserAvgAggregateInputType = {
    id?: true
  }

  export type MeetingUserSumAggregateInputType = {
    id?: true
  }

  export type MeetingUserMinAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    postion?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserMaxAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    postion?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserCountAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    postion?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingUserAggregateArgs = {
    /**
     * Filter which MeetingUser to aggregate.
     */
    where?: MeetingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUsers to fetch.
     */
    orderBy?: Enumerable<MeetingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingUsers
    **/
    _count?: true | MeetingUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingUserMaxAggregateInputType
  }

  export type GetMeetingUserAggregateType<T extends MeetingUserAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingUser[P]>
      : GetScalarType<T[P], AggregateMeetingUser[P]>
  }




  export type MeetingUserGroupByArgs = {
    where?: MeetingUserWhereInput
    orderBy?: Enumerable<MeetingUserOrderByWithAggregationInput>
    by: MeetingUserScalarFieldEnum[]
    having?: MeetingUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingUserCountAggregateInputType | true
    _avg?: MeetingUserAvgAggregateInputType
    _sum?: MeetingUserSumAggregateInputType
    _min?: MeetingUserMinAggregateInputType
    _max?: MeetingUserMaxAggregateInputType
  }


  export type MeetingUserGroupByOutputType = {
    id: number
    name: string
    profileImage: string | null
    postion: string | null
    bio: string | null
    createdAt: Date
    updatedAt: Date
    _count: MeetingUserCountAggregateOutputType | null
    _avg: MeetingUserAvgAggregateOutputType | null
    _sum: MeetingUserSumAggregateOutputType | null
    _min: MeetingUserMinAggregateOutputType | null
    _max: MeetingUserMaxAggregateOutputType | null
  }

  type GetMeetingUserGroupByPayload<T extends MeetingUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingUserGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingUserGroupByOutputType[P]>
        }
      >
    >


  export type MeetingUserSelect = {
    id?: boolean
    name?: boolean
    profileImage?: boolean
    postion?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    MeetingUserBooked?: boolean | MeetingUser$MeetingUserBookedArgs
    MeetingUserAvailable?: boolean | MeetingUser$MeetingUserAvailableArgs
    MeetingRoomBooked?: boolean | MeetingUser$MeetingRoomBookedArgs
    _count?: boolean | MeetingUserCountOutputTypeArgs
  }


  export type MeetingUserInclude = {
    MeetingUserBooked?: boolean | MeetingUser$MeetingUserBookedArgs
    MeetingUserAvailable?: boolean | MeetingUser$MeetingUserAvailableArgs
    MeetingRoomBooked?: boolean | MeetingUser$MeetingRoomBookedArgs
    _count?: boolean | MeetingUserCountOutputTypeArgs
  }

  export type MeetingUserGetPayload<S extends boolean | null | undefined | MeetingUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingUser :
    S extends undefined ? never :
    S extends { include: any } & (MeetingUserArgs | MeetingUserFindManyArgs)
    ? MeetingUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'MeetingUserBooked' ? Array < MeetingUserBookedGetPayload<S['include'][P]>>  :
        P extends 'MeetingUserAvailable' ? Array < MeetingUserAvailableGetPayload<S['include'][P]>>  :
        P extends 'MeetingRoomBooked' ? Array < MeetingRoomBookedGetPayload<S['include'][P]>>  :
        P extends '_count' ? MeetingUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingUserArgs | MeetingUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'MeetingUserBooked' ? Array < MeetingUserBookedGetPayload<S['select'][P]>>  :
        P extends 'MeetingUserAvailable' ? Array < MeetingUserAvailableGetPayload<S['select'][P]>>  :
        P extends 'MeetingRoomBooked' ? Array < MeetingRoomBookedGetPayload<S['select'][P]>>  :
        P extends '_count' ? MeetingUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof MeetingUser ? MeetingUser[P] : never
  } 
      : MeetingUser


  type MeetingUserCountArgs = 
    Omit<MeetingUserFindManyArgs, 'select' | 'include'> & {
      select?: MeetingUserCountAggregateInputType | true
    }

  export interface MeetingUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingUser that matches the filter.
     * @param {MeetingUserFindUniqueArgs} args - Arguments to find a MeetingUser
     * @example
     * // Get one MeetingUser
     * const meetingUser = await prisma.meetingUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingUser'> extends True ? Prisma__MeetingUserClient<MeetingUserGetPayload<T>> : Prisma__MeetingUserClient<MeetingUserGetPayload<T> | null, null>

    /**
     * Find one MeetingUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingUserFindUniqueOrThrowArgs} args - Arguments to find a MeetingUser
     * @example
     * // Get one MeetingUser
     * const meetingUser = await prisma.meetingUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserFindUniqueOrThrowArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Find the first MeetingUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserFindFirstArgs} args - Arguments to find a MeetingUser
     * @example
     * // Get one MeetingUser
     * const meetingUser = await prisma.meetingUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingUser'> extends True ? Prisma__MeetingUserClient<MeetingUserGetPayload<T>> : Prisma__MeetingUserClient<MeetingUserGetPayload<T> | null, null>

    /**
     * Find the first MeetingUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserFindFirstOrThrowArgs} args - Arguments to find a MeetingUser
     * @example
     * // Get one MeetingUser
     * const meetingUser = await prisma.meetingUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserFindFirstOrThrowArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Find zero or more MeetingUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingUsers
     * const meetingUsers = await prisma.meetingUser.findMany()
     * 
     * // Get first 10 MeetingUsers
     * const meetingUsers = await prisma.meetingUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingUserWithIdOnly = await prisma.meetingUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingUserFindManyArgs>(
      args?: SelectSubset<T, MeetingUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingUserGetPayload<T>>>

    /**
     * Create a MeetingUser.
     * @param {MeetingUserCreateArgs} args - Arguments to create a MeetingUser.
     * @example
     * // Create one MeetingUser
     * const MeetingUser = await prisma.meetingUser.create({
     *   data: {
     *     // ... data to create a MeetingUser
     *   }
     * })
     * 
    **/
    create<T extends MeetingUserCreateArgs>(
      args: SelectSubset<T, MeetingUserCreateArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Create many MeetingUsers.
     *     @param {MeetingUserCreateManyArgs} args - Arguments to create many MeetingUsers.
     *     @example
     *     // Create many MeetingUsers
     *     const meetingUser = await prisma.meetingUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingUserCreateManyArgs>(
      args?: SelectSubset<T, MeetingUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingUser.
     * @param {MeetingUserDeleteArgs} args - Arguments to delete one MeetingUser.
     * @example
     * // Delete one MeetingUser
     * const MeetingUser = await prisma.meetingUser.delete({
     *   where: {
     *     // ... filter to delete one MeetingUser
     *   }
     * })
     * 
    **/
    delete<T extends MeetingUserDeleteArgs>(
      args: SelectSubset<T, MeetingUserDeleteArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Update one MeetingUser.
     * @param {MeetingUserUpdateArgs} args - Arguments to update one MeetingUser.
     * @example
     * // Update one MeetingUser
     * const meetingUser = await prisma.meetingUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingUserUpdateArgs>(
      args: SelectSubset<T, MeetingUserUpdateArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Delete zero or more MeetingUsers.
     * @param {MeetingUserDeleteManyArgs} args - Arguments to filter MeetingUsers to delete.
     * @example
     * // Delete a few MeetingUsers
     * const { count } = await prisma.meetingUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingUserDeleteManyArgs>(
      args?: SelectSubset<T, MeetingUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingUsers
     * const meetingUser = await prisma.meetingUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingUserUpdateManyArgs>(
      args: SelectSubset<T, MeetingUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingUser.
     * @param {MeetingUserUpsertArgs} args - Arguments to update or create a MeetingUser.
     * @example
     * // Update or create a MeetingUser
     * const meetingUser = await prisma.meetingUser.upsert({
     *   create: {
     *     // ... data to create a MeetingUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingUser we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingUserUpsertArgs>(
      args: SelectSubset<T, MeetingUserUpsertArgs>
    ): Prisma__MeetingUserClient<MeetingUserGetPayload<T>>

    /**
     * Count the number of MeetingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserCountArgs} args - Arguments to filter MeetingUsers to count.
     * @example
     * // Count the number of MeetingUsers
     * const count = await prisma.meetingUser.count({
     *   where: {
     *     // ... the filter for the MeetingUsers we want to count
     *   }
     * })
    **/
    count<T extends MeetingUserCountArgs>(
      args?: Subset<T, MeetingUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingUserAggregateArgs>(args: Subset<T, MeetingUserAggregateArgs>): Prisma.PrismaPromise<GetMeetingUserAggregateType<T>>

    /**
     * Group by MeetingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingUserGroupByArgs['orderBy'] }
        : { orderBy?: MeetingUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    MeetingUserBooked<T extends MeetingUser$MeetingUserBookedArgs= {}>(args?: Subset<T, MeetingUser$MeetingUserBookedArgs>): Prisma.PrismaPromise<Array<MeetingUserBookedGetPayload<T>>| Null>;

    MeetingUserAvailable<T extends MeetingUser$MeetingUserAvailableArgs= {}>(args?: Subset<T, MeetingUser$MeetingUserAvailableArgs>): Prisma.PrismaPromise<Array<MeetingUserAvailableGetPayload<T>>| Null>;

    MeetingRoomBooked<T extends MeetingUser$MeetingRoomBookedArgs= {}>(args?: Subset<T, MeetingUser$MeetingRoomBookedArgs>): Prisma.PrismaPromise<Array<MeetingRoomBookedGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingUser base type for findUnique actions
   */
  export type MeetingUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter, which MeetingUser to fetch.
     */
    where: MeetingUserWhereUniqueInput
  }

  /**
   * MeetingUser findUnique
   */
  export interface MeetingUserFindUniqueArgs extends MeetingUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUser findUniqueOrThrow
   */
  export type MeetingUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter, which MeetingUser to fetch.
     */
    where: MeetingUserWhereUniqueInput
  }


  /**
   * MeetingUser base type for findFirst actions
   */
  export type MeetingUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter, which MeetingUser to fetch.
     */
    where?: MeetingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUsers to fetch.
     */
    orderBy?: Enumerable<MeetingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUsers.
     */
    cursor?: MeetingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUsers.
     */
    distinct?: Enumerable<MeetingUserScalarFieldEnum>
  }

  /**
   * MeetingUser findFirst
   */
  export interface MeetingUserFindFirstArgs extends MeetingUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUser findFirstOrThrow
   */
  export type MeetingUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter, which MeetingUser to fetch.
     */
    where?: MeetingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUsers to fetch.
     */
    orderBy?: Enumerable<MeetingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUsers.
     */
    cursor?: MeetingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUsers.
     */
    distinct?: Enumerable<MeetingUserScalarFieldEnum>
  }


  /**
   * MeetingUser findMany
   */
  export type MeetingUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter, which MeetingUsers to fetch.
     */
    where?: MeetingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUsers to fetch.
     */
    orderBy?: Enumerable<MeetingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingUsers.
     */
    cursor?: MeetingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUsers.
     */
    skip?: number
    distinct?: Enumerable<MeetingUserScalarFieldEnum>
  }


  /**
   * MeetingUser create
   */
  export type MeetingUserCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * The data needed to create a MeetingUser.
     */
    data: XOR<MeetingUserCreateInput, MeetingUserUncheckedCreateInput>
  }


  /**
   * MeetingUser createMany
   */
  export type MeetingUserCreateManyArgs = {
    /**
     * The data used to create many MeetingUsers.
     */
    data: Enumerable<MeetingUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingUser update
   */
  export type MeetingUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * The data needed to update a MeetingUser.
     */
    data: XOR<MeetingUserUpdateInput, MeetingUserUncheckedUpdateInput>
    /**
     * Choose, which MeetingUser to update.
     */
    where: MeetingUserWhereUniqueInput
  }


  /**
   * MeetingUser updateMany
   */
  export type MeetingUserUpdateManyArgs = {
    /**
     * The data used to update MeetingUsers.
     */
    data: XOR<MeetingUserUpdateManyMutationInput, MeetingUserUncheckedUpdateManyInput>
    /**
     * Filter which MeetingUsers to update
     */
    where?: MeetingUserWhereInput
  }


  /**
   * MeetingUser upsert
   */
  export type MeetingUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * The filter to search for the MeetingUser to update in case it exists.
     */
    where: MeetingUserWhereUniqueInput
    /**
     * In case the MeetingUser found by the `where` argument doesn't exist, create a new MeetingUser with this data.
     */
    create: XOR<MeetingUserCreateInput, MeetingUserUncheckedCreateInput>
    /**
     * In case the MeetingUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUserUpdateInput, MeetingUserUncheckedUpdateInput>
  }


  /**
   * MeetingUser delete
   */
  export type MeetingUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
    /**
     * Filter which MeetingUser to delete.
     */
    where: MeetingUserWhereUniqueInput
  }


  /**
   * MeetingUser deleteMany
   */
  export type MeetingUserDeleteManyArgs = {
    /**
     * Filter which MeetingUsers to delete
     */
    where?: MeetingUserWhereInput
  }


  /**
   * MeetingUser.MeetingUserBooked
   */
  export type MeetingUser$MeetingUserBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    where?: MeetingUserBookedWhereInput
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    cursor?: MeetingUserBookedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingUserBookedScalarFieldEnum>
  }


  /**
   * MeetingUser.MeetingUserAvailable
   */
  export type MeetingUser$MeetingUserAvailableArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    where?: MeetingUserAvailableWhereInput
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithRelationInput>
    cursor?: MeetingUserAvailableWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingUserAvailableScalarFieldEnum>
  }


  /**
   * MeetingUser.MeetingRoomBooked
   */
  export type MeetingUser$MeetingRoomBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    where?: MeetingRoomBookedWhereInput
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    cursor?: MeetingRoomBookedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingRoomBookedScalarFieldEnum>
  }


  /**
   * MeetingUser without action
   */
  export type MeetingUserArgs = {
    /**
     * Select specific fields to fetch from the MeetingUser
     */
    select?: MeetingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserInclude | null
  }



  /**
   * Model MeetingUserBooked
   */


  export type AggregateMeetingUserBooked = {
    _count: MeetingUserBookedCountAggregateOutputType | null
    _avg: MeetingUserBookedAvgAggregateOutputType | null
    _sum: MeetingUserBookedSumAggregateOutputType | null
    _min: MeetingUserBookedMinAggregateOutputType | null
    _max: MeetingUserBookedMaxAggregateOutputType | null
  }

  export type MeetingUserBookedAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    meetingRoomId: number | null
  }

  export type MeetingUserBookedSumAggregateOutputType = {
    id: number | null
    userId: number | null
    meetingRoomId: number | null
  }

  export type MeetingUserBookedMinAggregateOutputType = {
    id: number | null
    userId: number | null
    meetingRoomId: number | null
    meetingDetail: string | null
    bookingStart: Date | null
    bookingEnd: Date | null
    nameOfBooker: string | null
    tel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserBookedMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    meetingRoomId: number | null
    meetingDetail: string | null
    bookingStart: Date | null
    bookingEnd: Date | null
    nameOfBooker: string | null
    tel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserBookedCountAggregateOutputType = {
    id: number
    userId: number
    meetingRoomId: number
    meetingDetail: number
    bookingStart: number
    bookingEnd: number
    nameOfBooker: number
    tel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingUserBookedAvgAggregateInputType = {
    id?: true
    userId?: true
    meetingRoomId?: true
  }

  export type MeetingUserBookedSumAggregateInputType = {
    id?: true
    userId?: true
    meetingRoomId?: true
  }

  export type MeetingUserBookedMinAggregateInputType = {
    id?: true
    userId?: true
    meetingRoomId?: true
    meetingDetail?: true
    bookingStart?: true
    bookingEnd?: true
    nameOfBooker?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserBookedMaxAggregateInputType = {
    id?: true
    userId?: true
    meetingRoomId?: true
    meetingDetail?: true
    bookingStart?: true
    bookingEnd?: true
    nameOfBooker?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserBookedCountAggregateInputType = {
    id?: true
    userId?: true
    meetingRoomId?: true
    meetingDetail?: true
    bookingStart?: true
    bookingEnd?: true
    nameOfBooker?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingUserBookedAggregateArgs = {
    /**
     * Filter which MeetingUserBooked to aggregate.
     */
    where?: MeetingUserBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingUserBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingUserBookeds
    **/
    _count?: true | MeetingUserBookedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingUserBookedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingUserBookedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingUserBookedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingUserBookedMaxAggregateInputType
  }

  export type GetMeetingUserBookedAggregateType<T extends MeetingUserBookedAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingUserBooked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingUserBooked[P]>
      : GetScalarType<T[P], AggregateMeetingUserBooked[P]>
  }




  export type MeetingUserBookedGroupByArgs = {
    where?: MeetingUserBookedWhereInput
    orderBy?: Enumerable<MeetingUserBookedOrderByWithAggregationInput>
    by: MeetingUserBookedScalarFieldEnum[]
    having?: MeetingUserBookedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingUserBookedCountAggregateInputType | true
    _avg?: MeetingUserBookedAvgAggregateInputType
    _sum?: MeetingUserBookedSumAggregateInputType
    _min?: MeetingUserBookedMinAggregateInputType
    _max?: MeetingUserBookedMaxAggregateInputType
  }


  export type MeetingUserBookedGroupByOutputType = {
    id: number
    userId: number
    meetingRoomId: number
    meetingDetail: string | null
    bookingStart: Date
    bookingEnd: Date
    nameOfBooker: string
    tel: string
    createdAt: Date
    updatedAt: Date
    _count: MeetingUserBookedCountAggregateOutputType | null
    _avg: MeetingUserBookedAvgAggregateOutputType | null
    _sum: MeetingUserBookedSumAggregateOutputType | null
    _min: MeetingUserBookedMinAggregateOutputType | null
    _max: MeetingUserBookedMaxAggregateOutputType | null
  }

  type GetMeetingUserBookedGroupByPayload<T extends MeetingUserBookedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingUserBookedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingUserBookedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingUserBookedGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingUserBookedGroupByOutputType[P]>
        }
      >
    >


  export type MeetingUserBookedSelect = {
    id?: boolean
    user?: boolean | MeetingUserArgs
    userId?: boolean
    meetingRoom?: boolean | MeetingRoomArgs
    meetingRoomId?: boolean
    meetingDetail?: boolean
    bookingStart?: boolean
    bookingEnd?: boolean
    nameOfBooker?: boolean
    tel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    MeetingMembers?: boolean | MeetingUserBooked$MeetingMembersArgs
    _count?: boolean | MeetingUserBookedCountOutputTypeArgs
  }


  export type MeetingUserBookedInclude = {
    user?: boolean | MeetingUserArgs
    meetingRoom?: boolean | MeetingRoomArgs
    MeetingMembers?: boolean | MeetingUserBooked$MeetingMembersArgs
    _count?: boolean | MeetingUserBookedCountOutputTypeArgs
  }

  export type MeetingUserBookedGetPayload<S extends boolean | null | undefined | MeetingUserBookedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingUserBooked :
    S extends undefined ? never :
    S extends { include: any } & (MeetingUserBookedArgs | MeetingUserBookedFindManyArgs)
    ? MeetingUserBooked  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? MeetingUserGetPayload<S['include'][P]> :
        P extends 'meetingRoom' ? MeetingRoomGetPayload<S['include'][P]> :
        P extends 'MeetingMembers' ? Array < MeetingMembersGetPayload<S['include'][P]>>  :
        P extends '_count' ? MeetingUserBookedCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingUserBookedArgs | MeetingUserBookedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? MeetingUserGetPayload<S['select'][P]> :
        P extends 'meetingRoom' ? MeetingRoomGetPayload<S['select'][P]> :
        P extends 'MeetingMembers' ? Array < MeetingMembersGetPayload<S['select'][P]>>  :
        P extends '_count' ? MeetingUserBookedCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof MeetingUserBooked ? MeetingUserBooked[P] : never
  } 
      : MeetingUserBooked


  type MeetingUserBookedCountArgs = 
    Omit<MeetingUserBookedFindManyArgs, 'select' | 'include'> & {
      select?: MeetingUserBookedCountAggregateInputType | true
    }

  export interface MeetingUserBookedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingUserBooked that matches the filter.
     * @param {MeetingUserBookedFindUniqueArgs} args - Arguments to find a MeetingUserBooked
     * @example
     * // Get one MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingUserBookedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingUserBookedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingUserBooked'> extends True ? Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>> : Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T> | null, null>

    /**
     * Find one MeetingUserBooked that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingUserBookedFindUniqueOrThrowArgs} args - Arguments to find a MeetingUserBooked
     * @example
     * // Get one MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingUserBookedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserBookedFindUniqueOrThrowArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Find the first MeetingUserBooked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedFindFirstArgs} args - Arguments to find a MeetingUserBooked
     * @example
     * // Get one MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingUserBookedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingUserBookedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingUserBooked'> extends True ? Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>> : Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T> | null, null>

    /**
     * Find the first MeetingUserBooked that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedFindFirstOrThrowArgs} args - Arguments to find a MeetingUserBooked
     * @example
     * // Get one MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingUserBookedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserBookedFindFirstOrThrowArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Find zero or more MeetingUserBookeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingUserBookeds
     * const meetingUserBookeds = await prisma.meetingUserBooked.findMany()
     * 
     * // Get first 10 MeetingUserBookeds
     * const meetingUserBookeds = await prisma.meetingUserBooked.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingUserBookedWithIdOnly = await prisma.meetingUserBooked.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingUserBookedFindManyArgs>(
      args?: SelectSubset<T, MeetingUserBookedFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingUserBookedGetPayload<T>>>

    /**
     * Create a MeetingUserBooked.
     * @param {MeetingUserBookedCreateArgs} args - Arguments to create a MeetingUserBooked.
     * @example
     * // Create one MeetingUserBooked
     * const MeetingUserBooked = await prisma.meetingUserBooked.create({
     *   data: {
     *     // ... data to create a MeetingUserBooked
     *   }
     * })
     * 
    **/
    create<T extends MeetingUserBookedCreateArgs>(
      args: SelectSubset<T, MeetingUserBookedCreateArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Create many MeetingUserBookeds.
     *     @param {MeetingUserBookedCreateManyArgs} args - Arguments to create many MeetingUserBookeds.
     *     @example
     *     // Create many MeetingUserBookeds
     *     const meetingUserBooked = await prisma.meetingUserBooked.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingUserBookedCreateManyArgs>(
      args?: SelectSubset<T, MeetingUserBookedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingUserBooked.
     * @param {MeetingUserBookedDeleteArgs} args - Arguments to delete one MeetingUserBooked.
     * @example
     * // Delete one MeetingUserBooked
     * const MeetingUserBooked = await prisma.meetingUserBooked.delete({
     *   where: {
     *     // ... filter to delete one MeetingUserBooked
     *   }
     * })
     * 
    **/
    delete<T extends MeetingUserBookedDeleteArgs>(
      args: SelectSubset<T, MeetingUserBookedDeleteArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Update one MeetingUserBooked.
     * @param {MeetingUserBookedUpdateArgs} args - Arguments to update one MeetingUserBooked.
     * @example
     * // Update one MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingUserBookedUpdateArgs>(
      args: SelectSubset<T, MeetingUserBookedUpdateArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Delete zero or more MeetingUserBookeds.
     * @param {MeetingUserBookedDeleteManyArgs} args - Arguments to filter MeetingUserBookeds to delete.
     * @example
     * // Delete a few MeetingUserBookeds
     * const { count } = await prisma.meetingUserBooked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingUserBookedDeleteManyArgs>(
      args?: SelectSubset<T, MeetingUserBookedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingUserBookeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingUserBookeds
     * const meetingUserBooked = await prisma.meetingUserBooked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingUserBookedUpdateManyArgs>(
      args: SelectSubset<T, MeetingUserBookedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingUserBooked.
     * @param {MeetingUserBookedUpsertArgs} args - Arguments to update or create a MeetingUserBooked.
     * @example
     * // Update or create a MeetingUserBooked
     * const meetingUserBooked = await prisma.meetingUserBooked.upsert({
     *   create: {
     *     // ... data to create a MeetingUserBooked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingUserBooked we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingUserBookedUpsertArgs>(
      args: SelectSubset<T, MeetingUserBookedUpsertArgs>
    ): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T>>

    /**
     * Count the number of MeetingUserBookeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedCountArgs} args - Arguments to filter MeetingUserBookeds to count.
     * @example
     * // Count the number of MeetingUserBookeds
     * const count = await prisma.meetingUserBooked.count({
     *   where: {
     *     // ... the filter for the MeetingUserBookeds we want to count
     *   }
     * })
    **/
    count<T extends MeetingUserBookedCountArgs>(
      args?: Subset<T, MeetingUserBookedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingUserBookedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingUserBooked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingUserBookedAggregateArgs>(args: Subset<T, MeetingUserBookedAggregateArgs>): Prisma.PrismaPromise<GetMeetingUserBookedAggregateType<T>>

    /**
     * Group by MeetingUserBooked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserBookedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingUserBookedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingUserBookedGroupByArgs['orderBy'] }
        : { orderBy?: MeetingUserBookedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingUserBookedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingUserBookedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingUserBooked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingUserBookedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends MeetingUserArgs= {}>(args?: Subset<T, MeetingUserArgs>): Prisma__MeetingUserClient<MeetingUserGetPayload<T> | Null>;

    meetingRoom<T extends MeetingRoomArgs= {}>(args?: Subset<T, MeetingRoomArgs>): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T> | Null>;

    MeetingMembers<T extends MeetingUserBooked$MeetingMembersArgs= {}>(args?: Subset<T, MeetingUserBooked$MeetingMembersArgs>): Prisma.PrismaPromise<Array<MeetingMembersGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingUserBooked base type for findUnique actions
   */
  export type MeetingUserBookedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter, which MeetingUserBooked to fetch.
     */
    where: MeetingUserBookedWhereUniqueInput
  }

  /**
   * MeetingUserBooked findUnique
   */
  export interface MeetingUserBookedFindUniqueArgs extends MeetingUserBookedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUserBooked findUniqueOrThrow
   */
  export type MeetingUserBookedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter, which MeetingUserBooked to fetch.
     */
    where: MeetingUserBookedWhereUniqueInput
  }


  /**
   * MeetingUserBooked base type for findFirst actions
   */
  export type MeetingUserBookedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter, which MeetingUserBooked to fetch.
     */
    where?: MeetingUserBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUserBookeds.
     */
    cursor?: MeetingUserBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUserBookeds.
     */
    distinct?: Enumerable<MeetingUserBookedScalarFieldEnum>
  }

  /**
   * MeetingUserBooked findFirst
   */
  export interface MeetingUserBookedFindFirstArgs extends MeetingUserBookedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUserBooked findFirstOrThrow
   */
  export type MeetingUserBookedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter, which MeetingUserBooked to fetch.
     */
    where?: MeetingUserBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUserBookeds.
     */
    cursor?: MeetingUserBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUserBookeds.
     */
    distinct?: Enumerable<MeetingUserBookedScalarFieldEnum>
  }


  /**
   * MeetingUserBooked findMany
   */
  export type MeetingUserBookedFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter, which MeetingUserBookeds to fetch.
     */
    where?: MeetingUserBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingUserBookeds.
     */
    cursor?: MeetingUserBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserBookeds.
     */
    skip?: number
    distinct?: Enumerable<MeetingUserBookedScalarFieldEnum>
  }


  /**
   * MeetingUserBooked create
   */
  export type MeetingUserBookedCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * The data needed to create a MeetingUserBooked.
     */
    data: XOR<MeetingUserBookedCreateInput, MeetingUserBookedUncheckedCreateInput>
  }


  /**
   * MeetingUserBooked createMany
   */
  export type MeetingUserBookedCreateManyArgs = {
    /**
     * The data used to create many MeetingUserBookeds.
     */
    data: Enumerable<MeetingUserBookedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingUserBooked update
   */
  export type MeetingUserBookedUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * The data needed to update a MeetingUserBooked.
     */
    data: XOR<MeetingUserBookedUpdateInput, MeetingUserBookedUncheckedUpdateInput>
    /**
     * Choose, which MeetingUserBooked to update.
     */
    where: MeetingUserBookedWhereUniqueInput
  }


  /**
   * MeetingUserBooked updateMany
   */
  export type MeetingUserBookedUpdateManyArgs = {
    /**
     * The data used to update MeetingUserBookeds.
     */
    data: XOR<MeetingUserBookedUpdateManyMutationInput, MeetingUserBookedUncheckedUpdateManyInput>
    /**
     * Filter which MeetingUserBookeds to update
     */
    where?: MeetingUserBookedWhereInput
  }


  /**
   * MeetingUserBooked upsert
   */
  export type MeetingUserBookedUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * The filter to search for the MeetingUserBooked to update in case it exists.
     */
    where: MeetingUserBookedWhereUniqueInput
    /**
     * In case the MeetingUserBooked found by the `where` argument doesn't exist, create a new MeetingUserBooked with this data.
     */
    create: XOR<MeetingUserBookedCreateInput, MeetingUserBookedUncheckedCreateInput>
    /**
     * In case the MeetingUserBooked was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUserBookedUpdateInput, MeetingUserBookedUncheckedUpdateInput>
  }


  /**
   * MeetingUserBooked delete
   */
  export type MeetingUserBookedDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    /**
     * Filter which MeetingUserBooked to delete.
     */
    where: MeetingUserBookedWhereUniqueInput
  }


  /**
   * MeetingUserBooked deleteMany
   */
  export type MeetingUserBookedDeleteManyArgs = {
    /**
     * Filter which MeetingUserBookeds to delete
     */
    where?: MeetingUserBookedWhereInput
  }


  /**
   * MeetingUserBooked.MeetingMembers
   */
  export type MeetingUserBooked$MeetingMembersArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    where?: MeetingMembersWhereInput
    orderBy?: Enumerable<MeetingMembersOrderByWithRelationInput>
    cursor?: MeetingMembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingMembersScalarFieldEnum>
  }


  /**
   * MeetingUserBooked without action
   */
  export type MeetingUserBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
  }



  /**
   * Model MeetingMembers
   */


  export type AggregateMeetingMembers = {
    _count: MeetingMembersCountAggregateOutputType | null
    _avg: MeetingMembersAvgAggregateOutputType | null
    _sum: MeetingMembersSumAggregateOutputType | null
    _min: MeetingMembersMinAggregateOutputType | null
    _max: MeetingMembersMaxAggregateOutputType | null
  }

  export type MeetingMembersAvgAggregateOutputType = {
    id: number | null
    bookedId: number | null
  }

  export type MeetingMembersSumAggregateOutputType = {
    id: number | null
    bookedId: number | null
  }

  export type MeetingMembersMinAggregateOutputType = {
    id: number | null
    bookedId: number | null
    name: string | null
    email: string | null
    tel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingMembersMaxAggregateOutputType = {
    id: number | null
    bookedId: number | null
    name: string | null
    email: string | null
    tel: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingMembersCountAggregateOutputType = {
    id: number
    bookedId: number
    name: number
    email: number
    tel: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingMembersAvgAggregateInputType = {
    id?: true
    bookedId?: true
  }

  export type MeetingMembersSumAggregateInputType = {
    id?: true
    bookedId?: true
  }

  export type MeetingMembersMinAggregateInputType = {
    id?: true
    bookedId?: true
    name?: true
    email?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingMembersMaxAggregateInputType = {
    id?: true
    bookedId?: true
    name?: true
    email?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingMembersCountAggregateInputType = {
    id?: true
    bookedId?: true
    name?: true
    email?: true
    tel?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingMembersAggregateArgs = {
    /**
     * Filter which MeetingMembers to aggregate.
     */
    where?: MeetingMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingMembers to fetch.
     */
    orderBy?: Enumerable<MeetingMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingMembers
    **/
    _count?: true | MeetingMembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingMembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingMembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingMembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingMembersMaxAggregateInputType
  }

  export type GetMeetingMembersAggregateType<T extends MeetingMembersAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingMembers[P]>
      : GetScalarType<T[P], AggregateMeetingMembers[P]>
  }




  export type MeetingMembersGroupByArgs = {
    where?: MeetingMembersWhereInput
    orderBy?: Enumerable<MeetingMembersOrderByWithAggregationInput>
    by: MeetingMembersScalarFieldEnum[]
    having?: MeetingMembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingMembersCountAggregateInputType | true
    _avg?: MeetingMembersAvgAggregateInputType
    _sum?: MeetingMembersSumAggregateInputType
    _min?: MeetingMembersMinAggregateInputType
    _max?: MeetingMembersMaxAggregateInputType
  }


  export type MeetingMembersGroupByOutputType = {
    id: number
    bookedId: number
    name: string | null
    email: string | null
    tel: string | null
    createdAt: Date
    updatedAt: Date
    _count: MeetingMembersCountAggregateOutputType | null
    _avg: MeetingMembersAvgAggregateOutputType | null
    _sum: MeetingMembersSumAggregateOutputType | null
    _min: MeetingMembersMinAggregateOutputType | null
    _max: MeetingMembersMaxAggregateOutputType | null
  }

  type GetMeetingMembersGroupByPayload<T extends MeetingMembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingMembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingMembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingMembersGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingMembersGroupByOutputType[P]>
        }
      >
    >


  export type MeetingMembersSelect = {
    id?: boolean
    booking?: boolean | MeetingUserBookedArgs
    bookedId?: boolean
    name?: boolean
    email?: boolean
    tel?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MeetingMembersInclude = {
    booking?: boolean | MeetingUserBookedArgs
  }

  export type MeetingMembersGetPayload<S extends boolean | null | undefined | MeetingMembersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingMembers :
    S extends undefined ? never :
    S extends { include: any } & (MeetingMembersArgs | MeetingMembersFindManyArgs)
    ? MeetingMembers  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'booking' ? MeetingUserBookedGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingMembersArgs | MeetingMembersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'booking' ? MeetingUserBookedGetPayload<S['select'][P]> :  P extends keyof MeetingMembers ? MeetingMembers[P] : never
  } 
      : MeetingMembers


  type MeetingMembersCountArgs = 
    Omit<MeetingMembersFindManyArgs, 'select' | 'include'> & {
      select?: MeetingMembersCountAggregateInputType | true
    }

  export interface MeetingMembersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingMembers that matches the filter.
     * @param {MeetingMembersFindUniqueArgs} args - Arguments to find a MeetingMembers
     * @example
     * // Get one MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingMembersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingMembersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingMembers'> extends True ? Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>> : Prisma__MeetingMembersClient<MeetingMembersGetPayload<T> | null, null>

    /**
     * Find one MeetingMembers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingMembersFindUniqueOrThrowArgs} args - Arguments to find a MeetingMembers
     * @example
     * // Get one MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingMembersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingMembersFindUniqueOrThrowArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Find the first MeetingMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersFindFirstArgs} args - Arguments to find a MeetingMembers
     * @example
     * // Get one MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingMembersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingMembersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingMembers'> extends True ? Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>> : Prisma__MeetingMembersClient<MeetingMembersGetPayload<T> | null, null>

    /**
     * Find the first MeetingMembers that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersFindFirstOrThrowArgs} args - Arguments to find a MeetingMembers
     * @example
     * // Get one MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingMembersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingMembersFindFirstOrThrowArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Find zero or more MeetingMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findMany()
     * 
     * // Get first 10 MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingMembersWithIdOnly = await prisma.meetingMembers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingMembersFindManyArgs>(
      args?: SelectSubset<T, MeetingMembersFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingMembersGetPayload<T>>>

    /**
     * Create a MeetingMembers.
     * @param {MeetingMembersCreateArgs} args - Arguments to create a MeetingMembers.
     * @example
     * // Create one MeetingMembers
     * const MeetingMembers = await prisma.meetingMembers.create({
     *   data: {
     *     // ... data to create a MeetingMembers
     *   }
     * })
     * 
    **/
    create<T extends MeetingMembersCreateArgs>(
      args: SelectSubset<T, MeetingMembersCreateArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Create many MeetingMembers.
     *     @param {MeetingMembersCreateManyArgs} args - Arguments to create many MeetingMembers.
     *     @example
     *     // Create many MeetingMembers
     *     const meetingMembers = await prisma.meetingMembers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingMembersCreateManyArgs>(
      args?: SelectSubset<T, MeetingMembersCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingMembers.
     * @param {MeetingMembersDeleteArgs} args - Arguments to delete one MeetingMembers.
     * @example
     * // Delete one MeetingMembers
     * const MeetingMembers = await prisma.meetingMembers.delete({
     *   where: {
     *     // ... filter to delete one MeetingMembers
     *   }
     * })
     * 
    **/
    delete<T extends MeetingMembersDeleteArgs>(
      args: SelectSubset<T, MeetingMembersDeleteArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Update one MeetingMembers.
     * @param {MeetingMembersUpdateArgs} args - Arguments to update one MeetingMembers.
     * @example
     * // Update one MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingMembersUpdateArgs>(
      args: SelectSubset<T, MeetingMembersUpdateArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Delete zero or more MeetingMembers.
     * @param {MeetingMembersDeleteManyArgs} args - Arguments to filter MeetingMembers to delete.
     * @example
     * // Delete a few MeetingMembers
     * const { count } = await prisma.meetingMembers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingMembersDeleteManyArgs>(
      args?: SelectSubset<T, MeetingMembersDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingMembersUpdateManyArgs>(
      args: SelectSubset<T, MeetingMembersUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingMembers.
     * @param {MeetingMembersUpsertArgs} args - Arguments to update or create a MeetingMembers.
     * @example
     * // Update or create a MeetingMembers
     * const meetingMembers = await prisma.meetingMembers.upsert({
     *   create: {
     *     // ... data to create a MeetingMembers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingMembers we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingMembersUpsertArgs>(
      args: SelectSubset<T, MeetingMembersUpsertArgs>
    ): Prisma__MeetingMembersClient<MeetingMembersGetPayload<T>>

    /**
     * Count the number of MeetingMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersCountArgs} args - Arguments to filter MeetingMembers to count.
     * @example
     * // Count the number of MeetingMembers
     * const count = await prisma.meetingMembers.count({
     *   where: {
     *     // ... the filter for the MeetingMembers we want to count
     *   }
     * })
    **/
    count<T extends MeetingMembersCountArgs>(
      args?: Subset<T, MeetingMembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingMembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingMembersAggregateArgs>(args: Subset<T, MeetingMembersAggregateArgs>): Prisma.PrismaPromise<GetMeetingMembersAggregateType<T>>

    /**
     * Group by MeetingMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingMembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingMembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingMembersGroupByArgs['orderBy'] }
        : { orderBy?: MeetingMembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingMembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingMembers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingMembersClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    booking<T extends MeetingUserBookedArgs= {}>(args?: Subset<T, MeetingUserBookedArgs>): Prisma__MeetingUserBookedClient<MeetingUserBookedGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingMembers base type for findUnique actions
   */
  export type MeetingMembersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter, which MeetingMembers to fetch.
     */
    where: MeetingMembersWhereUniqueInput
  }

  /**
   * MeetingMembers findUnique
   */
  export interface MeetingMembersFindUniqueArgs extends MeetingMembersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingMembers findUniqueOrThrow
   */
  export type MeetingMembersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter, which MeetingMembers to fetch.
     */
    where: MeetingMembersWhereUniqueInput
  }


  /**
   * MeetingMembers base type for findFirst actions
   */
  export type MeetingMembersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter, which MeetingMembers to fetch.
     */
    where?: MeetingMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingMembers to fetch.
     */
    orderBy?: Enumerable<MeetingMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingMembers.
     */
    cursor?: MeetingMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingMembers.
     */
    distinct?: Enumerable<MeetingMembersScalarFieldEnum>
  }

  /**
   * MeetingMembers findFirst
   */
  export interface MeetingMembersFindFirstArgs extends MeetingMembersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingMembers findFirstOrThrow
   */
  export type MeetingMembersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter, which MeetingMembers to fetch.
     */
    where?: MeetingMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingMembers to fetch.
     */
    orderBy?: Enumerable<MeetingMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingMembers.
     */
    cursor?: MeetingMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingMembers.
     */
    distinct?: Enumerable<MeetingMembersScalarFieldEnum>
  }


  /**
   * MeetingMembers findMany
   */
  export type MeetingMembersFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter, which MeetingMembers to fetch.
     */
    where?: MeetingMembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingMembers to fetch.
     */
    orderBy?: Enumerable<MeetingMembersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingMembers.
     */
    cursor?: MeetingMembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingMembers.
     */
    skip?: number
    distinct?: Enumerable<MeetingMembersScalarFieldEnum>
  }


  /**
   * MeetingMembers create
   */
  export type MeetingMembersCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * The data needed to create a MeetingMembers.
     */
    data: XOR<MeetingMembersCreateInput, MeetingMembersUncheckedCreateInput>
  }


  /**
   * MeetingMembers createMany
   */
  export type MeetingMembersCreateManyArgs = {
    /**
     * The data used to create many MeetingMembers.
     */
    data: Enumerable<MeetingMembersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingMembers update
   */
  export type MeetingMembersUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * The data needed to update a MeetingMembers.
     */
    data: XOR<MeetingMembersUpdateInput, MeetingMembersUncheckedUpdateInput>
    /**
     * Choose, which MeetingMembers to update.
     */
    where: MeetingMembersWhereUniqueInput
  }


  /**
   * MeetingMembers updateMany
   */
  export type MeetingMembersUpdateManyArgs = {
    /**
     * The data used to update MeetingMembers.
     */
    data: XOR<MeetingMembersUpdateManyMutationInput, MeetingMembersUncheckedUpdateManyInput>
    /**
     * Filter which MeetingMembers to update
     */
    where?: MeetingMembersWhereInput
  }


  /**
   * MeetingMembers upsert
   */
  export type MeetingMembersUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * The filter to search for the MeetingMembers to update in case it exists.
     */
    where: MeetingMembersWhereUniqueInput
    /**
     * In case the MeetingMembers found by the `where` argument doesn't exist, create a new MeetingMembers with this data.
     */
    create: XOR<MeetingMembersCreateInput, MeetingMembersUncheckedCreateInput>
    /**
     * In case the MeetingMembers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingMembersUpdateInput, MeetingMembersUncheckedUpdateInput>
  }


  /**
   * MeetingMembers delete
   */
  export type MeetingMembersDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
    /**
     * Filter which MeetingMembers to delete.
     */
    where: MeetingMembersWhereUniqueInput
  }


  /**
   * MeetingMembers deleteMany
   */
  export type MeetingMembersDeleteManyArgs = {
    /**
     * Filter which MeetingMembers to delete
     */
    where?: MeetingMembersWhereInput
  }


  /**
   * MeetingMembers without action
   */
  export type MeetingMembersArgs = {
    /**
     * Select specific fields to fetch from the MeetingMembers
     */
    select?: MeetingMembersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingMembersInclude | null
  }



  /**
   * Model MeetingUserAvailable
   */


  export type AggregateMeetingUserAvailable = {
    _count: MeetingUserAvailableCountAggregateOutputType | null
    _avg: MeetingUserAvailableAvgAggregateOutputType | null
    _sum: MeetingUserAvailableSumAggregateOutputType | null
    _min: MeetingUserAvailableMinAggregateOutputType | null
    _max: MeetingUserAvailableMaxAggregateOutputType | null
  }

  export type MeetingUserAvailableAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MeetingUserAvailableSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MeetingUserAvailableMinAggregateOutputType = {
    id: number | null
    userId: number | null
    availableStart: Date | null
    availableEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserAvailableMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    availableStart: Date | null
    availableEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingUserAvailableCountAggregateOutputType = {
    id: number
    userId: number
    availableStart: number
    availableEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingUserAvailableAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MeetingUserAvailableSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MeetingUserAvailableMinAggregateInputType = {
    id?: true
    userId?: true
    availableStart?: true
    availableEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserAvailableMaxAggregateInputType = {
    id?: true
    userId?: true
    availableStart?: true
    availableEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingUserAvailableCountAggregateInputType = {
    id?: true
    userId?: true
    availableStart?: true
    availableEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingUserAvailableAggregateArgs = {
    /**
     * Filter which MeetingUserAvailable to aggregate.
     */
    where?: MeetingUserAvailableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserAvailables to fetch.
     */
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingUserAvailableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserAvailables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserAvailables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingUserAvailables
    **/
    _count?: true | MeetingUserAvailableCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingUserAvailableAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingUserAvailableSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingUserAvailableMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingUserAvailableMaxAggregateInputType
  }

  export type GetMeetingUserAvailableAggregateType<T extends MeetingUserAvailableAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingUserAvailable]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingUserAvailable[P]>
      : GetScalarType<T[P], AggregateMeetingUserAvailable[P]>
  }




  export type MeetingUserAvailableGroupByArgs = {
    where?: MeetingUserAvailableWhereInput
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithAggregationInput>
    by: MeetingUserAvailableScalarFieldEnum[]
    having?: MeetingUserAvailableScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingUserAvailableCountAggregateInputType | true
    _avg?: MeetingUserAvailableAvgAggregateInputType
    _sum?: MeetingUserAvailableSumAggregateInputType
    _min?: MeetingUserAvailableMinAggregateInputType
    _max?: MeetingUserAvailableMaxAggregateInputType
  }


  export type MeetingUserAvailableGroupByOutputType = {
    id: number
    userId: number
    availableStart: Date
    availableEnd: Date
    createdAt: Date
    updatedAt: Date
    _count: MeetingUserAvailableCountAggregateOutputType | null
    _avg: MeetingUserAvailableAvgAggregateOutputType | null
    _sum: MeetingUserAvailableSumAggregateOutputType | null
    _min: MeetingUserAvailableMinAggregateOutputType | null
    _max: MeetingUserAvailableMaxAggregateOutputType | null
  }

  type GetMeetingUserAvailableGroupByPayload<T extends MeetingUserAvailableGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingUserAvailableGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingUserAvailableGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingUserAvailableGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingUserAvailableGroupByOutputType[P]>
        }
      >
    >


  export type MeetingUserAvailableSelect = {
    id?: boolean
    user?: boolean | MeetingUserArgs
    userId?: boolean
    availableStart?: boolean
    availableEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MeetingUserAvailableInclude = {
    user?: boolean | MeetingUserArgs
  }

  export type MeetingUserAvailableGetPayload<S extends boolean | null | undefined | MeetingUserAvailableArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingUserAvailable :
    S extends undefined ? never :
    S extends { include: any } & (MeetingUserAvailableArgs | MeetingUserAvailableFindManyArgs)
    ? MeetingUserAvailable  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? MeetingUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingUserAvailableArgs | MeetingUserAvailableFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? MeetingUserGetPayload<S['select'][P]> :  P extends keyof MeetingUserAvailable ? MeetingUserAvailable[P] : never
  } 
      : MeetingUserAvailable


  type MeetingUserAvailableCountArgs = 
    Omit<MeetingUserAvailableFindManyArgs, 'select' | 'include'> & {
      select?: MeetingUserAvailableCountAggregateInputType | true
    }

  export interface MeetingUserAvailableDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingUserAvailable that matches the filter.
     * @param {MeetingUserAvailableFindUniqueArgs} args - Arguments to find a MeetingUserAvailable
     * @example
     * // Get one MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingUserAvailableFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingUserAvailableFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingUserAvailable'> extends True ? Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>> : Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T> | null, null>

    /**
     * Find one MeetingUserAvailable that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingUserAvailableFindUniqueOrThrowArgs} args - Arguments to find a MeetingUserAvailable
     * @example
     * // Get one MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingUserAvailableFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserAvailableFindUniqueOrThrowArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Find the first MeetingUserAvailable that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableFindFirstArgs} args - Arguments to find a MeetingUserAvailable
     * @example
     * // Get one MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingUserAvailableFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingUserAvailableFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingUserAvailable'> extends True ? Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>> : Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T> | null, null>

    /**
     * Find the first MeetingUserAvailable that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableFindFirstOrThrowArgs} args - Arguments to find a MeetingUserAvailable
     * @example
     * // Get one MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingUserAvailableFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingUserAvailableFindFirstOrThrowArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Find zero or more MeetingUserAvailables that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingUserAvailables
     * const meetingUserAvailables = await prisma.meetingUserAvailable.findMany()
     * 
     * // Get first 10 MeetingUserAvailables
     * const meetingUserAvailables = await prisma.meetingUserAvailable.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingUserAvailableWithIdOnly = await prisma.meetingUserAvailable.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingUserAvailableFindManyArgs>(
      args?: SelectSubset<T, MeetingUserAvailableFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingUserAvailableGetPayload<T>>>

    /**
     * Create a MeetingUserAvailable.
     * @param {MeetingUserAvailableCreateArgs} args - Arguments to create a MeetingUserAvailable.
     * @example
     * // Create one MeetingUserAvailable
     * const MeetingUserAvailable = await prisma.meetingUserAvailable.create({
     *   data: {
     *     // ... data to create a MeetingUserAvailable
     *   }
     * })
     * 
    **/
    create<T extends MeetingUserAvailableCreateArgs>(
      args: SelectSubset<T, MeetingUserAvailableCreateArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Create many MeetingUserAvailables.
     *     @param {MeetingUserAvailableCreateManyArgs} args - Arguments to create many MeetingUserAvailables.
     *     @example
     *     // Create many MeetingUserAvailables
     *     const meetingUserAvailable = await prisma.meetingUserAvailable.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingUserAvailableCreateManyArgs>(
      args?: SelectSubset<T, MeetingUserAvailableCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingUserAvailable.
     * @param {MeetingUserAvailableDeleteArgs} args - Arguments to delete one MeetingUserAvailable.
     * @example
     * // Delete one MeetingUserAvailable
     * const MeetingUserAvailable = await prisma.meetingUserAvailable.delete({
     *   where: {
     *     // ... filter to delete one MeetingUserAvailable
     *   }
     * })
     * 
    **/
    delete<T extends MeetingUserAvailableDeleteArgs>(
      args: SelectSubset<T, MeetingUserAvailableDeleteArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Update one MeetingUserAvailable.
     * @param {MeetingUserAvailableUpdateArgs} args - Arguments to update one MeetingUserAvailable.
     * @example
     * // Update one MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingUserAvailableUpdateArgs>(
      args: SelectSubset<T, MeetingUserAvailableUpdateArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Delete zero or more MeetingUserAvailables.
     * @param {MeetingUserAvailableDeleteManyArgs} args - Arguments to filter MeetingUserAvailables to delete.
     * @example
     * // Delete a few MeetingUserAvailables
     * const { count } = await prisma.meetingUserAvailable.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingUserAvailableDeleteManyArgs>(
      args?: SelectSubset<T, MeetingUserAvailableDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingUserAvailables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingUserAvailables
     * const meetingUserAvailable = await prisma.meetingUserAvailable.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingUserAvailableUpdateManyArgs>(
      args: SelectSubset<T, MeetingUserAvailableUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingUserAvailable.
     * @param {MeetingUserAvailableUpsertArgs} args - Arguments to update or create a MeetingUserAvailable.
     * @example
     * // Update or create a MeetingUserAvailable
     * const meetingUserAvailable = await prisma.meetingUserAvailable.upsert({
     *   create: {
     *     // ... data to create a MeetingUserAvailable
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingUserAvailable we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingUserAvailableUpsertArgs>(
      args: SelectSubset<T, MeetingUserAvailableUpsertArgs>
    ): Prisma__MeetingUserAvailableClient<MeetingUserAvailableGetPayload<T>>

    /**
     * Count the number of MeetingUserAvailables.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableCountArgs} args - Arguments to filter MeetingUserAvailables to count.
     * @example
     * // Count the number of MeetingUserAvailables
     * const count = await prisma.meetingUserAvailable.count({
     *   where: {
     *     // ... the filter for the MeetingUserAvailables we want to count
     *   }
     * })
    **/
    count<T extends MeetingUserAvailableCountArgs>(
      args?: Subset<T, MeetingUserAvailableCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingUserAvailableCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingUserAvailable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingUserAvailableAggregateArgs>(args: Subset<T, MeetingUserAvailableAggregateArgs>): Prisma.PrismaPromise<GetMeetingUserAvailableAggregateType<T>>

    /**
     * Group by MeetingUserAvailable.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingUserAvailableGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingUserAvailableGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingUserAvailableGroupByArgs['orderBy'] }
        : { orderBy?: MeetingUserAvailableGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingUserAvailableGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingUserAvailableGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingUserAvailable.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingUserAvailableClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends MeetingUserArgs= {}>(args?: Subset<T, MeetingUserArgs>): Prisma__MeetingUserClient<MeetingUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingUserAvailable base type for findUnique actions
   */
  export type MeetingUserAvailableFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter, which MeetingUserAvailable to fetch.
     */
    where: MeetingUserAvailableWhereUniqueInput
  }

  /**
   * MeetingUserAvailable findUnique
   */
  export interface MeetingUserAvailableFindUniqueArgs extends MeetingUserAvailableFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUserAvailable findUniqueOrThrow
   */
  export type MeetingUserAvailableFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter, which MeetingUserAvailable to fetch.
     */
    where: MeetingUserAvailableWhereUniqueInput
  }


  /**
   * MeetingUserAvailable base type for findFirst actions
   */
  export type MeetingUserAvailableFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter, which MeetingUserAvailable to fetch.
     */
    where?: MeetingUserAvailableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserAvailables to fetch.
     */
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUserAvailables.
     */
    cursor?: MeetingUserAvailableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserAvailables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserAvailables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUserAvailables.
     */
    distinct?: Enumerable<MeetingUserAvailableScalarFieldEnum>
  }

  /**
   * MeetingUserAvailable findFirst
   */
  export interface MeetingUserAvailableFindFirstArgs extends MeetingUserAvailableFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingUserAvailable findFirstOrThrow
   */
  export type MeetingUserAvailableFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter, which MeetingUserAvailable to fetch.
     */
    where?: MeetingUserAvailableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserAvailables to fetch.
     */
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingUserAvailables.
     */
    cursor?: MeetingUserAvailableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserAvailables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserAvailables.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingUserAvailables.
     */
    distinct?: Enumerable<MeetingUserAvailableScalarFieldEnum>
  }


  /**
   * MeetingUserAvailable findMany
   */
  export type MeetingUserAvailableFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter, which MeetingUserAvailables to fetch.
     */
    where?: MeetingUserAvailableWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingUserAvailables to fetch.
     */
    orderBy?: Enumerable<MeetingUserAvailableOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingUserAvailables.
     */
    cursor?: MeetingUserAvailableWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingUserAvailables from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingUserAvailables.
     */
    skip?: number
    distinct?: Enumerable<MeetingUserAvailableScalarFieldEnum>
  }


  /**
   * MeetingUserAvailable create
   */
  export type MeetingUserAvailableCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * The data needed to create a MeetingUserAvailable.
     */
    data: XOR<MeetingUserAvailableCreateInput, MeetingUserAvailableUncheckedCreateInput>
  }


  /**
   * MeetingUserAvailable createMany
   */
  export type MeetingUserAvailableCreateManyArgs = {
    /**
     * The data used to create many MeetingUserAvailables.
     */
    data: Enumerable<MeetingUserAvailableCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingUserAvailable update
   */
  export type MeetingUserAvailableUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * The data needed to update a MeetingUserAvailable.
     */
    data: XOR<MeetingUserAvailableUpdateInput, MeetingUserAvailableUncheckedUpdateInput>
    /**
     * Choose, which MeetingUserAvailable to update.
     */
    where: MeetingUserAvailableWhereUniqueInput
  }


  /**
   * MeetingUserAvailable updateMany
   */
  export type MeetingUserAvailableUpdateManyArgs = {
    /**
     * The data used to update MeetingUserAvailables.
     */
    data: XOR<MeetingUserAvailableUpdateManyMutationInput, MeetingUserAvailableUncheckedUpdateManyInput>
    /**
     * Filter which MeetingUserAvailables to update
     */
    where?: MeetingUserAvailableWhereInput
  }


  /**
   * MeetingUserAvailable upsert
   */
  export type MeetingUserAvailableUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * The filter to search for the MeetingUserAvailable to update in case it exists.
     */
    where: MeetingUserAvailableWhereUniqueInput
    /**
     * In case the MeetingUserAvailable found by the `where` argument doesn't exist, create a new MeetingUserAvailable with this data.
     */
    create: XOR<MeetingUserAvailableCreateInput, MeetingUserAvailableUncheckedCreateInput>
    /**
     * In case the MeetingUserAvailable was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingUserAvailableUpdateInput, MeetingUserAvailableUncheckedUpdateInput>
  }


  /**
   * MeetingUserAvailable delete
   */
  export type MeetingUserAvailableDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
    /**
     * Filter which MeetingUserAvailable to delete.
     */
    where: MeetingUserAvailableWhereUniqueInput
  }


  /**
   * MeetingUserAvailable deleteMany
   */
  export type MeetingUserAvailableDeleteManyArgs = {
    /**
     * Filter which MeetingUserAvailables to delete
     */
    where?: MeetingUserAvailableWhereInput
  }


  /**
   * MeetingUserAvailable without action
   */
  export type MeetingUserAvailableArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserAvailable
     */
    select?: MeetingUserAvailableSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserAvailableInclude | null
  }



  /**
   * Model MeetingRoom
   */


  export type AggregateMeetingRoom = {
    _count: MeetingRoomCountAggregateOutputType | null
    _avg: MeetingRoomAvgAggregateOutputType | null
    _sum: MeetingRoomSumAggregateOutputType | null
    _min: MeetingRoomMinAggregateOutputType | null
    _max: MeetingRoomMaxAggregateOutputType | null
  }

  export type MeetingRoomAvgAggregateOutputType = {
    id: number | null
    floor: number | null
  }

  export type MeetingRoomSumAggregateOutputType = {
    id: number | null
    floor: number | null
  }

  export type MeetingRoomMinAggregateOutputType = {
    id: number | null
    name: string | null
    floor: number | null
    building: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingRoomMaxAggregateOutputType = {
    id: number | null
    name: string | null
    floor: number | null
    building: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingRoomCountAggregateOutputType = {
    id: number
    name: number
    floor: number
    building: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingRoomAvgAggregateInputType = {
    id?: true
    floor?: true
  }

  export type MeetingRoomSumAggregateInputType = {
    id?: true
    floor?: true
  }

  export type MeetingRoomMinAggregateInputType = {
    id?: true
    name?: true
    floor?: true
    building?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingRoomMaxAggregateInputType = {
    id?: true
    name?: true
    floor?: true
    building?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingRoomCountAggregateInputType = {
    id?: true
    name?: true
    floor?: true
    building?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingRoomAggregateArgs = {
    /**
     * Filter which MeetingRoom to aggregate.
     */
    where?: MeetingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRooms to fetch.
     */
    orderBy?: Enumerable<MeetingRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingRooms
    **/
    _count?: true | MeetingRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingRoomMaxAggregateInputType
  }

  export type GetMeetingRoomAggregateType<T extends MeetingRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingRoom[P]>
      : GetScalarType<T[P], AggregateMeetingRoom[P]>
  }




  export type MeetingRoomGroupByArgs = {
    where?: MeetingRoomWhereInput
    orderBy?: Enumerable<MeetingRoomOrderByWithAggregationInput>
    by: MeetingRoomScalarFieldEnum[]
    having?: MeetingRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingRoomCountAggregateInputType | true
    _avg?: MeetingRoomAvgAggregateInputType
    _sum?: MeetingRoomSumAggregateInputType
    _min?: MeetingRoomMinAggregateInputType
    _max?: MeetingRoomMaxAggregateInputType
  }


  export type MeetingRoomGroupByOutputType = {
    id: number
    name: string
    floor: number
    building: string
    createdAt: Date
    updatedAt: Date
    _count: MeetingRoomCountAggregateOutputType | null
    _avg: MeetingRoomAvgAggregateOutputType | null
    _sum: MeetingRoomSumAggregateOutputType | null
    _min: MeetingRoomMinAggregateOutputType | null
    _max: MeetingRoomMaxAggregateOutputType | null
  }

  type GetMeetingRoomGroupByPayload<T extends MeetingRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingRoomGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingRoomGroupByOutputType[P]>
        }
      >
    >


  export type MeetingRoomSelect = {
    id?: boolean
    name?: boolean
    floor?: boolean
    building?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    MeetingUserBooked?: boolean | MeetingRoom$MeetingUserBookedArgs
    MeetingRoomBooked?: boolean | MeetingRoom$MeetingRoomBookedArgs
    _count?: boolean | MeetingRoomCountOutputTypeArgs
  }


  export type MeetingRoomInclude = {
    MeetingUserBooked?: boolean | MeetingRoom$MeetingUserBookedArgs
    MeetingRoomBooked?: boolean | MeetingRoom$MeetingRoomBookedArgs
    _count?: boolean | MeetingRoomCountOutputTypeArgs
  }

  export type MeetingRoomGetPayload<S extends boolean | null | undefined | MeetingRoomArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingRoom :
    S extends undefined ? never :
    S extends { include: any } & (MeetingRoomArgs | MeetingRoomFindManyArgs)
    ? MeetingRoom  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'MeetingUserBooked' ? Array < MeetingUserBookedGetPayload<S['include'][P]>>  :
        P extends 'MeetingRoomBooked' ? Array < MeetingRoomBookedGetPayload<S['include'][P]>>  :
        P extends '_count' ? MeetingRoomCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingRoomArgs | MeetingRoomFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'MeetingUserBooked' ? Array < MeetingUserBookedGetPayload<S['select'][P]>>  :
        P extends 'MeetingRoomBooked' ? Array < MeetingRoomBookedGetPayload<S['select'][P]>>  :
        P extends '_count' ? MeetingRoomCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof MeetingRoom ? MeetingRoom[P] : never
  } 
      : MeetingRoom


  type MeetingRoomCountArgs = 
    Omit<MeetingRoomFindManyArgs, 'select' | 'include'> & {
      select?: MeetingRoomCountAggregateInputType | true
    }

  export interface MeetingRoomDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingRoom that matches the filter.
     * @param {MeetingRoomFindUniqueArgs} args - Arguments to find a MeetingRoom
     * @example
     * // Get one MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingRoomFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingRoomFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingRoom'> extends True ? Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>> : Prisma__MeetingRoomClient<MeetingRoomGetPayload<T> | null, null>

    /**
     * Find one MeetingRoom that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingRoomFindUniqueOrThrowArgs} args - Arguments to find a MeetingRoom
     * @example
     * // Get one MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingRoomFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingRoomFindUniqueOrThrowArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Find the first MeetingRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomFindFirstArgs} args - Arguments to find a MeetingRoom
     * @example
     * // Get one MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingRoomFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingRoomFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingRoom'> extends True ? Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>> : Prisma__MeetingRoomClient<MeetingRoomGetPayload<T> | null, null>

    /**
     * Find the first MeetingRoom that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomFindFirstOrThrowArgs} args - Arguments to find a MeetingRoom
     * @example
     * // Get one MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingRoomFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingRoomFindFirstOrThrowArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Find zero or more MeetingRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingRooms
     * const meetingRooms = await prisma.meetingRoom.findMany()
     * 
     * // Get first 10 MeetingRooms
     * const meetingRooms = await prisma.meetingRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingRoomWithIdOnly = await prisma.meetingRoom.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingRoomFindManyArgs>(
      args?: SelectSubset<T, MeetingRoomFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingRoomGetPayload<T>>>

    /**
     * Create a MeetingRoom.
     * @param {MeetingRoomCreateArgs} args - Arguments to create a MeetingRoom.
     * @example
     * // Create one MeetingRoom
     * const MeetingRoom = await prisma.meetingRoom.create({
     *   data: {
     *     // ... data to create a MeetingRoom
     *   }
     * })
     * 
    **/
    create<T extends MeetingRoomCreateArgs>(
      args: SelectSubset<T, MeetingRoomCreateArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Create many MeetingRooms.
     *     @param {MeetingRoomCreateManyArgs} args - Arguments to create many MeetingRooms.
     *     @example
     *     // Create many MeetingRooms
     *     const meetingRoom = await prisma.meetingRoom.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingRoomCreateManyArgs>(
      args?: SelectSubset<T, MeetingRoomCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingRoom.
     * @param {MeetingRoomDeleteArgs} args - Arguments to delete one MeetingRoom.
     * @example
     * // Delete one MeetingRoom
     * const MeetingRoom = await prisma.meetingRoom.delete({
     *   where: {
     *     // ... filter to delete one MeetingRoom
     *   }
     * })
     * 
    **/
    delete<T extends MeetingRoomDeleteArgs>(
      args: SelectSubset<T, MeetingRoomDeleteArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Update one MeetingRoom.
     * @param {MeetingRoomUpdateArgs} args - Arguments to update one MeetingRoom.
     * @example
     * // Update one MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingRoomUpdateArgs>(
      args: SelectSubset<T, MeetingRoomUpdateArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Delete zero or more MeetingRooms.
     * @param {MeetingRoomDeleteManyArgs} args - Arguments to filter MeetingRooms to delete.
     * @example
     * // Delete a few MeetingRooms
     * const { count } = await prisma.meetingRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingRoomDeleteManyArgs>(
      args?: SelectSubset<T, MeetingRoomDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingRooms
     * const meetingRoom = await prisma.meetingRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingRoomUpdateManyArgs>(
      args: SelectSubset<T, MeetingRoomUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingRoom.
     * @param {MeetingRoomUpsertArgs} args - Arguments to update or create a MeetingRoom.
     * @example
     * // Update or create a MeetingRoom
     * const meetingRoom = await prisma.meetingRoom.upsert({
     *   create: {
     *     // ... data to create a MeetingRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingRoom we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingRoomUpsertArgs>(
      args: SelectSubset<T, MeetingRoomUpsertArgs>
    ): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T>>

    /**
     * Count the number of MeetingRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomCountArgs} args - Arguments to filter MeetingRooms to count.
     * @example
     * // Count the number of MeetingRooms
     * const count = await prisma.meetingRoom.count({
     *   where: {
     *     // ... the filter for the MeetingRooms we want to count
     *   }
     * })
    **/
    count<T extends MeetingRoomCountArgs>(
      args?: Subset<T, MeetingRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingRoomAggregateArgs>(args: Subset<T, MeetingRoomAggregateArgs>): Prisma.PrismaPromise<GetMeetingRoomAggregateType<T>>

    /**
     * Group by MeetingRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingRoomGroupByArgs['orderBy'] }
        : { orderBy?: MeetingRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingRoomClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    MeetingUserBooked<T extends MeetingRoom$MeetingUserBookedArgs= {}>(args?: Subset<T, MeetingRoom$MeetingUserBookedArgs>): Prisma.PrismaPromise<Array<MeetingUserBookedGetPayload<T>>| Null>;

    MeetingRoomBooked<T extends MeetingRoom$MeetingRoomBookedArgs= {}>(args?: Subset<T, MeetingRoom$MeetingRoomBookedArgs>): Prisma.PrismaPromise<Array<MeetingRoomBookedGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingRoom base type for findUnique actions
   */
  export type MeetingRoomFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter, which MeetingRoom to fetch.
     */
    where: MeetingRoomWhereUniqueInput
  }

  /**
   * MeetingRoom findUnique
   */
  export interface MeetingRoomFindUniqueArgs extends MeetingRoomFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingRoom findUniqueOrThrow
   */
  export type MeetingRoomFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter, which MeetingRoom to fetch.
     */
    where: MeetingRoomWhereUniqueInput
  }


  /**
   * MeetingRoom base type for findFirst actions
   */
  export type MeetingRoomFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter, which MeetingRoom to fetch.
     */
    where?: MeetingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRooms to fetch.
     */
    orderBy?: Enumerable<MeetingRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingRooms.
     */
    cursor?: MeetingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingRooms.
     */
    distinct?: Enumerable<MeetingRoomScalarFieldEnum>
  }

  /**
   * MeetingRoom findFirst
   */
  export interface MeetingRoomFindFirstArgs extends MeetingRoomFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingRoom findFirstOrThrow
   */
  export type MeetingRoomFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter, which MeetingRoom to fetch.
     */
    where?: MeetingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRooms to fetch.
     */
    orderBy?: Enumerable<MeetingRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingRooms.
     */
    cursor?: MeetingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingRooms.
     */
    distinct?: Enumerable<MeetingRoomScalarFieldEnum>
  }


  /**
   * MeetingRoom findMany
   */
  export type MeetingRoomFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter, which MeetingRooms to fetch.
     */
    where?: MeetingRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRooms to fetch.
     */
    orderBy?: Enumerable<MeetingRoomOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingRooms.
     */
    cursor?: MeetingRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRooms.
     */
    skip?: number
    distinct?: Enumerable<MeetingRoomScalarFieldEnum>
  }


  /**
   * MeetingRoom create
   */
  export type MeetingRoomCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * The data needed to create a MeetingRoom.
     */
    data: XOR<MeetingRoomCreateInput, MeetingRoomUncheckedCreateInput>
  }


  /**
   * MeetingRoom createMany
   */
  export type MeetingRoomCreateManyArgs = {
    /**
     * The data used to create many MeetingRooms.
     */
    data: Enumerable<MeetingRoomCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingRoom update
   */
  export type MeetingRoomUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * The data needed to update a MeetingRoom.
     */
    data: XOR<MeetingRoomUpdateInput, MeetingRoomUncheckedUpdateInput>
    /**
     * Choose, which MeetingRoom to update.
     */
    where: MeetingRoomWhereUniqueInput
  }


  /**
   * MeetingRoom updateMany
   */
  export type MeetingRoomUpdateManyArgs = {
    /**
     * The data used to update MeetingRooms.
     */
    data: XOR<MeetingRoomUpdateManyMutationInput, MeetingRoomUncheckedUpdateManyInput>
    /**
     * Filter which MeetingRooms to update
     */
    where?: MeetingRoomWhereInput
  }


  /**
   * MeetingRoom upsert
   */
  export type MeetingRoomUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * The filter to search for the MeetingRoom to update in case it exists.
     */
    where: MeetingRoomWhereUniqueInput
    /**
     * In case the MeetingRoom found by the `where` argument doesn't exist, create a new MeetingRoom with this data.
     */
    create: XOR<MeetingRoomCreateInput, MeetingRoomUncheckedCreateInput>
    /**
     * In case the MeetingRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingRoomUpdateInput, MeetingRoomUncheckedUpdateInput>
  }


  /**
   * MeetingRoom delete
   */
  export type MeetingRoomDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
    /**
     * Filter which MeetingRoom to delete.
     */
    where: MeetingRoomWhereUniqueInput
  }


  /**
   * MeetingRoom deleteMany
   */
  export type MeetingRoomDeleteManyArgs = {
    /**
     * Filter which MeetingRooms to delete
     */
    where?: MeetingRoomWhereInput
  }


  /**
   * MeetingRoom.MeetingUserBooked
   */
  export type MeetingRoom$MeetingUserBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingUserBooked
     */
    select?: MeetingUserBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingUserBookedInclude | null
    where?: MeetingUserBookedWhereInput
    orderBy?: Enumerable<MeetingUserBookedOrderByWithRelationInput>
    cursor?: MeetingUserBookedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingUserBookedScalarFieldEnum>
  }


  /**
   * MeetingRoom.MeetingRoomBooked
   */
  export type MeetingRoom$MeetingRoomBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    where?: MeetingRoomBookedWhereInput
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    cursor?: MeetingRoomBookedWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MeetingRoomBookedScalarFieldEnum>
  }


  /**
   * MeetingRoom without action
   */
  export type MeetingRoomArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoom
     */
    select?: MeetingRoomSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomInclude | null
  }



  /**
   * Model MeetingRoomBooked
   */


  export type AggregateMeetingRoomBooked = {
    _count: MeetingRoomBookedCountAggregateOutputType | null
    _avg: MeetingRoomBookedAvgAggregateOutputType | null
    _sum: MeetingRoomBookedSumAggregateOutputType | null
    _min: MeetingRoomBookedMinAggregateOutputType | null
    _max: MeetingRoomBookedMaxAggregateOutputType | null
  }

  export type MeetingRoomBookedAvgAggregateOutputType = {
    id: number | null
    meetingRoomId: number | null
    userId: number | null
  }

  export type MeetingRoomBookedSumAggregateOutputType = {
    id: number | null
    meetingRoomId: number | null
    userId: number | null
  }

  export type MeetingRoomBookedMinAggregateOutputType = {
    id: number | null
    meetingRoomId: number | null
    userId: number | null
    bookingStart: Date | null
    bookingEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingRoomBookedMaxAggregateOutputType = {
    id: number | null
    meetingRoomId: number | null
    userId: number | null
    bookingStart: Date | null
    bookingEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetingRoomBookedCountAggregateOutputType = {
    id: number
    meetingRoomId: number
    userId: number
    bookingStart: number
    bookingEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetingRoomBookedAvgAggregateInputType = {
    id?: true
    meetingRoomId?: true
    userId?: true
  }

  export type MeetingRoomBookedSumAggregateInputType = {
    id?: true
    meetingRoomId?: true
    userId?: true
  }

  export type MeetingRoomBookedMinAggregateInputType = {
    id?: true
    meetingRoomId?: true
    userId?: true
    bookingStart?: true
    bookingEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingRoomBookedMaxAggregateInputType = {
    id?: true
    meetingRoomId?: true
    userId?: true
    bookingStart?: true
    bookingEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetingRoomBookedCountAggregateInputType = {
    id?: true
    meetingRoomId?: true
    userId?: true
    bookingStart?: true
    bookingEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetingRoomBookedAggregateArgs = {
    /**
     * Filter which MeetingRoomBooked to aggregate.
     */
    where?: MeetingRoomBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRoomBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetingRoomBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRoomBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRoomBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetingRoomBookeds
    **/
    _count?: true | MeetingRoomBookedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetingRoomBookedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetingRoomBookedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetingRoomBookedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetingRoomBookedMaxAggregateInputType
  }

  export type GetMeetingRoomBookedAggregateType<T extends MeetingRoomBookedAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetingRoomBooked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetingRoomBooked[P]>
      : GetScalarType<T[P], AggregateMeetingRoomBooked[P]>
  }




  export type MeetingRoomBookedGroupByArgs = {
    where?: MeetingRoomBookedWhereInput
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithAggregationInput>
    by: MeetingRoomBookedScalarFieldEnum[]
    having?: MeetingRoomBookedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetingRoomBookedCountAggregateInputType | true
    _avg?: MeetingRoomBookedAvgAggregateInputType
    _sum?: MeetingRoomBookedSumAggregateInputType
    _min?: MeetingRoomBookedMinAggregateInputType
    _max?: MeetingRoomBookedMaxAggregateInputType
  }


  export type MeetingRoomBookedGroupByOutputType = {
    id: number
    meetingRoomId: number
    userId: number
    bookingStart: Date
    bookingEnd: Date
    createdAt: Date
    updatedAt: Date
    _count: MeetingRoomBookedCountAggregateOutputType | null
    _avg: MeetingRoomBookedAvgAggregateOutputType | null
    _sum: MeetingRoomBookedSumAggregateOutputType | null
    _min: MeetingRoomBookedMinAggregateOutputType | null
    _max: MeetingRoomBookedMaxAggregateOutputType | null
  }

  type GetMeetingRoomBookedGroupByPayload<T extends MeetingRoomBookedGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MeetingRoomBookedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetingRoomBookedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetingRoomBookedGroupByOutputType[P]>
            : GetScalarType<T[P], MeetingRoomBookedGroupByOutputType[P]>
        }
      >
    >


  export type MeetingRoomBookedSelect = {
    id?: boolean
    meetingRoom?: boolean | MeetingRoomArgs
    meetingRoomId?: boolean
    byUserId?: boolean | MeetingUserArgs
    userId?: boolean
    bookingStart?: boolean
    bookingEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type MeetingRoomBookedInclude = {
    meetingRoom?: boolean | MeetingRoomArgs
    byUserId?: boolean | MeetingUserArgs
  }

  export type MeetingRoomBookedGetPayload<S extends boolean | null | undefined | MeetingRoomBookedArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? MeetingRoomBooked :
    S extends undefined ? never :
    S extends { include: any } & (MeetingRoomBookedArgs | MeetingRoomBookedFindManyArgs)
    ? MeetingRoomBooked  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'meetingRoom' ? MeetingRoomGetPayload<S['include'][P]> :
        P extends 'byUserId' ? MeetingUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (MeetingRoomBookedArgs | MeetingRoomBookedFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'meetingRoom' ? MeetingRoomGetPayload<S['select'][P]> :
        P extends 'byUserId' ? MeetingUserGetPayload<S['select'][P]> :  P extends keyof MeetingRoomBooked ? MeetingRoomBooked[P] : never
  } 
      : MeetingRoomBooked


  type MeetingRoomBookedCountArgs = 
    Omit<MeetingRoomBookedFindManyArgs, 'select' | 'include'> & {
      select?: MeetingRoomBookedCountAggregateInputType | true
    }

  export interface MeetingRoomBookedDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one MeetingRoomBooked that matches the filter.
     * @param {MeetingRoomBookedFindUniqueArgs} args - Arguments to find a MeetingRoomBooked
     * @example
     * // Get one MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetingRoomBookedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MeetingRoomBookedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MeetingRoomBooked'> extends True ? Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>> : Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T> | null, null>

    /**
     * Find one MeetingRoomBooked that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetingRoomBookedFindUniqueOrThrowArgs} args - Arguments to find a MeetingRoomBooked
     * @example
     * // Get one MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetingRoomBookedFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MeetingRoomBookedFindUniqueOrThrowArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Find the first MeetingRoomBooked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedFindFirstArgs} args - Arguments to find a MeetingRoomBooked
     * @example
     * // Get one MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetingRoomBookedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MeetingRoomBookedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MeetingRoomBooked'> extends True ? Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>> : Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T> | null, null>

    /**
     * Find the first MeetingRoomBooked that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedFindFirstOrThrowArgs} args - Arguments to find a MeetingRoomBooked
     * @example
     * // Get one MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetingRoomBookedFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MeetingRoomBookedFindFirstOrThrowArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Find zero or more MeetingRoomBookeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetingRoomBookeds
     * const meetingRoomBookeds = await prisma.meetingRoomBooked.findMany()
     * 
     * // Get first 10 MeetingRoomBookeds
     * const meetingRoomBookeds = await prisma.meetingRoomBooked.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetingRoomBookedWithIdOnly = await prisma.meetingRoomBooked.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetingRoomBookedFindManyArgs>(
      args?: SelectSubset<T, MeetingRoomBookedFindManyArgs>
    ): Prisma.PrismaPromise<Array<MeetingRoomBookedGetPayload<T>>>

    /**
     * Create a MeetingRoomBooked.
     * @param {MeetingRoomBookedCreateArgs} args - Arguments to create a MeetingRoomBooked.
     * @example
     * // Create one MeetingRoomBooked
     * const MeetingRoomBooked = await prisma.meetingRoomBooked.create({
     *   data: {
     *     // ... data to create a MeetingRoomBooked
     *   }
     * })
     * 
    **/
    create<T extends MeetingRoomBookedCreateArgs>(
      args: SelectSubset<T, MeetingRoomBookedCreateArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Create many MeetingRoomBookeds.
     *     @param {MeetingRoomBookedCreateManyArgs} args - Arguments to create many MeetingRoomBookeds.
     *     @example
     *     // Create many MeetingRoomBookeds
     *     const meetingRoomBooked = await prisma.meetingRoomBooked.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetingRoomBookedCreateManyArgs>(
      args?: SelectSubset<T, MeetingRoomBookedCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetingRoomBooked.
     * @param {MeetingRoomBookedDeleteArgs} args - Arguments to delete one MeetingRoomBooked.
     * @example
     * // Delete one MeetingRoomBooked
     * const MeetingRoomBooked = await prisma.meetingRoomBooked.delete({
     *   where: {
     *     // ... filter to delete one MeetingRoomBooked
     *   }
     * })
     * 
    **/
    delete<T extends MeetingRoomBookedDeleteArgs>(
      args: SelectSubset<T, MeetingRoomBookedDeleteArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Update one MeetingRoomBooked.
     * @param {MeetingRoomBookedUpdateArgs} args - Arguments to update one MeetingRoomBooked.
     * @example
     * // Update one MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetingRoomBookedUpdateArgs>(
      args: SelectSubset<T, MeetingRoomBookedUpdateArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Delete zero or more MeetingRoomBookeds.
     * @param {MeetingRoomBookedDeleteManyArgs} args - Arguments to filter MeetingRoomBookeds to delete.
     * @example
     * // Delete a few MeetingRoomBookeds
     * const { count } = await prisma.meetingRoomBooked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetingRoomBookedDeleteManyArgs>(
      args?: SelectSubset<T, MeetingRoomBookedDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetingRoomBookeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetingRoomBookeds
     * const meetingRoomBooked = await prisma.meetingRoomBooked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetingRoomBookedUpdateManyArgs>(
      args: SelectSubset<T, MeetingRoomBookedUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetingRoomBooked.
     * @param {MeetingRoomBookedUpsertArgs} args - Arguments to update or create a MeetingRoomBooked.
     * @example
     * // Update or create a MeetingRoomBooked
     * const meetingRoomBooked = await prisma.meetingRoomBooked.upsert({
     *   create: {
     *     // ... data to create a MeetingRoomBooked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetingRoomBooked we want to update
     *   }
     * })
    **/
    upsert<T extends MeetingRoomBookedUpsertArgs>(
      args: SelectSubset<T, MeetingRoomBookedUpsertArgs>
    ): Prisma__MeetingRoomBookedClient<MeetingRoomBookedGetPayload<T>>

    /**
     * Count the number of MeetingRoomBookeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedCountArgs} args - Arguments to filter MeetingRoomBookeds to count.
     * @example
     * // Count the number of MeetingRoomBookeds
     * const count = await prisma.meetingRoomBooked.count({
     *   where: {
     *     // ... the filter for the MeetingRoomBookeds we want to count
     *   }
     * })
    **/
    count<T extends MeetingRoomBookedCountArgs>(
      args?: Subset<T, MeetingRoomBookedCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetingRoomBookedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetingRoomBooked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetingRoomBookedAggregateArgs>(args: Subset<T, MeetingRoomBookedAggregateArgs>): Prisma.PrismaPromise<GetMeetingRoomBookedAggregateType<T>>

    /**
     * Group by MeetingRoomBooked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetingRoomBookedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetingRoomBookedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetingRoomBookedGroupByArgs['orderBy'] }
        : { orderBy?: MeetingRoomBookedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetingRoomBookedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetingRoomBookedGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetingRoomBooked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MeetingRoomBookedClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    meetingRoom<T extends MeetingRoomArgs= {}>(args?: Subset<T, MeetingRoomArgs>): Prisma__MeetingRoomClient<MeetingRoomGetPayload<T> | Null>;

    byUserId<T extends MeetingUserArgs= {}>(args?: Subset<T, MeetingUserArgs>): Prisma__MeetingUserClient<MeetingUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MeetingRoomBooked base type for findUnique actions
   */
  export type MeetingRoomBookedFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter, which MeetingRoomBooked to fetch.
     */
    where: MeetingRoomBookedWhereUniqueInput
  }

  /**
   * MeetingRoomBooked findUnique
   */
  export interface MeetingRoomBookedFindUniqueArgs extends MeetingRoomBookedFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingRoomBooked findUniqueOrThrow
   */
  export type MeetingRoomBookedFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter, which MeetingRoomBooked to fetch.
     */
    where: MeetingRoomBookedWhereUniqueInput
  }


  /**
   * MeetingRoomBooked base type for findFirst actions
   */
  export type MeetingRoomBookedFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter, which MeetingRoomBooked to fetch.
     */
    where?: MeetingRoomBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRoomBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingRoomBookeds.
     */
    cursor?: MeetingRoomBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRoomBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRoomBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingRoomBookeds.
     */
    distinct?: Enumerable<MeetingRoomBookedScalarFieldEnum>
  }

  /**
   * MeetingRoomBooked findFirst
   */
  export interface MeetingRoomBookedFindFirstArgs extends MeetingRoomBookedFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MeetingRoomBooked findFirstOrThrow
   */
  export type MeetingRoomBookedFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter, which MeetingRoomBooked to fetch.
     */
    where?: MeetingRoomBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRoomBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetingRoomBookeds.
     */
    cursor?: MeetingRoomBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRoomBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRoomBookeds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetingRoomBookeds.
     */
    distinct?: Enumerable<MeetingRoomBookedScalarFieldEnum>
  }


  /**
   * MeetingRoomBooked findMany
   */
  export type MeetingRoomBookedFindManyArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter, which MeetingRoomBookeds to fetch.
     */
    where?: MeetingRoomBookedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetingRoomBookeds to fetch.
     */
    orderBy?: Enumerable<MeetingRoomBookedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetingRoomBookeds.
     */
    cursor?: MeetingRoomBookedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetingRoomBookeds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetingRoomBookeds.
     */
    skip?: number
    distinct?: Enumerable<MeetingRoomBookedScalarFieldEnum>
  }


  /**
   * MeetingRoomBooked create
   */
  export type MeetingRoomBookedCreateArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * The data needed to create a MeetingRoomBooked.
     */
    data: XOR<MeetingRoomBookedCreateInput, MeetingRoomBookedUncheckedCreateInput>
  }


  /**
   * MeetingRoomBooked createMany
   */
  export type MeetingRoomBookedCreateManyArgs = {
    /**
     * The data used to create many MeetingRoomBookeds.
     */
    data: Enumerable<MeetingRoomBookedCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MeetingRoomBooked update
   */
  export type MeetingRoomBookedUpdateArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * The data needed to update a MeetingRoomBooked.
     */
    data: XOR<MeetingRoomBookedUpdateInput, MeetingRoomBookedUncheckedUpdateInput>
    /**
     * Choose, which MeetingRoomBooked to update.
     */
    where: MeetingRoomBookedWhereUniqueInput
  }


  /**
   * MeetingRoomBooked updateMany
   */
  export type MeetingRoomBookedUpdateManyArgs = {
    /**
     * The data used to update MeetingRoomBookeds.
     */
    data: XOR<MeetingRoomBookedUpdateManyMutationInput, MeetingRoomBookedUncheckedUpdateManyInput>
    /**
     * Filter which MeetingRoomBookeds to update
     */
    where?: MeetingRoomBookedWhereInput
  }


  /**
   * MeetingRoomBooked upsert
   */
  export type MeetingRoomBookedUpsertArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * The filter to search for the MeetingRoomBooked to update in case it exists.
     */
    where: MeetingRoomBookedWhereUniqueInput
    /**
     * In case the MeetingRoomBooked found by the `where` argument doesn't exist, create a new MeetingRoomBooked with this data.
     */
    create: XOR<MeetingRoomBookedCreateInput, MeetingRoomBookedUncheckedCreateInput>
    /**
     * In case the MeetingRoomBooked was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetingRoomBookedUpdateInput, MeetingRoomBookedUncheckedUpdateInput>
  }


  /**
   * MeetingRoomBooked delete
   */
  export type MeetingRoomBookedDeleteArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
    /**
     * Filter which MeetingRoomBooked to delete.
     */
    where: MeetingRoomBookedWhereUniqueInput
  }


  /**
   * MeetingRoomBooked deleteMany
   */
  export type MeetingRoomBookedDeleteManyArgs = {
    /**
     * Filter which MeetingRoomBookeds to delete
     */
    where?: MeetingRoomBookedWhereInput
  }


  /**
   * MeetingRoomBooked without action
   */
  export type MeetingRoomBookedArgs = {
    /**
     * Select specific fields to fetch from the MeetingRoomBooked
     */
    select?: MeetingRoomBookedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetingRoomBookedInclude | null
  }



  /**
   * Model TodoList
   */


  export type AggregateTodoList = {
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  export type TodoListAvgAggregateOutputType = {
    id: number | null
  }

  export type TodoListSumAggregateOutputType = {
    id: number | null
  }

  export type TodoListMinAggregateOutputType = {
    id: number | null
    task: string | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoListMaxAggregateOutputType = {
    id: number | null
    task: string | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoListCountAggregateOutputType = {
    id: number
    task: number
    status: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TodoListAvgAggregateInputType = {
    id?: true
  }

  export type TodoListSumAggregateInputType = {
    id?: true
  }

  export type TodoListMinAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoListMaxAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoListCountAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TodoListAggregateArgs = {
    /**
     * Filter which TodoList to aggregate.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodoLists
    **/
    _count?: true | TodoListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodoListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodoListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoListMaxAggregateInputType
  }

  export type GetTodoListAggregateType<T extends TodoListAggregateArgs> = {
        [P in keyof T & keyof AggregateTodoList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodoList[P]>
      : GetScalarType<T[P], AggregateTodoList[P]>
  }




  export type TodoListGroupByArgs = {
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithAggregationInput>
    by: TodoListScalarFieldEnum[]
    having?: TodoListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoListCountAggregateInputType | true
    _avg?: TodoListAvgAggregateInputType
    _sum?: TodoListSumAggregateInputType
    _min?: TodoListMinAggregateInputType
    _max?: TodoListMaxAggregateInputType
  }


  export type TodoListGroupByOutputType = {
    id: number
    task: string
    status: string
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  type GetTodoListGroupByPayload<T extends TodoListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TodoListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoListGroupByOutputType[P]>
            : GetScalarType<T[P], TodoListGroupByOutputType[P]>
        }
      >
    >


  export type TodoListSelect = {
    id?: boolean
    task?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TodoListGetPayload<S extends boolean | null | undefined | TodoListArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoList :
    S extends undefined ? never :
    S extends { include: any } & (TodoListArgs | TodoListFindManyArgs)
    ? TodoList 
    : S extends { select: any } & (TodoListArgs | TodoListFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TodoList ? TodoList[P] : never
  } 
      : TodoList


  type TodoListCountArgs = 
    Omit<TodoListFindManyArgs, 'select' | 'include'> & {
      select?: TodoListCountAggregateInputType | true
    }

  export interface TodoListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TodoList that matches the filter.
     * @param {TodoListFindUniqueArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodoListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodoListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find one TodoList that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodoListFindUniqueOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodoListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindUniqueOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find the first TodoList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodoListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodoListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find the first TodoList that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodoListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindFirstOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find zero or more TodoLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodoLists
     * const todoLists = await prisma.todoList.findMany()
     * 
     * // Get first 10 TodoLists
     * const todoLists = await prisma.todoList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoListWithIdOnly = await prisma.todoList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodoListFindManyArgs>(
      args?: SelectSubset<T, TodoListFindManyArgs>
    ): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>>

    /**
     * Create a TodoList.
     * @param {TodoListCreateArgs} args - Arguments to create a TodoList.
     * @example
     * // Create one TodoList
     * const TodoList = await prisma.todoList.create({
     *   data: {
     *     // ... data to create a TodoList
     *   }
     * })
     * 
    **/
    create<T extends TodoListCreateArgs>(
      args: SelectSubset<T, TodoListCreateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Create many TodoLists.
     *     @param {TodoListCreateManyArgs} args - Arguments to create many TodoLists.
     *     @example
     *     // Create many TodoLists
     *     const todoList = await prisma.todoList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodoListCreateManyArgs>(
      args?: SelectSubset<T, TodoListCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TodoList.
     * @param {TodoListDeleteArgs} args - Arguments to delete one TodoList.
     * @example
     * // Delete one TodoList
     * const TodoList = await prisma.todoList.delete({
     *   where: {
     *     // ... filter to delete one TodoList
     *   }
     * })
     * 
    **/
    delete<T extends TodoListDeleteArgs>(
      args: SelectSubset<T, TodoListDeleteArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Update one TodoList.
     * @param {TodoListUpdateArgs} args - Arguments to update one TodoList.
     * @example
     * // Update one TodoList
     * const todoList = await prisma.todoList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodoListUpdateArgs>(
      args: SelectSubset<T, TodoListUpdateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Delete zero or more TodoLists.
     * @param {TodoListDeleteManyArgs} args - Arguments to filter TodoLists to delete.
     * @example
     * // Delete a few TodoLists
     * const { count } = await prisma.todoList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodoListDeleteManyArgs>(
      args?: SelectSubset<T, TodoListDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodoLists
     * const todoList = await prisma.todoList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodoListUpdateManyArgs>(
      args: SelectSubset<T, TodoListUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TodoList.
     * @param {TodoListUpsertArgs} args - Arguments to update or create a TodoList.
     * @example
     * // Update or create a TodoList
     * const todoList = await prisma.todoList.upsert({
     *   create: {
     *     // ... data to create a TodoList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodoList we want to update
     *   }
     * })
    **/
    upsert<T extends TodoListUpsertArgs>(
      args: SelectSubset<T, TodoListUpsertArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Count the number of TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListCountArgs} args - Arguments to filter TodoLists to count.
     * @example
     * // Count the number of TodoLists
     * const count = await prisma.todoList.count({
     *   where: {
     *     // ... the filter for the TodoLists we want to count
     *   }
     * })
    **/
    count<T extends TodoListCountArgs>(
      args?: Subset<T, TodoListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoListAggregateArgs>(args: Subset<T, TodoListAggregateArgs>): Prisma.PrismaPromise<GetTodoListAggregateType<T>>

    /**
     * Group by TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoListGroupByArgs['orderBy'] }
        : { orderBy?: TodoListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TodoList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodoListClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TodoList base type for findUnique actions
   */
  export type TodoListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }

  /**
   * TodoList findUnique
   */
  export interface TodoListFindUniqueArgs extends TodoListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findUniqueOrThrow
   */
  export type TodoListFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList base type for findFirst actions
   */
  export type TodoListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }

  /**
   * TodoList findFirst
   */
  export interface TodoListFindFirstArgs extends TodoListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findFirstOrThrow
   */
  export type TodoListFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList findMany
   */
  export type TodoListFindManyArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoLists to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList create
   */
  export type TodoListCreateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The data needed to create a TodoList.
     */
    data: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
  }


  /**
   * TodoList createMany
   */
  export type TodoListCreateManyArgs = {
    /**
     * The data used to create many TodoLists.
     */
    data: Enumerable<TodoListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TodoList update
   */
  export type TodoListUpdateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The data needed to update a TodoList.
     */
    data: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
    /**
     * Choose, which TodoList to update.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList updateMany
   */
  export type TodoListUpdateManyArgs = {
    /**
     * The data used to update TodoLists.
     */
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyInput>
    /**
     * Filter which TodoLists to update
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList upsert
   */
  export type TodoListUpsertArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The filter to search for the TodoList to update in case it exists.
     */
    where: TodoListWhereUniqueInput
    /**
     * In case the TodoList found by the `where` argument doesn't exist, create a new TodoList with this data.
     */
    create: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
    /**
     * In case the TodoList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
  }


  /**
   * TodoList delete
   */
  export type TodoListDeleteArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter which TodoList to delete.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList deleteMany
   */
  export type TodoListDeleteManyArgs = {
    /**
     * Filter which TodoLists to delete
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList without action
   */
  export type TodoListArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
  }



  /**
   * Model TriviaCategory
   */


  export type AggregateTriviaCategory = {
    _count: TriviaCategoryCountAggregateOutputType | null
    _avg: TriviaCategoryAvgAggregateOutputType | null
    _sum: TriviaCategorySumAggregateOutputType | null
    _min: TriviaCategoryMinAggregateOutputType | null
    _max: TriviaCategoryMaxAggregateOutputType | null
  }

  export type TriviaCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type TriviaCategorySumAggregateOutputType = {
    id: number | null
  }

  export type TriviaCategoryMinAggregateOutputType = {
    id: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaCategoryMaxAggregateOutputType = {
    id: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaCategoryCountAggregateOutputType = {
    id: number
    categoryName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaCategoryAvgAggregateInputType = {
    id?: true
  }

  export type TriviaCategorySumAggregateInputType = {
    id?: true
  }

  export type TriviaCategoryMinAggregateInputType = {
    id?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaCategoryMaxAggregateInputType = {
    id?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaCategoryCountAggregateInputType = {
    id?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaCategoryAggregateArgs = {
    /**
     * Filter which TriviaCategory to aggregate.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaCategories
    **/
    _count?: true | TriviaCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaCategoryMaxAggregateInputType
  }

  export type GetTriviaCategoryAggregateType<T extends TriviaCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaCategory[P]>
      : GetScalarType<T[P], AggregateTriviaCategory[P]>
  }




  export type TriviaCategoryGroupByArgs = {
    where?: TriviaCategoryWhereInput
    orderBy?: Enumerable<TriviaCategoryOrderByWithAggregationInput>
    by: TriviaCategoryScalarFieldEnum[]
    having?: TriviaCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaCategoryCountAggregateInputType | true
    _avg?: TriviaCategoryAvgAggregateInputType
    _sum?: TriviaCategorySumAggregateInputType
    _min?: TriviaCategoryMinAggregateInputType
    _max?: TriviaCategoryMaxAggregateInputType
  }


  export type TriviaCategoryGroupByOutputType = {
    id: number
    categoryName: string
    createdAt: Date
    updatedAt: Date
    _count: TriviaCategoryCountAggregateOutputType | null
    _avg: TriviaCategoryAvgAggregateOutputType | null
    _sum: TriviaCategorySumAggregateOutputType | null
    _min: TriviaCategoryMinAggregateOutputType | null
    _max: TriviaCategoryMaxAggregateOutputType | null
  }

  type GetTriviaCategoryGroupByPayload<T extends TriviaCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaCategoryGroupByOutputType[P]>
        }
      >
    >


  export type TriviaCategorySelect = {
    id?: boolean
    categoryName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    triviaQuiz?: boolean | TriviaCategory$triviaQuizArgs
    triviaRound?: boolean | TriviaCategory$triviaRoundArgs
    _count?: boolean | TriviaCategoryCountOutputTypeArgs
  }


  export type TriviaCategoryInclude = {
    triviaQuiz?: boolean | TriviaCategory$triviaQuizArgs
    triviaRound?: boolean | TriviaCategory$triviaRoundArgs
    _count?: boolean | TriviaCategoryCountOutputTypeArgs
  }

  export type TriviaCategoryGetPayload<S extends boolean | null | undefined | TriviaCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaCategory :
    S extends undefined ? never :
    S extends { include: any } & (TriviaCategoryArgs | TriviaCategoryFindManyArgs)
    ? TriviaCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'triviaQuiz' ? Array < TriviaQuizGetPayload<S['include'][P]>>  :
        P extends 'triviaRound' ? Array < TriviaRoundGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaCategoryArgs | TriviaCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'triviaQuiz' ? Array < TriviaQuizGetPayload<S['select'][P]>>  :
        P extends 'triviaRound' ? Array < TriviaRoundGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaCategory ? TriviaCategory[P] : never
  } 
      : TriviaCategory


  type TriviaCategoryCountArgs = 
    Omit<TriviaCategoryFindManyArgs, 'select' | 'include'> & {
      select?: TriviaCategoryCountAggregateInputType | true
    }

  export interface TriviaCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaCategory that matches the filter.
     * @param {TriviaCategoryFindUniqueArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaCategory'> extends True ? Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>> : Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | null, null>

    /**
     * Find one TriviaCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaCategoryFindUniqueOrThrowArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaCategoryFindUniqueOrThrowArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Find the first TriviaCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindFirstArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaCategory'> extends True ? Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>> : Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | null, null>

    /**
     * Find the first TriviaCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindFirstOrThrowArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaCategoryFindFirstOrThrowArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Find zero or more TriviaCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaCategories
     * const triviaCategories = await prisma.triviaCategory.findMany()
     * 
     * // Get first 10 TriviaCategories
     * const triviaCategories = await prisma.triviaCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaCategoryWithIdOnly = await prisma.triviaCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaCategoryFindManyArgs>(
      args?: SelectSubset<T, TriviaCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaCategoryGetPayload<T>>>

    /**
     * Create a TriviaCategory.
     * @param {TriviaCategoryCreateArgs} args - Arguments to create a TriviaCategory.
     * @example
     * // Create one TriviaCategory
     * const TriviaCategory = await prisma.triviaCategory.create({
     *   data: {
     *     // ... data to create a TriviaCategory
     *   }
     * })
     * 
    **/
    create<T extends TriviaCategoryCreateArgs>(
      args: SelectSubset<T, TriviaCategoryCreateArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Create many TriviaCategories.
     *     @param {TriviaCategoryCreateManyArgs} args - Arguments to create many TriviaCategories.
     *     @example
     *     // Create many TriviaCategories
     *     const triviaCategory = await prisma.triviaCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaCategoryCreateManyArgs>(
      args?: SelectSubset<T, TriviaCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaCategory.
     * @param {TriviaCategoryDeleteArgs} args - Arguments to delete one TriviaCategory.
     * @example
     * // Delete one TriviaCategory
     * const TriviaCategory = await prisma.triviaCategory.delete({
     *   where: {
     *     // ... filter to delete one TriviaCategory
     *   }
     * })
     * 
    **/
    delete<T extends TriviaCategoryDeleteArgs>(
      args: SelectSubset<T, TriviaCategoryDeleteArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Update one TriviaCategory.
     * @param {TriviaCategoryUpdateArgs} args - Arguments to update one TriviaCategory.
     * @example
     * // Update one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaCategoryUpdateArgs>(
      args: SelectSubset<T, TriviaCategoryUpdateArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Delete zero or more TriviaCategories.
     * @param {TriviaCategoryDeleteManyArgs} args - Arguments to filter TriviaCategories to delete.
     * @example
     * // Delete a few TriviaCategories
     * const { count } = await prisma.triviaCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaCategoryDeleteManyArgs>(
      args?: SelectSubset<T, TriviaCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaCategories
     * const triviaCategory = await prisma.triviaCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaCategoryUpdateManyArgs>(
      args: SelectSubset<T, TriviaCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaCategory.
     * @param {TriviaCategoryUpsertArgs} args - Arguments to update or create a TriviaCategory.
     * @example
     * // Update or create a TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.upsert({
     *   create: {
     *     // ... data to create a TriviaCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaCategory we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaCategoryUpsertArgs>(
      args: SelectSubset<T, TriviaCategoryUpsertArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Count the number of TriviaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryCountArgs} args - Arguments to filter TriviaCategories to count.
     * @example
     * // Count the number of TriviaCategories
     * const count = await prisma.triviaCategory.count({
     *   where: {
     *     // ... the filter for the TriviaCategories we want to count
     *   }
     * })
    **/
    count<T extends TriviaCategoryCountArgs>(
      args?: Subset<T, TriviaCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaCategoryAggregateArgs>(args: Subset<T, TriviaCategoryAggregateArgs>): Prisma.PrismaPromise<GetTriviaCategoryAggregateType<T>>

    /**
     * Group by TriviaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaCategoryGroupByArgs['orderBy'] }
        : { orderBy?: TriviaCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    triviaQuiz<T extends TriviaCategory$triviaQuizArgs= {}>(args?: Subset<T, TriviaCategory$triviaQuizArgs>): Prisma.PrismaPromise<Array<TriviaQuizGetPayload<T>>| Null>;

    triviaRound<T extends TriviaCategory$triviaRoundArgs= {}>(args?: Subset<T, TriviaCategory$triviaRoundArgs>): Prisma.PrismaPromise<Array<TriviaRoundGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaCategory base type for findUnique actions
   */
  export type TriviaCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where: TriviaCategoryWhereUniqueInput
  }

  /**
   * TriviaCategory findUnique
   */
  export interface TriviaCategoryFindUniqueArgs extends TriviaCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaCategory findUniqueOrThrow
   */
  export type TriviaCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory base type for findFirst actions
   */
  export type TriviaCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaCategories.
     */
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }

  /**
   * TriviaCategory findFirst
   */
  export interface TriviaCategoryFindFirstArgs extends TriviaCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaCategory findFirstOrThrow
   */
  export type TriviaCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaCategories.
     */
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }


  /**
   * TriviaCategory findMany
   */
  export type TriviaCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategories to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }


  /**
   * TriviaCategory create
   */
  export type TriviaCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The data needed to create a TriviaCategory.
     */
    data: XOR<TriviaCategoryCreateInput, TriviaCategoryUncheckedCreateInput>
  }


  /**
   * TriviaCategory createMany
   */
  export type TriviaCategoryCreateManyArgs = {
    /**
     * The data used to create many TriviaCategories.
     */
    data: Enumerable<TriviaCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaCategory update
   */
  export type TriviaCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The data needed to update a TriviaCategory.
     */
    data: XOR<TriviaCategoryUpdateInput, TriviaCategoryUncheckedUpdateInput>
    /**
     * Choose, which TriviaCategory to update.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory updateMany
   */
  export type TriviaCategoryUpdateManyArgs = {
    /**
     * The data used to update TriviaCategories.
     */
    data: XOR<TriviaCategoryUpdateManyMutationInput, TriviaCategoryUncheckedUpdateManyInput>
    /**
     * Filter which TriviaCategories to update
     */
    where?: TriviaCategoryWhereInput
  }


  /**
   * TriviaCategory upsert
   */
  export type TriviaCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The filter to search for the TriviaCategory to update in case it exists.
     */
    where: TriviaCategoryWhereUniqueInput
    /**
     * In case the TriviaCategory found by the `where` argument doesn't exist, create a new TriviaCategory with this data.
     */
    create: XOR<TriviaCategoryCreateInput, TriviaCategoryUncheckedCreateInput>
    /**
     * In case the TriviaCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaCategoryUpdateInput, TriviaCategoryUncheckedUpdateInput>
  }


  /**
   * TriviaCategory delete
   */
  export type TriviaCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter which TriviaCategory to delete.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory deleteMany
   */
  export type TriviaCategoryDeleteManyArgs = {
    /**
     * Filter which TriviaCategories to delete
     */
    where?: TriviaCategoryWhereInput
  }


  /**
   * TriviaCategory.triviaQuiz
   */
  export type TriviaCategory$triviaQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    where?: TriviaQuizWhereInput
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    cursor?: TriviaQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaCategory.triviaRound
   */
  export type TriviaCategory$triviaRoundArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    where?: TriviaRoundWhereInput
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    cursor?: TriviaRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaCategory without action
   */
  export type TriviaCategoryArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
  }



  /**
   * Model TriviaQuiz
   */


  export type AggregateTriviaQuiz = {
    _count: TriviaQuizCountAggregateOutputType | null
    _avg: TriviaQuizAvgAggregateOutputType | null
    _sum: TriviaQuizSumAggregateOutputType | null
    _min: TriviaQuizMinAggregateOutputType | null
    _max: TriviaQuizMaxAggregateOutputType | null
  }

  export type TriviaQuizAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    triviaAnswerChoiceId: number | null
  }

  export type TriviaQuizSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    triviaAnswerChoiceId: number | null
  }

  export type TriviaQuizMinAggregateOutputType = {
    id: number | null
    quizName: string | null
    categoryId: number | null
    triviaAnswerChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaQuizMaxAggregateOutputType = {
    id: number | null
    quizName: string | null
    categoryId: number | null
    triviaAnswerChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaQuizCountAggregateOutputType = {
    id: number
    quizName: number
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaQuizAvgAggregateInputType = {
    id?: true
    categoryId?: true
    triviaAnswerChoiceId?: true
  }

  export type TriviaQuizSumAggregateInputType = {
    id?: true
    categoryId?: true
    triviaAnswerChoiceId?: true
  }

  export type TriviaQuizMinAggregateInputType = {
    id?: true
    quizName?: true
    categoryId?: true
    triviaAnswerChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaQuizMaxAggregateInputType = {
    id?: true
    quizName?: true
    categoryId?: true
    triviaAnswerChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaQuizCountAggregateInputType = {
    id?: true
    quizName?: true
    categoryId?: true
    triviaAnswerChoiceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaQuizAggregateArgs = {
    /**
     * Filter which TriviaQuiz to aggregate.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaQuizs
    **/
    _count?: true | TriviaQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaQuizMaxAggregateInputType
  }

  export type GetTriviaQuizAggregateType<T extends TriviaQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaQuiz[P]>
      : GetScalarType<T[P], AggregateTriviaQuiz[P]>
  }




  export type TriviaQuizGroupByArgs = {
    where?: TriviaQuizWhereInput
    orderBy?: Enumerable<TriviaQuizOrderByWithAggregationInput>
    by: TriviaQuizScalarFieldEnum[]
    having?: TriviaQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaQuizCountAggregateInputType | true
    _avg?: TriviaQuizAvgAggregateInputType
    _sum?: TriviaQuizSumAggregateInputType
    _min?: TriviaQuizMinAggregateInputType
    _max?: TriviaQuizMaxAggregateInputType
  }


  export type TriviaQuizGroupByOutputType = {
    id: number
    quizName: string
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaQuizCountAggregateOutputType | null
    _avg: TriviaQuizAvgAggregateOutputType | null
    _sum: TriviaQuizSumAggregateOutputType | null
    _min: TriviaQuizMinAggregateOutputType | null
    _max: TriviaQuizMaxAggregateOutputType | null
  }

  type GetTriviaQuizGroupByPayload<T extends TriviaQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaQuizGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaQuizGroupByOutputType[P]>
        }
      >
    >


  export type TriviaQuizSelect = {
    id?: boolean
    quizName?: boolean
    category?: boolean | TriviaCategoryArgs
    categoryId?: boolean
    answer?: boolean | TriviaChoiceArgs
    triviaAnswerChoiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    triviaRoundQuiz?: boolean | TriviaQuiz$triviaRoundQuizArgs
    TriviaChoice?: boolean | TriviaQuiz$TriviaChoiceArgs
    _count?: boolean | TriviaQuizCountOutputTypeArgs
  }


  export type TriviaQuizInclude = {
    category?: boolean | TriviaCategoryArgs
    answer?: boolean | TriviaChoiceArgs
    triviaRoundQuiz?: boolean | TriviaQuiz$triviaRoundQuizArgs
    TriviaChoice?: boolean | TriviaQuiz$TriviaChoiceArgs
    _count?: boolean | TriviaQuizCountOutputTypeArgs
  }

  export type TriviaQuizGetPayload<S extends boolean | null | undefined | TriviaQuizArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaQuiz :
    S extends undefined ? never :
    S extends { include: any } & (TriviaQuizArgs | TriviaQuizFindManyArgs)
    ? TriviaQuiz  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['include'][P]> :
        P extends 'answer' ? TriviaChoiceGetPayload<S['include'][P]> :
        P extends 'triviaRoundQuiz' ? Array < TriviaRoundQuizGetPayload<S['include'][P]>>  :
        P extends 'TriviaChoice' ? Array < TriviaChoiceGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaQuizCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaQuizArgs | TriviaQuizFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['select'][P]> :
        P extends 'answer' ? TriviaChoiceGetPayload<S['select'][P]> :
        P extends 'triviaRoundQuiz' ? Array < TriviaRoundQuizGetPayload<S['select'][P]>>  :
        P extends 'TriviaChoice' ? Array < TriviaChoiceGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaQuizCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaQuiz ? TriviaQuiz[P] : never
  } 
      : TriviaQuiz


  type TriviaQuizCountArgs = 
    Omit<TriviaQuizFindManyArgs, 'select' | 'include'> & {
      select?: TriviaQuizCountAggregateInputType | true
    }

  export interface TriviaQuizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaQuiz that matches the filter.
     * @param {TriviaQuizFindUniqueArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaQuizFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaQuizFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaQuiz'> extends True ? Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>> : Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | null, null>

    /**
     * Find one TriviaQuiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaQuizFindUniqueOrThrowArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaQuizFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaQuizFindUniqueOrThrowArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Find the first TriviaQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindFirstArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaQuizFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaQuizFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaQuiz'> extends True ? Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>> : Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | null, null>

    /**
     * Find the first TriviaQuiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindFirstOrThrowArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaQuizFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaQuizFindFirstOrThrowArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Find zero or more TriviaQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaQuizs
     * const triviaQuizs = await prisma.triviaQuiz.findMany()
     * 
     * // Get first 10 TriviaQuizs
     * const triviaQuizs = await prisma.triviaQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaQuizWithIdOnly = await prisma.triviaQuiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaQuizFindManyArgs>(
      args?: SelectSubset<T, TriviaQuizFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaQuizGetPayload<T>>>

    /**
     * Create a TriviaQuiz.
     * @param {TriviaQuizCreateArgs} args - Arguments to create a TriviaQuiz.
     * @example
     * // Create one TriviaQuiz
     * const TriviaQuiz = await prisma.triviaQuiz.create({
     *   data: {
     *     // ... data to create a TriviaQuiz
     *   }
     * })
     * 
    **/
    create<T extends TriviaQuizCreateArgs>(
      args: SelectSubset<T, TriviaQuizCreateArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Create many TriviaQuizs.
     *     @param {TriviaQuizCreateManyArgs} args - Arguments to create many TriviaQuizs.
     *     @example
     *     // Create many TriviaQuizs
     *     const triviaQuiz = await prisma.triviaQuiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaQuizCreateManyArgs>(
      args?: SelectSubset<T, TriviaQuizCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaQuiz.
     * @param {TriviaQuizDeleteArgs} args - Arguments to delete one TriviaQuiz.
     * @example
     * // Delete one TriviaQuiz
     * const TriviaQuiz = await prisma.triviaQuiz.delete({
     *   where: {
     *     // ... filter to delete one TriviaQuiz
     *   }
     * })
     * 
    **/
    delete<T extends TriviaQuizDeleteArgs>(
      args: SelectSubset<T, TriviaQuizDeleteArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Update one TriviaQuiz.
     * @param {TriviaQuizUpdateArgs} args - Arguments to update one TriviaQuiz.
     * @example
     * // Update one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaQuizUpdateArgs>(
      args: SelectSubset<T, TriviaQuizUpdateArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Delete zero or more TriviaQuizs.
     * @param {TriviaQuizDeleteManyArgs} args - Arguments to filter TriviaQuizs to delete.
     * @example
     * // Delete a few TriviaQuizs
     * const { count } = await prisma.triviaQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaQuizDeleteManyArgs>(
      args?: SelectSubset<T, TriviaQuizDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaQuizs
     * const triviaQuiz = await prisma.triviaQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaQuizUpdateManyArgs>(
      args: SelectSubset<T, TriviaQuizUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaQuiz.
     * @param {TriviaQuizUpsertArgs} args - Arguments to update or create a TriviaQuiz.
     * @example
     * // Update or create a TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.upsert({
     *   create: {
     *     // ... data to create a TriviaQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaQuiz we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaQuizUpsertArgs>(
      args: SelectSubset<T, TriviaQuizUpsertArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Count the number of TriviaQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizCountArgs} args - Arguments to filter TriviaQuizs to count.
     * @example
     * // Count the number of TriviaQuizs
     * const count = await prisma.triviaQuiz.count({
     *   where: {
     *     // ... the filter for the TriviaQuizs we want to count
     *   }
     * })
    **/
    count<T extends TriviaQuizCountArgs>(
      args?: Subset<T, TriviaQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaQuizAggregateArgs>(args: Subset<T, TriviaQuizAggregateArgs>): Prisma.PrismaPromise<GetTriviaQuizAggregateType<T>>

    /**
     * Group by TriviaQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaQuizGroupByArgs['orderBy'] }
        : { orderBy?: TriviaQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaQuizClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends TriviaCategoryArgs= {}>(args?: Subset<T, TriviaCategoryArgs>): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | Null>;

    answer<T extends TriviaChoiceArgs= {}>(args?: Subset<T, TriviaChoiceArgs>): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | Null>;

    triviaRoundQuiz<T extends TriviaQuiz$triviaRoundQuizArgs= {}>(args?: Subset<T, TriviaQuiz$triviaRoundQuizArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>| Null>;

    TriviaChoice<T extends TriviaQuiz$TriviaChoiceArgs= {}>(args?: Subset<T, TriviaQuiz$TriviaChoiceArgs>): Prisma.PrismaPromise<Array<TriviaChoiceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaQuiz base type for findUnique actions
   */
  export type TriviaQuizFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where: TriviaQuizWhereUniqueInput
  }

  /**
   * TriviaQuiz findUnique
   */
  export interface TriviaQuizFindUniqueArgs extends TriviaQuizFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaQuiz findUniqueOrThrow
   */
  export type TriviaQuizFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz base type for findFirst actions
   */
  export type TriviaQuizFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaQuizs.
     */
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }

  /**
   * TriviaQuiz findFirst
   */
  export interface TriviaQuizFindFirstArgs extends TriviaQuizFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaQuiz findFirstOrThrow
   */
  export type TriviaQuizFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaQuizs.
     */
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz findMany
   */
  export type TriviaQuizFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuizs to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz create
   */
  export type TriviaQuizCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The data needed to create a TriviaQuiz.
     */
    data: XOR<TriviaQuizCreateInput, TriviaQuizUncheckedCreateInput>
  }


  /**
   * TriviaQuiz createMany
   */
  export type TriviaQuizCreateManyArgs = {
    /**
     * The data used to create many TriviaQuizs.
     */
    data: Enumerable<TriviaQuizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaQuiz update
   */
  export type TriviaQuizUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The data needed to update a TriviaQuiz.
     */
    data: XOR<TriviaQuizUpdateInput, TriviaQuizUncheckedUpdateInput>
    /**
     * Choose, which TriviaQuiz to update.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz updateMany
   */
  export type TriviaQuizUpdateManyArgs = {
    /**
     * The data used to update TriviaQuizs.
     */
    data: XOR<TriviaQuizUpdateManyMutationInput, TriviaQuizUncheckedUpdateManyInput>
    /**
     * Filter which TriviaQuizs to update
     */
    where?: TriviaQuizWhereInput
  }


  /**
   * TriviaQuiz upsert
   */
  export type TriviaQuizUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The filter to search for the TriviaQuiz to update in case it exists.
     */
    where: TriviaQuizWhereUniqueInput
    /**
     * In case the TriviaQuiz found by the `where` argument doesn't exist, create a new TriviaQuiz with this data.
     */
    create: XOR<TriviaQuizCreateInput, TriviaQuizUncheckedCreateInput>
    /**
     * In case the TriviaQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaQuizUpdateInput, TriviaQuizUncheckedUpdateInput>
  }


  /**
   * TriviaQuiz delete
   */
  export type TriviaQuizDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter which TriviaQuiz to delete.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz deleteMany
   */
  export type TriviaQuizDeleteManyArgs = {
    /**
     * Filter which TriviaQuizs to delete
     */
    where?: TriviaQuizWhereInput
  }


  /**
   * TriviaQuiz.triviaRoundQuiz
   */
  export type TriviaQuiz$triviaRoundQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    cursor?: TriviaRoundQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz.TriviaChoice
   */
  export type TriviaQuiz$TriviaChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    where?: TriviaChoiceWhereInput
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    cursor?: TriviaChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaQuiz without action
   */
  export type TriviaQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
  }



  /**
   * Model TriviaChoice
   */


  export type AggregateTriviaChoice = {
    _count: TriviaChoiceCountAggregateOutputType | null
    _avg: TriviaChoiceAvgAggregateOutputType | null
    _sum: TriviaChoiceSumAggregateOutputType | null
    _min: TriviaChoiceMinAggregateOutputType | null
    _max: TriviaChoiceMaxAggregateOutputType | null
  }

  export type TriviaChoiceAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type TriviaChoiceSumAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type TriviaChoiceMinAggregateOutputType = {
    id: number | null
    choiceName: string | null
    quizId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaChoiceMaxAggregateOutputType = {
    id: number | null
    choiceName: string | null
    quizId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaChoiceCountAggregateOutputType = {
    id: number
    choiceName: number
    quizId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaChoiceAvgAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type TriviaChoiceSumAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type TriviaChoiceMinAggregateInputType = {
    id?: true
    choiceName?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaChoiceMaxAggregateInputType = {
    id?: true
    choiceName?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaChoiceCountAggregateInputType = {
    id?: true
    choiceName?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaChoiceAggregateArgs = {
    /**
     * Filter which TriviaChoice to aggregate.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaChoices
    **/
    _count?: true | TriviaChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaChoiceMaxAggregateInputType
  }

  export type GetTriviaChoiceAggregateType<T extends TriviaChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaChoice[P]>
      : GetScalarType<T[P], AggregateTriviaChoice[P]>
  }




  export type TriviaChoiceGroupByArgs = {
    where?: TriviaChoiceWhereInput
    orderBy?: Enumerable<TriviaChoiceOrderByWithAggregationInput>
    by: TriviaChoiceScalarFieldEnum[]
    having?: TriviaChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaChoiceCountAggregateInputType | true
    _avg?: TriviaChoiceAvgAggregateInputType
    _sum?: TriviaChoiceSumAggregateInputType
    _min?: TriviaChoiceMinAggregateInputType
    _max?: TriviaChoiceMaxAggregateInputType
  }


  export type TriviaChoiceGroupByOutputType = {
    id: number
    choiceName: string
    quizId: number | null
    createdAt: Date
    updatedAt: Date
    _count: TriviaChoiceCountAggregateOutputType | null
    _avg: TriviaChoiceAvgAggregateOutputType | null
    _sum: TriviaChoiceSumAggregateOutputType | null
    _min: TriviaChoiceMinAggregateOutputType | null
    _max: TriviaChoiceMaxAggregateOutputType | null
  }

  type GetTriviaChoiceGroupByPayload<T extends TriviaChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaChoiceGroupByOutputType[P]>
        }
      >
    >


  export type TriviaChoiceSelect = {
    id?: boolean
    choiceName?: boolean
    quiz?: boolean | TriviaQuizArgs
    quizId?: boolean
    triviaQuizAnswer?: boolean | TriviaQuizArgs
    createdAt?: boolean
    updatedAt?: boolean
    triviaRoundQuizChoice?: boolean | TriviaChoice$triviaRoundQuizChoiceArgs
    _count?: boolean | TriviaChoiceCountOutputTypeArgs
  }


  export type TriviaChoiceInclude = {
    quiz?: boolean | TriviaQuizArgs
    triviaQuizAnswer?: boolean | TriviaQuizArgs
    triviaRoundQuizChoice?: boolean | TriviaChoice$triviaRoundQuizChoiceArgs
    _count?: boolean | TriviaChoiceCountOutputTypeArgs
  }

  export type TriviaChoiceGetPayload<S extends boolean | null | undefined | TriviaChoiceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaChoice :
    S extends undefined ? never :
    S extends { include: any } & (TriviaChoiceArgs | TriviaChoiceFindManyArgs)
    ? TriviaChoice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'quiz' ? TriviaQuizGetPayload<S['include'][P]> | null :
        P extends 'triviaQuizAnswer' ? TriviaQuizGetPayload<S['include'][P]> | null :
        P extends 'triviaRoundQuizChoice' ? Array < TriviaRoundQuizChoiceGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaChoiceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaChoiceArgs | TriviaChoiceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'quiz' ? TriviaQuizGetPayload<S['select'][P]> | null :
        P extends 'triviaQuizAnswer' ? TriviaQuizGetPayload<S['select'][P]> | null :
        P extends 'triviaRoundQuizChoice' ? Array < TriviaRoundQuizChoiceGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaChoiceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaChoice ? TriviaChoice[P] : never
  } 
      : TriviaChoice


  type TriviaChoiceCountArgs = 
    Omit<TriviaChoiceFindManyArgs, 'select' | 'include'> & {
      select?: TriviaChoiceCountAggregateInputType | true
    }

  export interface TriviaChoiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaChoice that matches the filter.
     * @param {TriviaChoiceFindUniqueArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaChoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaChoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaChoice'> extends True ? Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>> : Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | null, null>

    /**
     * Find one TriviaChoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaChoiceFindUniqueOrThrowArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaChoiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaChoiceFindUniqueOrThrowArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Find the first TriviaChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindFirstArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaChoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaChoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaChoice'> extends True ? Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>> : Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | null, null>

    /**
     * Find the first TriviaChoice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindFirstOrThrowArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaChoiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaChoiceFindFirstOrThrowArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Find zero or more TriviaChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaChoices
     * const triviaChoices = await prisma.triviaChoice.findMany()
     * 
     * // Get first 10 TriviaChoices
     * const triviaChoices = await prisma.triviaChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaChoiceWithIdOnly = await prisma.triviaChoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaChoiceFindManyArgs>(
      args?: SelectSubset<T, TriviaChoiceFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaChoiceGetPayload<T>>>

    /**
     * Create a TriviaChoice.
     * @param {TriviaChoiceCreateArgs} args - Arguments to create a TriviaChoice.
     * @example
     * // Create one TriviaChoice
     * const TriviaChoice = await prisma.triviaChoice.create({
     *   data: {
     *     // ... data to create a TriviaChoice
     *   }
     * })
     * 
    **/
    create<T extends TriviaChoiceCreateArgs>(
      args: SelectSubset<T, TriviaChoiceCreateArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Create many TriviaChoices.
     *     @param {TriviaChoiceCreateManyArgs} args - Arguments to create many TriviaChoices.
     *     @example
     *     // Create many TriviaChoices
     *     const triviaChoice = await prisma.triviaChoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaChoiceCreateManyArgs>(
      args?: SelectSubset<T, TriviaChoiceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaChoice.
     * @param {TriviaChoiceDeleteArgs} args - Arguments to delete one TriviaChoice.
     * @example
     * // Delete one TriviaChoice
     * const TriviaChoice = await prisma.triviaChoice.delete({
     *   where: {
     *     // ... filter to delete one TriviaChoice
     *   }
     * })
     * 
    **/
    delete<T extends TriviaChoiceDeleteArgs>(
      args: SelectSubset<T, TriviaChoiceDeleteArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Update one TriviaChoice.
     * @param {TriviaChoiceUpdateArgs} args - Arguments to update one TriviaChoice.
     * @example
     * // Update one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaChoiceUpdateArgs>(
      args: SelectSubset<T, TriviaChoiceUpdateArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Delete zero or more TriviaChoices.
     * @param {TriviaChoiceDeleteManyArgs} args - Arguments to filter TriviaChoices to delete.
     * @example
     * // Delete a few TriviaChoices
     * const { count } = await prisma.triviaChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaChoiceDeleteManyArgs>(
      args?: SelectSubset<T, TriviaChoiceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaChoices
     * const triviaChoice = await prisma.triviaChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaChoiceUpdateManyArgs>(
      args: SelectSubset<T, TriviaChoiceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaChoice.
     * @param {TriviaChoiceUpsertArgs} args - Arguments to update or create a TriviaChoice.
     * @example
     * // Update or create a TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.upsert({
     *   create: {
     *     // ... data to create a TriviaChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaChoice we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaChoiceUpsertArgs>(
      args: SelectSubset<T, TriviaChoiceUpsertArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Count the number of TriviaChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceCountArgs} args - Arguments to filter TriviaChoices to count.
     * @example
     * // Count the number of TriviaChoices
     * const count = await prisma.triviaChoice.count({
     *   where: {
     *     // ... the filter for the TriviaChoices we want to count
     *   }
     * })
    **/
    count<T extends TriviaChoiceCountArgs>(
      args?: Subset<T, TriviaChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaChoiceAggregateArgs>(args: Subset<T, TriviaChoiceAggregateArgs>): Prisma.PrismaPromise<GetTriviaChoiceAggregateType<T>>

    /**
     * Group by TriviaChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaChoiceGroupByArgs['orderBy'] }
        : { orderBy?: TriviaChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaChoiceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    quiz<T extends TriviaQuizArgs= {}>(args?: Subset<T, TriviaQuizArgs>): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | Null>;

    triviaQuizAnswer<T extends TriviaQuizArgs= {}>(args?: Subset<T, TriviaQuizArgs>): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | Null>;

    triviaRoundQuizChoice<T extends TriviaChoice$triviaRoundQuizChoiceArgs= {}>(args?: Subset<T, TriviaChoice$triviaRoundQuizChoiceArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizChoiceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaChoice base type for findUnique actions
   */
  export type TriviaChoiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where: TriviaChoiceWhereUniqueInput
  }

  /**
   * TriviaChoice findUnique
   */
  export interface TriviaChoiceFindUniqueArgs extends TriviaChoiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaChoice findUniqueOrThrow
   */
  export type TriviaChoiceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice base type for findFirst actions
   */
  export type TriviaChoiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaChoices.
     */
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }

  /**
   * TriviaChoice findFirst
   */
  export interface TriviaChoiceFindFirstArgs extends TriviaChoiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaChoice findFirstOrThrow
   */
  export type TriviaChoiceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaChoices.
     */
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaChoice findMany
   */
  export type TriviaChoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoices to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaChoice create
   */
  export type TriviaChoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The data needed to create a TriviaChoice.
     */
    data: XOR<TriviaChoiceCreateInput, TriviaChoiceUncheckedCreateInput>
  }


  /**
   * TriviaChoice createMany
   */
  export type TriviaChoiceCreateManyArgs = {
    /**
     * The data used to create many TriviaChoices.
     */
    data: Enumerable<TriviaChoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaChoice update
   */
  export type TriviaChoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The data needed to update a TriviaChoice.
     */
    data: XOR<TriviaChoiceUpdateInput, TriviaChoiceUncheckedUpdateInput>
    /**
     * Choose, which TriviaChoice to update.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice updateMany
   */
  export type TriviaChoiceUpdateManyArgs = {
    /**
     * The data used to update TriviaChoices.
     */
    data: XOR<TriviaChoiceUpdateManyMutationInput, TriviaChoiceUncheckedUpdateManyInput>
    /**
     * Filter which TriviaChoices to update
     */
    where?: TriviaChoiceWhereInput
  }


  /**
   * TriviaChoice upsert
   */
  export type TriviaChoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The filter to search for the TriviaChoice to update in case it exists.
     */
    where: TriviaChoiceWhereUniqueInput
    /**
     * In case the TriviaChoice found by the `where` argument doesn't exist, create a new TriviaChoice with this data.
     */
    create: XOR<TriviaChoiceCreateInput, TriviaChoiceUncheckedCreateInput>
    /**
     * In case the TriviaChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaChoiceUpdateInput, TriviaChoiceUncheckedUpdateInput>
  }


  /**
   * TriviaChoice delete
   */
  export type TriviaChoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter which TriviaChoice to delete.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice deleteMany
   */
  export type TriviaChoiceDeleteManyArgs = {
    /**
     * Filter which TriviaChoices to delete
     */
    where?: TriviaChoiceWhereInput
  }


  /**
   * TriviaChoice.triviaRoundQuizChoice
   */
  export type TriviaChoice$triviaRoundQuizChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    where?: TriviaRoundQuizChoiceWhereInput
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizChoiceScalarFieldEnum>
  }


  /**
   * TriviaChoice without action
   */
  export type TriviaChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
  }



  /**
   * Model TriviaRound
   */


  export type AggregateTriviaRound = {
    _count: TriviaRoundCountAggregateOutputType | null
    _avg: TriviaRoundAvgAggregateOutputType | null
    _sum: TriviaRoundSumAggregateOutputType | null
    _min: TriviaRoundMinAggregateOutputType | null
    _max: TriviaRoundMaxAggregateOutputType | null
  }

  export type TriviaRoundAvgAggregateOutputType = {
    id: number | null
    score: number | null
    categoryId: number | null
  }

  export type TriviaRoundSumAggregateOutputType = {
    id: number | null
    score: number | null
    categoryId: number | null
  }

  export type TriviaRoundMinAggregateOutputType = {
    id: number | null
    name: string | null
    score: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundMaxAggregateOutputType = {
    id: number | null
    name: string | null
    score: number | null
    categoryId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundCountAggregateOutputType = {
    id: number
    name: number
    score: number
    categoryId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaRoundAvgAggregateInputType = {
    id?: true
    score?: true
    categoryId?: true
  }

  export type TriviaRoundSumAggregateInputType = {
    id?: true
    score?: true
    categoryId?: true
  }

  export type TriviaRoundMinAggregateInputType = {
    id?: true
    name?: true
    score?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundMaxAggregateInputType = {
    id?: true
    name?: true
    score?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundCountAggregateInputType = {
    id?: true
    name?: true
    score?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaRoundAggregateArgs = {
    /**
     * Filter which TriviaRound to aggregate.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaRounds
    **/
    _count?: true | TriviaRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaRoundMaxAggregateInputType
  }

  export type GetTriviaRoundAggregateType<T extends TriviaRoundAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaRound[P]>
      : GetScalarType<T[P], AggregateTriviaRound[P]>
  }




  export type TriviaRoundGroupByArgs = {
    where?: TriviaRoundWhereInput
    orderBy?: Enumerable<TriviaRoundOrderByWithAggregationInput>
    by: TriviaRoundScalarFieldEnum[]
    having?: TriviaRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaRoundCountAggregateInputType | true
    _avg?: TriviaRoundAvgAggregateInputType
    _sum?: TriviaRoundSumAggregateInputType
    _min?: TriviaRoundMinAggregateInputType
    _max?: TriviaRoundMaxAggregateInputType
  }


  export type TriviaRoundGroupByOutputType = {
    id: number
    name: string | null
    score: number
    categoryId: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaRoundCountAggregateOutputType | null
    _avg: TriviaRoundAvgAggregateOutputType | null
    _sum: TriviaRoundSumAggregateOutputType | null
    _min: TriviaRoundMinAggregateOutputType | null
    _max: TriviaRoundMaxAggregateOutputType | null
  }

  type GetTriviaRoundGroupByPayload<T extends TriviaRoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaRoundGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaRoundGroupByOutputType[P]>
        }
      >
    >


  export type TriviaRoundSelect = {
    id?: boolean
    name?: boolean
    score?: boolean
    category?: boolean | TriviaCategoryArgs
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    triviaRoundQuiz?: boolean | TriviaRound$triviaRoundQuizArgs
    _count?: boolean | TriviaRoundCountOutputTypeArgs
  }


  export type TriviaRoundInclude = {
    category?: boolean | TriviaCategoryArgs
    triviaRoundQuiz?: boolean | TriviaRound$triviaRoundQuizArgs
    _count?: boolean | TriviaRoundCountOutputTypeArgs
  }

  export type TriviaRoundGetPayload<S extends boolean | null | undefined | TriviaRoundArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRound :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundArgs | TriviaRoundFindManyArgs)
    ? TriviaRound  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['include'][P]> :
        P extends 'triviaRoundQuiz' ? Array < TriviaRoundQuizGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaRoundCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaRoundArgs | TriviaRoundFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['select'][P]> :
        P extends 'triviaRoundQuiz' ? Array < TriviaRoundQuizGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaRoundCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaRound ? TriviaRound[P] : never
  } 
      : TriviaRound


  type TriviaRoundCountArgs = 
    Omit<TriviaRoundFindManyArgs, 'select' | 'include'> & {
      select?: TriviaRoundCountAggregateInputType | true
    }

  export interface TriviaRoundDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaRound that matches the filter.
     * @param {TriviaRoundFindUniqueArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaRoundFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaRoundFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaRound'> extends True ? Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>> : Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | null, null>

    /**
     * Find one TriviaRound that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaRoundFindUniqueOrThrowArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaRoundFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundFindUniqueOrThrowArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Find the first TriviaRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindFirstArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaRoundFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaRoundFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaRound'> extends True ? Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>> : Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | null, null>

    /**
     * Find the first TriviaRound that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindFirstOrThrowArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaRoundFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundFindFirstOrThrowArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Find zero or more TriviaRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaRounds
     * const triviaRounds = await prisma.triviaRound.findMany()
     * 
     * // Get first 10 TriviaRounds
     * const triviaRounds = await prisma.triviaRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaRoundWithIdOnly = await prisma.triviaRound.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaRoundFindManyArgs>(
      args?: SelectSubset<T, TriviaRoundFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaRoundGetPayload<T>>>

    /**
     * Create a TriviaRound.
     * @param {TriviaRoundCreateArgs} args - Arguments to create a TriviaRound.
     * @example
     * // Create one TriviaRound
     * const TriviaRound = await prisma.triviaRound.create({
     *   data: {
     *     // ... data to create a TriviaRound
     *   }
     * })
     * 
    **/
    create<T extends TriviaRoundCreateArgs>(
      args: SelectSubset<T, TriviaRoundCreateArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Create many TriviaRounds.
     *     @param {TriviaRoundCreateManyArgs} args - Arguments to create many TriviaRounds.
     *     @example
     *     // Create many TriviaRounds
     *     const triviaRound = await prisma.triviaRound.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaRoundCreateManyArgs>(
      args?: SelectSubset<T, TriviaRoundCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaRound.
     * @param {TriviaRoundDeleteArgs} args - Arguments to delete one TriviaRound.
     * @example
     * // Delete one TriviaRound
     * const TriviaRound = await prisma.triviaRound.delete({
     *   where: {
     *     // ... filter to delete one TriviaRound
     *   }
     * })
     * 
    **/
    delete<T extends TriviaRoundDeleteArgs>(
      args: SelectSubset<T, TriviaRoundDeleteArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Update one TriviaRound.
     * @param {TriviaRoundUpdateArgs} args - Arguments to update one TriviaRound.
     * @example
     * // Update one TriviaRound
     * const triviaRound = await prisma.triviaRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaRoundUpdateArgs>(
      args: SelectSubset<T, TriviaRoundUpdateArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Delete zero or more TriviaRounds.
     * @param {TriviaRoundDeleteManyArgs} args - Arguments to filter TriviaRounds to delete.
     * @example
     * // Delete a few TriviaRounds
     * const { count } = await prisma.triviaRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaRoundDeleteManyArgs>(
      args?: SelectSubset<T, TriviaRoundDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaRounds
     * const triviaRound = await prisma.triviaRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaRoundUpdateManyArgs>(
      args: SelectSubset<T, TriviaRoundUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaRound.
     * @param {TriviaRoundUpsertArgs} args - Arguments to update or create a TriviaRound.
     * @example
     * // Update or create a TriviaRound
     * const triviaRound = await prisma.triviaRound.upsert({
     *   create: {
     *     // ... data to create a TriviaRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaRound we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaRoundUpsertArgs>(
      args: SelectSubset<T, TriviaRoundUpsertArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Count the number of TriviaRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundCountArgs} args - Arguments to filter TriviaRounds to count.
     * @example
     * // Count the number of TriviaRounds
     * const count = await prisma.triviaRound.count({
     *   where: {
     *     // ... the filter for the TriviaRounds we want to count
     *   }
     * })
    **/
    count<T extends TriviaRoundCountArgs>(
      args?: Subset<T, TriviaRoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaRoundAggregateArgs>(args: Subset<T, TriviaRoundAggregateArgs>): Prisma.PrismaPromise<GetTriviaRoundAggregateType<T>>

    /**
     * Group by TriviaRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaRoundGroupByArgs['orderBy'] }
        : { orderBy?: TriviaRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaRoundClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends TriviaCategoryArgs= {}>(args?: Subset<T, TriviaCategoryArgs>): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | Null>;

    triviaRoundQuiz<T extends TriviaRound$triviaRoundQuizArgs= {}>(args?: Subset<T, TriviaRound$triviaRoundQuizArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaRound base type for findUnique actions
   */
  export type TriviaRoundFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where: TriviaRoundWhereUniqueInput
  }

  /**
   * TriviaRound findUnique
   */
  export interface TriviaRoundFindUniqueArgs extends TriviaRoundFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRound findUniqueOrThrow
   */
  export type TriviaRoundFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound base type for findFirst actions
   */
  export type TriviaRoundFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRounds.
     */
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }

  /**
   * TriviaRound findFirst
   */
  export interface TriviaRoundFindFirstArgs extends TriviaRoundFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRound findFirstOrThrow
   */
  export type TriviaRoundFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRounds.
     */
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaRound findMany
   */
  export type TriviaRoundFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRounds to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaRound create
   */
  export type TriviaRoundCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The data needed to create a TriviaRound.
     */
    data: XOR<TriviaRoundCreateInput, TriviaRoundUncheckedCreateInput>
  }


  /**
   * TriviaRound createMany
   */
  export type TriviaRoundCreateManyArgs = {
    /**
     * The data used to create many TriviaRounds.
     */
    data: Enumerable<TriviaRoundCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaRound update
   */
  export type TriviaRoundUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The data needed to update a TriviaRound.
     */
    data: XOR<TriviaRoundUpdateInput, TriviaRoundUncheckedUpdateInput>
    /**
     * Choose, which TriviaRound to update.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound updateMany
   */
  export type TriviaRoundUpdateManyArgs = {
    /**
     * The data used to update TriviaRounds.
     */
    data: XOR<TriviaRoundUpdateManyMutationInput, TriviaRoundUncheckedUpdateManyInput>
    /**
     * Filter which TriviaRounds to update
     */
    where?: TriviaRoundWhereInput
  }


  /**
   * TriviaRound upsert
   */
  export type TriviaRoundUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The filter to search for the TriviaRound to update in case it exists.
     */
    where: TriviaRoundWhereUniqueInput
    /**
     * In case the TriviaRound found by the `where` argument doesn't exist, create a new TriviaRound with this data.
     */
    create: XOR<TriviaRoundCreateInput, TriviaRoundUncheckedCreateInput>
    /**
     * In case the TriviaRound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaRoundUpdateInput, TriviaRoundUncheckedUpdateInput>
  }


  /**
   * TriviaRound delete
   */
  export type TriviaRoundDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter which TriviaRound to delete.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound deleteMany
   */
  export type TriviaRoundDeleteManyArgs = {
    /**
     * Filter which TriviaRounds to delete
     */
    where?: TriviaRoundWhereInput
  }


  /**
   * TriviaRound.triviaRoundQuiz
   */
  export type TriviaRound$triviaRoundQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    cursor?: TriviaRoundQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRound without action
   */
  export type TriviaRoundArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
  }



  /**
   * Model TriviaRoundQuiz
   */


  export type AggregateTriviaRoundQuiz = {
    _count: TriviaRoundQuizCountAggregateOutputType | null
    _avg: TriviaRoundQuizAvgAggregateOutputType | null
    _sum: TriviaRoundQuizSumAggregateOutputType | null
    _min: TriviaRoundQuizMinAggregateOutputType | null
    _max: TriviaRoundQuizMaxAggregateOutputType | null
  }

  export type TriviaRoundQuizAvgAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    playerChooseChoice: number | null
  }

  export type TriviaRoundQuizSumAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    playerChooseChoice: number | null
  }

  export type TriviaRoundQuizMinAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    playerChooseChoice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizMaxAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    playerChooseChoice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizCountAggregateOutputType = {
    id: number
    roundId: number
    quizId: number
    playerChooseChoice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaRoundQuizAvgAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    playerChooseChoice?: true
  }

  export type TriviaRoundQuizSumAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    playerChooseChoice?: true
  }

  export type TriviaRoundQuizMinAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    playerChooseChoice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizMaxAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    playerChooseChoice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizCountAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    playerChooseChoice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaRoundQuizAggregateArgs = {
    /**
     * Filter which TriviaRoundQuiz to aggregate.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaRoundQuizs
    **/
    _count?: true | TriviaRoundQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaRoundQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaRoundQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaRoundQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaRoundQuizMaxAggregateInputType
  }

  export type GetTriviaRoundQuizAggregateType<T extends TriviaRoundQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaRoundQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaRoundQuiz[P]>
      : GetScalarType<T[P], AggregateTriviaRoundQuiz[P]>
  }




  export type TriviaRoundQuizGroupByArgs = {
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithAggregationInput>
    by: TriviaRoundQuizScalarFieldEnum[]
    having?: TriviaRoundQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaRoundQuizCountAggregateInputType | true
    _avg?: TriviaRoundQuizAvgAggregateInputType
    _sum?: TriviaRoundQuizSumAggregateInputType
    _min?: TriviaRoundQuizMinAggregateInputType
    _max?: TriviaRoundQuizMaxAggregateInputType
  }


  export type TriviaRoundQuizGroupByOutputType = {
    id: number
    roundId: number
    quizId: number
    playerChooseChoice: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaRoundQuizCountAggregateOutputType | null
    _avg: TriviaRoundQuizAvgAggregateOutputType | null
    _sum: TriviaRoundQuizSumAggregateOutputType | null
    _min: TriviaRoundQuizMinAggregateOutputType | null
    _max: TriviaRoundQuizMaxAggregateOutputType | null
  }

  type GetTriviaRoundQuizGroupByPayload<T extends TriviaRoundQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaRoundQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaRoundQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaRoundQuizGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaRoundQuizGroupByOutputType[P]>
        }
      >
    >


  export type TriviaRoundQuizSelect = {
    id?: boolean
    round?: boolean | TriviaRoundArgs
    roundId?: boolean
    quiz?: boolean | TriviaQuizArgs
    quizId?: boolean
    playerChooseChoice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    triviaRoundQuizChoice?: boolean | TriviaRoundQuiz$triviaRoundQuizChoiceArgs
    _count?: boolean | TriviaRoundQuizCountOutputTypeArgs
  }


  export type TriviaRoundQuizInclude = {
    round?: boolean | TriviaRoundArgs
    quiz?: boolean | TriviaQuizArgs
    triviaRoundQuizChoice?: boolean | TriviaRoundQuiz$triviaRoundQuizChoiceArgs
    _count?: boolean | TriviaRoundQuizCountOutputTypeArgs
  }

  export type TriviaRoundQuizGetPayload<S extends boolean | null | undefined | TriviaRoundQuizArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundQuiz :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundQuizArgs | TriviaRoundQuizFindManyArgs)
    ? TriviaRoundQuiz  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'round' ? TriviaRoundGetPayload<S['include'][P]> :
        P extends 'quiz' ? TriviaQuizGetPayload<S['include'][P]> :
        P extends 'triviaRoundQuizChoice' ? Array < TriviaRoundQuizChoiceGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaRoundQuizCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaRoundQuizArgs | TriviaRoundQuizFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'round' ? TriviaRoundGetPayload<S['select'][P]> :
        P extends 'quiz' ? TriviaQuizGetPayload<S['select'][P]> :
        P extends 'triviaRoundQuizChoice' ? Array < TriviaRoundQuizChoiceGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaRoundQuizCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaRoundQuiz ? TriviaRoundQuiz[P] : never
  } 
      : TriviaRoundQuiz


  type TriviaRoundQuizCountArgs = 
    Omit<TriviaRoundQuizFindManyArgs, 'select' | 'include'> & {
      select?: TriviaRoundQuizCountAggregateInputType | true
    }

  export interface TriviaRoundQuizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaRoundQuiz that matches the filter.
     * @param {TriviaRoundQuizFindUniqueArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaRoundQuizFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaRoundQuizFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaRoundQuiz'> extends True ? Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>> : Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T> | null, null>

    /**
     * Find one TriviaRoundQuiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaRoundQuizFindUniqueOrThrowArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaRoundQuizFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindUniqueOrThrowArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Find the first TriviaRoundQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindFirstArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaRoundQuizFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaRoundQuizFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaRoundQuiz'> extends True ? Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>> : Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T> | null, null>

    /**
     * Find the first TriviaRoundQuiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindFirstOrThrowArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaRoundQuizFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindFirstOrThrowArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Find zero or more TriviaRoundQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaRoundQuizs
     * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany()
     * 
     * // Get first 10 TriviaRoundQuizs
     * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaRoundQuizWithIdOnly = await prisma.triviaRoundQuiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaRoundQuizFindManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>>

    /**
     * Create a TriviaRoundQuiz.
     * @param {TriviaRoundQuizCreateArgs} args - Arguments to create a TriviaRoundQuiz.
     * @example
     * // Create one TriviaRoundQuiz
     * const TriviaRoundQuiz = await prisma.triviaRoundQuiz.create({
     *   data: {
     *     // ... data to create a TriviaRoundQuiz
     *   }
     * })
     * 
    **/
    create<T extends TriviaRoundQuizCreateArgs>(
      args: SelectSubset<T, TriviaRoundQuizCreateArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Create many TriviaRoundQuizs.
     *     @param {TriviaRoundQuizCreateManyArgs} args - Arguments to create many TriviaRoundQuizs.
     *     @example
     *     // Create many TriviaRoundQuizs
     *     const triviaRoundQuiz = await prisma.triviaRoundQuiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaRoundQuizCreateManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaRoundQuiz.
     * @param {TriviaRoundQuizDeleteArgs} args - Arguments to delete one TriviaRoundQuiz.
     * @example
     * // Delete one TriviaRoundQuiz
     * const TriviaRoundQuiz = await prisma.triviaRoundQuiz.delete({
     *   where: {
     *     // ... filter to delete one TriviaRoundQuiz
     *   }
     * })
     * 
    **/
    delete<T extends TriviaRoundQuizDeleteArgs>(
      args: SelectSubset<T, TriviaRoundQuizDeleteArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Update one TriviaRoundQuiz.
     * @param {TriviaRoundQuizUpdateArgs} args - Arguments to update one TriviaRoundQuiz.
     * @example
     * // Update one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaRoundQuizUpdateArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpdateArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Delete zero or more TriviaRoundQuizs.
     * @param {TriviaRoundQuizDeleteManyArgs} args - Arguments to filter TriviaRoundQuizs to delete.
     * @example
     * // Delete a few TriviaRoundQuizs
     * const { count } = await prisma.triviaRoundQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaRoundQuizDeleteManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaRoundQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaRoundQuizs
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaRoundQuizUpdateManyArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaRoundQuiz.
     * @param {TriviaRoundQuizUpsertArgs} args - Arguments to update or create a TriviaRoundQuiz.
     * @example
     * // Update or create a TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.upsert({
     *   create: {
     *     // ... data to create a TriviaRoundQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaRoundQuiz we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaRoundQuizUpsertArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpsertArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Count the number of TriviaRoundQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizCountArgs} args - Arguments to filter TriviaRoundQuizs to count.
     * @example
     * // Count the number of TriviaRoundQuizs
     * const count = await prisma.triviaRoundQuiz.count({
     *   where: {
     *     // ... the filter for the TriviaRoundQuizs we want to count
     *   }
     * })
    **/
    count<T extends TriviaRoundQuizCountArgs>(
      args?: Subset<T, TriviaRoundQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaRoundQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaRoundQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaRoundQuizAggregateArgs>(args: Subset<T, TriviaRoundQuizAggregateArgs>): Prisma.PrismaPromise<GetTriviaRoundQuizAggregateType<T>>

    /**
     * Group by TriviaRoundQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaRoundQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaRoundQuizGroupByArgs['orderBy'] }
        : { orderBy?: TriviaRoundQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaRoundQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaRoundQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaRoundQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaRoundQuizClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    round<T extends TriviaRoundArgs= {}>(args?: Subset<T, TriviaRoundArgs>): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | Null>;

    quiz<T extends TriviaQuizArgs= {}>(args?: Subset<T, TriviaQuizArgs>): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | Null>;

    triviaRoundQuizChoice<T extends TriviaRoundQuiz$triviaRoundQuizChoiceArgs= {}>(args?: Subset<T, TriviaRoundQuiz$triviaRoundQuizChoiceArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizChoiceGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaRoundQuiz base type for findUnique actions
   */
  export type TriviaRoundQuizFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }

  /**
   * TriviaRoundQuiz findUnique
   */
  export interface TriviaRoundQuizFindUniqueArgs extends TriviaRoundQuizFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuiz findUniqueOrThrow
   */
  export type TriviaRoundQuizFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz base type for findFirst actions
   */
  export type TriviaRoundQuizFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizs.
     */
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }

  /**
   * TriviaRoundQuiz findFirst
   */
  export interface TriviaRoundQuizFindFirstArgs extends TriviaRoundQuizFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuiz findFirstOrThrow
   */
  export type TriviaRoundQuizFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizs.
     */
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRoundQuiz findMany
   */
  export type TriviaRoundQuizFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuizs to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRoundQuiz create
   */
  export type TriviaRoundQuizCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The data needed to create a TriviaRoundQuiz.
     */
    data: XOR<TriviaRoundQuizCreateInput, TriviaRoundQuizUncheckedCreateInput>
  }


  /**
   * TriviaRoundQuiz createMany
   */
  export type TriviaRoundQuizCreateManyArgs = {
    /**
     * The data used to create many TriviaRoundQuizs.
     */
    data: Enumerable<TriviaRoundQuizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaRoundQuiz update
   */
  export type TriviaRoundQuizUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The data needed to update a TriviaRoundQuiz.
     */
    data: XOR<TriviaRoundQuizUpdateInput, TriviaRoundQuizUncheckedUpdateInput>
    /**
     * Choose, which TriviaRoundQuiz to update.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz updateMany
   */
  export type TriviaRoundQuizUpdateManyArgs = {
    /**
     * The data used to update TriviaRoundQuizs.
     */
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyInput>
    /**
     * Filter which TriviaRoundQuizs to update
     */
    where?: TriviaRoundQuizWhereInput
  }


  /**
   * TriviaRoundQuiz upsert
   */
  export type TriviaRoundQuizUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The filter to search for the TriviaRoundQuiz to update in case it exists.
     */
    where: TriviaRoundQuizWhereUniqueInput
    /**
     * In case the TriviaRoundQuiz found by the `where` argument doesn't exist, create a new TriviaRoundQuiz with this data.
     */
    create: XOR<TriviaRoundQuizCreateInput, TriviaRoundQuizUncheckedCreateInput>
    /**
     * In case the TriviaRoundQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaRoundQuizUpdateInput, TriviaRoundQuizUncheckedUpdateInput>
  }


  /**
   * TriviaRoundQuiz delete
   */
  export type TriviaRoundQuizDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter which TriviaRoundQuiz to delete.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz deleteMany
   */
  export type TriviaRoundQuizDeleteManyArgs = {
    /**
     * Filter which TriviaRoundQuizs to delete
     */
    where?: TriviaRoundQuizWhereInput
  }


  /**
   * TriviaRoundQuiz.triviaRoundQuizChoice
   */
  export type TriviaRoundQuiz$triviaRoundQuizChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    where?: TriviaRoundQuizChoiceWhereInput
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizChoiceScalarFieldEnum>
  }


  /**
   * TriviaRoundQuiz without action
   */
  export type TriviaRoundQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
  }



  /**
   * Model TriviaRoundQuizChoice
   */


  export type AggregateTriviaRoundQuizChoice = {
    _count: TriviaRoundQuizChoiceCountAggregateOutputType | null
    _avg: TriviaRoundQuizChoiceAvgAggregateOutputType | null
    _sum: TriviaRoundQuizChoiceSumAggregateOutputType | null
    _min: TriviaRoundQuizChoiceMinAggregateOutputType | null
    _max: TriviaRoundQuizChoiceMaxAggregateOutputType | null
  }

  export type TriviaRoundQuizChoiceAvgAggregateOutputType = {
    id: number | null
    roundQuizId: number | null
    quizChoiceId: number | null
  }

  export type TriviaRoundQuizChoiceSumAggregateOutputType = {
    id: number | null
    roundQuizId: number | null
    quizChoiceId: number | null
  }

  export type TriviaRoundQuizChoiceMinAggregateOutputType = {
    id: number | null
    roundQuizId: number | null
    quizChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizChoiceMaxAggregateOutputType = {
    id: number | null
    roundQuizId: number | null
    quizChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizChoiceCountAggregateOutputType = {
    id: number
    roundQuizId: number
    quizChoiceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaRoundQuizChoiceAvgAggregateInputType = {
    id?: true
    roundQuizId?: true
    quizChoiceId?: true
  }

  export type TriviaRoundQuizChoiceSumAggregateInputType = {
    id?: true
    roundQuizId?: true
    quizChoiceId?: true
  }

  export type TriviaRoundQuizChoiceMinAggregateInputType = {
    id?: true
    roundQuizId?: true
    quizChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizChoiceMaxAggregateInputType = {
    id?: true
    roundQuizId?: true
    quizChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizChoiceCountAggregateInputType = {
    id?: true
    roundQuizId?: true
    quizChoiceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaRoundQuizChoiceAggregateArgs = {
    /**
     * Filter which TriviaRoundQuizChoice to aggregate.
     */
    where?: TriviaRoundQuizChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizChoices to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaRoundQuizChoices
    **/
    _count?: true | TriviaRoundQuizChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaRoundQuizChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaRoundQuizChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaRoundQuizChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaRoundQuizChoiceMaxAggregateInputType
  }

  export type GetTriviaRoundQuizChoiceAggregateType<T extends TriviaRoundQuizChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaRoundQuizChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaRoundQuizChoice[P]>
      : GetScalarType<T[P], AggregateTriviaRoundQuizChoice[P]>
  }




  export type TriviaRoundQuizChoiceGroupByArgs = {
    where?: TriviaRoundQuizChoiceWhereInput
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithAggregationInput>
    by: TriviaRoundQuizChoiceScalarFieldEnum[]
    having?: TriviaRoundQuizChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaRoundQuizChoiceCountAggregateInputType | true
    _avg?: TriviaRoundQuizChoiceAvgAggregateInputType
    _sum?: TriviaRoundQuizChoiceSumAggregateInputType
    _min?: TriviaRoundQuizChoiceMinAggregateInputType
    _max?: TriviaRoundQuizChoiceMaxAggregateInputType
  }


  export type TriviaRoundQuizChoiceGroupByOutputType = {
    id: number
    roundQuizId: number
    quizChoiceId: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaRoundQuizChoiceCountAggregateOutputType | null
    _avg: TriviaRoundQuizChoiceAvgAggregateOutputType | null
    _sum: TriviaRoundQuizChoiceSumAggregateOutputType | null
    _min: TriviaRoundQuizChoiceMinAggregateOutputType | null
    _max: TriviaRoundQuizChoiceMaxAggregateOutputType | null
  }

  type GetTriviaRoundQuizChoiceGroupByPayload<T extends TriviaRoundQuizChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaRoundQuizChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaRoundQuizChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaRoundQuizChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaRoundQuizChoiceGroupByOutputType[P]>
        }
      >
    >


  export type TriviaRoundQuizChoiceSelect = {
    id?: boolean
    roundQuiz?: boolean | TriviaRoundQuizArgs
    roundQuizId?: boolean
    roundQuizChoice?: boolean | TriviaChoiceArgs
    quizChoiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TriviaRoundQuizChoiceInclude = {
    roundQuiz?: boolean | TriviaRoundQuizArgs
    roundQuizChoice?: boolean | TriviaChoiceArgs
  }

  export type TriviaRoundQuizChoiceGetPayload<S extends boolean | null | undefined | TriviaRoundQuizChoiceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundQuizChoice :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundQuizChoiceArgs | TriviaRoundQuizChoiceFindManyArgs)
    ? TriviaRoundQuizChoice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'roundQuiz' ? TriviaRoundQuizGetPayload<S['include'][P]> :
        P extends 'roundQuizChoice' ? TriviaChoiceGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaRoundQuizChoiceArgs | TriviaRoundQuizChoiceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'roundQuiz' ? TriviaRoundQuizGetPayload<S['select'][P]> :
        P extends 'roundQuizChoice' ? TriviaChoiceGetPayload<S['select'][P]> :  P extends keyof TriviaRoundQuizChoice ? TriviaRoundQuizChoice[P] : never
  } 
      : TriviaRoundQuizChoice


  type TriviaRoundQuizChoiceCountArgs = 
    Omit<TriviaRoundQuizChoiceFindManyArgs, 'select' | 'include'> & {
      select?: TriviaRoundQuizChoiceCountAggregateInputType | true
    }

  export interface TriviaRoundQuizChoiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaRoundQuizChoice that matches the filter.
     * @param {TriviaRoundQuizChoiceFindUniqueArgs} args - Arguments to find a TriviaRoundQuizChoice
     * @example
     * // Get one TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaRoundQuizChoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaRoundQuizChoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaRoundQuizChoice'> extends True ? Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>> : Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T> | null, null>

    /**
     * Find one TriviaRoundQuizChoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaRoundQuizChoiceFindUniqueOrThrowArgs} args - Arguments to find a TriviaRoundQuizChoice
     * @example
     * // Get one TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaRoundQuizChoiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceFindUniqueOrThrowArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Find the first TriviaRoundQuizChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceFindFirstArgs} args - Arguments to find a TriviaRoundQuizChoice
     * @example
     * // Get one TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaRoundQuizChoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaRoundQuizChoice'> extends True ? Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>> : Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T> | null, null>

    /**
     * Find the first TriviaRoundQuizChoice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceFindFirstOrThrowArgs} args - Arguments to find a TriviaRoundQuizChoice
     * @example
     * // Get one TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaRoundQuizChoiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceFindFirstOrThrowArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Find zero or more TriviaRoundQuizChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaRoundQuizChoices
     * const triviaRoundQuizChoices = await prisma.triviaRoundQuizChoice.findMany()
     * 
     * // Get first 10 TriviaRoundQuizChoices
     * const triviaRoundQuizChoices = await prisma.triviaRoundQuizChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaRoundQuizChoiceWithIdOnly = await prisma.triviaRoundQuizChoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaRoundQuizChoiceFindManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaRoundQuizChoiceGetPayload<T>>>

    /**
     * Create a TriviaRoundQuizChoice.
     * @param {TriviaRoundQuizChoiceCreateArgs} args - Arguments to create a TriviaRoundQuizChoice.
     * @example
     * // Create one TriviaRoundQuizChoice
     * const TriviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.create({
     *   data: {
     *     // ... data to create a TriviaRoundQuizChoice
     *   }
     * })
     * 
    **/
    create<T extends TriviaRoundQuizChoiceCreateArgs>(
      args: SelectSubset<T, TriviaRoundQuizChoiceCreateArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Create many TriviaRoundQuizChoices.
     *     @param {TriviaRoundQuizChoiceCreateManyArgs} args - Arguments to create many TriviaRoundQuizChoices.
     *     @example
     *     // Create many TriviaRoundQuizChoices
     *     const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaRoundQuizChoiceCreateManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaRoundQuizChoice.
     * @param {TriviaRoundQuizChoiceDeleteArgs} args - Arguments to delete one TriviaRoundQuizChoice.
     * @example
     * // Delete one TriviaRoundQuizChoice
     * const TriviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.delete({
     *   where: {
     *     // ... filter to delete one TriviaRoundQuizChoice
     *   }
     * })
     * 
    **/
    delete<T extends TriviaRoundQuizChoiceDeleteArgs>(
      args: SelectSubset<T, TriviaRoundQuizChoiceDeleteArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Update one TriviaRoundQuizChoice.
     * @param {TriviaRoundQuizChoiceUpdateArgs} args - Arguments to update one TriviaRoundQuizChoice.
     * @example
     * // Update one TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaRoundQuizChoiceUpdateArgs>(
      args: SelectSubset<T, TriviaRoundQuizChoiceUpdateArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Delete zero or more TriviaRoundQuizChoices.
     * @param {TriviaRoundQuizChoiceDeleteManyArgs} args - Arguments to filter TriviaRoundQuizChoices to delete.
     * @example
     * // Delete a few TriviaRoundQuizChoices
     * const { count } = await prisma.triviaRoundQuizChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaRoundQuizChoiceDeleteManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizChoiceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaRoundQuizChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaRoundQuizChoices
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaRoundQuizChoiceUpdateManyArgs>(
      args: SelectSubset<T, TriviaRoundQuizChoiceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaRoundQuizChoice.
     * @param {TriviaRoundQuizChoiceUpsertArgs} args - Arguments to update or create a TriviaRoundQuizChoice.
     * @example
     * // Update or create a TriviaRoundQuizChoice
     * const triviaRoundQuizChoice = await prisma.triviaRoundQuizChoice.upsert({
     *   create: {
     *     // ... data to create a TriviaRoundQuizChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaRoundQuizChoice we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaRoundQuizChoiceUpsertArgs>(
      args: SelectSubset<T, TriviaRoundQuizChoiceUpsertArgs>
    ): Prisma__TriviaRoundQuizChoiceClient<TriviaRoundQuizChoiceGetPayload<T>>

    /**
     * Count the number of TriviaRoundQuizChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceCountArgs} args - Arguments to filter TriviaRoundQuizChoices to count.
     * @example
     * // Count the number of TriviaRoundQuizChoices
     * const count = await prisma.triviaRoundQuizChoice.count({
     *   where: {
     *     // ... the filter for the TriviaRoundQuizChoices we want to count
     *   }
     * })
    **/
    count<T extends TriviaRoundQuizChoiceCountArgs>(
      args?: Subset<T, TriviaRoundQuizChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaRoundQuizChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaRoundQuizChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaRoundQuizChoiceAggregateArgs>(args: Subset<T, TriviaRoundQuizChoiceAggregateArgs>): Prisma.PrismaPromise<GetTriviaRoundQuizChoiceAggregateType<T>>

    /**
     * Group by TriviaRoundQuizChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaRoundQuizChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaRoundQuizChoiceGroupByArgs['orderBy'] }
        : { orderBy?: TriviaRoundQuizChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaRoundQuizChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaRoundQuizChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaRoundQuizChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaRoundQuizChoiceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    roundQuiz<T extends TriviaRoundQuizArgs= {}>(args?: Subset<T, TriviaRoundQuizArgs>): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T> | Null>;

    roundQuizChoice<T extends TriviaChoiceArgs= {}>(args?: Subset<T, TriviaChoiceArgs>): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaRoundQuizChoice base type for findUnique actions
   */
  export type TriviaRoundQuizChoiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter, which TriviaRoundQuizChoice to fetch.
     */
    where: TriviaRoundQuizChoiceWhereUniqueInput
  }

  /**
   * TriviaRoundQuizChoice findUnique
   */
  export interface TriviaRoundQuizChoiceFindUniqueArgs extends TriviaRoundQuizChoiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuizChoice findUniqueOrThrow
   */
  export type TriviaRoundQuizChoiceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter, which TriviaRoundQuizChoice to fetch.
     */
    where: TriviaRoundQuizChoiceWhereUniqueInput
  }


  /**
   * TriviaRoundQuizChoice base type for findFirst actions
   */
  export type TriviaRoundQuizChoiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter, which TriviaRoundQuizChoice to fetch.
     */
    where?: TriviaRoundQuizChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizChoices to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizChoices.
     */
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizChoices.
     */
    distinct?: Enumerable<TriviaRoundQuizChoiceScalarFieldEnum>
  }

  /**
   * TriviaRoundQuizChoice findFirst
   */
  export interface TriviaRoundQuizChoiceFindFirstArgs extends TriviaRoundQuizChoiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuizChoice findFirstOrThrow
   */
  export type TriviaRoundQuizChoiceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter, which TriviaRoundQuizChoice to fetch.
     */
    where?: TriviaRoundQuizChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizChoices to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizChoices.
     */
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizChoices.
     */
    distinct?: Enumerable<TriviaRoundQuizChoiceScalarFieldEnum>
  }


  /**
   * TriviaRoundQuizChoice findMany
   */
  export type TriviaRoundQuizChoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter, which TriviaRoundQuizChoices to fetch.
     */
    where?: TriviaRoundQuizChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizChoices to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaRoundQuizChoices.
     */
    cursor?: TriviaRoundQuizChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizChoices.
     */
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizChoiceScalarFieldEnum>
  }


  /**
   * TriviaRoundQuizChoice create
   */
  export type TriviaRoundQuizChoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * The data needed to create a TriviaRoundQuizChoice.
     */
    data: XOR<TriviaRoundQuizChoiceCreateInput, TriviaRoundQuizChoiceUncheckedCreateInput>
  }


  /**
   * TriviaRoundQuizChoice createMany
   */
  export type TriviaRoundQuizChoiceCreateManyArgs = {
    /**
     * The data used to create many TriviaRoundQuizChoices.
     */
    data: Enumerable<TriviaRoundQuizChoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaRoundQuizChoice update
   */
  export type TriviaRoundQuizChoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * The data needed to update a TriviaRoundQuizChoice.
     */
    data: XOR<TriviaRoundQuizChoiceUpdateInput, TriviaRoundQuizChoiceUncheckedUpdateInput>
    /**
     * Choose, which TriviaRoundQuizChoice to update.
     */
    where: TriviaRoundQuizChoiceWhereUniqueInput
  }


  /**
   * TriviaRoundQuizChoice updateMany
   */
  export type TriviaRoundQuizChoiceUpdateManyArgs = {
    /**
     * The data used to update TriviaRoundQuizChoices.
     */
    data: XOR<TriviaRoundQuizChoiceUpdateManyMutationInput, TriviaRoundQuizChoiceUncheckedUpdateManyInput>
    /**
     * Filter which TriviaRoundQuizChoices to update
     */
    where?: TriviaRoundQuizChoiceWhereInput
  }


  /**
   * TriviaRoundQuizChoice upsert
   */
  export type TriviaRoundQuizChoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * The filter to search for the TriviaRoundQuizChoice to update in case it exists.
     */
    where: TriviaRoundQuizChoiceWhereUniqueInput
    /**
     * In case the TriviaRoundQuizChoice found by the `where` argument doesn't exist, create a new TriviaRoundQuizChoice with this data.
     */
    create: XOR<TriviaRoundQuizChoiceCreateInput, TriviaRoundQuizChoiceUncheckedCreateInput>
    /**
     * In case the TriviaRoundQuizChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaRoundQuizChoiceUpdateInput, TriviaRoundQuizChoiceUncheckedUpdateInput>
  }


  /**
   * TriviaRoundQuizChoice delete
   */
  export type TriviaRoundQuizChoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
    /**
     * Filter which TriviaRoundQuizChoice to delete.
     */
    where: TriviaRoundQuizChoiceWhereUniqueInput
  }


  /**
   * TriviaRoundQuizChoice deleteMany
   */
  export type TriviaRoundQuizChoiceDeleteManyArgs = {
    /**
     * Filter which TriviaRoundQuizChoices to delete
     */
    where?: TriviaRoundQuizChoiceWhereInput
  }


  /**
   * TriviaRoundQuizChoice without action
   */
  export type TriviaRoundQuizChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuizChoice
     */
    select?: TriviaRoundQuizChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizChoiceInclude | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    profileImage: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    profileImage: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    profileImage?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    profileImage: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    profileImage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fromFolowing?: boolean | User$fromFolowingArgs
    toFollowing?: boolean | User$toFollowingArgs
    post?: boolean | User$postArgs
    fromDirectMessage?: boolean | User$fromDirectMessageArgs
    toDirectMessage?: boolean | User$toDirectMessageArgs
    Reply?: boolean | User$ReplyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    fromFolowing?: boolean | User$fromFolowingArgs
    toFollowing?: boolean | User$toFollowingArgs
    post?: boolean | User$postArgs
    fromDirectMessage?: boolean | User$fromDirectMessageArgs
    toDirectMessage?: boolean | User$toDirectMessageArgs
    Reply?: boolean | User$ReplyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'fromFolowing' ? Array < FollowingGetPayload<S['include'][P]>>  :
        P extends 'toFollowing' ? Array < FollowingGetPayload<S['include'][P]>>  :
        P extends 'post' ? Array < PostGetPayload<S['include'][P]>>  :
        P extends 'fromDirectMessage' ? Array < DirectMsgGetPayload<S['include'][P]>>  :
        P extends 'toDirectMessage' ? Array < DirectMsgGetPayload<S['include'][P]>>  :
        P extends 'Reply' ? Array < ReplyGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'fromFolowing' ? Array < FollowingGetPayload<S['select'][P]>>  :
        P extends 'toFollowing' ? Array < FollowingGetPayload<S['select'][P]>>  :
        P extends 'post' ? Array < PostGetPayload<S['select'][P]>>  :
        P extends 'fromDirectMessage' ? Array < DirectMsgGetPayload<S['select'][P]>>  :
        P extends 'toDirectMessage' ? Array < DirectMsgGetPayload<S['select'][P]>>  :
        P extends 'Reply' ? Array < ReplyGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    fromFolowing<T extends User$fromFolowingArgs= {}>(args?: Subset<T, User$fromFolowingArgs>): Prisma.PrismaPromise<Array<FollowingGetPayload<T>>| Null>;

    toFollowing<T extends User$toFollowingArgs= {}>(args?: Subset<T, User$toFollowingArgs>): Prisma.PrismaPromise<Array<FollowingGetPayload<T>>| Null>;

    post<T extends User$postArgs= {}>(args?: Subset<T, User$postArgs>): Prisma.PrismaPromise<Array<PostGetPayload<T>>| Null>;

    fromDirectMessage<T extends User$fromDirectMessageArgs= {}>(args?: Subset<T, User$fromDirectMessageArgs>): Prisma.PrismaPromise<Array<DirectMsgGetPayload<T>>| Null>;

    toDirectMessage<T extends User$toDirectMessageArgs= {}>(args?: Subset<T, User$toDirectMessageArgs>): Prisma.PrismaPromise<Array<DirectMsgGetPayload<T>>| Null>;

    Reply<T extends User$ReplyArgs= {}>(args?: Subset<T, User$ReplyArgs>): Prisma.PrismaPromise<Array<ReplyGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.fromFolowing
   */
  export type User$fromFolowingArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    where?: FollowingWhereInput
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    cursor?: FollowingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowingScalarFieldEnum>
  }


  /**
   * User.toFollowing
   */
  export type User$toFollowingArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    where?: FollowingWhereInput
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    cursor?: FollowingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FollowingScalarFieldEnum>
  }


  /**
   * User.post
   */
  export type User$postArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * User.fromDirectMessage
   */
  export type User$fromDirectMessageArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    where?: DirectMsgWhereInput
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    cursor?: DirectMsgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DirectMsgScalarFieldEnum>
  }


  /**
   * User.toDirectMessage
   */
  export type User$toDirectMessageArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    where?: DirectMsgWhereInput
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    cursor?: DirectMsgWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DirectMsgScalarFieldEnum>
  }


  /**
   * User.Reply
   */
  export type User$ReplyArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    where?: ReplyWhereInput
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReplyScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Following
   */


  export type AggregateFollowing = {
    _count: FollowingCountAggregateOutputType | null
    _avg: FollowingAvgAggregateOutputType | null
    _sum: FollowingSumAggregateOutputType | null
    _min: FollowingMinAggregateOutputType | null
    _max: FollowingMaxAggregateOutputType | null
  }

  export type FollowingAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FollowingSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type FollowingMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FollowingMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FollowingCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FollowingAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FollowingSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type FollowingMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FollowingMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FollowingCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FollowingAggregateArgs = {
    /**
     * Filter which Following to aggregate.
     */
    where?: FollowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followings to fetch.
     */
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Followings
    **/
    _count?: true | FollowingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowingMaxAggregateInputType
  }

  export type GetFollowingAggregateType<T extends FollowingAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowing]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowing[P]>
      : GetScalarType<T[P], AggregateFollowing[P]>
  }




  export type FollowingGroupByArgs = {
    where?: FollowingWhereInput
    orderBy?: Enumerable<FollowingOrderByWithAggregationInput>
    by: FollowingScalarFieldEnum[]
    having?: FollowingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowingCountAggregateInputType | true
    _avg?: FollowingAvgAggregateInputType
    _sum?: FollowingSumAggregateInputType
    _min?: FollowingMinAggregateInputType
    _max?: FollowingMaxAggregateInputType
  }


  export type FollowingGroupByOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    createdAt: Date
    updatedAt: Date
    _count: FollowingCountAggregateOutputType | null
    _avg: FollowingAvgAggregateOutputType | null
    _sum: FollowingSumAggregateOutputType | null
    _min: FollowingMinAggregateOutputType | null
    _max: FollowingMaxAggregateOutputType | null
  }

  type GetFollowingGroupByPayload<T extends FollowingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FollowingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowingGroupByOutputType[P]>
            : GetScalarType<T[P], FollowingGroupByOutputType[P]>
        }
      >
    >


  export type FollowingSelect = {
    id?: boolean
    from?: boolean | UserArgs
    fromUserId?: boolean
    to?: boolean | UserArgs
    toUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FollowingInclude = {
    from?: boolean | UserArgs
    to?: boolean | UserArgs
  }

  export type FollowingGetPayload<S extends boolean | null | undefined | FollowingArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Following :
    S extends undefined ? never :
    S extends { include: any } & (FollowingArgs | FollowingFindManyArgs)
    ? Following  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'from' ? UserGetPayload<S['include'][P]> :
        P extends 'to' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FollowingArgs | FollowingFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'from' ? UserGetPayload<S['select'][P]> :
        P extends 'to' ? UserGetPayload<S['select'][P]> :  P extends keyof Following ? Following[P] : never
  } 
      : Following


  type FollowingCountArgs = 
    Omit<FollowingFindManyArgs, 'select' | 'include'> & {
      select?: FollowingCountAggregateInputType | true
    }

  export interface FollowingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Following that matches the filter.
     * @param {FollowingFindUniqueArgs} args - Arguments to find a Following
     * @example
     * // Get one Following
     * const following = await prisma.following.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FollowingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Following'> extends True ? Prisma__FollowingClient<FollowingGetPayload<T>> : Prisma__FollowingClient<FollowingGetPayload<T> | null, null>

    /**
     * Find one Following that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowingFindUniqueOrThrowArgs} args - Arguments to find a Following
     * @example
     * // Get one Following
     * const following = await prisma.following.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FollowingFindUniqueOrThrowArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Find the first Following that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingFindFirstArgs} args - Arguments to find a Following
     * @example
     * // Get one Following
     * const following = await prisma.following.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FollowingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Following'> extends True ? Prisma__FollowingClient<FollowingGetPayload<T>> : Prisma__FollowingClient<FollowingGetPayload<T> | null, null>

    /**
     * Find the first Following that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingFindFirstOrThrowArgs} args - Arguments to find a Following
     * @example
     * // Get one Following
     * const following = await prisma.following.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FollowingFindFirstOrThrowArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Find zero or more Followings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followings
     * const followings = await prisma.following.findMany()
     * 
     * // Get first 10 Followings
     * const followings = await prisma.following.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followingWithIdOnly = await prisma.following.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FollowingFindManyArgs>(
      args?: SelectSubset<T, FollowingFindManyArgs>
    ): Prisma.PrismaPromise<Array<FollowingGetPayload<T>>>

    /**
     * Create a Following.
     * @param {FollowingCreateArgs} args - Arguments to create a Following.
     * @example
     * // Create one Following
     * const Following = await prisma.following.create({
     *   data: {
     *     // ... data to create a Following
     *   }
     * })
     * 
    **/
    create<T extends FollowingCreateArgs>(
      args: SelectSubset<T, FollowingCreateArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Create many Followings.
     *     @param {FollowingCreateManyArgs} args - Arguments to create many Followings.
     *     @example
     *     // Create many Followings
     *     const following = await prisma.following.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowingCreateManyArgs>(
      args?: SelectSubset<T, FollowingCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Following.
     * @param {FollowingDeleteArgs} args - Arguments to delete one Following.
     * @example
     * // Delete one Following
     * const Following = await prisma.following.delete({
     *   where: {
     *     // ... filter to delete one Following
     *   }
     * })
     * 
    **/
    delete<T extends FollowingDeleteArgs>(
      args: SelectSubset<T, FollowingDeleteArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Update one Following.
     * @param {FollowingUpdateArgs} args - Arguments to update one Following.
     * @example
     * // Update one Following
     * const following = await prisma.following.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowingUpdateArgs>(
      args: SelectSubset<T, FollowingUpdateArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Delete zero or more Followings.
     * @param {FollowingDeleteManyArgs} args - Arguments to filter Followings to delete.
     * @example
     * // Delete a few Followings
     * const { count } = await prisma.following.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowingDeleteManyArgs>(
      args?: SelectSubset<T, FollowingDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followings
     * const following = await prisma.following.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowingUpdateManyArgs>(
      args: SelectSubset<T, FollowingUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Following.
     * @param {FollowingUpsertArgs} args - Arguments to update or create a Following.
     * @example
     * // Update or create a Following
     * const following = await prisma.following.upsert({
     *   create: {
     *     // ... data to create a Following
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Following we want to update
     *   }
     * })
    **/
    upsert<T extends FollowingUpsertArgs>(
      args: SelectSubset<T, FollowingUpsertArgs>
    ): Prisma__FollowingClient<FollowingGetPayload<T>>

    /**
     * Count the number of Followings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingCountArgs} args - Arguments to filter Followings to count.
     * @example
     * // Count the number of Followings
     * const count = await prisma.following.count({
     *   where: {
     *     // ... the filter for the Followings we want to count
     *   }
     * })
    **/
    count<T extends FollowingCountArgs>(
      args?: Subset<T, FollowingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Following.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowingAggregateArgs>(args: Subset<T, FollowingAggregateArgs>): Prisma.PrismaPromise<GetFollowingAggregateType<T>>

    /**
     * Group by Following.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowingGroupByArgs['orderBy'] }
        : { orderBy?: FollowingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Following.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FollowingClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    from<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    to<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Following base type for findUnique actions
   */
  export type FollowingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter, which Following to fetch.
     */
    where: FollowingWhereUniqueInput
  }

  /**
   * Following findUnique
   */
  export interface FollowingFindUniqueArgs extends FollowingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Following findUniqueOrThrow
   */
  export type FollowingFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter, which Following to fetch.
     */
    where: FollowingWhereUniqueInput
  }


  /**
   * Following base type for findFirst actions
   */
  export type FollowingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter, which Following to fetch.
     */
    where?: FollowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followings to fetch.
     */
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followings.
     */
    cursor?: FollowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followings.
     */
    distinct?: Enumerable<FollowingScalarFieldEnum>
  }

  /**
   * Following findFirst
   */
  export interface FollowingFindFirstArgs extends FollowingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Following findFirstOrThrow
   */
  export type FollowingFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter, which Following to fetch.
     */
    where?: FollowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followings to fetch.
     */
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followings.
     */
    cursor?: FollowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followings.
     */
    distinct?: Enumerable<FollowingScalarFieldEnum>
  }


  /**
   * Following findMany
   */
  export type FollowingFindManyArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter, which Followings to fetch.
     */
    where?: FollowingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followings to fetch.
     */
    orderBy?: Enumerable<FollowingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Followings.
     */
    cursor?: FollowingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followings.
     */
    skip?: number
    distinct?: Enumerable<FollowingScalarFieldEnum>
  }


  /**
   * Following create
   */
  export type FollowingCreateArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * The data needed to create a Following.
     */
    data: XOR<FollowingCreateInput, FollowingUncheckedCreateInput>
  }


  /**
   * Following createMany
   */
  export type FollowingCreateManyArgs = {
    /**
     * The data used to create many Followings.
     */
    data: Enumerable<FollowingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Following update
   */
  export type FollowingUpdateArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * The data needed to update a Following.
     */
    data: XOR<FollowingUpdateInput, FollowingUncheckedUpdateInput>
    /**
     * Choose, which Following to update.
     */
    where: FollowingWhereUniqueInput
  }


  /**
   * Following updateMany
   */
  export type FollowingUpdateManyArgs = {
    /**
     * The data used to update Followings.
     */
    data: XOR<FollowingUpdateManyMutationInput, FollowingUncheckedUpdateManyInput>
    /**
     * Filter which Followings to update
     */
    where?: FollowingWhereInput
  }


  /**
   * Following upsert
   */
  export type FollowingUpsertArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * The filter to search for the Following to update in case it exists.
     */
    where: FollowingWhereUniqueInput
    /**
     * In case the Following found by the `where` argument doesn't exist, create a new Following with this data.
     */
    create: XOR<FollowingCreateInput, FollowingUncheckedCreateInput>
    /**
     * In case the Following was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowingUpdateInput, FollowingUncheckedUpdateInput>
  }


  /**
   * Following delete
   */
  export type FollowingDeleteArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
    /**
     * Filter which Following to delete.
     */
    where: FollowingWhereUniqueInput
  }


  /**
   * Following deleteMany
   */
  export type FollowingDeleteManyArgs = {
    /**
     * Filter which Followings to delete
     */
    where?: FollowingWhereInput
  }


  /**
   * Following without action
   */
  export type FollowingArgs = {
    /**
     * Select specific fields to fetch from the Following
     */
    select?: FollowingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowingInclude | null
  }



  /**
   * Model Post
   */


  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PostMinAggregateOutputType = {
    id: number | null
    userId: number | null
    postDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    postDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    userId: number
    postDetail: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    userId?: true
    postDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    userId?: true
    postDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    userId?: true
    postDetail?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostAggregateArgs = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs = {
    where?: PostWhereInput
    orderBy?: Enumerable<PostOrderByWithAggregationInput>
    by: PostScalarFieldEnum[]
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }


  export type PostGroupByOutputType = {
    id: number
    userId: number
    postDetail: string
    createdAt: Date
    updatedAt: Date
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    postDetail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reply?: boolean | Post$replyArgs
    postOnHashtag?: boolean | Post$postOnHashtagArgs
    _count?: boolean | PostCountOutputTypeArgs
  }


  export type PostInclude = {
    user?: boolean | UserArgs
    reply?: boolean | Post$replyArgs
    postOnHashtag?: boolean | Post$postOnHashtagArgs
    _count?: boolean | PostCountOutputTypeArgs
  }

  export type PostGetPayload<S extends boolean | null | undefined | PostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Post :
    S extends undefined ? never :
    S extends { include: any } & (PostArgs | PostFindManyArgs)
    ? Post  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'reply' ? Array < ReplyGetPayload<S['include'][P]>>  :
        P extends 'postOnHashtag' ? Array < PostOnHashtagGetPayload<S['include'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostArgs | PostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'reply' ? Array < ReplyGetPayload<S['select'][P]>>  :
        P extends 'postOnHashtag' ? Array < PostOnHashtagGetPayload<S['select'][P]>>  :
        P extends '_count' ? PostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Post ? Post[P] : never
  } 
      : Post


  type PostCountArgs = 
    Omit<PostFindManyArgs, 'select' | 'include'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Post'> extends True ? Prisma__PostClient<PostGetPayload<T>> : Prisma__PostClient<PostGetPayload<T> | null, null>

    /**
     * Find the first Post that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs>(
      args?: SelectSubset<T, PostFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostGetPayload<T>>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs>(
      args: SelectSubset<T, PostCreateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs>(
      args?: SelectSubset<T, PostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs>(
      args: SelectSubset<T, PostDeleteArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs>(
      args: SelectSubset<T, PostUpdateArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs>(
      args?: SelectSubset<T, PostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs>(
      args: SelectSubset<T, PostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs>(
      args: SelectSubset<T, PostUpsertArgs>
    ): Prisma__PostClient<PostGetPayload<T>>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    reply<T extends Post$replyArgs= {}>(args?: Subset<T, Post$replyArgs>): Prisma.PrismaPromise<Array<ReplyGetPayload<T>>| Null>;

    postOnHashtag<T extends Post$postOnHashtagArgs= {}>(args?: Subset<T, Post$postOnHashtagArgs>): Prisma.PrismaPromise<Array<PostOnHashtagGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Post base type for findUnique actions
   */
  export type PostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUnique
   */
  export interface PostFindUniqueArgs extends PostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post base type for findFirst actions
   */
  export type PostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }

  /**
   * Post findFirst
   */
  export interface PostFindFirstArgs extends PostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post findMany
   */
  export type PostFindManyArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: Enumerable<PostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: Enumerable<PostScalarFieldEnum>
  }


  /**
   * Post create
   */
  export type PostCreateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }


  /**
   * Post createMany
   */
  export type PostCreateManyArgs = {
    /**
     * The data used to create many Posts.
     */
    data: Enumerable<PostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Post update
   */
  export type PostUpdateArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }


  /**
   * Post upsert
   */
  export type PostUpsertArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }


  /**
   * Post delete
   */
  export type PostDeleteArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }


  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }


  /**
   * Post.reply
   */
  export type Post$replyArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    where?: ReplyWhereInput
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    cursor?: ReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ReplyScalarFieldEnum>
  }


  /**
   * Post.postOnHashtag
   */
  export type Post$postOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    where?: PostOnHashtagWhereInput
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    cursor?: PostOnHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostOnHashtagScalarFieldEnum>
  }


  /**
   * Post without action
   */
  export type PostArgs = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostInclude | null
  }



  /**
   * Model DirectMsg
   */


  export type AggregateDirectMsg = {
    _count: DirectMsgCountAggregateOutputType | null
    _avg: DirectMsgAvgAggregateOutputType | null
    _sum: DirectMsgSumAggregateOutputType | null
    _min: DirectMsgMinAggregateOutputType | null
    _max: DirectMsgMaxAggregateOutputType | null
  }

  export type DirectMsgAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type DirectMsgSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
  }

  export type DirectMsgMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    msgDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DirectMsgMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toUserId: number | null
    msgDetail: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DirectMsgCountAggregateOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    msgDetail: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DirectMsgAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type DirectMsgSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
  }

  export type DirectMsgMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DirectMsgMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DirectMsgCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toUserId?: true
    msgDetail?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DirectMsgAggregateArgs = {
    /**
     * Filter which DirectMsg to aggregate.
     */
    where?: DirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMsgs to fetch.
     */
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DirectMsgs
    **/
    _count?: true | DirectMsgCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DirectMsgAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DirectMsgSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DirectMsgMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DirectMsgMaxAggregateInputType
  }

  export type GetDirectMsgAggregateType<T extends DirectMsgAggregateArgs> = {
        [P in keyof T & keyof AggregateDirectMsg]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDirectMsg[P]>
      : GetScalarType<T[P], AggregateDirectMsg[P]>
  }




  export type DirectMsgGroupByArgs = {
    where?: DirectMsgWhereInput
    orderBy?: Enumerable<DirectMsgOrderByWithAggregationInput>
    by: DirectMsgScalarFieldEnum[]
    having?: DirectMsgScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DirectMsgCountAggregateInputType | true
    _avg?: DirectMsgAvgAggregateInputType
    _sum?: DirectMsgSumAggregateInputType
    _min?: DirectMsgMinAggregateInputType
    _max?: DirectMsgMaxAggregateInputType
  }


  export type DirectMsgGroupByOutputType = {
    id: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt: Date
    updatedAt: Date
    _count: DirectMsgCountAggregateOutputType | null
    _avg: DirectMsgAvgAggregateOutputType | null
    _sum: DirectMsgSumAggregateOutputType | null
    _min: DirectMsgMinAggregateOutputType | null
    _max: DirectMsgMaxAggregateOutputType | null
  }

  type GetDirectMsgGroupByPayload<T extends DirectMsgGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DirectMsgGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DirectMsgGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DirectMsgGroupByOutputType[P]>
            : GetScalarType<T[P], DirectMsgGroupByOutputType[P]>
        }
      >
    >


  export type DirectMsgSelect = {
    id?: boolean
    from?: boolean | UserArgs
    fromUserId?: boolean
    to?: boolean | UserArgs
    toUserId?: boolean
    msgDetail?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type DirectMsgInclude = {
    from?: boolean | UserArgs
    to?: boolean | UserArgs
  }

  export type DirectMsgGetPayload<S extends boolean | null | undefined | DirectMsgArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? DirectMsg :
    S extends undefined ? never :
    S extends { include: any } & (DirectMsgArgs | DirectMsgFindManyArgs)
    ? DirectMsg  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'from' ? UserGetPayload<S['include'][P]> :
        P extends 'to' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (DirectMsgArgs | DirectMsgFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'from' ? UserGetPayload<S['select'][P]> :
        P extends 'to' ? UserGetPayload<S['select'][P]> :  P extends keyof DirectMsg ? DirectMsg[P] : never
  } 
      : DirectMsg


  type DirectMsgCountArgs = 
    Omit<DirectMsgFindManyArgs, 'select' | 'include'> & {
      select?: DirectMsgCountAggregateInputType | true
    }

  export interface DirectMsgDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one DirectMsg that matches the filter.
     * @param {DirectMsgFindUniqueArgs} args - Arguments to find a DirectMsg
     * @example
     * // Get one DirectMsg
     * const directMsg = await prisma.directMsg.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DirectMsgFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DirectMsgFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'DirectMsg'> extends True ? Prisma__DirectMsgClient<DirectMsgGetPayload<T>> : Prisma__DirectMsgClient<DirectMsgGetPayload<T> | null, null>

    /**
     * Find one DirectMsg that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DirectMsgFindUniqueOrThrowArgs} args - Arguments to find a DirectMsg
     * @example
     * // Get one DirectMsg
     * const directMsg = await prisma.directMsg.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DirectMsgFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, DirectMsgFindUniqueOrThrowArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Find the first DirectMsg that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgFindFirstArgs} args - Arguments to find a DirectMsg
     * @example
     * // Get one DirectMsg
     * const directMsg = await prisma.directMsg.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DirectMsgFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DirectMsgFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'DirectMsg'> extends True ? Prisma__DirectMsgClient<DirectMsgGetPayload<T>> : Prisma__DirectMsgClient<DirectMsgGetPayload<T> | null, null>

    /**
     * Find the first DirectMsg that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgFindFirstOrThrowArgs} args - Arguments to find a DirectMsg
     * @example
     * // Get one DirectMsg
     * const directMsg = await prisma.directMsg.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DirectMsgFindFirstOrThrowArgs>(
      args?: SelectSubset<T, DirectMsgFindFirstOrThrowArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Find zero or more DirectMsgs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DirectMsgs
     * const directMsgs = await prisma.directMsg.findMany()
     * 
     * // Get first 10 DirectMsgs
     * const directMsgs = await prisma.directMsg.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const directMsgWithIdOnly = await prisma.directMsg.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DirectMsgFindManyArgs>(
      args?: SelectSubset<T, DirectMsgFindManyArgs>
    ): Prisma.PrismaPromise<Array<DirectMsgGetPayload<T>>>

    /**
     * Create a DirectMsg.
     * @param {DirectMsgCreateArgs} args - Arguments to create a DirectMsg.
     * @example
     * // Create one DirectMsg
     * const DirectMsg = await prisma.directMsg.create({
     *   data: {
     *     // ... data to create a DirectMsg
     *   }
     * })
     * 
    **/
    create<T extends DirectMsgCreateArgs>(
      args: SelectSubset<T, DirectMsgCreateArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Create many DirectMsgs.
     *     @param {DirectMsgCreateManyArgs} args - Arguments to create many DirectMsgs.
     *     @example
     *     // Create many DirectMsgs
     *     const directMsg = await prisma.directMsg.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DirectMsgCreateManyArgs>(
      args?: SelectSubset<T, DirectMsgCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DirectMsg.
     * @param {DirectMsgDeleteArgs} args - Arguments to delete one DirectMsg.
     * @example
     * // Delete one DirectMsg
     * const DirectMsg = await prisma.directMsg.delete({
     *   where: {
     *     // ... filter to delete one DirectMsg
     *   }
     * })
     * 
    **/
    delete<T extends DirectMsgDeleteArgs>(
      args: SelectSubset<T, DirectMsgDeleteArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Update one DirectMsg.
     * @param {DirectMsgUpdateArgs} args - Arguments to update one DirectMsg.
     * @example
     * // Update one DirectMsg
     * const directMsg = await prisma.directMsg.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DirectMsgUpdateArgs>(
      args: SelectSubset<T, DirectMsgUpdateArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Delete zero or more DirectMsgs.
     * @param {DirectMsgDeleteManyArgs} args - Arguments to filter DirectMsgs to delete.
     * @example
     * // Delete a few DirectMsgs
     * const { count } = await prisma.directMsg.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DirectMsgDeleteManyArgs>(
      args?: SelectSubset<T, DirectMsgDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DirectMsgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DirectMsgs
     * const directMsg = await prisma.directMsg.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DirectMsgUpdateManyArgs>(
      args: SelectSubset<T, DirectMsgUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DirectMsg.
     * @param {DirectMsgUpsertArgs} args - Arguments to update or create a DirectMsg.
     * @example
     * // Update or create a DirectMsg
     * const directMsg = await prisma.directMsg.upsert({
     *   create: {
     *     // ... data to create a DirectMsg
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DirectMsg we want to update
     *   }
     * })
    **/
    upsert<T extends DirectMsgUpsertArgs>(
      args: SelectSubset<T, DirectMsgUpsertArgs>
    ): Prisma__DirectMsgClient<DirectMsgGetPayload<T>>

    /**
     * Count the number of DirectMsgs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgCountArgs} args - Arguments to filter DirectMsgs to count.
     * @example
     * // Count the number of DirectMsgs
     * const count = await prisma.directMsg.count({
     *   where: {
     *     // ... the filter for the DirectMsgs we want to count
     *   }
     * })
    **/
    count<T extends DirectMsgCountArgs>(
      args?: Subset<T, DirectMsgCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DirectMsgCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DirectMsg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DirectMsgAggregateArgs>(args: Subset<T, DirectMsgAggregateArgs>): Prisma.PrismaPromise<GetDirectMsgAggregateType<T>>

    /**
     * Group by DirectMsg.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DirectMsgGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DirectMsgGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DirectMsgGroupByArgs['orderBy'] }
        : { orderBy?: DirectMsgGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DirectMsgGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDirectMsgGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for DirectMsg.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DirectMsgClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    from<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    to<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * DirectMsg base type for findUnique actions
   */
  export type DirectMsgFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter, which DirectMsg to fetch.
     */
    where: DirectMsgWhereUniqueInput
  }

  /**
   * DirectMsg findUnique
   */
  export interface DirectMsgFindUniqueArgs extends DirectMsgFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DirectMsg findUniqueOrThrow
   */
  export type DirectMsgFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter, which DirectMsg to fetch.
     */
    where: DirectMsgWhereUniqueInput
  }


  /**
   * DirectMsg base type for findFirst actions
   */
  export type DirectMsgFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter, which DirectMsg to fetch.
     */
    where?: DirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMsgs to fetch.
     */
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMsgs.
     */
    cursor?: DirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMsgs.
     */
    distinct?: Enumerable<DirectMsgScalarFieldEnum>
  }

  /**
   * DirectMsg findFirst
   */
  export interface DirectMsgFindFirstArgs extends DirectMsgFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * DirectMsg findFirstOrThrow
   */
  export type DirectMsgFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter, which DirectMsg to fetch.
     */
    where?: DirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMsgs to fetch.
     */
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DirectMsgs.
     */
    cursor?: DirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMsgs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DirectMsgs.
     */
    distinct?: Enumerable<DirectMsgScalarFieldEnum>
  }


  /**
   * DirectMsg findMany
   */
  export type DirectMsgFindManyArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter, which DirectMsgs to fetch.
     */
    where?: DirectMsgWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DirectMsgs to fetch.
     */
    orderBy?: Enumerable<DirectMsgOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DirectMsgs.
     */
    cursor?: DirectMsgWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DirectMsgs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DirectMsgs.
     */
    skip?: number
    distinct?: Enumerable<DirectMsgScalarFieldEnum>
  }


  /**
   * DirectMsg create
   */
  export type DirectMsgCreateArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * The data needed to create a DirectMsg.
     */
    data: XOR<DirectMsgCreateInput, DirectMsgUncheckedCreateInput>
  }


  /**
   * DirectMsg createMany
   */
  export type DirectMsgCreateManyArgs = {
    /**
     * The data used to create many DirectMsgs.
     */
    data: Enumerable<DirectMsgCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * DirectMsg update
   */
  export type DirectMsgUpdateArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * The data needed to update a DirectMsg.
     */
    data: XOR<DirectMsgUpdateInput, DirectMsgUncheckedUpdateInput>
    /**
     * Choose, which DirectMsg to update.
     */
    where: DirectMsgWhereUniqueInput
  }


  /**
   * DirectMsg updateMany
   */
  export type DirectMsgUpdateManyArgs = {
    /**
     * The data used to update DirectMsgs.
     */
    data: XOR<DirectMsgUpdateManyMutationInput, DirectMsgUncheckedUpdateManyInput>
    /**
     * Filter which DirectMsgs to update
     */
    where?: DirectMsgWhereInput
  }


  /**
   * DirectMsg upsert
   */
  export type DirectMsgUpsertArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * The filter to search for the DirectMsg to update in case it exists.
     */
    where: DirectMsgWhereUniqueInput
    /**
     * In case the DirectMsg found by the `where` argument doesn't exist, create a new DirectMsg with this data.
     */
    create: XOR<DirectMsgCreateInput, DirectMsgUncheckedCreateInput>
    /**
     * In case the DirectMsg was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DirectMsgUpdateInput, DirectMsgUncheckedUpdateInput>
  }


  /**
   * DirectMsg delete
   */
  export type DirectMsgDeleteArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
    /**
     * Filter which DirectMsg to delete.
     */
    where: DirectMsgWhereUniqueInput
  }


  /**
   * DirectMsg deleteMany
   */
  export type DirectMsgDeleteManyArgs = {
    /**
     * Filter which DirectMsgs to delete
     */
    where?: DirectMsgWhereInput
  }


  /**
   * DirectMsg without action
   */
  export type DirectMsgArgs = {
    /**
     * Select specific fields to fetch from the DirectMsg
     */
    select?: DirectMsgSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DirectMsgInclude | null
  }



  /**
   * Model Hashtag
   */


  export type AggregateHashtag = {
    _count: HashtagCountAggregateOutputType | null
    _avg: HashtagAvgAggregateOutputType | null
    _sum: HashtagSumAggregateOutputType | null
    _min: HashtagMinAggregateOutputType | null
    _max: HashtagMaxAggregateOutputType | null
  }

  export type HashtagAvgAggregateOutputType = {
    id: number | null
  }

  export type HashtagSumAggregateOutputType = {
    id: number | null
  }

  export type HashtagMinAggregateOutputType = {
    id: number | null
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HashtagMaxAggregateOutputType = {
    id: number | null
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HashtagCountAggregateOutputType = {
    id: number
    hashtag: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HashtagAvgAggregateInputType = {
    id?: true
  }

  export type HashtagSumAggregateInputType = {
    id?: true
  }

  export type HashtagMinAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HashtagMaxAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HashtagCountAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HashtagAggregateArgs = {
    /**
     * Filter which Hashtag to aggregate.
     */
    where?: HashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hashtags to fetch.
     */
    orderBy?: Enumerable<HashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hashtags
    **/
    _count?: true | HashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HashtagMaxAggregateInputType
  }

  export type GetHashtagAggregateType<T extends HashtagAggregateArgs> = {
        [P in keyof T & keyof AggregateHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHashtag[P]>
      : GetScalarType<T[P], AggregateHashtag[P]>
  }




  export type HashtagGroupByArgs = {
    where?: HashtagWhereInput
    orderBy?: Enumerable<HashtagOrderByWithAggregationInput>
    by: HashtagScalarFieldEnum[]
    having?: HashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HashtagCountAggregateInputType | true
    _avg?: HashtagAvgAggregateInputType
    _sum?: HashtagSumAggregateInputType
    _min?: HashtagMinAggregateInputType
    _max?: HashtagMaxAggregateInputType
  }


  export type HashtagGroupByOutputType = {
    id: number
    hashtag: string
    createdAt: Date
    updatedAt: Date
    _count: HashtagCountAggregateOutputType | null
    _avg: HashtagAvgAggregateOutputType | null
    _sum: HashtagSumAggregateOutputType | null
    _min: HashtagMinAggregateOutputType | null
    _max: HashtagMaxAggregateOutputType | null
  }

  type GetHashtagGroupByPayload<T extends HashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HashtagGroupByOutputType[P]>
            : GetScalarType<T[P], HashtagGroupByOutputType[P]>
        }
      >
    >


  export type HashtagSelect = {
    id?: boolean
    hashtag?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    postOnHashtag?: boolean | Hashtag$postOnHashtagArgs
    _count?: boolean | HashtagCountOutputTypeArgs
  }


  export type HashtagInclude = {
    postOnHashtag?: boolean | Hashtag$postOnHashtagArgs
    _count?: boolean | HashtagCountOutputTypeArgs
  }

  export type HashtagGetPayload<S extends boolean | null | undefined | HashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Hashtag :
    S extends undefined ? never :
    S extends { include: any } & (HashtagArgs | HashtagFindManyArgs)
    ? Hashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'postOnHashtag' ? Array < PostOnHashtagGetPayload<S['include'][P]>>  :
        P extends '_count' ? HashtagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HashtagArgs | HashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'postOnHashtag' ? Array < PostOnHashtagGetPayload<S['select'][P]>>  :
        P extends '_count' ? HashtagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Hashtag ? Hashtag[P] : never
  } 
      : Hashtag


  type HashtagCountArgs = 
    Omit<HashtagFindManyArgs, 'select' | 'include'> & {
      select?: HashtagCountAggregateInputType | true
    }

  export interface HashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Hashtag that matches the filter.
     * @param {HashtagFindUniqueArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Hashtag'> extends True ? Prisma__HashtagClient<HashtagGetPayload<T>> : Prisma__HashtagClient<HashtagGetPayload<T> | null, null>

    /**
     * Find one Hashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HashtagFindUniqueOrThrowArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HashtagFindUniqueOrThrowArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Find the first Hashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagFindFirstArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Hashtag'> extends True ? Prisma__HashtagClient<HashtagGetPayload<T>> : Prisma__HashtagClient<HashtagGetPayload<T> | null, null>

    /**
     * Find the first Hashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagFindFirstOrThrowArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HashtagFindFirstOrThrowArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Find zero or more Hashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hashtags
     * const hashtags = await prisma.hashtag.findMany()
     * 
     * // Get first 10 Hashtags
     * const hashtags = await prisma.hashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hashtagWithIdOnly = await prisma.hashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HashtagFindManyArgs>(
      args?: SelectSubset<T, HashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<HashtagGetPayload<T>>>

    /**
     * Create a Hashtag.
     * @param {HashtagCreateArgs} args - Arguments to create a Hashtag.
     * @example
     * // Create one Hashtag
     * const Hashtag = await prisma.hashtag.create({
     *   data: {
     *     // ... data to create a Hashtag
     *   }
     * })
     * 
    **/
    create<T extends HashtagCreateArgs>(
      args: SelectSubset<T, HashtagCreateArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Create many Hashtags.
     *     @param {HashtagCreateManyArgs} args - Arguments to create many Hashtags.
     *     @example
     *     // Create many Hashtags
     *     const hashtag = await prisma.hashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HashtagCreateManyArgs>(
      args?: SelectSubset<T, HashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Hashtag.
     * @param {HashtagDeleteArgs} args - Arguments to delete one Hashtag.
     * @example
     * // Delete one Hashtag
     * const Hashtag = await prisma.hashtag.delete({
     *   where: {
     *     // ... filter to delete one Hashtag
     *   }
     * })
     * 
    **/
    delete<T extends HashtagDeleteArgs>(
      args: SelectSubset<T, HashtagDeleteArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Update one Hashtag.
     * @param {HashtagUpdateArgs} args - Arguments to update one Hashtag.
     * @example
     * // Update one Hashtag
     * const hashtag = await prisma.hashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HashtagUpdateArgs>(
      args: SelectSubset<T, HashtagUpdateArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Delete zero or more Hashtags.
     * @param {HashtagDeleteManyArgs} args - Arguments to filter Hashtags to delete.
     * @example
     * // Delete a few Hashtags
     * const { count } = await prisma.hashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HashtagDeleteManyArgs>(
      args?: SelectSubset<T, HashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hashtags
     * const hashtag = await prisma.hashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HashtagUpdateManyArgs>(
      args: SelectSubset<T, HashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Hashtag.
     * @param {HashtagUpsertArgs} args - Arguments to update or create a Hashtag.
     * @example
     * // Update or create a Hashtag
     * const hashtag = await prisma.hashtag.upsert({
     *   create: {
     *     // ... data to create a Hashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hashtag we want to update
     *   }
     * })
    **/
    upsert<T extends HashtagUpsertArgs>(
      args: SelectSubset<T, HashtagUpsertArgs>
    ): Prisma__HashtagClient<HashtagGetPayload<T>>

    /**
     * Count the number of Hashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagCountArgs} args - Arguments to filter Hashtags to count.
     * @example
     * // Count the number of Hashtags
     * const count = await prisma.hashtag.count({
     *   where: {
     *     // ... the filter for the Hashtags we want to count
     *   }
     * })
    **/
    count<T extends HashtagCountArgs>(
      args?: Subset<T, HashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Hashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HashtagAggregateArgs>(args: Subset<T, HashtagAggregateArgs>): Prisma.PrismaPromise<GetHashtagAggregateType<T>>

    /**
     * Group by Hashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HashtagGroupByArgs['orderBy'] }
        : { orderBy?: HashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Hashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    postOnHashtag<T extends Hashtag$postOnHashtagArgs= {}>(args?: Subset<T, Hashtag$postOnHashtagArgs>): Prisma.PrismaPromise<Array<PostOnHashtagGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Hashtag base type for findUnique actions
   */
  export type HashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
     */
    where: HashtagWhereUniqueInput
  }

  /**
   * Hashtag findUnique
   */
  export interface HashtagFindUniqueArgs extends HashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Hashtag findUniqueOrThrow
   */
  export type HashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
     */
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag base type for findFirst actions
   */
  export type HashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
     */
    where?: HashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hashtags to fetch.
     */
    orderBy?: Enumerable<HashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hashtags.
     */
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hashtags.
     */
    distinct?: Enumerable<HashtagScalarFieldEnum>
  }

  /**
   * Hashtag findFirst
   */
  export interface HashtagFindFirstArgs extends HashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Hashtag findFirstOrThrow
   */
  export type HashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
     */
    where?: HashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hashtags to fetch.
     */
    orderBy?: Enumerable<HashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hashtags.
     */
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hashtags.
     */
    distinct?: Enumerable<HashtagScalarFieldEnum>
  }


  /**
   * Hashtag findMany
   */
  export type HashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtags to fetch.
     */
    where?: HashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hashtags to fetch.
     */
    orderBy?: Enumerable<HashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hashtags.
     */
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
     */
    skip?: number
    distinct?: Enumerable<HashtagScalarFieldEnum>
  }


  /**
   * Hashtag create
   */
  export type HashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * The data needed to create a Hashtag.
     */
    data: XOR<HashtagCreateInput, HashtagUncheckedCreateInput>
  }


  /**
   * Hashtag createMany
   */
  export type HashtagCreateManyArgs = {
    /**
     * The data used to create many Hashtags.
     */
    data: Enumerable<HashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Hashtag update
   */
  export type HashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * The data needed to update a Hashtag.
     */
    data: XOR<HashtagUpdateInput, HashtagUncheckedUpdateInput>
    /**
     * Choose, which Hashtag to update.
     */
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag updateMany
   */
  export type HashtagUpdateManyArgs = {
    /**
     * The data used to update Hashtags.
     */
    data: XOR<HashtagUpdateManyMutationInput, HashtagUncheckedUpdateManyInput>
    /**
     * Filter which Hashtags to update
     */
    where?: HashtagWhereInput
  }


  /**
   * Hashtag upsert
   */
  export type HashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * The filter to search for the Hashtag to update in case it exists.
     */
    where: HashtagWhereUniqueInput
    /**
     * In case the Hashtag found by the `where` argument doesn't exist, create a new Hashtag with this data.
     */
    create: XOR<HashtagCreateInput, HashtagUncheckedCreateInput>
    /**
     * In case the Hashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HashtagUpdateInput, HashtagUncheckedUpdateInput>
  }


  /**
   * Hashtag delete
   */
  export type HashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
    /**
     * Filter which Hashtag to delete.
     */
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag deleteMany
   */
  export type HashtagDeleteManyArgs = {
    /**
     * Filter which Hashtags to delete
     */
    where?: HashtagWhereInput
  }


  /**
   * Hashtag.postOnHashtag
   */
  export type Hashtag$postOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    where?: PostOnHashtagWhereInput
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    cursor?: PostOnHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PostOnHashtagScalarFieldEnum>
  }


  /**
   * Hashtag without action
   */
  export type HashtagArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
     */
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HashtagInclude | null
  }



  /**
   * Model Reply
   */


  export type AggregateReply = {
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  export type ReplyAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type ReplySumAggregateOutputType = {
    id: number | null
    postId: number | null
    userId: number | null
  }

  export type ReplyMinAggregateOutputType = {
    id: number | null
    postId: number | null
    reply: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReplyMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    reply: string | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ReplyCountAggregateOutputType = {
    id: number
    postId: number
    reply: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ReplyAvgAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type ReplySumAggregateInputType = {
    id?: true
    postId?: true
    userId?: true
  }

  export type ReplyMinAggregateInputType = {
    id?: true
    postId?: true
    reply?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReplyMaxAggregateInputType = {
    id?: true
    postId?: true
    reply?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ReplyCountAggregateInputType = {
    id?: true
    postId?: true
    reply?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ReplyAggregateArgs = {
    /**
     * Filter which Reply to aggregate.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Replies
    **/
    _count?: true | ReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReplyMaxAggregateInputType
  }

  export type GetReplyAggregateType<T extends ReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReply[P]>
      : GetScalarType<T[P], AggregateReply[P]>
  }




  export type ReplyGroupByArgs = {
    where?: ReplyWhereInput
    orderBy?: Enumerable<ReplyOrderByWithAggregationInput>
    by: ReplyScalarFieldEnum[]
    having?: ReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReplyCountAggregateInputType | true
    _avg?: ReplyAvgAggregateInputType
    _sum?: ReplySumAggregateInputType
    _min?: ReplyMinAggregateInputType
    _max?: ReplyMaxAggregateInputType
  }


  export type ReplyGroupByOutputType = {
    id: number
    postId: number
    reply: string
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: ReplyCountAggregateOutputType | null
    _avg: ReplyAvgAggregateOutputType | null
    _sum: ReplySumAggregateOutputType | null
    _min: ReplyMinAggregateOutputType | null
    _max: ReplyMaxAggregateOutputType | null
  }

  type GetReplyGroupByPayload<T extends ReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReplyGroupByOutputType[P]>
            : GetScalarType<T[P], ReplyGroupByOutputType[P]>
        }
      >
    >


  export type ReplySelect = {
    id?: boolean
    post?: boolean | PostArgs
    postId?: boolean
    reply?: boolean
    replyUser?: boolean | UserArgs
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type ReplyInclude = {
    post?: boolean | PostArgs
    replyUser?: boolean | UserArgs
  }

  export type ReplyGetPayload<S extends boolean | null | undefined | ReplyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Reply :
    S extends undefined ? never :
    S extends { include: any } & (ReplyArgs | ReplyFindManyArgs)
    ? Reply  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'replyUser' ? UserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ReplyArgs | ReplyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'replyUser' ? UserGetPayload<S['select'][P]> :  P extends keyof Reply ? Reply[P] : never
  } 
      : Reply


  type ReplyCountArgs = 
    Omit<ReplyFindManyArgs, 'select' | 'include'> & {
      select?: ReplyCountAggregateInputType | true
    }

  export interface ReplyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Reply that matches the filter.
     * @param {ReplyFindUniqueArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReplyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReplyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Reply'> extends True ? Prisma__ReplyClient<ReplyGetPayload<T>> : Prisma__ReplyClient<ReplyGetPayload<T> | null, null>

    /**
     * Find one Reply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReplyFindUniqueOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReplyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReplyFindUniqueOrThrowArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Find the first Reply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReplyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReplyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Reply'> extends True ? Prisma__ReplyClient<ReplyGetPayload<T>> : Prisma__ReplyClient<ReplyGetPayload<T> | null, null>

    /**
     * Find the first Reply that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindFirstOrThrowArgs} args - Arguments to find a Reply
     * @example
     * // Get one Reply
     * const reply = await prisma.reply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReplyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReplyFindFirstOrThrowArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Find zero or more Replies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replies
     * const replies = await prisma.reply.findMany()
     * 
     * // Get first 10 Replies
     * const replies = await prisma.reply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replyWithIdOnly = await prisma.reply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReplyFindManyArgs>(
      args?: SelectSubset<T, ReplyFindManyArgs>
    ): Prisma.PrismaPromise<Array<ReplyGetPayload<T>>>

    /**
     * Create a Reply.
     * @param {ReplyCreateArgs} args - Arguments to create a Reply.
     * @example
     * // Create one Reply
     * const Reply = await prisma.reply.create({
     *   data: {
     *     // ... data to create a Reply
     *   }
     * })
     * 
    **/
    create<T extends ReplyCreateArgs>(
      args: SelectSubset<T, ReplyCreateArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Create many Replies.
     *     @param {ReplyCreateManyArgs} args - Arguments to create many Replies.
     *     @example
     *     // Create many Replies
     *     const reply = await prisma.reply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReplyCreateManyArgs>(
      args?: SelectSubset<T, ReplyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Reply.
     * @param {ReplyDeleteArgs} args - Arguments to delete one Reply.
     * @example
     * // Delete one Reply
     * const Reply = await prisma.reply.delete({
     *   where: {
     *     // ... filter to delete one Reply
     *   }
     * })
     * 
    **/
    delete<T extends ReplyDeleteArgs>(
      args: SelectSubset<T, ReplyDeleteArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Update one Reply.
     * @param {ReplyUpdateArgs} args - Arguments to update one Reply.
     * @example
     * // Update one Reply
     * const reply = await prisma.reply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReplyUpdateArgs>(
      args: SelectSubset<T, ReplyUpdateArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Delete zero or more Replies.
     * @param {ReplyDeleteManyArgs} args - Arguments to filter Replies to delete.
     * @example
     * // Delete a few Replies
     * const { count } = await prisma.reply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReplyDeleteManyArgs>(
      args?: SelectSubset<T, ReplyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replies
     * const reply = await prisma.reply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReplyUpdateManyArgs>(
      args: SelectSubset<T, ReplyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Reply.
     * @param {ReplyUpsertArgs} args - Arguments to update or create a Reply.
     * @example
     * // Update or create a Reply
     * const reply = await prisma.reply.upsert({
     *   create: {
     *     // ... data to create a Reply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reply we want to update
     *   }
     * })
    **/
    upsert<T extends ReplyUpsertArgs>(
      args: SelectSubset<T, ReplyUpsertArgs>
    ): Prisma__ReplyClient<ReplyGetPayload<T>>

    /**
     * Count the number of Replies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyCountArgs} args - Arguments to filter Replies to count.
     * @example
     * // Count the number of Replies
     * const count = await prisma.reply.count({
     *   where: {
     *     // ... the filter for the Replies we want to count
     *   }
     * })
    **/
    count<T extends ReplyCountArgs>(
      args?: Subset<T, ReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplyAggregateArgs>(args: Subset<T, ReplyAggregateArgs>): Prisma.PrismaPromise<GetReplyAggregateType<T>>

    /**
     * Group by Reply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReplyGroupByArgs['orderBy'] }
        : { orderBy?: ReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Reply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReplyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    replyUser<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Reply base type for findUnique actions
   */
  export type ReplyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }

  /**
   * Reply findUnique
   */
  export interface ReplyFindUniqueArgs extends ReplyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reply findUniqueOrThrow
   */
  export type ReplyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter, which Reply to fetch.
     */
    where: ReplyWhereUniqueInput
  }


  /**
   * Reply base type for findFirst actions
   */
  export type ReplyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: Enumerable<ReplyScalarFieldEnum>
  }

  /**
   * Reply findFirst
   */
  export interface ReplyFindFirstArgs extends ReplyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Reply findFirstOrThrow
   */
  export type ReplyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter, which Reply to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Replies.
     */
    distinct?: Enumerable<ReplyScalarFieldEnum>
  }


  /**
   * Reply findMany
   */
  export type ReplyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter, which Replies to fetch.
     */
    where?: ReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Replies to fetch.
     */
    orderBy?: Enumerable<ReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Replies.
     */
    cursor?: ReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replies.
     */
    skip?: number
    distinct?: Enumerable<ReplyScalarFieldEnum>
  }


  /**
   * Reply create
   */
  export type ReplyCreateArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * The data needed to create a Reply.
     */
    data: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
  }


  /**
   * Reply createMany
   */
  export type ReplyCreateManyArgs = {
    /**
     * The data used to create many Replies.
     */
    data: Enumerable<ReplyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Reply update
   */
  export type ReplyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * The data needed to update a Reply.
     */
    data: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
    /**
     * Choose, which Reply to update.
     */
    where: ReplyWhereUniqueInput
  }


  /**
   * Reply updateMany
   */
  export type ReplyUpdateManyArgs = {
    /**
     * The data used to update Replies.
     */
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyInput>
    /**
     * Filter which Replies to update
     */
    where?: ReplyWhereInput
  }


  /**
   * Reply upsert
   */
  export type ReplyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * The filter to search for the Reply to update in case it exists.
     */
    where: ReplyWhereUniqueInput
    /**
     * In case the Reply found by the `where` argument doesn't exist, create a new Reply with this data.
     */
    create: XOR<ReplyCreateInput, ReplyUncheckedCreateInput>
    /**
     * In case the Reply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReplyUpdateInput, ReplyUncheckedUpdateInput>
  }


  /**
   * Reply delete
   */
  export type ReplyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
    /**
     * Filter which Reply to delete.
     */
    where: ReplyWhereUniqueInput
  }


  /**
   * Reply deleteMany
   */
  export type ReplyDeleteManyArgs = {
    /**
     * Filter which Replies to delete
     */
    where?: ReplyWhereInput
  }


  /**
   * Reply without action
   */
  export type ReplyArgs = {
    /**
     * Select specific fields to fetch from the Reply
     */
    select?: ReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReplyInclude | null
  }



  /**
   * Model PostOnHashtag
   */


  export type AggregatePostOnHashtag = {
    _count: PostOnHashtagCountAggregateOutputType | null
    _avg: PostOnHashtagAvgAggregateOutputType | null
    _sum: PostOnHashtagSumAggregateOutputType | null
    _min: PostOnHashtagMinAggregateOutputType | null
    _max: PostOnHashtagMaxAggregateOutputType | null
  }

  export type PostOnHashtagAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
  }

  export type PostOnHashtagSumAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
  }

  export type PostOnHashtagMinAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostOnHashtagMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    hashtagId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PostOnHashtagCountAggregateOutputType = {
    id: number
    postId: number
    hashtagId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PostOnHashtagAvgAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
  }

  export type PostOnHashtagSumAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
  }

  export type PostOnHashtagMinAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostOnHashtagMaxAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PostOnHashtagCountAggregateInputType = {
    id?: true
    postId?: true
    hashtagId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PostOnHashtagAggregateArgs = {
    /**
     * Filter which PostOnHashtag to aggregate.
     */
    where?: PostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostOnHashtags to fetch.
     */
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostOnHashtags
    **/
    _count?: true | PostOnHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostOnHashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostOnHashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostOnHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostOnHashtagMaxAggregateInputType
  }

  export type GetPostOnHashtagAggregateType<T extends PostOnHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregatePostOnHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostOnHashtag[P]>
      : GetScalarType<T[P], AggregatePostOnHashtag[P]>
  }




  export type PostOnHashtagGroupByArgs = {
    where?: PostOnHashtagWhereInput
    orderBy?: Enumerable<PostOnHashtagOrderByWithAggregationInput>
    by: PostOnHashtagScalarFieldEnum[]
    having?: PostOnHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostOnHashtagCountAggregateInputType | true
    _avg?: PostOnHashtagAvgAggregateInputType
    _sum?: PostOnHashtagSumAggregateInputType
    _min?: PostOnHashtagMinAggregateInputType
    _max?: PostOnHashtagMaxAggregateInputType
  }


  export type PostOnHashtagGroupByOutputType = {
    id: number
    postId: number
    hashtagId: number
    createdAt: Date
    updatedAt: Date
    _count: PostOnHashtagCountAggregateOutputType | null
    _avg: PostOnHashtagAvgAggregateOutputType | null
    _sum: PostOnHashtagSumAggregateOutputType | null
    _min: PostOnHashtagMinAggregateOutputType | null
    _max: PostOnHashtagMaxAggregateOutputType | null
  }

  type GetPostOnHashtagGroupByPayload<T extends PostOnHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PostOnHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostOnHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostOnHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], PostOnHashtagGroupByOutputType[P]>
        }
      >
    >


  export type PostOnHashtagSelect = {
    id?: boolean
    post?: boolean | PostArgs
    hashtag?: boolean | HashtagArgs
    postId?: boolean
    hashtagId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type PostOnHashtagInclude = {
    post?: boolean | PostArgs
    hashtag?: boolean | HashtagArgs
  }

  export type PostOnHashtagGetPayload<S extends boolean | null | undefined | PostOnHashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? PostOnHashtag :
    S extends undefined ? never :
    S extends { include: any } & (PostOnHashtagArgs | PostOnHashtagFindManyArgs)
    ? PostOnHashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? PostGetPayload<S['include'][P]> :
        P extends 'hashtag' ? HashtagGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (PostOnHashtagArgs | PostOnHashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? PostGetPayload<S['select'][P]> :
        P extends 'hashtag' ? HashtagGetPayload<S['select'][P]> :  P extends keyof PostOnHashtag ? PostOnHashtag[P] : never
  } 
      : PostOnHashtag


  type PostOnHashtagCountArgs = 
    Omit<PostOnHashtagFindManyArgs, 'select' | 'include'> & {
      select?: PostOnHashtagCountAggregateInputType | true
    }

  export interface PostOnHashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one PostOnHashtag that matches the filter.
     * @param {PostOnHashtagFindUniqueArgs} args - Arguments to find a PostOnHashtag
     * @example
     * // Get one PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostOnHashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PostOnHashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PostOnHashtag'> extends True ? Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>> : Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T> | null, null>

    /**
     * Find one PostOnHashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostOnHashtagFindUniqueOrThrowArgs} args - Arguments to find a PostOnHashtag
     * @example
     * // Get one PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostOnHashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PostOnHashtagFindUniqueOrThrowArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Find the first PostOnHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagFindFirstArgs} args - Arguments to find a PostOnHashtag
     * @example
     * // Get one PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostOnHashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PostOnHashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PostOnHashtag'> extends True ? Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>> : Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T> | null, null>

    /**
     * Find the first PostOnHashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagFindFirstOrThrowArgs} args - Arguments to find a PostOnHashtag
     * @example
     * // Get one PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostOnHashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PostOnHashtagFindFirstOrThrowArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Find zero or more PostOnHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostOnHashtags
     * const postOnHashtags = await prisma.postOnHashtag.findMany()
     * 
     * // Get first 10 PostOnHashtags
     * const postOnHashtags = await prisma.postOnHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postOnHashtagWithIdOnly = await prisma.postOnHashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostOnHashtagFindManyArgs>(
      args?: SelectSubset<T, PostOnHashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<PostOnHashtagGetPayload<T>>>

    /**
     * Create a PostOnHashtag.
     * @param {PostOnHashtagCreateArgs} args - Arguments to create a PostOnHashtag.
     * @example
     * // Create one PostOnHashtag
     * const PostOnHashtag = await prisma.postOnHashtag.create({
     *   data: {
     *     // ... data to create a PostOnHashtag
     *   }
     * })
     * 
    **/
    create<T extends PostOnHashtagCreateArgs>(
      args: SelectSubset<T, PostOnHashtagCreateArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Create many PostOnHashtags.
     *     @param {PostOnHashtagCreateManyArgs} args - Arguments to create many PostOnHashtags.
     *     @example
     *     // Create many PostOnHashtags
     *     const postOnHashtag = await prisma.postOnHashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostOnHashtagCreateManyArgs>(
      args?: SelectSubset<T, PostOnHashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostOnHashtag.
     * @param {PostOnHashtagDeleteArgs} args - Arguments to delete one PostOnHashtag.
     * @example
     * // Delete one PostOnHashtag
     * const PostOnHashtag = await prisma.postOnHashtag.delete({
     *   where: {
     *     // ... filter to delete one PostOnHashtag
     *   }
     * })
     * 
    **/
    delete<T extends PostOnHashtagDeleteArgs>(
      args: SelectSubset<T, PostOnHashtagDeleteArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Update one PostOnHashtag.
     * @param {PostOnHashtagUpdateArgs} args - Arguments to update one PostOnHashtag.
     * @example
     * // Update one PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostOnHashtagUpdateArgs>(
      args: SelectSubset<T, PostOnHashtagUpdateArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Delete zero or more PostOnHashtags.
     * @param {PostOnHashtagDeleteManyArgs} args - Arguments to filter PostOnHashtags to delete.
     * @example
     * // Delete a few PostOnHashtags
     * const { count } = await prisma.postOnHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostOnHashtagDeleteManyArgs>(
      args?: SelectSubset<T, PostOnHashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostOnHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostOnHashtags
     * const postOnHashtag = await prisma.postOnHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostOnHashtagUpdateManyArgs>(
      args: SelectSubset<T, PostOnHashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostOnHashtag.
     * @param {PostOnHashtagUpsertArgs} args - Arguments to update or create a PostOnHashtag.
     * @example
     * // Update or create a PostOnHashtag
     * const postOnHashtag = await prisma.postOnHashtag.upsert({
     *   create: {
     *     // ... data to create a PostOnHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostOnHashtag we want to update
     *   }
     * })
    **/
    upsert<T extends PostOnHashtagUpsertArgs>(
      args: SelectSubset<T, PostOnHashtagUpsertArgs>
    ): Prisma__PostOnHashtagClient<PostOnHashtagGetPayload<T>>

    /**
     * Count the number of PostOnHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagCountArgs} args - Arguments to filter PostOnHashtags to count.
     * @example
     * // Count the number of PostOnHashtags
     * const count = await prisma.postOnHashtag.count({
     *   where: {
     *     // ... the filter for the PostOnHashtags we want to count
     *   }
     * })
    **/
    count<T extends PostOnHashtagCountArgs>(
      args?: Subset<T, PostOnHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostOnHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostOnHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostOnHashtagAggregateArgs>(args: Subset<T, PostOnHashtagAggregateArgs>): Prisma.PrismaPromise<GetPostOnHashtagAggregateType<T>>

    /**
     * Group by PostOnHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostOnHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostOnHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostOnHashtagGroupByArgs['orderBy'] }
        : { orderBy?: PostOnHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostOnHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostOnHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PostOnHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PostOnHashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends PostArgs= {}>(args?: Subset<T, PostArgs>): Prisma__PostClient<PostGetPayload<T> | Null>;

    hashtag<T extends HashtagArgs= {}>(args?: Subset<T, HashtagArgs>): Prisma__HashtagClient<HashtagGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PostOnHashtag base type for findUnique actions
   */
  export type PostOnHashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter, which PostOnHashtag to fetch.
     */
    where: PostOnHashtagWhereUniqueInput
  }

  /**
   * PostOnHashtag findUnique
   */
  export interface PostOnHashtagFindUniqueArgs extends PostOnHashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostOnHashtag findUniqueOrThrow
   */
  export type PostOnHashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter, which PostOnHashtag to fetch.
     */
    where: PostOnHashtagWhereUniqueInput
  }


  /**
   * PostOnHashtag base type for findFirst actions
   */
  export type PostOnHashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter, which PostOnHashtag to fetch.
     */
    where?: PostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostOnHashtags to fetch.
     */
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostOnHashtags.
     */
    cursor?: PostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostOnHashtags.
     */
    distinct?: Enumerable<PostOnHashtagScalarFieldEnum>
  }

  /**
   * PostOnHashtag findFirst
   */
  export interface PostOnHashtagFindFirstArgs extends PostOnHashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PostOnHashtag findFirstOrThrow
   */
  export type PostOnHashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter, which PostOnHashtag to fetch.
     */
    where?: PostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostOnHashtags to fetch.
     */
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostOnHashtags.
     */
    cursor?: PostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostOnHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostOnHashtags.
     */
    distinct?: Enumerable<PostOnHashtagScalarFieldEnum>
  }


  /**
   * PostOnHashtag findMany
   */
  export type PostOnHashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter, which PostOnHashtags to fetch.
     */
    where?: PostOnHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostOnHashtags to fetch.
     */
    orderBy?: Enumerable<PostOnHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostOnHashtags.
     */
    cursor?: PostOnHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostOnHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostOnHashtags.
     */
    skip?: number
    distinct?: Enumerable<PostOnHashtagScalarFieldEnum>
  }


  /**
   * PostOnHashtag create
   */
  export type PostOnHashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * The data needed to create a PostOnHashtag.
     */
    data: XOR<PostOnHashtagCreateInput, PostOnHashtagUncheckedCreateInput>
  }


  /**
   * PostOnHashtag createMany
   */
  export type PostOnHashtagCreateManyArgs = {
    /**
     * The data used to create many PostOnHashtags.
     */
    data: Enumerable<PostOnHashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PostOnHashtag update
   */
  export type PostOnHashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * The data needed to update a PostOnHashtag.
     */
    data: XOR<PostOnHashtagUpdateInput, PostOnHashtagUncheckedUpdateInput>
    /**
     * Choose, which PostOnHashtag to update.
     */
    where: PostOnHashtagWhereUniqueInput
  }


  /**
   * PostOnHashtag updateMany
   */
  export type PostOnHashtagUpdateManyArgs = {
    /**
     * The data used to update PostOnHashtags.
     */
    data: XOR<PostOnHashtagUpdateManyMutationInput, PostOnHashtagUncheckedUpdateManyInput>
    /**
     * Filter which PostOnHashtags to update
     */
    where?: PostOnHashtagWhereInput
  }


  /**
   * PostOnHashtag upsert
   */
  export type PostOnHashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * The filter to search for the PostOnHashtag to update in case it exists.
     */
    where: PostOnHashtagWhereUniqueInput
    /**
     * In case the PostOnHashtag found by the `where` argument doesn't exist, create a new PostOnHashtag with this data.
     */
    create: XOR<PostOnHashtagCreateInput, PostOnHashtagUncheckedCreateInput>
    /**
     * In case the PostOnHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostOnHashtagUpdateInput, PostOnHashtagUncheckedUpdateInput>
  }


  /**
   * PostOnHashtag delete
   */
  export type PostOnHashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
    /**
     * Filter which PostOnHashtag to delete.
     */
    where: PostOnHashtagWhereUniqueInput
  }


  /**
   * PostOnHashtag deleteMany
   */
  export type PostOnHashtagDeleteManyArgs = {
    /**
     * Filter which PostOnHashtags to delete
     */
    where?: PostOnHashtagWhereInput
  }


  /**
   * PostOnHashtag without action
   */
  export type PostOnHashtagArgs = {
    /**
     * Select specific fields to fetch from the PostOnHashtag
     */
    select?: PostOnHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostOnHashtagInclude | null
  }



  /**
   * Model WashingBranch
   */


  export type AggregateWashingBranch = {
    _count: WashingBranchCountAggregateOutputType | null
    _avg: WashingBranchAvgAggregateOutputType | null
    _sum: WashingBranchSumAggregateOutputType | null
    _min: WashingBranchMinAggregateOutputType | null
    _max: WashingBranchMaxAggregateOutputType | null
  }

  export type WashingBranchAvgAggregateOutputType = {
    id: number | null
    area: number | null
  }

  export type WashingBranchSumAggregateOutputType = {
    id: number | null
    area: number | null
  }

  export type WashingBranchMinAggregateOutputType = {
    id: number | null
    branchName: string | null
    address: string | null
    tel: string | null
    area: number | null
    ownerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingBranchMaxAggregateOutputType = {
    id: number | null
    branchName: string | null
    address: string | null
    tel: string | null
    area: number | null
    ownerName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingBranchCountAggregateOutputType = {
    id: number
    branchName: number
    address: number
    tel: number
    area: number
    ownerName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingBranchAvgAggregateInputType = {
    id?: true
    area?: true
  }

  export type WashingBranchSumAggregateInputType = {
    id?: true
    area?: true
  }

  export type WashingBranchMinAggregateInputType = {
    id?: true
    branchName?: true
    address?: true
    tel?: true
    area?: true
    ownerName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingBranchMaxAggregateInputType = {
    id?: true
    branchName?: true
    address?: true
    tel?: true
    area?: true
    ownerName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingBranchCountAggregateInputType = {
    id?: true
    branchName?: true
    address?: true
    tel?: true
    area?: true
    ownerName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingBranchAggregateArgs = {
    /**
     * Filter which WashingBranch to aggregate.
     */
    where?: WashingBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingBranches to fetch.
     */
    orderBy?: Enumerable<WashingBranchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingBranches
    **/
    _count?: true | WashingBranchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingBranchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingBranchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingBranchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingBranchMaxAggregateInputType
  }

  export type GetWashingBranchAggregateType<T extends WashingBranchAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingBranch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingBranch[P]>
      : GetScalarType<T[P], AggregateWashingBranch[P]>
  }




  export type WashingBranchGroupByArgs = {
    where?: WashingBranchWhereInput
    orderBy?: Enumerable<WashingBranchOrderByWithAggregationInput>
    by: WashingBranchScalarFieldEnum[]
    having?: WashingBranchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingBranchCountAggregateInputType | true
    _avg?: WashingBranchAvgAggregateInputType
    _sum?: WashingBranchSumAggregateInputType
    _min?: WashingBranchMinAggregateInputType
    _max?: WashingBranchMaxAggregateInputType
  }


  export type WashingBranchGroupByOutputType = {
    id: number
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt: Date
    updatedAt: Date
    _count: WashingBranchCountAggregateOutputType | null
    _avg: WashingBranchAvgAggregateOutputType | null
    _sum: WashingBranchSumAggregateOutputType | null
    _min: WashingBranchMinAggregateOutputType | null
    _max: WashingBranchMaxAggregateOutputType | null
  }

  type GetWashingBranchGroupByPayload<T extends WashingBranchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingBranchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingBranchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingBranchGroupByOutputType[P]>
            : GetScalarType<T[P], WashingBranchGroupByOutputType[P]>
        }
      >
    >


  export type WashingBranchSelect = {
    id?: boolean
    branchName?: boolean
    address?: boolean
    tel?: boolean
    area?: boolean
    ownerName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    WashingMachine?: boolean | WashingBranch$WashingMachineArgs
    WashingUseHistory?: boolean | WashingBranch$WashingUseHistoryArgs
    _count?: boolean | WashingBranchCountOutputTypeArgs
  }


  export type WashingBranchInclude = {
    WashingMachine?: boolean | WashingBranch$WashingMachineArgs
    WashingUseHistory?: boolean | WashingBranch$WashingUseHistoryArgs
    _count?: boolean | WashingBranchCountOutputTypeArgs
  }

  export type WashingBranchGetPayload<S extends boolean | null | undefined | WashingBranchArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingBranch :
    S extends undefined ? never :
    S extends { include: any } & (WashingBranchArgs | WashingBranchFindManyArgs)
    ? WashingBranch  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'WashingMachine' ? Array < WashingMachineGetPayload<S['include'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? WashingBranchCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingBranchArgs | WashingBranchFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'WashingMachine' ? Array < WashingMachineGetPayload<S['select'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? WashingBranchCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WashingBranch ? WashingBranch[P] : never
  } 
      : WashingBranch


  type WashingBranchCountArgs = 
    Omit<WashingBranchFindManyArgs, 'select' | 'include'> & {
      select?: WashingBranchCountAggregateInputType | true
    }

  export interface WashingBranchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingBranch that matches the filter.
     * @param {WashingBranchFindUniqueArgs} args - Arguments to find a WashingBranch
     * @example
     * // Get one WashingBranch
     * const washingBranch = await prisma.washingBranch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingBranchFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingBranchFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingBranch'> extends True ? Prisma__WashingBranchClient<WashingBranchGetPayload<T>> : Prisma__WashingBranchClient<WashingBranchGetPayload<T> | null, null>

    /**
     * Find one WashingBranch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingBranchFindUniqueOrThrowArgs} args - Arguments to find a WashingBranch
     * @example
     * // Get one WashingBranch
     * const washingBranch = await prisma.washingBranch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingBranchFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingBranchFindUniqueOrThrowArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Find the first WashingBranch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchFindFirstArgs} args - Arguments to find a WashingBranch
     * @example
     * // Get one WashingBranch
     * const washingBranch = await prisma.washingBranch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingBranchFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingBranchFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingBranch'> extends True ? Prisma__WashingBranchClient<WashingBranchGetPayload<T>> : Prisma__WashingBranchClient<WashingBranchGetPayload<T> | null, null>

    /**
     * Find the first WashingBranch that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchFindFirstOrThrowArgs} args - Arguments to find a WashingBranch
     * @example
     * // Get one WashingBranch
     * const washingBranch = await prisma.washingBranch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingBranchFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingBranchFindFirstOrThrowArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Find zero or more WashingBranches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingBranches
     * const washingBranches = await prisma.washingBranch.findMany()
     * 
     * // Get first 10 WashingBranches
     * const washingBranches = await prisma.washingBranch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingBranchWithIdOnly = await prisma.washingBranch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingBranchFindManyArgs>(
      args?: SelectSubset<T, WashingBranchFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingBranchGetPayload<T>>>

    /**
     * Create a WashingBranch.
     * @param {WashingBranchCreateArgs} args - Arguments to create a WashingBranch.
     * @example
     * // Create one WashingBranch
     * const WashingBranch = await prisma.washingBranch.create({
     *   data: {
     *     // ... data to create a WashingBranch
     *   }
     * })
     * 
    **/
    create<T extends WashingBranchCreateArgs>(
      args: SelectSubset<T, WashingBranchCreateArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Create many WashingBranches.
     *     @param {WashingBranchCreateManyArgs} args - Arguments to create many WashingBranches.
     *     @example
     *     // Create many WashingBranches
     *     const washingBranch = await prisma.washingBranch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingBranchCreateManyArgs>(
      args?: SelectSubset<T, WashingBranchCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingBranch.
     * @param {WashingBranchDeleteArgs} args - Arguments to delete one WashingBranch.
     * @example
     * // Delete one WashingBranch
     * const WashingBranch = await prisma.washingBranch.delete({
     *   where: {
     *     // ... filter to delete one WashingBranch
     *   }
     * })
     * 
    **/
    delete<T extends WashingBranchDeleteArgs>(
      args: SelectSubset<T, WashingBranchDeleteArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Update one WashingBranch.
     * @param {WashingBranchUpdateArgs} args - Arguments to update one WashingBranch.
     * @example
     * // Update one WashingBranch
     * const washingBranch = await prisma.washingBranch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingBranchUpdateArgs>(
      args: SelectSubset<T, WashingBranchUpdateArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Delete zero or more WashingBranches.
     * @param {WashingBranchDeleteManyArgs} args - Arguments to filter WashingBranches to delete.
     * @example
     * // Delete a few WashingBranches
     * const { count } = await prisma.washingBranch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingBranchDeleteManyArgs>(
      args?: SelectSubset<T, WashingBranchDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingBranches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingBranches
     * const washingBranch = await prisma.washingBranch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingBranchUpdateManyArgs>(
      args: SelectSubset<T, WashingBranchUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingBranch.
     * @param {WashingBranchUpsertArgs} args - Arguments to update or create a WashingBranch.
     * @example
     * // Update or create a WashingBranch
     * const washingBranch = await prisma.washingBranch.upsert({
     *   create: {
     *     // ... data to create a WashingBranch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingBranch we want to update
     *   }
     * })
    **/
    upsert<T extends WashingBranchUpsertArgs>(
      args: SelectSubset<T, WashingBranchUpsertArgs>
    ): Prisma__WashingBranchClient<WashingBranchGetPayload<T>>

    /**
     * Count the number of WashingBranches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchCountArgs} args - Arguments to filter WashingBranches to count.
     * @example
     * // Count the number of WashingBranches
     * const count = await prisma.washingBranch.count({
     *   where: {
     *     // ... the filter for the WashingBranches we want to count
     *   }
     * })
    **/
    count<T extends WashingBranchCountArgs>(
      args?: Subset<T, WashingBranchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingBranchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingBranch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingBranchAggregateArgs>(args: Subset<T, WashingBranchAggregateArgs>): Prisma.PrismaPromise<GetWashingBranchAggregateType<T>>

    /**
     * Group by WashingBranch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingBranchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingBranchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingBranchGroupByArgs['orderBy'] }
        : { orderBy?: WashingBranchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingBranchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingBranchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingBranch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingBranchClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    WashingMachine<T extends WashingBranch$WashingMachineArgs= {}>(args?: Subset<T, WashingBranch$WashingMachineArgs>): Prisma.PrismaPromise<Array<WashingMachineGetPayload<T>>| Null>;

    WashingUseHistory<T extends WashingBranch$WashingUseHistoryArgs= {}>(args?: Subset<T, WashingBranch$WashingUseHistoryArgs>): Prisma.PrismaPromise<Array<WashingUseHistoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingBranch base type for findUnique actions
   */
  export type WashingBranchFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter, which WashingBranch to fetch.
     */
    where: WashingBranchWhereUniqueInput
  }

  /**
   * WashingBranch findUnique
   */
  export interface WashingBranchFindUniqueArgs extends WashingBranchFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingBranch findUniqueOrThrow
   */
  export type WashingBranchFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter, which WashingBranch to fetch.
     */
    where: WashingBranchWhereUniqueInput
  }


  /**
   * WashingBranch base type for findFirst actions
   */
  export type WashingBranchFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter, which WashingBranch to fetch.
     */
    where?: WashingBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingBranches to fetch.
     */
    orderBy?: Enumerable<WashingBranchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingBranches.
     */
    cursor?: WashingBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingBranches.
     */
    distinct?: Enumerable<WashingBranchScalarFieldEnum>
  }

  /**
   * WashingBranch findFirst
   */
  export interface WashingBranchFindFirstArgs extends WashingBranchFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingBranch findFirstOrThrow
   */
  export type WashingBranchFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter, which WashingBranch to fetch.
     */
    where?: WashingBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingBranches to fetch.
     */
    orderBy?: Enumerable<WashingBranchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingBranches.
     */
    cursor?: WashingBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingBranches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingBranches.
     */
    distinct?: Enumerable<WashingBranchScalarFieldEnum>
  }


  /**
   * WashingBranch findMany
   */
  export type WashingBranchFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter, which WashingBranches to fetch.
     */
    where?: WashingBranchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingBranches to fetch.
     */
    orderBy?: Enumerable<WashingBranchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingBranches.
     */
    cursor?: WashingBranchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingBranches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingBranches.
     */
    skip?: number
    distinct?: Enumerable<WashingBranchScalarFieldEnum>
  }


  /**
   * WashingBranch create
   */
  export type WashingBranchCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * The data needed to create a WashingBranch.
     */
    data: XOR<WashingBranchCreateInput, WashingBranchUncheckedCreateInput>
  }


  /**
   * WashingBranch createMany
   */
  export type WashingBranchCreateManyArgs = {
    /**
     * The data used to create many WashingBranches.
     */
    data: Enumerable<WashingBranchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingBranch update
   */
  export type WashingBranchUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * The data needed to update a WashingBranch.
     */
    data: XOR<WashingBranchUpdateInput, WashingBranchUncheckedUpdateInput>
    /**
     * Choose, which WashingBranch to update.
     */
    where: WashingBranchWhereUniqueInput
  }


  /**
   * WashingBranch updateMany
   */
  export type WashingBranchUpdateManyArgs = {
    /**
     * The data used to update WashingBranches.
     */
    data: XOR<WashingBranchUpdateManyMutationInput, WashingBranchUncheckedUpdateManyInput>
    /**
     * Filter which WashingBranches to update
     */
    where?: WashingBranchWhereInput
  }


  /**
   * WashingBranch upsert
   */
  export type WashingBranchUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * The filter to search for the WashingBranch to update in case it exists.
     */
    where: WashingBranchWhereUniqueInput
    /**
     * In case the WashingBranch found by the `where` argument doesn't exist, create a new WashingBranch with this data.
     */
    create: XOR<WashingBranchCreateInput, WashingBranchUncheckedCreateInput>
    /**
     * In case the WashingBranch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingBranchUpdateInput, WashingBranchUncheckedUpdateInput>
  }


  /**
   * WashingBranch delete
   */
  export type WashingBranchDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
    /**
     * Filter which WashingBranch to delete.
     */
    where: WashingBranchWhereUniqueInput
  }


  /**
   * WashingBranch deleteMany
   */
  export type WashingBranchDeleteManyArgs = {
    /**
     * Filter which WashingBranches to delete
     */
    where?: WashingBranchWhereInput
  }


  /**
   * WashingBranch.WashingMachine
   */
  export type WashingBranch$WashingMachineArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    where?: WashingMachineWhereInput
    orderBy?: Enumerable<WashingMachineOrderByWithRelationInput>
    cursor?: WashingMachineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingMachineScalarFieldEnum>
  }


  /**
   * WashingBranch.WashingUseHistory
   */
  export type WashingBranch$WashingUseHistoryArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    where?: WashingUseHistoryWhereInput
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    cursor?: WashingUseHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingBranch without action
   */
  export type WashingBranchArgs = {
    /**
     * Select specific fields to fetch from the WashingBranch
     */
    select?: WashingBranchSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingBranchInclude | null
  }



  /**
   * Model WashingMachine
   */


  export type AggregateWashingMachine = {
    _count: WashingMachineCountAggregateOutputType | null
    _avg: WashingMachineAvgAggregateOutputType | null
    _sum: WashingMachineSumAggregateOutputType | null
    _min: WashingMachineMinAggregateOutputType | null
    _max: WashingMachineMaxAggregateOutputType | null
  }

  export type WashingMachineAvgAggregateOutputType = {
    id: number | null
    branchId: number | null
    weight: number | null
  }

  export type WashingMachineSumAggregateOutputType = {
    id: number | null
    branchId: number | null
    weight: number | null
  }

  export type WashingMachineMinAggregateOutputType = {
    id: number | null
    branchId: number | null
    brand: string | null
    weight: number | null
    type: string | null
    productionYear: Date | null
    warrantyEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineMaxAggregateOutputType = {
    id: number | null
    branchId: number | null
    brand: string | null
    weight: number | null
    type: string | null
    productionYear: Date | null
    warrantyEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineCountAggregateOutputType = {
    id: number
    branchId: number
    brand: number
    weight: number
    type: number
    productionYear: number
    warrantyEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingMachineAvgAggregateInputType = {
    id?: true
    branchId?: true
    weight?: true
  }

  export type WashingMachineSumAggregateInputType = {
    id?: true
    branchId?: true
    weight?: true
  }

  export type WashingMachineMinAggregateInputType = {
    id?: true
    branchId?: true
    brand?: true
    weight?: true
    type?: true
    productionYear?: true
    warrantyEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineMaxAggregateInputType = {
    id?: true
    branchId?: true
    brand?: true
    weight?: true
    type?: true
    productionYear?: true
    warrantyEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineCountAggregateInputType = {
    id?: true
    branchId?: true
    brand?: true
    weight?: true
    type?: true
    productionYear?: true
    warrantyEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingMachineAggregateArgs = {
    /**
     * Filter which WashingMachine to aggregate.
     */
    where?: WashingMachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachines to fetch.
     */
    orderBy?: Enumerable<WashingMachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingMachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingMachines
    **/
    _count?: true | WashingMachineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingMachineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingMachineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingMachineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingMachineMaxAggregateInputType
  }

  export type GetWashingMachineAggregateType<T extends WashingMachineAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingMachine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingMachine[P]>
      : GetScalarType<T[P], AggregateWashingMachine[P]>
  }




  export type WashingMachineGroupByArgs = {
    where?: WashingMachineWhereInput
    orderBy?: Enumerable<WashingMachineOrderByWithAggregationInput>
    by: WashingMachineScalarFieldEnum[]
    having?: WashingMachineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingMachineCountAggregateInputType | true
    _avg?: WashingMachineAvgAggregateInputType
    _sum?: WashingMachineSumAggregateInputType
    _min?: WashingMachineMinAggregateInputType
    _max?: WashingMachineMaxAggregateInputType
  }


  export type WashingMachineGroupByOutputType = {
    id: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date
    warrantyEnd: Date
    createdAt: Date
    updatedAt: Date
    _count: WashingMachineCountAggregateOutputType | null
    _avg: WashingMachineAvgAggregateOutputType | null
    _sum: WashingMachineSumAggregateOutputType | null
    _min: WashingMachineMinAggregateOutputType | null
    _max: WashingMachineMaxAggregateOutputType | null
  }

  type GetWashingMachineGroupByPayload<T extends WashingMachineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingMachineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingMachineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingMachineGroupByOutputType[P]>
            : GetScalarType<T[P], WashingMachineGroupByOutputType[P]>
        }
      >
    >


  export type WashingMachineSelect = {
    id?: boolean
    branch?: boolean | WashingBranchArgs
    branchId?: boolean
    brand?: boolean
    weight?: boolean
    type?: boolean
    productionYear?: boolean
    warrantyEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    WashingMachineMaintenance?: boolean | WashingMachine$WashingMachineMaintenanceArgs
    WashingUseHistory?: boolean | WashingMachine$WashingUseHistoryArgs
    WashingMachineOnProgram?: boolean | WashingMachine$WashingMachineOnProgramArgs
    _count?: boolean | WashingMachineCountOutputTypeArgs
  }


  export type WashingMachineInclude = {
    branch?: boolean | WashingBranchArgs
    WashingMachineMaintenance?: boolean | WashingMachine$WashingMachineMaintenanceArgs
    WashingUseHistory?: boolean | WashingMachine$WashingUseHistoryArgs
    WashingMachineOnProgram?: boolean | WashingMachine$WashingMachineOnProgramArgs
    _count?: boolean | WashingMachineCountOutputTypeArgs
  }

  export type WashingMachineGetPayload<S extends boolean | null | undefined | WashingMachineArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachine :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineArgs | WashingMachineFindManyArgs)
    ? WashingMachine  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'branch' ? WashingBranchGetPayload<S['include'][P]> :
        P extends 'WashingMachineMaintenance' ? Array < WashingMachineMaintenanceGetPayload<S['include'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['include'][P]>>  :
        P extends 'WashingMachineOnProgram' ? Array < WashingMachineOnProgramGetPayload<S['include'][P]>>  :
        P extends '_count' ? WashingMachineCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingMachineArgs | WashingMachineFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'branch' ? WashingBranchGetPayload<S['select'][P]> :
        P extends 'WashingMachineMaintenance' ? Array < WashingMachineMaintenanceGetPayload<S['select'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['select'][P]>>  :
        P extends 'WashingMachineOnProgram' ? Array < WashingMachineOnProgramGetPayload<S['select'][P]>>  :
        P extends '_count' ? WashingMachineCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WashingMachine ? WashingMachine[P] : never
  } 
      : WashingMachine


  type WashingMachineCountArgs = 
    Omit<WashingMachineFindManyArgs, 'select' | 'include'> & {
      select?: WashingMachineCountAggregateInputType | true
    }

  export interface WashingMachineDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingMachine that matches the filter.
     * @param {WashingMachineFindUniqueArgs} args - Arguments to find a WashingMachine
     * @example
     * // Get one WashingMachine
     * const washingMachine = await prisma.washingMachine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingMachineFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingMachineFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingMachine'> extends True ? Prisma__WashingMachineClient<WashingMachineGetPayload<T>> : Prisma__WashingMachineClient<WashingMachineGetPayload<T> | null, null>

    /**
     * Find one WashingMachine that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingMachineFindUniqueOrThrowArgs} args - Arguments to find a WashingMachine
     * @example
     * // Get one WashingMachine
     * const washingMachine = await prisma.washingMachine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingMachineFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineFindUniqueOrThrowArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Find the first WashingMachine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineFindFirstArgs} args - Arguments to find a WashingMachine
     * @example
     * // Get one WashingMachine
     * const washingMachine = await prisma.washingMachine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingMachineFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingMachineFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingMachine'> extends True ? Prisma__WashingMachineClient<WashingMachineGetPayload<T>> : Prisma__WashingMachineClient<WashingMachineGetPayload<T> | null, null>

    /**
     * Find the first WashingMachine that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineFindFirstOrThrowArgs} args - Arguments to find a WashingMachine
     * @example
     * // Get one WashingMachine
     * const washingMachine = await prisma.washingMachine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingMachineFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineFindFirstOrThrowArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Find zero or more WashingMachines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingMachines
     * const washingMachines = await prisma.washingMachine.findMany()
     * 
     * // Get first 10 WashingMachines
     * const washingMachines = await prisma.washingMachine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingMachineWithIdOnly = await prisma.washingMachine.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingMachineFindManyArgs>(
      args?: SelectSubset<T, WashingMachineFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingMachineGetPayload<T>>>

    /**
     * Create a WashingMachine.
     * @param {WashingMachineCreateArgs} args - Arguments to create a WashingMachine.
     * @example
     * // Create one WashingMachine
     * const WashingMachine = await prisma.washingMachine.create({
     *   data: {
     *     // ... data to create a WashingMachine
     *   }
     * })
     * 
    **/
    create<T extends WashingMachineCreateArgs>(
      args: SelectSubset<T, WashingMachineCreateArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Create many WashingMachines.
     *     @param {WashingMachineCreateManyArgs} args - Arguments to create many WashingMachines.
     *     @example
     *     // Create many WashingMachines
     *     const washingMachine = await prisma.washingMachine.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingMachineCreateManyArgs>(
      args?: SelectSubset<T, WashingMachineCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingMachine.
     * @param {WashingMachineDeleteArgs} args - Arguments to delete one WashingMachine.
     * @example
     * // Delete one WashingMachine
     * const WashingMachine = await prisma.washingMachine.delete({
     *   where: {
     *     // ... filter to delete one WashingMachine
     *   }
     * })
     * 
    **/
    delete<T extends WashingMachineDeleteArgs>(
      args: SelectSubset<T, WashingMachineDeleteArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Update one WashingMachine.
     * @param {WashingMachineUpdateArgs} args - Arguments to update one WashingMachine.
     * @example
     * // Update one WashingMachine
     * const washingMachine = await prisma.washingMachine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingMachineUpdateArgs>(
      args: SelectSubset<T, WashingMachineUpdateArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Delete zero or more WashingMachines.
     * @param {WashingMachineDeleteManyArgs} args - Arguments to filter WashingMachines to delete.
     * @example
     * // Delete a few WashingMachines
     * const { count } = await prisma.washingMachine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingMachineDeleteManyArgs>(
      args?: SelectSubset<T, WashingMachineDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingMachines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingMachines
     * const washingMachine = await prisma.washingMachine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingMachineUpdateManyArgs>(
      args: SelectSubset<T, WashingMachineUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingMachine.
     * @param {WashingMachineUpsertArgs} args - Arguments to update or create a WashingMachine.
     * @example
     * // Update or create a WashingMachine
     * const washingMachine = await prisma.washingMachine.upsert({
     *   create: {
     *     // ... data to create a WashingMachine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingMachine we want to update
     *   }
     * })
    **/
    upsert<T extends WashingMachineUpsertArgs>(
      args: SelectSubset<T, WashingMachineUpsertArgs>
    ): Prisma__WashingMachineClient<WashingMachineGetPayload<T>>

    /**
     * Count the number of WashingMachines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineCountArgs} args - Arguments to filter WashingMachines to count.
     * @example
     * // Count the number of WashingMachines
     * const count = await prisma.washingMachine.count({
     *   where: {
     *     // ... the filter for the WashingMachines we want to count
     *   }
     * })
    **/
    count<T extends WashingMachineCountArgs>(
      args?: Subset<T, WashingMachineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingMachineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingMachine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingMachineAggregateArgs>(args: Subset<T, WashingMachineAggregateArgs>): Prisma.PrismaPromise<GetWashingMachineAggregateType<T>>

    /**
     * Group by WashingMachine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingMachineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingMachineGroupByArgs['orderBy'] }
        : { orderBy?: WashingMachineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingMachineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingMachineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingMachine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingMachineClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    branch<T extends WashingBranchArgs= {}>(args?: Subset<T, WashingBranchArgs>): Prisma__WashingBranchClient<WashingBranchGetPayload<T> | Null>;

    WashingMachineMaintenance<T extends WashingMachine$WashingMachineMaintenanceArgs= {}>(args?: Subset<T, WashingMachine$WashingMachineMaintenanceArgs>): Prisma.PrismaPromise<Array<WashingMachineMaintenanceGetPayload<T>>| Null>;

    WashingUseHistory<T extends WashingMachine$WashingUseHistoryArgs= {}>(args?: Subset<T, WashingMachine$WashingUseHistoryArgs>): Prisma.PrismaPromise<Array<WashingUseHistoryGetPayload<T>>| Null>;

    WashingMachineOnProgram<T extends WashingMachine$WashingMachineOnProgramArgs= {}>(args?: Subset<T, WashingMachine$WashingMachineOnProgramArgs>): Prisma.PrismaPromise<Array<WashingMachineOnProgramGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingMachine base type for findUnique actions
   */
  export type WashingMachineFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter, which WashingMachine to fetch.
     */
    where: WashingMachineWhereUniqueInput
  }

  /**
   * WashingMachine findUnique
   */
  export interface WashingMachineFindUniqueArgs extends WashingMachineFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachine findUniqueOrThrow
   */
  export type WashingMachineFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter, which WashingMachine to fetch.
     */
    where: WashingMachineWhereUniqueInput
  }


  /**
   * WashingMachine base type for findFirst actions
   */
  export type WashingMachineFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter, which WashingMachine to fetch.
     */
    where?: WashingMachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachines to fetch.
     */
    orderBy?: Enumerable<WashingMachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachines.
     */
    cursor?: WashingMachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachines.
     */
    distinct?: Enumerable<WashingMachineScalarFieldEnum>
  }

  /**
   * WashingMachine findFirst
   */
  export interface WashingMachineFindFirstArgs extends WashingMachineFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachine findFirstOrThrow
   */
  export type WashingMachineFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter, which WashingMachine to fetch.
     */
    where?: WashingMachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachines to fetch.
     */
    orderBy?: Enumerable<WashingMachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachines.
     */
    cursor?: WashingMachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachines.
     */
    distinct?: Enumerable<WashingMachineScalarFieldEnum>
  }


  /**
   * WashingMachine findMany
   */
  export type WashingMachineFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter, which WashingMachines to fetch.
     */
    where?: WashingMachineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachines to fetch.
     */
    orderBy?: Enumerable<WashingMachineOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingMachines.
     */
    cursor?: WashingMachineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachines.
     */
    skip?: number
    distinct?: Enumerable<WashingMachineScalarFieldEnum>
  }


  /**
   * WashingMachine create
   */
  export type WashingMachineCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * The data needed to create a WashingMachine.
     */
    data: XOR<WashingMachineCreateInput, WashingMachineUncheckedCreateInput>
  }


  /**
   * WashingMachine createMany
   */
  export type WashingMachineCreateManyArgs = {
    /**
     * The data used to create many WashingMachines.
     */
    data: Enumerable<WashingMachineCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingMachine update
   */
  export type WashingMachineUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * The data needed to update a WashingMachine.
     */
    data: XOR<WashingMachineUpdateInput, WashingMachineUncheckedUpdateInput>
    /**
     * Choose, which WashingMachine to update.
     */
    where: WashingMachineWhereUniqueInput
  }


  /**
   * WashingMachine updateMany
   */
  export type WashingMachineUpdateManyArgs = {
    /**
     * The data used to update WashingMachines.
     */
    data: XOR<WashingMachineUpdateManyMutationInput, WashingMachineUncheckedUpdateManyInput>
    /**
     * Filter which WashingMachines to update
     */
    where?: WashingMachineWhereInput
  }


  /**
   * WashingMachine upsert
   */
  export type WashingMachineUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * The filter to search for the WashingMachine to update in case it exists.
     */
    where: WashingMachineWhereUniqueInput
    /**
     * In case the WashingMachine found by the `where` argument doesn't exist, create a new WashingMachine with this data.
     */
    create: XOR<WashingMachineCreateInput, WashingMachineUncheckedCreateInput>
    /**
     * In case the WashingMachine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingMachineUpdateInput, WashingMachineUncheckedUpdateInput>
  }


  /**
   * WashingMachine delete
   */
  export type WashingMachineDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
    /**
     * Filter which WashingMachine to delete.
     */
    where: WashingMachineWhereUniqueInput
  }


  /**
   * WashingMachine deleteMany
   */
  export type WashingMachineDeleteManyArgs = {
    /**
     * Filter which WashingMachines to delete
     */
    where?: WashingMachineWhereInput
  }


  /**
   * WashingMachine.WashingMachineMaintenance
   */
  export type WashingMachine$WashingMachineMaintenanceArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    where?: WashingMachineMaintenanceWhereInput
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithRelationInput>
    cursor?: WashingMachineMaintenanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingMachineMaintenanceScalarFieldEnum>
  }


  /**
   * WashingMachine.WashingUseHistory
   */
  export type WashingMachine$WashingUseHistoryArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    where?: WashingUseHistoryWhereInput
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    cursor?: WashingUseHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingMachine.WashingMachineOnProgram
   */
  export type WashingMachine$WashingMachineOnProgramArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    where?: WashingMachineOnProgramWhereInput
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    cursor?: WashingMachineOnProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingMachineOnProgramScalarFieldEnum>
  }


  /**
   * WashingMachine without action
   */
  export type WashingMachineArgs = {
    /**
     * Select specific fields to fetch from the WashingMachine
     */
    select?: WashingMachineSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineInclude | null
  }



  /**
   * Model WashingMachineMaintenance
   */


  export type AggregateWashingMachineMaintenance = {
    _count: WashingMachineMaintenanceCountAggregateOutputType | null
    _avg: WashingMachineMaintenanceAvgAggregateOutputType | null
    _sum: WashingMachineMaintenanceSumAggregateOutputType | null
    _min: WashingMachineMaintenanceMinAggregateOutputType | null
    _max: WashingMachineMaintenanceMaxAggregateOutputType | null
  }

  export type WashingMachineMaintenanceAvgAggregateOutputType = {
    id: number | null
    machineId: number | null
    failureLevel: number | null
  }

  export type WashingMachineMaintenanceSumAggregateOutputType = {
    id: number | null
    machineId: number | null
    failureLevel: number | null
  }

  export type WashingMachineMaintenanceMinAggregateOutputType = {
    id: number | null
    machineId: number | null
    symptom: string | null
    failureLevel: number | null
    mechanicName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineMaintenanceMaxAggregateOutputType = {
    id: number | null
    machineId: number | null
    symptom: string | null
    failureLevel: number | null
    mechanicName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineMaintenanceCountAggregateOutputType = {
    id: number
    machineId: number
    symptom: number
    failureLevel: number
    mechanicName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingMachineMaintenanceAvgAggregateInputType = {
    id?: true
    machineId?: true
    failureLevel?: true
  }

  export type WashingMachineMaintenanceSumAggregateInputType = {
    id?: true
    machineId?: true
    failureLevel?: true
  }

  export type WashingMachineMaintenanceMinAggregateInputType = {
    id?: true
    machineId?: true
    symptom?: true
    failureLevel?: true
    mechanicName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineMaintenanceMaxAggregateInputType = {
    id?: true
    machineId?: true
    symptom?: true
    failureLevel?: true
    mechanicName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineMaintenanceCountAggregateInputType = {
    id?: true
    machineId?: true
    symptom?: true
    failureLevel?: true
    mechanicName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingMachineMaintenanceAggregateArgs = {
    /**
     * Filter which WashingMachineMaintenance to aggregate.
     */
    where?: WashingMachineMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineMaintenances to fetch.
     */
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingMachineMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingMachineMaintenances
    **/
    _count?: true | WashingMachineMaintenanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingMachineMaintenanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingMachineMaintenanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingMachineMaintenanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingMachineMaintenanceMaxAggregateInputType
  }

  export type GetWashingMachineMaintenanceAggregateType<T extends WashingMachineMaintenanceAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingMachineMaintenance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingMachineMaintenance[P]>
      : GetScalarType<T[P], AggregateWashingMachineMaintenance[P]>
  }




  export type WashingMachineMaintenanceGroupByArgs = {
    where?: WashingMachineMaintenanceWhereInput
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithAggregationInput>
    by: WashingMachineMaintenanceScalarFieldEnum[]
    having?: WashingMachineMaintenanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingMachineMaintenanceCountAggregateInputType | true
    _avg?: WashingMachineMaintenanceAvgAggregateInputType
    _sum?: WashingMachineMaintenanceSumAggregateInputType
    _min?: WashingMachineMaintenanceMinAggregateInputType
    _max?: WashingMachineMaintenanceMaxAggregateInputType
  }


  export type WashingMachineMaintenanceGroupByOutputType = {
    id: number
    machineId: number
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt: Date
    updatedAt: Date
    _count: WashingMachineMaintenanceCountAggregateOutputType | null
    _avg: WashingMachineMaintenanceAvgAggregateOutputType | null
    _sum: WashingMachineMaintenanceSumAggregateOutputType | null
    _min: WashingMachineMaintenanceMinAggregateOutputType | null
    _max: WashingMachineMaintenanceMaxAggregateOutputType | null
  }

  type GetWashingMachineMaintenanceGroupByPayload<T extends WashingMachineMaintenanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingMachineMaintenanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingMachineMaintenanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingMachineMaintenanceGroupByOutputType[P]>
            : GetScalarType<T[P], WashingMachineMaintenanceGroupByOutputType[P]>
        }
      >
    >


  export type WashingMachineMaintenanceSelect = {
    id?: boolean
    machine?: boolean | WashingMachineArgs
    machineId?: boolean
    symptom?: boolean
    failureLevel?: boolean
    mechanicName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type WashingMachineMaintenanceInclude = {
    machine?: boolean | WashingMachineArgs
  }

  export type WashingMachineMaintenanceGetPayload<S extends boolean | null | undefined | WashingMachineMaintenanceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachineMaintenance :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineMaintenanceArgs | WashingMachineMaintenanceFindManyArgs)
    ? WashingMachineMaintenance  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'machine' ? WashingMachineGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingMachineMaintenanceArgs | WashingMachineMaintenanceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'machine' ? WashingMachineGetPayload<S['select'][P]> :  P extends keyof WashingMachineMaintenance ? WashingMachineMaintenance[P] : never
  } 
      : WashingMachineMaintenance


  type WashingMachineMaintenanceCountArgs = 
    Omit<WashingMachineMaintenanceFindManyArgs, 'select' | 'include'> & {
      select?: WashingMachineMaintenanceCountAggregateInputType | true
    }

  export interface WashingMachineMaintenanceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingMachineMaintenance that matches the filter.
     * @param {WashingMachineMaintenanceFindUniqueArgs} args - Arguments to find a WashingMachineMaintenance
     * @example
     * // Get one WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingMachineMaintenanceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingMachineMaintenanceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingMachineMaintenance'> extends True ? Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>> : Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T> | null, null>

    /**
     * Find one WashingMachineMaintenance that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingMachineMaintenanceFindUniqueOrThrowArgs} args - Arguments to find a WashingMachineMaintenance
     * @example
     * // Get one WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingMachineMaintenanceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineMaintenanceFindUniqueOrThrowArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Find the first WashingMachineMaintenance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceFindFirstArgs} args - Arguments to find a WashingMachineMaintenance
     * @example
     * // Get one WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingMachineMaintenanceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingMachineMaintenanceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingMachineMaintenance'> extends True ? Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>> : Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T> | null, null>

    /**
     * Find the first WashingMachineMaintenance that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceFindFirstOrThrowArgs} args - Arguments to find a WashingMachineMaintenance
     * @example
     * // Get one WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingMachineMaintenanceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineMaintenanceFindFirstOrThrowArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Find zero or more WashingMachineMaintenances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingMachineMaintenances
     * const washingMachineMaintenances = await prisma.washingMachineMaintenance.findMany()
     * 
     * // Get first 10 WashingMachineMaintenances
     * const washingMachineMaintenances = await prisma.washingMachineMaintenance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingMachineMaintenanceWithIdOnly = await prisma.washingMachineMaintenance.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingMachineMaintenanceFindManyArgs>(
      args?: SelectSubset<T, WashingMachineMaintenanceFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingMachineMaintenanceGetPayload<T>>>

    /**
     * Create a WashingMachineMaintenance.
     * @param {WashingMachineMaintenanceCreateArgs} args - Arguments to create a WashingMachineMaintenance.
     * @example
     * // Create one WashingMachineMaintenance
     * const WashingMachineMaintenance = await prisma.washingMachineMaintenance.create({
     *   data: {
     *     // ... data to create a WashingMachineMaintenance
     *   }
     * })
     * 
    **/
    create<T extends WashingMachineMaintenanceCreateArgs>(
      args: SelectSubset<T, WashingMachineMaintenanceCreateArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Create many WashingMachineMaintenances.
     *     @param {WashingMachineMaintenanceCreateManyArgs} args - Arguments to create many WashingMachineMaintenances.
     *     @example
     *     // Create many WashingMachineMaintenances
     *     const washingMachineMaintenance = await prisma.washingMachineMaintenance.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingMachineMaintenanceCreateManyArgs>(
      args?: SelectSubset<T, WashingMachineMaintenanceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingMachineMaintenance.
     * @param {WashingMachineMaintenanceDeleteArgs} args - Arguments to delete one WashingMachineMaintenance.
     * @example
     * // Delete one WashingMachineMaintenance
     * const WashingMachineMaintenance = await prisma.washingMachineMaintenance.delete({
     *   where: {
     *     // ... filter to delete one WashingMachineMaintenance
     *   }
     * })
     * 
    **/
    delete<T extends WashingMachineMaintenanceDeleteArgs>(
      args: SelectSubset<T, WashingMachineMaintenanceDeleteArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Update one WashingMachineMaintenance.
     * @param {WashingMachineMaintenanceUpdateArgs} args - Arguments to update one WashingMachineMaintenance.
     * @example
     * // Update one WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingMachineMaintenanceUpdateArgs>(
      args: SelectSubset<T, WashingMachineMaintenanceUpdateArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Delete zero or more WashingMachineMaintenances.
     * @param {WashingMachineMaintenanceDeleteManyArgs} args - Arguments to filter WashingMachineMaintenances to delete.
     * @example
     * // Delete a few WashingMachineMaintenances
     * const { count } = await prisma.washingMachineMaintenance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingMachineMaintenanceDeleteManyArgs>(
      args?: SelectSubset<T, WashingMachineMaintenanceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingMachineMaintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingMachineMaintenances
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingMachineMaintenanceUpdateManyArgs>(
      args: SelectSubset<T, WashingMachineMaintenanceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingMachineMaintenance.
     * @param {WashingMachineMaintenanceUpsertArgs} args - Arguments to update or create a WashingMachineMaintenance.
     * @example
     * // Update or create a WashingMachineMaintenance
     * const washingMachineMaintenance = await prisma.washingMachineMaintenance.upsert({
     *   create: {
     *     // ... data to create a WashingMachineMaintenance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingMachineMaintenance we want to update
     *   }
     * })
    **/
    upsert<T extends WashingMachineMaintenanceUpsertArgs>(
      args: SelectSubset<T, WashingMachineMaintenanceUpsertArgs>
    ): Prisma__WashingMachineMaintenanceClient<WashingMachineMaintenanceGetPayload<T>>

    /**
     * Count the number of WashingMachineMaintenances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceCountArgs} args - Arguments to filter WashingMachineMaintenances to count.
     * @example
     * // Count the number of WashingMachineMaintenances
     * const count = await prisma.washingMachineMaintenance.count({
     *   where: {
     *     // ... the filter for the WashingMachineMaintenances we want to count
     *   }
     * })
    **/
    count<T extends WashingMachineMaintenanceCountArgs>(
      args?: Subset<T, WashingMachineMaintenanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingMachineMaintenanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingMachineMaintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingMachineMaintenanceAggregateArgs>(args: Subset<T, WashingMachineMaintenanceAggregateArgs>): Prisma.PrismaPromise<GetWashingMachineMaintenanceAggregateType<T>>

    /**
     * Group by WashingMachineMaintenance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineMaintenanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingMachineMaintenanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingMachineMaintenanceGroupByArgs['orderBy'] }
        : { orderBy?: WashingMachineMaintenanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingMachineMaintenanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingMachineMaintenanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingMachineMaintenance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingMachineMaintenanceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    machine<T extends WashingMachineArgs= {}>(args?: Subset<T, WashingMachineArgs>): Prisma__WashingMachineClient<WashingMachineGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingMachineMaintenance base type for findUnique actions
   */
  export type WashingMachineMaintenanceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter, which WashingMachineMaintenance to fetch.
     */
    where: WashingMachineMaintenanceWhereUniqueInput
  }

  /**
   * WashingMachineMaintenance findUnique
   */
  export interface WashingMachineMaintenanceFindUniqueArgs extends WashingMachineMaintenanceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineMaintenance findUniqueOrThrow
   */
  export type WashingMachineMaintenanceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter, which WashingMachineMaintenance to fetch.
     */
    where: WashingMachineMaintenanceWhereUniqueInput
  }


  /**
   * WashingMachineMaintenance base type for findFirst actions
   */
  export type WashingMachineMaintenanceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter, which WashingMachineMaintenance to fetch.
     */
    where?: WashingMachineMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineMaintenances to fetch.
     */
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachineMaintenances.
     */
    cursor?: WashingMachineMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachineMaintenances.
     */
    distinct?: Enumerable<WashingMachineMaintenanceScalarFieldEnum>
  }

  /**
   * WashingMachineMaintenance findFirst
   */
  export interface WashingMachineMaintenanceFindFirstArgs extends WashingMachineMaintenanceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineMaintenance findFirstOrThrow
   */
  export type WashingMachineMaintenanceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter, which WashingMachineMaintenance to fetch.
     */
    where?: WashingMachineMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineMaintenances to fetch.
     */
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachineMaintenances.
     */
    cursor?: WashingMachineMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineMaintenances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachineMaintenances.
     */
    distinct?: Enumerable<WashingMachineMaintenanceScalarFieldEnum>
  }


  /**
   * WashingMachineMaintenance findMany
   */
  export type WashingMachineMaintenanceFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter, which WashingMachineMaintenances to fetch.
     */
    where?: WashingMachineMaintenanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineMaintenances to fetch.
     */
    orderBy?: Enumerable<WashingMachineMaintenanceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingMachineMaintenances.
     */
    cursor?: WashingMachineMaintenanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineMaintenances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineMaintenances.
     */
    skip?: number
    distinct?: Enumerable<WashingMachineMaintenanceScalarFieldEnum>
  }


  /**
   * WashingMachineMaintenance create
   */
  export type WashingMachineMaintenanceCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * The data needed to create a WashingMachineMaintenance.
     */
    data: XOR<WashingMachineMaintenanceCreateInput, WashingMachineMaintenanceUncheckedCreateInput>
  }


  /**
   * WashingMachineMaintenance createMany
   */
  export type WashingMachineMaintenanceCreateManyArgs = {
    /**
     * The data used to create many WashingMachineMaintenances.
     */
    data: Enumerable<WashingMachineMaintenanceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingMachineMaintenance update
   */
  export type WashingMachineMaintenanceUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * The data needed to update a WashingMachineMaintenance.
     */
    data: XOR<WashingMachineMaintenanceUpdateInput, WashingMachineMaintenanceUncheckedUpdateInput>
    /**
     * Choose, which WashingMachineMaintenance to update.
     */
    where: WashingMachineMaintenanceWhereUniqueInput
  }


  /**
   * WashingMachineMaintenance updateMany
   */
  export type WashingMachineMaintenanceUpdateManyArgs = {
    /**
     * The data used to update WashingMachineMaintenances.
     */
    data: XOR<WashingMachineMaintenanceUpdateManyMutationInput, WashingMachineMaintenanceUncheckedUpdateManyInput>
    /**
     * Filter which WashingMachineMaintenances to update
     */
    where?: WashingMachineMaintenanceWhereInput
  }


  /**
   * WashingMachineMaintenance upsert
   */
  export type WashingMachineMaintenanceUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * The filter to search for the WashingMachineMaintenance to update in case it exists.
     */
    where: WashingMachineMaintenanceWhereUniqueInput
    /**
     * In case the WashingMachineMaintenance found by the `where` argument doesn't exist, create a new WashingMachineMaintenance with this data.
     */
    create: XOR<WashingMachineMaintenanceCreateInput, WashingMachineMaintenanceUncheckedCreateInput>
    /**
     * In case the WashingMachineMaintenance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingMachineMaintenanceUpdateInput, WashingMachineMaintenanceUncheckedUpdateInput>
  }


  /**
   * WashingMachineMaintenance delete
   */
  export type WashingMachineMaintenanceDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
    /**
     * Filter which WashingMachineMaintenance to delete.
     */
    where: WashingMachineMaintenanceWhereUniqueInput
  }


  /**
   * WashingMachineMaintenance deleteMany
   */
  export type WashingMachineMaintenanceDeleteManyArgs = {
    /**
     * Filter which WashingMachineMaintenances to delete
     */
    where?: WashingMachineMaintenanceWhereInput
  }


  /**
   * WashingMachineMaintenance without action
   */
  export type WashingMachineMaintenanceArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineMaintenance
     */
    select?: WashingMachineMaintenanceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineMaintenanceInclude | null
  }



  /**
   * Model WashingMachineProgram
   */


  export type AggregateWashingMachineProgram = {
    _count: WashingMachineProgramCountAggregateOutputType | null
    _avg: WashingMachineProgramAvgAggregateOutputType | null
    _sum: WashingMachineProgramSumAggregateOutputType | null
    _min: WashingMachineProgramMinAggregateOutputType | null
    _max: WashingMachineProgramMaxAggregateOutputType | null
  }

  export type WashingMachineProgramAvgAggregateOutputType = {
    id: number | null
    price: number | null
    time: number | null
    maxWeight: number | null
  }

  export type WashingMachineProgramSumAggregateOutputType = {
    id: number | null
    price: number | null
    time: number | null
    maxWeight: number | null
  }

  export type WashingMachineProgramMinAggregateOutputType = {
    id: number | null
    programName: string | null
    price: number | null
    time: number | null
    maxWeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineProgramMaxAggregateOutputType = {
    id: number | null
    programName: string | null
    price: number | null
    time: number | null
    maxWeight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineProgramCountAggregateOutputType = {
    id: number
    programName: number
    price: number
    time: number
    maxWeight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingMachineProgramAvgAggregateInputType = {
    id?: true
    price?: true
    time?: true
    maxWeight?: true
  }

  export type WashingMachineProgramSumAggregateInputType = {
    id?: true
    price?: true
    time?: true
    maxWeight?: true
  }

  export type WashingMachineProgramMinAggregateInputType = {
    id?: true
    programName?: true
    price?: true
    time?: true
    maxWeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineProgramMaxAggregateInputType = {
    id?: true
    programName?: true
    price?: true
    time?: true
    maxWeight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineProgramCountAggregateInputType = {
    id?: true
    programName?: true
    price?: true
    time?: true
    maxWeight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingMachineProgramAggregateArgs = {
    /**
     * Filter which WashingMachineProgram to aggregate.
     */
    where?: WashingMachineProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachinePrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingMachineProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachinePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachinePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingMachinePrograms
    **/
    _count?: true | WashingMachineProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingMachineProgramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingMachineProgramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingMachineProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingMachineProgramMaxAggregateInputType
  }

  export type GetWashingMachineProgramAggregateType<T extends WashingMachineProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingMachineProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingMachineProgram[P]>
      : GetScalarType<T[P], AggregateWashingMachineProgram[P]>
  }




  export type WashingMachineProgramGroupByArgs = {
    where?: WashingMachineProgramWhereInput
    orderBy?: Enumerable<WashingMachineProgramOrderByWithAggregationInput>
    by: WashingMachineProgramScalarFieldEnum[]
    having?: WashingMachineProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingMachineProgramCountAggregateInputType | true
    _avg?: WashingMachineProgramAvgAggregateInputType
    _sum?: WashingMachineProgramSumAggregateInputType
    _min?: WashingMachineProgramMinAggregateInputType
    _max?: WashingMachineProgramMaxAggregateInputType
  }


  export type WashingMachineProgramGroupByOutputType = {
    id: number
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt: Date
    updatedAt: Date
    _count: WashingMachineProgramCountAggregateOutputType | null
    _avg: WashingMachineProgramAvgAggregateOutputType | null
    _sum: WashingMachineProgramSumAggregateOutputType | null
    _min: WashingMachineProgramMinAggregateOutputType | null
    _max: WashingMachineProgramMaxAggregateOutputType | null
  }

  type GetWashingMachineProgramGroupByPayload<T extends WashingMachineProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingMachineProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingMachineProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingMachineProgramGroupByOutputType[P]>
            : GetScalarType<T[P], WashingMachineProgramGroupByOutputType[P]>
        }
      >
    >


  export type WashingMachineProgramSelect = {
    id?: boolean
    programName?: boolean
    price?: boolean
    time?: boolean
    maxWeight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    WashingUseHistory?: boolean | WashingMachineProgram$WashingUseHistoryArgs
    WashingMachineOnProgram?: boolean | WashingMachineProgram$WashingMachineOnProgramArgs
    _count?: boolean | WashingMachineProgramCountOutputTypeArgs
  }


  export type WashingMachineProgramInclude = {
    WashingUseHistory?: boolean | WashingMachineProgram$WashingUseHistoryArgs
    WashingMachineOnProgram?: boolean | WashingMachineProgram$WashingMachineOnProgramArgs
    _count?: boolean | WashingMachineProgramCountOutputTypeArgs
  }

  export type WashingMachineProgramGetPayload<S extends boolean | null | undefined | WashingMachineProgramArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachineProgram :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineProgramArgs | WashingMachineProgramFindManyArgs)
    ? WashingMachineProgram  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['include'][P]>>  :
        P extends 'WashingMachineOnProgram' ? Array < WashingMachineOnProgramGetPayload<S['include'][P]>>  :
        P extends '_count' ? WashingMachineProgramCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingMachineProgramArgs | WashingMachineProgramFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['select'][P]>>  :
        P extends 'WashingMachineOnProgram' ? Array < WashingMachineOnProgramGetPayload<S['select'][P]>>  :
        P extends '_count' ? WashingMachineProgramCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WashingMachineProgram ? WashingMachineProgram[P] : never
  } 
      : WashingMachineProgram


  type WashingMachineProgramCountArgs = 
    Omit<WashingMachineProgramFindManyArgs, 'select' | 'include'> & {
      select?: WashingMachineProgramCountAggregateInputType | true
    }

  export interface WashingMachineProgramDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingMachineProgram that matches the filter.
     * @param {WashingMachineProgramFindUniqueArgs} args - Arguments to find a WashingMachineProgram
     * @example
     * // Get one WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingMachineProgramFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingMachineProgramFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingMachineProgram'> extends True ? Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>> : Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T> | null, null>

    /**
     * Find one WashingMachineProgram that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingMachineProgramFindUniqueOrThrowArgs} args - Arguments to find a WashingMachineProgram
     * @example
     * // Get one WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingMachineProgramFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineProgramFindUniqueOrThrowArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Find the first WashingMachineProgram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramFindFirstArgs} args - Arguments to find a WashingMachineProgram
     * @example
     * // Get one WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingMachineProgramFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingMachineProgramFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingMachineProgram'> extends True ? Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>> : Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T> | null, null>

    /**
     * Find the first WashingMachineProgram that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramFindFirstOrThrowArgs} args - Arguments to find a WashingMachineProgram
     * @example
     * // Get one WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingMachineProgramFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineProgramFindFirstOrThrowArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Find zero or more WashingMachinePrograms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingMachinePrograms
     * const washingMachinePrograms = await prisma.washingMachineProgram.findMany()
     * 
     * // Get first 10 WashingMachinePrograms
     * const washingMachinePrograms = await prisma.washingMachineProgram.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingMachineProgramWithIdOnly = await prisma.washingMachineProgram.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingMachineProgramFindManyArgs>(
      args?: SelectSubset<T, WashingMachineProgramFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingMachineProgramGetPayload<T>>>

    /**
     * Create a WashingMachineProgram.
     * @param {WashingMachineProgramCreateArgs} args - Arguments to create a WashingMachineProgram.
     * @example
     * // Create one WashingMachineProgram
     * const WashingMachineProgram = await prisma.washingMachineProgram.create({
     *   data: {
     *     // ... data to create a WashingMachineProgram
     *   }
     * })
     * 
    **/
    create<T extends WashingMachineProgramCreateArgs>(
      args: SelectSubset<T, WashingMachineProgramCreateArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Create many WashingMachinePrograms.
     *     @param {WashingMachineProgramCreateManyArgs} args - Arguments to create many WashingMachinePrograms.
     *     @example
     *     // Create many WashingMachinePrograms
     *     const washingMachineProgram = await prisma.washingMachineProgram.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingMachineProgramCreateManyArgs>(
      args?: SelectSubset<T, WashingMachineProgramCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingMachineProgram.
     * @param {WashingMachineProgramDeleteArgs} args - Arguments to delete one WashingMachineProgram.
     * @example
     * // Delete one WashingMachineProgram
     * const WashingMachineProgram = await prisma.washingMachineProgram.delete({
     *   where: {
     *     // ... filter to delete one WashingMachineProgram
     *   }
     * })
     * 
    **/
    delete<T extends WashingMachineProgramDeleteArgs>(
      args: SelectSubset<T, WashingMachineProgramDeleteArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Update one WashingMachineProgram.
     * @param {WashingMachineProgramUpdateArgs} args - Arguments to update one WashingMachineProgram.
     * @example
     * // Update one WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingMachineProgramUpdateArgs>(
      args: SelectSubset<T, WashingMachineProgramUpdateArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Delete zero or more WashingMachinePrograms.
     * @param {WashingMachineProgramDeleteManyArgs} args - Arguments to filter WashingMachinePrograms to delete.
     * @example
     * // Delete a few WashingMachinePrograms
     * const { count } = await prisma.washingMachineProgram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingMachineProgramDeleteManyArgs>(
      args?: SelectSubset<T, WashingMachineProgramDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingMachinePrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingMachinePrograms
     * const washingMachineProgram = await prisma.washingMachineProgram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingMachineProgramUpdateManyArgs>(
      args: SelectSubset<T, WashingMachineProgramUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingMachineProgram.
     * @param {WashingMachineProgramUpsertArgs} args - Arguments to update or create a WashingMachineProgram.
     * @example
     * // Update or create a WashingMachineProgram
     * const washingMachineProgram = await prisma.washingMachineProgram.upsert({
     *   create: {
     *     // ... data to create a WashingMachineProgram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingMachineProgram we want to update
     *   }
     * })
    **/
    upsert<T extends WashingMachineProgramUpsertArgs>(
      args: SelectSubset<T, WashingMachineProgramUpsertArgs>
    ): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T>>

    /**
     * Count the number of WashingMachinePrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramCountArgs} args - Arguments to filter WashingMachinePrograms to count.
     * @example
     * // Count the number of WashingMachinePrograms
     * const count = await prisma.washingMachineProgram.count({
     *   where: {
     *     // ... the filter for the WashingMachinePrograms we want to count
     *   }
     * })
    **/
    count<T extends WashingMachineProgramCountArgs>(
      args?: Subset<T, WashingMachineProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingMachineProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingMachineProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingMachineProgramAggregateArgs>(args: Subset<T, WashingMachineProgramAggregateArgs>): Prisma.PrismaPromise<GetWashingMachineProgramAggregateType<T>>

    /**
     * Group by WashingMachineProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingMachineProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingMachineProgramGroupByArgs['orderBy'] }
        : { orderBy?: WashingMachineProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingMachineProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingMachineProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingMachineProgram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingMachineProgramClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    WashingUseHistory<T extends WashingMachineProgram$WashingUseHistoryArgs= {}>(args?: Subset<T, WashingMachineProgram$WashingUseHistoryArgs>): Prisma.PrismaPromise<Array<WashingUseHistoryGetPayload<T>>| Null>;

    WashingMachineOnProgram<T extends WashingMachineProgram$WashingMachineOnProgramArgs= {}>(args?: Subset<T, WashingMachineProgram$WashingMachineOnProgramArgs>): Prisma.PrismaPromise<Array<WashingMachineOnProgramGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingMachineProgram base type for findUnique actions
   */
  export type WashingMachineProgramFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter, which WashingMachineProgram to fetch.
     */
    where: WashingMachineProgramWhereUniqueInput
  }

  /**
   * WashingMachineProgram findUnique
   */
  export interface WashingMachineProgramFindUniqueArgs extends WashingMachineProgramFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineProgram findUniqueOrThrow
   */
  export type WashingMachineProgramFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter, which WashingMachineProgram to fetch.
     */
    where: WashingMachineProgramWhereUniqueInput
  }


  /**
   * WashingMachineProgram base type for findFirst actions
   */
  export type WashingMachineProgramFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter, which WashingMachineProgram to fetch.
     */
    where?: WashingMachineProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachinePrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachinePrograms.
     */
    cursor?: WashingMachineProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachinePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachinePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachinePrograms.
     */
    distinct?: Enumerable<WashingMachineProgramScalarFieldEnum>
  }

  /**
   * WashingMachineProgram findFirst
   */
  export interface WashingMachineProgramFindFirstArgs extends WashingMachineProgramFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineProgram findFirstOrThrow
   */
  export type WashingMachineProgramFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter, which WashingMachineProgram to fetch.
     */
    where?: WashingMachineProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachinePrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachinePrograms.
     */
    cursor?: WashingMachineProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachinePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachinePrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachinePrograms.
     */
    distinct?: Enumerable<WashingMachineProgramScalarFieldEnum>
  }


  /**
   * WashingMachineProgram findMany
   */
  export type WashingMachineProgramFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter, which WashingMachinePrograms to fetch.
     */
    where?: WashingMachineProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachinePrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingMachinePrograms.
     */
    cursor?: WashingMachineProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachinePrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachinePrograms.
     */
    skip?: number
    distinct?: Enumerable<WashingMachineProgramScalarFieldEnum>
  }


  /**
   * WashingMachineProgram create
   */
  export type WashingMachineProgramCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * The data needed to create a WashingMachineProgram.
     */
    data: XOR<WashingMachineProgramCreateInput, WashingMachineProgramUncheckedCreateInput>
  }


  /**
   * WashingMachineProgram createMany
   */
  export type WashingMachineProgramCreateManyArgs = {
    /**
     * The data used to create many WashingMachinePrograms.
     */
    data: Enumerable<WashingMachineProgramCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingMachineProgram update
   */
  export type WashingMachineProgramUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * The data needed to update a WashingMachineProgram.
     */
    data: XOR<WashingMachineProgramUpdateInput, WashingMachineProgramUncheckedUpdateInput>
    /**
     * Choose, which WashingMachineProgram to update.
     */
    where: WashingMachineProgramWhereUniqueInput
  }


  /**
   * WashingMachineProgram updateMany
   */
  export type WashingMachineProgramUpdateManyArgs = {
    /**
     * The data used to update WashingMachinePrograms.
     */
    data: XOR<WashingMachineProgramUpdateManyMutationInput, WashingMachineProgramUncheckedUpdateManyInput>
    /**
     * Filter which WashingMachinePrograms to update
     */
    where?: WashingMachineProgramWhereInput
  }


  /**
   * WashingMachineProgram upsert
   */
  export type WashingMachineProgramUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * The filter to search for the WashingMachineProgram to update in case it exists.
     */
    where: WashingMachineProgramWhereUniqueInput
    /**
     * In case the WashingMachineProgram found by the `where` argument doesn't exist, create a new WashingMachineProgram with this data.
     */
    create: XOR<WashingMachineProgramCreateInput, WashingMachineProgramUncheckedCreateInput>
    /**
     * In case the WashingMachineProgram was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingMachineProgramUpdateInput, WashingMachineProgramUncheckedUpdateInput>
  }


  /**
   * WashingMachineProgram delete
   */
  export type WashingMachineProgramDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
    /**
     * Filter which WashingMachineProgram to delete.
     */
    where: WashingMachineProgramWhereUniqueInput
  }


  /**
   * WashingMachineProgram deleteMany
   */
  export type WashingMachineProgramDeleteManyArgs = {
    /**
     * Filter which WashingMachinePrograms to delete
     */
    where?: WashingMachineProgramWhereInput
  }


  /**
   * WashingMachineProgram.WashingUseHistory
   */
  export type WashingMachineProgram$WashingUseHistoryArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    where?: WashingUseHistoryWhereInput
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    cursor?: WashingUseHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingMachineProgram.WashingMachineOnProgram
   */
  export type WashingMachineProgram$WashingMachineOnProgramArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    where?: WashingMachineOnProgramWhereInput
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    cursor?: WashingMachineOnProgramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingMachineOnProgramScalarFieldEnum>
  }


  /**
   * WashingMachineProgram without action
   */
  export type WashingMachineProgramArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineProgram
     */
    select?: WashingMachineProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineProgramInclude | null
  }



  /**
   * Model WashingMachineOnProgram
   */


  export type AggregateWashingMachineOnProgram = {
    _count: WashingMachineOnProgramCountAggregateOutputType | null
    _avg: WashingMachineOnProgramAvgAggregateOutputType | null
    _sum: WashingMachineOnProgramSumAggregateOutputType | null
    _min: WashingMachineOnProgramMinAggregateOutputType | null
    _max: WashingMachineOnProgramMaxAggregateOutputType | null
  }

  export type WashingMachineOnProgramAvgAggregateOutputType = {
    id: number | null
    machineId: number | null
    programId: number | null
  }

  export type WashingMachineOnProgramSumAggregateOutputType = {
    id: number | null
    machineId: number | null
    programId: number | null
  }

  export type WashingMachineOnProgramMinAggregateOutputType = {
    id: number | null
    machineId: number | null
    programId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineOnProgramMaxAggregateOutputType = {
    id: number | null
    machineId: number | null
    programId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingMachineOnProgramCountAggregateOutputType = {
    id: number
    machineId: number
    programId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingMachineOnProgramAvgAggregateInputType = {
    id?: true
    machineId?: true
    programId?: true
  }

  export type WashingMachineOnProgramSumAggregateInputType = {
    id?: true
    machineId?: true
    programId?: true
  }

  export type WashingMachineOnProgramMinAggregateInputType = {
    id?: true
    machineId?: true
    programId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineOnProgramMaxAggregateInputType = {
    id?: true
    machineId?: true
    programId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingMachineOnProgramCountAggregateInputType = {
    id?: true
    machineId?: true
    programId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingMachineOnProgramAggregateArgs = {
    /**
     * Filter which WashingMachineOnProgram to aggregate.
     */
    where?: WashingMachineOnProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineOnPrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingMachineOnProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineOnPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineOnPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingMachineOnPrograms
    **/
    _count?: true | WashingMachineOnProgramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingMachineOnProgramAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingMachineOnProgramSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingMachineOnProgramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingMachineOnProgramMaxAggregateInputType
  }

  export type GetWashingMachineOnProgramAggregateType<T extends WashingMachineOnProgramAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingMachineOnProgram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingMachineOnProgram[P]>
      : GetScalarType<T[P], AggregateWashingMachineOnProgram[P]>
  }




  export type WashingMachineOnProgramGroupByArgs = {
    where?: WashingMachineOnProgramWhereInput
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithAggregationInput>
    by: WashingMachineOnProgramScalarFieldEnum[]
    having?: WashingMachineOnProgramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingMachineOnProgramCountAggregateInputType | true
    _avg?: WashingMachineOnProgramAvgAggregateInputType
    _sum?: WashingMachineOnProgramSumAggregateInputType
    _min?: WashingMachineOnProgramMinAggregateInputType
    _max?: WashingMachineOnProgramMaxAggregateInputType
  }


  export type WashingMachineOnProgramGroupByOutputType = {
    id: number
    machineId: number
    programId: number
    createdAt: Date
    updatedAt: Date
    _count: WashingMachineOnProgramCountAggregateOutputType | null
    _avg: WashingMachineOnProgramAvgAggregateOutputType | null
    _sum: WashingMachineOnProgramSumAggregateOutputType | null
    _min: WashingMachineOnProgramMinAggregateOutputType | null
    _max: WashingMachineOnProgramMaxAggregateOutputType | null
  }

  type GetWashingMachineOnProgramGroupByPayload<T extends WashingMachineOnProgramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingMachineOnProgramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingMachineOnProgramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingMachineOnProgramGroupByOutputType[P]>
            : GetScalarType<T[P], WashingMachineOnProgramGroupByOutputType[P]>
        }
      >
    >


  export type WashingMachineOnProgramSelect = {
    id?: boolean
    machine?: boolean | WashingMachineArgs
    machineId?: boolean
    program?: boolean | WashingMachineProgramArgs
    programId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type WashingMachineOnProgramInclude = {
    machine?: boolean | WashingMachineArgs
    program?: boolean | WashingMachineProgramArgs
  }

  export type WashingMachineOnProgramGetPayload<S extends boolean | null | undefined | WashingMachineOnProgramArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingMachineOnProgram :
    S extends undefined ? never :
    S extends { include: any } & (WashingMachineOnProgramArgs | WashingMachineOnProgramFindManyArgs)
    ? WashingMachineOnProgram  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'machine' ? WashingMachineGetPayload<S['include'][P]> :
        P extends 'program' ? WashingMachineProgramGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingMachineOnProgramArgs | WashingMachineOnProgramFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'machine' ? WashingMachineGetPayload<S['select'][P]> :
        P extends 'program' ? WashingMachineProgramGetPayload<S['select'][P]> :  P extends keyof WashingMachineOnProgram ? WashingMachineOnProgram[P] : never
  } 
      : WashingMachineOnProgram


  type WashingMachineOnProgramCountArgs = 
    Omit<WashingMachineOnProgramFindManyArgs, 'select' | 'include'> & {
      select?: WashingMachineOnProgramCountAggregateInputType | true
    }

  export interface WashingMachineOnProgramDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingMachineOnProgram that matches the filter.
     * @param {WashingMachineOnProgramFindUniqueArgs} args - Arguments to find a WashingMachineOnProgram
     * @example
     * // Get one WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingMachineOnProgramFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingMachineOnProgramFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingMachineOnProgram'> extends True ? Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>> : Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T> | null, null>

    /**
     * Find one WashingMachineOnProgram that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingMachineOnProgramFindUniqueOrThrowArgs} args - Arguments to find a WashingMachineOnProgram
     * @example
     * // Get one WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingMachineOnProgramFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineOnProgramFindUniqueOrThrowArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Find the first WashingMachineOnProgram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramFindFirstArgs} args - Arguments to find a WashingMachineOnProgram
     * @example
     * // Get one WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingMachineOnProgramFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingMachineOnProgramFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingMachineOnProgram'> extends True ? Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>> : Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T> | null, null>

    /**
     * Find the first WashingMachineOnProgram that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramFindFirstOrThrowArgs} args - Arguments to find a WashingMachineOnProgram
     * @example
     * // Get one WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingMachineOnProgramFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingMachineOnProgramFindFirstOrThrowArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Find zero or more WashingMachineOnPrograms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingMachineOnPrograms
     * const washingMachineOnPrograms = await prisma.washingMachineOnProgram.findMany()
     * 
     * // Get first 10 WashingMachineOnPrograms
     * const washingMachineOnPrograms = await prisma.washingMachineOnProgram.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingMachineOnProgramWithIdOnly = await prisma.washingMachineOnProgram.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingMachineOnProgramFindManyArgs>(
      args?: SelectSubset<T, WashingMachineOnProgramFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingMachineOnProgramGetPayload<T>>>

    /**
     * Create a WashingMachineOnProgram.
     * @param {WashingMachineOnProgramCreateArgs} args - Arguments to create a WashingMachineOnProgram.
     * @example
     * // Create one WashingMachineOnProgram
     * const WashingMachineOnProgram = await prisma.washingMachineOnProgram.create({
     *   data: {
     *     // ... data to create a WashingMachineOnProgram
     *   }
     * })
     * 
    **/
    create<T extends WashingMachineOnProgramCreateArgs>(
      args: SelectSubset<T, WashingMachineOnProgramCreateArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Create many WashingMachineOnPrograms.
     *     @param {WashingMachineOnProgramCreateManyArgs} args - Arguments to create many WashingMachineOnPrograms.
     *     @example
     *     // Create many WashingMachineOnPrograms
     *     const washingMachineOnProgram = await prisma.washingMachineOnProgram.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingMachineOnProgramCreateManyArgs>(
      args?: SelectSubset<T, WashingMachineOnProgramCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingMachineOnProgram.
     * @param {WashingMachineOnProgramDeleteArgs} args - Arguments to delete one WashingMachineOnProgram.
     * @example
     * // Delete one WashingMachineOnProgram
     * const WashingMachineOnProgram = await prisma.washingMachineOnProgram.delete({
     *   where: {
     *     // ... filter to delete one WashingMachineOnProgram
     *   }
     * })
     * 
    **/
    delete<T extends WashingMachineOnProgramDeleteArgs>(
      args: SelectSubset<T, WashingMachineOnProgramDeleteArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Update one WashingMachineOnProgram.
     * @param {WashingMachineOnProgramUpdateArgs} args - Arguments to update one WashingMachineOnProgram.
     * @example
     * // Update one WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingMachineOnProgramUpdateArgs>(
      args: SelectSubset<T, WashingMachineOnProgramUpdateArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Delete zero or more WashingMachineOnPrograms.
     * @param {WashingMachineOnProgramDeleteManyArgs} args - Arguments to filter WashingMachineOnPrograms to delete.
     * @example
     * // Delete a few WashingMachineOnPrograms
     * const { count } = await prisma.washingMachineOnProgram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingMachineOnProgramDeleteManyArgs>(
      args?: SelectSubset<T, WashingMachineOnProgramDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingMachineOnPrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingMachineOnPrograms
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingMachineOnProgramUpdateManyArgs>(
      args: SelectSubset<T, WashingMachineOnProgramUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingMachineOnProgram.
     * @param {WashingMachineOnProgramUpsertArgs} args - Arguments to update or create a WashingMachineOnProgram.
     * @example
     * // Update or create a WashingMachineOnProgram
     * const washingMachineOnProgram = await prisma.washingMachineOnProgram.upsert({
     *   create: {
     *     // ... data to create a WashingMachineOnProgram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingMachineOnProgram we want to update
     *   }
     * })
    **/
    upsert<T extends WashingMachineOnProgramUpsertArgs>(
      args: SelectSubset<T, WashingMachineOnProgramUpsertArgs>
    ): Prisma__WashingMachineOnProgramClient<WashingMachineOnProgramGetPayload<T>>

    /**
     * Count the number of WashingMachineOnPrograms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramCountArgs} args - Arguments to filter WashingMachineOnPrograms to count.
     * @example
     * // Count the number of WashingMachineOnPrograms
     * const count = await prisma.washingMachineOnProgram.count({
     *   where: {
     *     // ... the filter for the WashingMachineOnPrograms we want to count
     *   }
     * })
    **/
    count<T extends WashingMachineOnProgramCountArgs>(
      args?: Subset<T, WashingMachineOnProgramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingMachineOnProgramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingMachineOnProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingMachineOnProgramAggregateArgs>(args: Subset<T, WashingMachineOnProgramAggregateArgs>): Prisma.PrismaPromise<GetWashingMachineOnProgramAggregateType<T>>

    /**
     * Group by WashingMachineOnProgram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingMachineOnProgramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingMachineOnProgramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingMachineOnProgramGroupByArgs['orderBy'] }
        : { orderBy?: WashingMachineOnProgramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingMachineOnProgramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingMachineOnProgramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingMachineOnProgram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingMachineOnProgramClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    machine<T extends WashingMachineArgs= {}>(args?: Subset<T, WashingMachineArgs>): Prisma__WashingMachineClient<WashingMachineGetPayload<T> | Null>;

    program<T extends WashingMachineProgramArgs= {}>(args?: Subset<T, WashingMachineProgramArgs>): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingMachineOnProgram base type for findUnique actions
   */
  export type WashingMachineOnProgramFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter, which WashingMachineOnProgram to fetch.
     */
    where: WashingMachineOnProgramWhereUniqueInput
  }

  /**
   * WashingMachineOnProgram findUnique
   */
  export interface WashingMachineOnProgramFindUniqueArgs extends WashingMachineOnProgramFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineOnProgram findUniqueOrThrow
   */
  export type WashingMachineOnProgramFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter, which WashingMachineOnProgram to fetch.
     */
    where: WashingMachineOnProgramWhereUniqueInput
  }


  /**
   * WashingMachineOnProgram base type for findFirst actions
   */
  export type WashingMachineOnProgramFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter, which WashingMachineOnProgram to fetch.
     */
    where?: WashingMachineOnProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineOnPrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachineOnPrograms.
     */
    cursor?: WashingMachineOnProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineOnPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineOnPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachineOnPrograms.
     */
    distinct?: Enumerable<WashingMachineOnProgramScalarFieldEnum>
  }

  /**
   * WashingMachineOnProgram findFirst
   */
  export interface WashingMachineOnProgramFindFirstArgs extends WashingMachineOnProgramFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingMachineOnProgram findFirstOrThrow
   */
  export type WashingMachineOnProgramFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter, which WashingMachineOnProgram to fetch.
     */
    where?: WashingMachineOnProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineOnPrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingMachineOnPrograms.
     */
    cursor?: WashingMachineOnProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineOnPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineOnPrograms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingMachineOnPrograms.
     */
    distinct?: Enumerable<WashingMachineOnProgramScalarFieldEnum>
  }


  /**
   * WashingMachineOnProgram findMany
   */
  export type WashingMachineOnProgramFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter, which WashingMachineOnPrograms to fetch.
     */
    where?: WashingMachineOnProgramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingMachineOnPrograms to fetch.
     */
    orderBy?: Enumerable<WashingMachineOnProgramOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingMachineOnPrograms.
     */
    cursor?: WashingMachineOnProgramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingMachineOnPrograms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingMachineOnPrograms.
     */
    skip?: number
    distinct?: Enumerable<WashingMachineOnProgramScalarFieldEnum>
  }


  /**
   * WashingMachineOnProgram create
   */
  export type WashingMachineOnProgramCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * The data needed to create a WashingMachineOnProgram.
     */
    data: XOR<WashingMachineOnProgramCreateInput, WashingMachineOnProgramUncheckedCreateInput>
  }


  /**
   * WashingMachineOnProgram createMany
   */
  export type WashingMachineOnProgramCreateManyArgs = {
    /**
     * The data used to create many WashingMachineOnPrograms.
     */
    data: Enumerable<WashingMachineOnProgramCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingMachineOnProgram update
   */
  export type WashingMachineOnProgramUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * The data needed to update a WashingMachineOnProgram.
     */
    data: XOR<WashingMachineOnProgramUpdateInput, WashingMachineOnProgramUncheckedUpdateInput>
    /**
     * Choose, which WashingMachineOnProgram to update.
     */
    where: WashingMachineOnProgramWhereUniqueInput
  }


  /**
   * WashingMachineOnProgram updateMany
   */
  export type WashingMachineOnProgramUpdateManyArgs = {
    /**
     * The data used to update WashingMachineOnPrograms.
     */
    data: XOR<WashingMachineOnProgramUpdateManyMutationInput, WashingMachineOnProgramUncheckedUpdateManyInput>
    /**
     * Filter which WashingMachineOnPrograms to update
     */
    where?: WashingMachineOnProgramWhereInput
  }


  /**
   * WashingMachineOnProgram upsert
   */
  export type WashingMachineOnProgramUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * The filter to search for the WashingMachineOnProgram to update in case it exists.
     */
    where: WashingMachineOnProgramWhereUniqueInput
    /**
     * In case the WashingMachineOnProgram found by the `where` argument doesn't exist, create a new WashingMachineOnProgram with this data.
     */
    create: XOR<WashingMachineOnProgramCreateInput, WashingMachineOnProgramUncheckedCreateInput>
    /**
     * In case the WashingMachineOnProgram was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingMachineOnProgramUpdateInput, WashingMachineOnProgramUncheckedUpdateInput>
  }


  /**
   * WashingMachineOnProgram delete
   */
  export type WashingMachineOnProgramDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
    /**
     * Filter which WashingMachineOnProgram to delete.
     */
    where: WashingMachineOnProgramWhereUniqueInput
  }


  /**
   * WashingMachineOnProgram deleteMany
   */
  export type WashingMachineOnProgramDeleteManyArgs = {
    /**
     * Filter which WashingMachineOnPrograms to delete
     */
    where?: WashingMachineOnProgramWhereInput
  }


  /**
   * WashingMachineOnProgram without action
   */
  export type WashingMachineOnProgramArgs = {
    /**
     * Select specific fields to fetch from the WashingMachineOnProgram
     */
    select?: WashingMachineOnProgramSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingMachineOnProgramInclude | null
  }



  /**
   * Model WashingUser
   */


  export type AggregateWashingUser = {
    _count: WashingUserCountAggregateOutputType | null
    _avg: WashingUserAvgAggregateOutputType | null
    _sum: WashingUserSumAggregateOutputType | null
    _min: WashingUserMinAggregateOutputType | null
    _max: WashingUserMaxAggregateOutputType | null
  }

  export type WashingUserAvgAggregateOutputType = {
    id: number | null
    remainCoupon: number | null
  }

  export type WashingUserSumAggregateOutputType = {
    id: number | null
    remainCoupon: number | null
  }

  export type WashingUserMinAggregateOutputType = {
    id: number | null
    userName: string | null
    tel: string | null
    remainCoupon: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingUserMaxAggregateOutputType = {
    id: number | null
    userName: string | null
    tel: string | null
    remainCoupon: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingUserCountAggregateOutputType = {
    id: number
    userName: number
    tel: number
    remainCoupon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingUserAvgAggregateInputType = {
    id?: true
    remainCoupon?: true
  }

  export type WashingUserSumAggregateInputType = {
    id?: true
    remainCoupon?: true
  }

  export type WashingUserMinAggregateInputType = {
    id?: true
    userName?: true
    tel?: true
    remainCoupon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingUserMaxAggregateInputType = {
    id?: true
    userName?: true
    tel?: true
    remainCoupon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingUserCountAggregateInputType = {
    id?: true
    userName?: true
    tel?: true
    remainCoupon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingUserAggregateArgs = {
    /**
     * Filter which WashingUser to aggregate.
     */
    where?: WashingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUsers to fetch.
     */
    orderBy?: Enumerable<WashingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingUsers
    **/
    _count?: true | WashingUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingUserMaxAggregateInputType
  }

  export type GetWashingUserAggregateType<T extends WashingUserAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingUser[P]>
      : GetScalarType<T[P], AggregateWashingUser[P]>
  }




  export type WashingUserGroupByArgs = {
    where?: WashingUserWhereInput
    orderBy?: Enumerable<WashingUserOrderByWithAggregationInput>
    by: WashingUserScalarFieldEnum[]
    having?: WashingUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingUserCountAggregateInputType | true
    _avg?: WashingUserAvgAggregateInputType
    _sum?: WashingUserSumAggregateInputType
    _min?: WashingUserMinAggregateInputType
    _max?: WashingUserMaxAggregateInputType
  }


  export type WashingUserGroupByOutputType = {
    id: number
    userName: string
    tel: string
    remainCoupon: number
    createdAt: Date
    updatedAt: Date
    _count: WashingUserCountAggregateOutputType | null
    _avg: WashingUserAvgAggregateOutputType | null
    _sum: WashingUserSumAggregateOutputType | null
    _min: WashingUserMinAggregateOutputType | null
    _max: WashingUserMaxAggregateOutputType | null
  }

  type GetWashingUserGroupByPayload<T extends WashingUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingUserGroupByOutputType[P]>
            : GetScalarType<T[P], WashingUserGroupByOutputType[P]>
        }
      >
    >


  export type WashingUserSelect = {
    id?: boolean
    userName?: boolean
    tel?: boolean
    remainCoupon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    WashingTopUp?: boolean | WashingUser$WashingTopUpArgs
    WashingUseHistory?: boolean | WashingUser$WashingUseHistoryArgs
    _count?: boolean | WashingUserCountOutputTypeArgs
  }


  export type WashingUserInclude = {
    WashingTopUp?: boolean | WashingUser$WashingTopUpArgs
    WashingUseHistory?: boolean | WashingUser$WashingUseHistoryArgs
    _count?: boolean | WashingUserCountOutputTypeArgs
  }

  export type WashingUserGetPayload<S extends boolean | null | undefined | WashingUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingUser :
    S extends undefined ? never :
    S extends { include: any } & (WashingUserArgs | WashingUserFindManyArgs)
    ? WashingUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'WashingTopUp' ? Array < WashingTopUpGetPayload<S['include'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['include'][P]>>  :
        P extends '_count' ? WashingUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingUserArgs | WashingUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'WashingTopUp' ? Array < WashingTopUpGetPayload<S['select'][P]>>  :
        P extends 'WashingUseHistory' ? Array < WashingUseHistoryGetPayload<S['select'][P]>>  :
        P extends '_count' ? WashingUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof WashingUser ? WashingUser[P] : never
  } 
      : WashingUser


  type WashingUserCountArgs = 
    Omit<WashingUserFindManyArgs, 'select' | 'include'> & {
      select?: WashingUserCountAggregateInputType | true
    }

  export interface WashingUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingUser that matches the filter.
     * @param {WashingUserFindUniqueArgs} args - Arguments to find a WashingUser
     * @example
     * // Get one WashingUser
     * const washingUser = await prisma.washingUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingUser'> extends True ? Prisma__WashingUserClient<WashingUserGetPayload<T>> : Prisma__WashingUserClient<WashingUserGetPayload<T> | null, null>

    /**
     * Find one WashingUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingUserFindUniqueOrThrowArgs} args - Arguments to find a WashingUser
     * @example
     * // Get one WashingUser
     * const washingUser = await prisma.washingUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingUserFindUniqueOrThrowArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Find the first WashingUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserFindFirstArgs} args - Arguments to find a WashingUser
     * @example
     * // Get one WashingUser
     * const washingUser = await prisma.washingUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingUser'> extends True ? Prisma__WashingUserClient<WashingUserGetPayload<T>> : Prisma__WashingUserClient<WashingUserGetPayload<T> | null, null>

    /**
     * Find the first WashingUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserFindFirstOrThrowArgs} args - Arguments to find a WashingUser
     * @example
     * // Get one WashingUser
     * const washingUser = await prisma.washingUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingUserFindFirstOrThrowArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Find zero or more WashingUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingUsers
     * const washingUsers = await prisma.washingUser.findMany()
     * 
     * // Get first 10 WashingUsers
     * const washingUsers = await prisma.washingUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingUserWithIdOnly = await prisma.washingUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingUserFindManyArgs>(
      args?: SelectSubset<T, WashingUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingUserGetPayload<T>>>

    /**
     * Create a WashingUser.
     * @param {WashingUserCreateArgs} args - Arguments to create a WashingUser.
     * @example
     * // Create one WashingUser
     * const WashingUser = await prisma.washingUser.create({
     *   data: {
     *     // ... data to create a WashingUser
     *   }
     * })
     * 
    **/
    create<T extends WashingUserCreateArgs>(
      args: SelectSubset<T, WashingUserCreateArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Create many WashingUsers.
     *     @param {WashingUserCreateManyArgs} args - Arguments to create many WashingUsers.
     *     @example
     *     // Create many WashingUsers
     *     const washingUser = await prisma.washingUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingUserCreateManyArgs>(
      args?: SelectSubset<T, WashingUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingUser.
     * @param {WashingUserDeleteArgs} args - Arguments to delete one WashingUser.
     * @example
     * // Delete one WashingUser
     * const WashingUser = await prisma.washingUser.delete({
     *   where: {
     *     // ... filter to delete one WashingUser
     *   }
     * })
     * 
    **/
    delete<T extends WashingUserDeleteArgs>(
      args: SelectSubset<T, WashingUserDeleteArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Update one WashingUser.
     * @param {WashingUserUpdateArgs} args - Arguments to update one WashingUser.
     * @example
     * // Update one WashingUser
     * const washingUser = await prisma.washingUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingUserUpdateArgs>(
      args: SelectSubset<T, WashingUserUpdateArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Delete zero or more WashingUsers.
     * @param {WashingUserDeleteManyArgs} args - Arguments to filter WashingUsers to delete.
     * @example
     * // Delete a few WashingUsers
     * const { count } = await prisma.washingUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingUserDeleteManyArgs>(
      args?: SelectSubset<T, WashingUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingUsers
     * const washingUser = await prisma.washingUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingUserUpdateManyArgs>(
      args: SelectSubset<T, WashingUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingUser.
     * @param {WashingUserUpsertArgs} args - Arguments to update or create a WashingUser.
     * @example
     * // Update or create a WashingUser
     * const washingUser = await prisma.washingUser.upsert({
     *   create: {
     *     // ... data to create a WashingUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingUser we want to update
     *   }
     * })
    **/
    upsert<T extends WashingUserUpsertArgs>(
      args: SelectSubset<T, WashingUserUpsertArgs>
    ): Prisma__WashingUserClient<WashingUserGetPayload<T>>

    /**
     * Count the number of WashingUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserCountArgs} args - Arguments to filter WashingUsers to count.
     * @example
     * // Count the number of WashingUsers
     * const count = await prisma.washingUser.count({
     *   where: {
     *     // ... the filter for the WashingUsers we want to count
     *   }
     * })
    **/
    count<T extends WashingUserCountArgs>(
      args?: Subset<T, WashingUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingUserAggregateArgs>(args: Subset<T, WashingUserAggregateArgs>): Prisma.PrismaPromise<GetWashingUserAggregateType<T>>

    /**
     * Group by WashingUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingUserGroupByArgs['orderBy'] }
        : { orderBy?: WashingUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    WashingTopUp<T extends WashingUser$WashingTopUpArgs= {}>(args?: Subset<T, WashingUser$WashingTopUpArgs>): Prisma.PrismaPromise<Array<WashingTopUpGetPayload<T>>| Null>;

    WashingUseHistory<T extends WashingUser$WashingUseHistoryArgs= {}>(args?: Subset<T, WashingUser$WashingUseHistoryArgs>): Prisma.PrismaPromise<Array<WashingUseHistoryGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingUser base type for findUnique actions
   */
  export type WashingUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter, which WashingUser to fetch.
     */
    where: WashingUserWhereUniqueInput
  }

  /**
   * WashingUser findUnique
   */
  export interface WashingUserFindUniqueArgs extends WashingUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingUser findUniqueOrThrow
   */
  export type WashingUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter, which WashingUser to fetch.
     */
    where: WashingUserWhereUniqueInput
  }


  /**
   * WashingUser base type for findFirst actions
   */
  export type WashingUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter, which WashingUser to fetch.
     */
    where?: WashingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUsers to fetch.
     */
    orderBy?: Enumerable<WashingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingUsers.
     */
    cursor?: WashingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingUsers.
     */
    distinct?: Enumerable<WashingUserScalarFieldEnum>
  }

  /**
   * WashingUser findFirst
   */
  export interface WashingUserFindFirstArgs extends WashingUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingUser findFirstOrThrow
   */
  export type WashingUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter, which WashingUser to fetch.
     */
    where?: WashingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUsers to fetch.
     */
    orderBy?: Enumerable<WashingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingUsers.
     */
    cursor?: WashingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingUsers.
     */
    distinct?: Enumerable<WashingUserScalarFieldEnum>
  }


  /**
   * WashingUser findMany
   */
  export type WashingUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter, which WashingUsers to fetch.
     */
    where?: WashingUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUsers to fetch.
     */
    orderBy?: Enumerable<WashingUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingUsers.
     */
    cursor?: WashingUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUsers.
     */
    skip?: number
    distinct?: Enumerable<WashingUserScalarFieldEnum>
  }


  /**
   * WashingUser create
   */
  export type WashingUserCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * The data needed to create a WashingUser.
     */
    data: XOR<WashingUserCreateInput, WashingUserUncheckedCreateInput>
  }


  /**
   * WashingUser createMany
   */
  export type WashingUserCreateManyArgs = {
    /**
     * The data used to create many WashingUsers.
     */
    data: Enumerable<WashingUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingUser update
   */
  export type WashingUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * The data needed to update a WashingUser.
     */
    data: XOR<WashingUserUpdateInput, WashingUserUncheckedUpdateInput>
    /**
     * Choose, which WashingUser to update.
     */
    where: WashingUserWhereUniqueInput
  }


  /**
   * WashingUser updateMany
   */
  export type WashingUserUpdateManyArgs = {
    /**
     * The data used to update WashingUsers.
     */
    data: XOR<WashingUserUpdateManyMutationInput, WashingUserUncheckedUpdateManyInput>
    /**
     * Filter which WashingUsers to update
     */
    where?: WashingUserWhereInput
  }


  /**
   * WashingUser upsert
   */
  export type WashingUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * The filter to search for the WashingUser to update in case it exists.
     */
    where: WashingUserWhereUniqueInput
    /**
     * In case the WashingUser found by the `where` argument doesn't exist, create a new WashingUser with this data.
     */
    create: XOR<WashingUserCreateInput, WashingUserUncheckedCreateInput>
    /**
     * In case the WashingUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingUserUpdateInput, WashingUserUncheckedUpdateInput>
  }


  /**
   * WashingUser delete
   */
  export type WashingUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
    /**
     * Filter which WashingUser to delete.
     */
    where: WashingUserWhereUniqueInput
  }


  /**
   * WashingUser deleteMany
   */
  export type WashingUserDeleteManyArgs = {
    /**
     * Filter which WashingUsers to delete
     */
    where?: WashingUserWhereInput
  }


  /**
   * WashingUser.WashingTopUp
   */
  export type WashingUser$WashingTopUpArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    where?: WashingTopUpWhereInput
    orderBy?: Enumerable<WashingTopUpOrderByWithRelationInput>
    cursor?: WashingTopUpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingTopUpScalarFieldEnum>
  }


  /**
   * WashingUser.WashingUseHistory
   */
  export type WashingUser$WashingUseHistoryArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    where?: WashingUseHistoryWhereInput
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    cursor?: WashingUseHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingUser without action
   */
  export type WashingUserArgs = {
    /**
     * Select specific fields to fetch from the WashingUser
     */
    select?: WashingUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUserInclude | null
  }



  /**
   * Model WashingTopUp
   */


  export type AggregateWashingTopUp = {
    _count: WashingTopUpCountAggregateOutputType | null
    _avg: WashingTopUpAvgAggregateOutputType | null
    _sum: WashingTopUpSumAggregateOutputType | null
    _min: WashingTopUpMinAggregateOutputType | null
    _max: WashingTopUpMaxAggregateOutputType | null
  }

  export type WashingTopUpAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    topUpAmount: number | null
  }

  export type WashingTopUpSumAggregateOutputType = {
    id: number | null
    userId: number | null
    topUpAmount: number | null
  }

  export type WashingTopUpMinAggregateOutputType = {
    id: number | null
    userId: number | null
    topUpAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingTopUpMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    topUpAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingTopUpCountAggregateOutputType = {
    id: number
    userId: number
    topUpAmount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingTopUpAvgAggregateInputType = {
    id?: true
    userId?: true
    topUpAmount?: true
  }

  export type WashingTopUpSumAggregateInputType = {
    id?: true
    userId?: true
    topUpAmount?: true
  }

  export type WashingTopUpMinAggregateInputType = {
    id?: true
    userId?: true
    topUpAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingTopUpMaxAggregateInputType = {
    id?: true
    userId?: true
    topUpAmount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingTopUpCountAggregateInputType = {
    id?: true
    userId?: true
    topUpAmount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingTopUpAggregateArgs = {
    /**
     * Filter which WashingTopUp to aggregate.
     */
    where?: WashingTopUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingTopUps to fetch.
     */
    orderBy?: Enumerable<WashingTopUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingTopUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingTopUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingTopUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingTopUps
    **/
    _count?: true | WashingTopUpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingTopUpAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingTopUpSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingTopUpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingTopUpMaxAggregateInputType
  }

  export type GetWashingTopUpAggregateType<T extends WashingTopUpAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingTopUp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingTopUp[P]>
      : GetScalarType<T[P], AggregateWashingTopUp[P]>
  }




  export type WashingTopUpGroupByArgs = {
    where?: WashingTopUpWhereInput
    orderBy?: Enumerable<WashingTopUpOrderByWithAggregationInput>
    by: WashingTopUpScalarFieldEnum[]
    having?: WashingTopUpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingTopUpCountAggregateInputType | true
    _avg?: WashingTopUpAvgAggregateInputType
    _sum?: WashingTopUpSumAggregateInputType
    _min?: WashingTopUpMinAggregateInputType
    _max?: WashingTopUpMaxAggregateInputType
  }


  export type WashingTopUpGroupByOutputType = {
    id: number
    userId: number
    topUpAmount: number
    createdAt: Date
    updatedAt: Date
    _count: WashingTopUpCountAggregateOutputType | null
    _avg: WashingTopUpAvgAggregateOutputType | null
    _sum: WashingTopUpSumAggregateOutputType | null
    _min: WashingTopUpMinAggregateOutputType | null
    _max: WashingTopUpMaxAggregateOutputType | null
  }

  type GetWashingTopUpGroupByPayload<T extends WashingTopUpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingTopUpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingTopUpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingTopUpGroupByOutputType[P]>
            : GetScalarType<T[P], WashingTopUpGroupByOutputType[P]>
        }
      >
    >


  export type WashingTopUpSelect = {
    id?: boolean
    user?: boolean | WashingUserArgs
    userId?: boolean
    topUpAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type WashingTopUpInclude = {
    user?: boolean | WashingUserArgs
  }

  export type WashingTopUpGetPayload<S extends boolean | null | undefined | WashingTopUpArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingTopUp :
    S extends undefined ? never :
    S extends { include: any } & (WashingTopUpArgs | WashingTopUpFindManyArgs)
    ? WashingTopUp  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? WashingUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingTopUpArgs | WashingTopUpFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? WashingUserGetPayload<S['select'][P]> :  P extends keyof WashingTopUp ? WashingTopUp[P] : never
  } 
      : WashingTopUp


  type WashingTopUpCountArgs = 
    Omit<WashingTopUpFindManyArgs, 'select' | 'include'> & {
      select?: WashingTopUpCountAggregateInputType | true
    }

  export interface WashingTopUpDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingTopUp that matches the filter.
     * @param {WashingTopUpFindUniqueArgs} args - Arguments to find a WashingTopUp
     * @example
     * // Get one WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingTopUpFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingTopUpFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingTopUp'> extends True ? Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>> : Prisma__WashingTopUpClient<WashingTopUpGetPayload<T> | null, null>

    /**
     * Find one WashingTopUp that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingTopUpFindUniqueOrThrowArgs} args - Arguments to find a WashingTopUp
     * @example
     * // Get one WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingTopUpFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingTopUpFindUniqueOrThrowArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Find the first WashingTopUp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpFindFirstArgs} args - Arguments to find a WashingTopUp
     * @example
     * // Get one WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingTopUpFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingTopUpFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingTopUp'> extends True ? Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>> : Prisma__WashingTopUpClient<WashingTopUpGetPayload<T> | null, null>

    /**
     * Find the first WashingTopUp that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpFindFirstOrThrowArgs} args - Arguments to find a WashingTopUp
     * @example
     * // Get one WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingTopUpFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingTopUpFindFirstOrThrowArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Find zero or more WashingTopUps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingTopUps
     * const washingTopUps = await prisma.washingTopUp.findMany()
     * 
     * // Get first 10 WashingTopUps
     * const washingTopUps = await prisma.washingTopUp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingTopUpWithIdOnly = await prisma.washingTopUp.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingTopUpFindManyArgs>(
      args?: SelectSubset<T, WashingTopUpFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingTopUpGetPayload<T>>>

    /**
     * Create a WashingTopUp.
     * @param {WashingTopUpCreateArgs} args - Arguments to create a WashingTopUp.
     * @example
     * // Create one WashingTopUp
     * const WashingTopUp = await prisma.washingTopUp.create({
     *   data: {
     *     // ... data to create a WashingTopUp
     *   }
     * })
     * 
    **/
    create<T extends WashingTopUpCreateArgs>(
      args: SelectSubset<T, WashingTopUpCreateArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Create many WashingTopUps.
     *     @param {WashingTopUpCreateManyArgs} args - Arguments to create many WashingTopUps.
     *     @example
     *     // Create many WashingTopUps
     *     const washingTopUp = await prisma.washingTopUp.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingTopUpCreateManyArgs>(
      args?: SelectSubset<T, WashingTopUpCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingTopUp.
     * @param {WashingTopUpDeleteArgs} args - Arguments to delete one WashingTopUp.
     * @example
     * // Delete one WashingTopUp
     * const WashingTopUp = await prisma.washingTopUp.delete({
     *   where: {
     *     // ... filter to delete one WashingTopUp
     *   }
     * })
     * 
    **/
    delete<T extends WashingTopUpDeleteArgs>(
      args: SelectSubset<T, WashingTopUpDeleteArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Update one WashingTopUp.
     * @param {WashingTopUpUpdateArgs} args - Arguments to update one WashingTopUp.
     * @example
     * // Update one WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingTopUpUpdateArgs>(
      args: SelectSubset<T, WashingTopUpUpdateArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Delete zero or more WashingTopUps.
     * @param {WashingTopUpDeleteManyArgs} args - Arguments to filter WashingTopUps to delete.
     * @example
     * // Delete a few WashingTopUps
     * const { count } = await prisma.washingTopUp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingTopUpDeleteManyArgs>(
      args?: SelectSubset<T, WashingTopUpDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingTopUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingTopUps
     * const washingTopUp = await prisma.washingTopUp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingTopUpUpdateManyArgs>(
      args: SelectSubset<T, WashingTopUpUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingTopUp.
     * @param {WashingTopUpUpsertArgs} args - Arguments to update or create a WashingTopUp.
     * @example
     * // Update or create a WashingTopUp
     * const washingTopUp = await prisma.washingTopUp.upsert({
     *   create: {
     *     // ... data to create a WashingTopUp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingTopUp we want to update
     *   }
     * })
    **/
    upsert<T extends WashingTopUpUpsertArgs>(
      args: SelectSubset<T, WashingTopUpUpsertArgs>
    ): Prisma__WashingTopUpClient<WashingTopUpGetPayload<T>>

    /**
     * Count the number of WashingTopUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpCountArgs} args - Arguments to filter WashingTopUps to count.
     * @example
     * // Count the number of WashingTopUps
     * const count = await prisma.washingTopUp.count({
     *   where: {
     *     // ... the filter for the WashingTopUps we want to count
     *   }
     * })
    **/
    count<T extends WashingTopUpCountArgs>(
      args?: Subset<T, WashingTopUpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingTopUpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingTopUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingTopUpAggregateArgs>(args: Subset<T, WashingTopUpAggregateArgs>): Prisma.PrismaPromise<GetWashingTopUpAggregateType<T>>

    /**
     * Group by WashingTopUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingTopUpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingTopUpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingTopUpGroupByArgs['orderBy'] }
        : { orderBy?: WashingTopUpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingTopUpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingTopUpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingTopUp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingTopUpClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends WashingUserArgs= {}>(args?: Subset<T, WashingUserArgs>): Prisma__WashingUserClient<WashingUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingTopUp base type for findUnique actions
   */
  export type WashingTopUpFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter, which WashingTopUp to fetch.
     */
    where: WashingTopUpWhereUniqueInput
  }

  /**
   * WashingTopUp findUnique
   */
  export interface WashingTopUpFindUniqueArgs extends WashingTopUpFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingTopUp findUniqueOrThrow
   */
  export type WashingTopUpFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter, which WashingTopUp to fetch.
     */
    where: WashingTopUpWhereUniqueInput
  }


  /**
   * WashingTopUp base type for findFirst actions
   */
  export type WashingTopUpFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter, which WashingTopUp to fetch.
     */
    where?: WashingTopUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingTopUps to fetch.
     */
    orderBy?: Enumerable<WashingTopUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingTopUps.
     */
    cursor?: WashingTopUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingTopUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingTopUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingTopUps.
     */
    distinct?: Enumerable<WashingTopUpScalarFieldEnum>
  }

  /**
   * WashingTopUp findFirst
   */
  export interface WashingTopUpFindFirstArgs extends WashingTopUpFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingTopUp findFirstOrThrow
   */
  export type WashingTopUpFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter, which WashingTopUp to fetch.
     */
    where?: WashingTopUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingTopUps to fetch.
     */
    orderBy?: Enumerable<WashingTopUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingTopUps.
     */
    cursor?: WashingTopUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingTopUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingTopUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingTopUps.
     */
    distinct?: Enumerable<WashingTopUpScalarFieldEnum>
  }


  /**
   * WashingTopUp findMany
   */
  export type WashingTopUpFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter, which WashingTopUps to fetch.
     */
    where?: WashingTopUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingTopUps to fetch.
     */
    orderBy?: Enumerable<WashingTopUpOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingTopUps.
     */
    cursor?: WashingTopUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingTopUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingTopUps.
     */
    skip?: number
    distinct?: Enumerable<WashingTopUpScalarFieldEnum>
  }


  /**
   * WashingTopUp create
   */
  export type WashingTopUpCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * The data needed to create a WashingTopUp.
     */
    data: XOR<WashingTopUpCreateInput, WashingTopUpUncheckedCreateInput>
  }


  /**
   * WashingTopUp createMany
   */
  export type WashingTopUpCreateManyArgs = {
    /**
     * The data used to create many WashingTopUps.
     */
    data: Enumerable<WashingTopUpCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingTopUp update
   */
  export type WashingTopUpUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * The data needed to update a WashingTopUp.
     */
    data: XOR<WashingTopUpUpdateInput, WashingTopUpUncheckedUpdateInput>
    /**
     * Choose, which WashingTopUp to update.
     */
    where: WashingTopUpWhereUniqueInput
  }


  /**
   * WashingTopUp updateMany
   */
  export type WashingTopUpUpdateManyArgs = {
    /**
     * The data used to update WashingTopUps.
     */
    data: XOR<WashingTopUpUpdateManyMutationInput, WashingTopUpUncheckedUpdateManyInput>
    /**
     * Filter which WashingTopUps to update
     */
    where?: WashingTopUpWhereInput
  }


  /**
   * WashingTopUp upsert
   */
  export type WashingTopUpUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * The filter to search for the WashingTopUp to update in case it exists.
     */
    where: WashingTopUpWhereUniqueInput
    /**
     * In case the WashingTopUp found by the `where` argument doesn't exist, create a new WashingTopUp with this data.
     */
    create: XOR<WashingTopUpCreateInput, WashingTopUpUncheckedCreateInput>
    /**
     * In case the WashingTopUp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingTopUpUpdateInput, WashingTopUpUncheckedUpdateInput>
  }


  /**
   * WashingTopUp delete
   */
  export type WashingTopUpDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
    /**
     * Filter which WashingTopUp to delete.
     */
    where: WashingTopUpWhereUniqueInput
  }


  /**
   * WashingTopUp deleteMany
   */
  export type WashingTopUpDeleteManyArgs = {
    /**
     * Filter which WashingTopUps to delete
     */
    where?: WashingTopUpWhereInput
  }


  /**
   * WashingTopUp without action
   */
  export type WashingTopUpArgs = {
    /**
     * Select specific fields to fetch from the WashingTopUp
     */
    select?: WashingTopUpSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingTopUpInclude | null
  }



  /**
   * Model WashingUseHistory
   */


  export type AggregateWashingUseHistory = {
    _count: WashingUseHistoryCountAggregateOutputType | null
    _avg: WashingUseHistoryAvgAggregateOutputType | null
    _sum: WashingUseHistorySumAggregateOutputType | null
    _min: WashingUseHistoryMinAggregateOutputType | null
    _max: WashingUseHistoryMaxAggregateOutputType | null
  }

  export type WashingUseHistoryAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    machineId: number | null
    programId: number | null
    price: number | null
  }

  export type WashingUseHistorySumAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    machineId: number | null
    programId: number | null
    price: number | null
  }

  export type WashingUseHistoryMinAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    machineId: number | null
    programId: number | null
    price: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingUseHistoryMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    branchId: number | null
    machineId: number | null
    programId: number | null
    price: number | null
    startTime: Date | null
    endTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WashingUseHistoryCountAggregateOutputType = {
    id: number
    userId: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: number
    endTime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WashingUseHistoryAvgAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    machineId?: true
    programId?: true
    price?: true
  }

  export type WashingUseHistorySumAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    machineId?: true
    programId?: true
    price?: true
  }

  export type WashingUseHistoryMinAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    machineId?: true
    programId?: true
    price?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingUseHistoryMaxAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    machineId?: true
    programId?: true
    price?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WashingUseHistoryCountAggregateInputType = {
    id?: true
    userId?: true
    branchId?: true
    machineId?: true
    programId?: true
    price?: true
    startTime?: true
    endTime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WashingUseHistoryAggregateArgs = {
    /**
     * Filter which WashingUseHistory to aggregate.
     */
    where?: WashingUseHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUseHistories to fetch.
     */
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WashingUseHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUseHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUseHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WashingUseHistories
    **/
    _count?: true | WashingUseHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WashingUseHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WashingUseHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WashingUseHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WashingUseHistoryMaxAggregateInputType
  }

  export type GetWashingUseHistoryAggregateType<T extends WashingUseHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateWashingUseHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWashingUseHistory[P]>
      : GetScalarType<T[P], AggregateWashingUseHistory[P]>
  }




  export type WashingUseHistoryGroupByArgs = {
    where?: WashingUseHistoryWhereInput
    orderBy?: Enumerable<WashingUseHistoryOrderByWithAggregationInput>
    by: WashingUseHistoryScalarFieldEnum[]
    having?: WashingUseHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WashingUseHistoryCountAggregateInputType | true
    _avg?: WashingUseHistoryAvgAggregateInputType
    _sum?: WashingUseHistorySumAggregateInputType
    _min?: WashingUseHistoryMinAggregateInputType
    _max?: WashingUseHistoryMaxAggregateInputType
  }


  export type WashingUseHistoryGroupByOutputType = {
    id: number
    userId: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: Date
    endTime: Date
    createdAt: Date
    updatedAt: Date
    _count: WashingUseHistoryCountAggregateOutputType | null
    _avg: WashingUseHistoryAvgAggregateOutputType | null
    _sum: WashingUseHistorySumAggregateOutputType | null
    _min: WashingUseHistoryMinAggregateOutputType | null
    _max: WashingUseHistoryMaxAggregateOutputType | null
  }

  type GetWashingUseHistoryGroupByPayload<T extends WashingUseHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WashingUseHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WashingUseHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WashingUseHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], WashingUseHistoryGroupByOutputType[P]>
        }
      >
    >


  export type WashingUseHistorySelect = {
    id?: boolean
    user?: boolean | WashingUserArgs
    userId?: boolean
    useAtBranch?: boolean | WashingBranchArgs
    branchId?: boolean
    useAtMachine?: boolean | WashingMachineArgs
    machineId?: boolean
    useProgram?: boolean | WashingMachineProgramArgs
    programId?: boolean
    price?: boolean
    startTime?: boolean
    endTime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type WashingUseHistoryInclude = {
    user?: boolean | WashingUserArgs
    useAtBranch?: boolean | WashingBranchArgs
    useAtMachine?: boolean | WashingMachineArgs
    useProgram?: boolean | WashingMachineProgramArgs
  }

  export type WashingUseHistoryGetPayload<S extends boolean | null | undefined | WashingUseHistoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? WashingUseHistory :
    S extends undefined ? never :
    S extends { include: any } & (WashingUseHistoryArgs | WashingUseHistoryFindManyArgs)
    ? WashingUseHistory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? WashingUserGetPayload<S['include'][P]> :
        P extends 'useAtBranch' ? WashingBranchGetPayload<S['include'][P]> :
        P extends 'useAtMachine' ? WashingMachineGetPayload<S['include'][P]> :
        P extends 'useProgram' ? WashingMachineProgramGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (WashingUseHistoryArgs | WashingUseHistoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? WashingUserGetPayload<S['select'][P]> :
        P extends 'useAtBranch' ? WashingBranchGetPayload<S['select'][P]> :
        P extends 'useAtMachine' ? WashingMachineGetPayload<S['select'][P]> :
        P extends 'useProgram' ? WashingMachineProgramGetPayload<S['select'][P]> :  P extends keyof WashingUseHistory ? WashingUseHistory[P] : never
  } 
      : WashingUseHistory


  type WashingUseHistoryCountArgs = 
    Omit<WashingUseHistoryFindManyArgs, 'select' | 'include'> & {
      select?: WashingUseHistoryCountAggregateInputType | true
    }

  export interface WashingUseHistoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one WashingUseHistory that matches the filter.
     * @param {WashingUseHistoryFindUniqueArgs} args - Arguments to find a WashingUseHistory
     * @example
     * // Get one WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WashingUseHistoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WashingUseHistoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'WashingUseHistory'> extends True ? Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>> : Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T> | null, null>

    /**
     * Find one WashingUseHistory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WashingUseHistoryFindUniqueOrThrowArgs} args - Arguments to find a WashingUseHistory
     * @example
     * // Get one WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WashingUseHistoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, WashingUseHistoryFindUniqueOrThrowArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Find the first WashingUseHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryFindFirstArgs} args - Arguments to find a WashingUseHistory
     * @example
     * // Get one WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WashingUseHistoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WashingUseHistoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'WashingUseHistory'> extends True ? Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>> : Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T> | null, null>

    /**
     * Find the first WashingUseHistory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryFindFirstOrThrowArgs} args - Arguments to find a WashingUseHistory
     * @example
     * // Get one WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WashingUseHistoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, WashingUseHistoryFindFirstOrThrowArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Find zero or more WashingUseHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WashingUseHistories
     * const washingUseHistories = await prisma.washingUseHistory.findMany()
     * 
     * // Get first 10 WashingUseHistories
     * const washingUseHistories = await prisma.washingUseHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const washingUseHistoryWithIdOnly = await prisma.washingUseHistory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WashingUseHistoryFindManyArgs>(
      args?: SelectSubset<T, WashingUseHistoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<WashingUseHistoryGetPayload<T>>>

    /**
     * Create a WashingUseHistory.
     * @param {WashingUseHistoryCreateArgs} args - Arguments to create a WashingUseHistory.
     * @example
     * // Create one WashingUseHistory
     * const WashingUseHistory = await prisma.washingUseHistory.create({
     *   data: {
     *     // ... data to create a WashingUseHistory
     *   }
     * })
     * 
    **/
    create<T extends WashingUseHistoryCreateArgs>(
      args: SelectSubset<T, WashingUseHistoryCreateArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Create many WashingUseHistories.
     *     @param {WashingUseHistoryCreateManyArgs} args - Arguments to create many WashingUseHistories.
     *     @example
     *     // Create many WashingUseHistories
     *     const washingUseHistory = await prisma.washingUseHistory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WashingUseHistoryCreateManyArgs>(
      args?: SelectSubset<T, WashingUseHistoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WashingUseHistory.
     * @param {WashingUseHistoryDeleteArgs} args - Arguments to delete one WashingUseHistory.
     * @example
     * // Delete one WashingUseHistory
     * const WashingUseHistory = await prisma.washingUseHistory.delete({
     *   where: {
     *     // ... filter to delete one WashingUseHistory
     *   }
     * })
     * 
    **/
    delete<T extends WashingUseHistoryDeleteArgs>(
      args: SelectSubset<T, WashingUseHistoryDeleteArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Update one WashingUseHistory.
     * @param {WashingUseHistoryUpdateArgs} args - Arguments to update one WashingUseHistory.
     * @example
     * // Update one WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WashingUseHistoryUpdateArgs>(
      args: SelectSubset<T, WashingUseHistoryUpdateArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Delete zero or more WashingUseHistories.
     * @param {WashingUseHistoryDeleteManyArgs} args - Arguments to filter WashingUseHistories to delete.
     * @example
     * // Delete a few WashingUseHistories
     * const { count } = await prisma.washingUseHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WashingUseHistoryDeleteManyArgs>(
      args?: SelectSubset<T, WashingUseHistoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WashingUseHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WashingUseHistories
     * const washingUseHistory = await prisma.washingUseHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WashingUseHistoryUpdateManyArgs>(
      args: SelectSubset<T, WashingUseHistoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WashingUseHistory.
     * @param {WashingUseHistoryUpsertArgs} args - Arguments to update or create a WashingUseHistory.
     * @example
     * // Update or create a WashingUseHistory
     * const washingUseHistory = await prisma.washingUseHistory.upsert({
     *   create: {
     *     // ... data to create a WashingUseHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WashingUseHistory we want to update
     *   }
     * })
    **/
    upsert<T extends WashingUseHistoryUpsertArgs>(
      args: SelectSubset<T, WashingUseHistoryUpsertArgs>
    ): Prisma__WashingUseHistoryClient<WashingUseHistoryGetPayload<T>>

    /**
     * Count the number of WashingUseHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryCountArgs} args - Arguments to filter WashingUseHistories to count.
     * @example
     * // Count the number of WashingUseHistories
     * const count = await prisma.washingUseHistory.count({
     *   where: {
     *     // ... the filter for the WashingUseHistories we want to count
     *   }
     * })
    **/
    count<T extends WashingUseHistoryCountArgs>(
      args?: Subset<T, WashingUseHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WashingUseHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WashingUseHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WashingUseHistoryAggregateArgs>(args: Subset<T, WashingUseHistoryAggregateArgs>): Prisma.PrismaPromise<GetWashingUseHistoryAggregateType<T>>

    /**
     * Group by WashingUseHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WashingUseHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WashingUseHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WashingUseHistoryGroupByArgs['orderBy'] }
        : { orderBy?: WashingUseHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WashingUseHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWashingUseHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for WashingUseHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WashingUseHistoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends WashingUserArgs= {}>(args?: Subset<T, WashingUserArgs>): Prisma__WashingUserClient<WashingUserGetPayload<T> | Null>;

    useAtBranch<T extends WashingBranchArgs= {}>(args?: Subset<T, WashingBranchArgs>): Prisma__WashingBranchClient<WashingBranchGetPayload<T> | Null>;

    useAtMachine<T extends WashingMachineArgs= {}>(args?: Subset<T, WashingMachineArgs>): Prisma__WashingMachineClient<WashingMachineGetPayload<T> | Null>;

    useProgram<T extends WashingMachineProgramArgs= {}>(args?: Subset<T, WashingMachineProgramArgs>): Prisma__WashingMachineProgramClient<WashingMachineProgramGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * WashingUseHistory base type for findUnique actions
   */
  export type WashingUseHistoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter, which WashingUseHistory to fetch.
     */
    where: WashingUseHistoryWhereUniqueInput
  }

  /**
   * WashingUseHistory findUnique
   */
  export interface WashingUseHistoryFindUniqueArgs extends WashingUseHistoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingUseHistory findUniqueOrThrow
   */
  export type WashingUseHistoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter, which WashingUseHistory to fetch.
     */
    where: WashingUseHistoryWhereUniqueInput
  }


  /**
   * WashingUseHistory base type for findFirst actions
   */
  export type WashingUseHistoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter, which WashingUseHistory to fetch.
     */
    where?: WashingUseHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUseHistories to fetch.
     */
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingUseHistories.
     */
    cursor?: WashingUseHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUseHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUseHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingUseHistories.
     */
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }

  /**
   * WashingUseHistory findFirst
   */
  export interface WashingUseHistoryFindFirstArgs extends WashingUseHistoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * WashingUseHistory findFirstOrThrow
   */
  export type WashingUseHistoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter, which WashingUseHistory to fetch.
     */
    where?: WashingUseHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUseHistories to fetch.
     */
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WashingUseHistories.
     */
    cursor?: WashingUseHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUseHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUseHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WashingUseHistories.
     */
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingUseHistory findMany
   */
  export type WashingUseHistoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter, which WashingUseHistories to fetch.
     */
    where?: WashingUseHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WashingUseHistories to fetch.
     */
    orderBy?: Enumerable<WashingUseHistoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WashingUseHistories.
     */
    cursor?: WashingUseHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WashingUseHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WashingUseHistories.
     */
    skip?: number
    distinct?: Enumerable<WashingUseHistoryScalarFieldEnum>
  }


  /**
   * WashingUseHistory create
   */
  export type WashingUseHistoryCreateArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * The data needed to create a WashingUseHistory.
     */
    data: XOR<WashingUseHistoryCreateInput, WashingUseHistoryUncheckedCreateInput>
  }


  /**
   * WashingUseHistory createMany
   */
  export type WashingUseHistoryCreateManyArgs = {
    /**
     * The data used to create many WashingUseHistories.
     */
    data: Enumerable<WashingUseHistoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * WashingUseHistory update
   */
  export type WashingUseHistoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * The data needed to update a WashingUseHistory.
     */
    data: XOR<WashingUseHistoryUpdateInput, WashingUseHistoryUncheckedUpdateInput>
    /**
     * Choose, which WashingUseHistory to update.
     */
    where: WashingUseHistoryWhereUniqueInput
  }


  /**
   * WashingUseHistory updateMany
   */
  export type WashingUseHistoryUpdateManyArgs = {
    /**
     * The data used to update WashingUseHistories.
     */
    data: XOR<WashingUseHistoryUpdateManyMutationInput, WashingUseHistoryUncheckedUpdateManyInput>
    /**
     * Filter which WashingUseHistories to update
     */
    where?: WashingUseHistoryWhereInput
  }


  /**
   * WashingUseHistory upsert
   */
  export type WashingUseHistoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * The filter to search for the WashingUseHistory to update in case it exists.
     */
    where: WashingUseHistoryWhereUniqueInput
    /**
     * In case the WashingUseHistory found by the `where` argument doesn't exist, create a new WashingUseHistory with this data.
     */
    create: XOR<WashingUseHistoryCreateInput, WashingUseHistoryUncheckedCreateInput>
    /**
     * In case the WashingUseHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WashingUseHistoryUpdateInput, WashingUseHistoryUncheckedUpdateInput>
  }


  /**
   * WashingUseHistory delete
   */
  export type WashingUseHistoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
    /**
     * Filter which WashingUseHistory to delete.
     */
    where: WashingUseHistoryWhereUniqueInput
  }


  /**
   * WashingUseHistory deleteMany
   */
  export type WashingUseHistoryDeleteManyArgs = {
    /**
     * Filter which WashingUseHistories to delete
     */
    where?: WashingUseHistoryWhereInput
  }


  /**
   * WashingUseHistory without action
   */
  export type WashingUseHistoryArgs = {
    /**
     * Select specific fields to fetch from the WashingUseHistory
     */
    select?: WashingUseHistorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WashingUseHistoryInclude | null
  }



  /**
   * Model YTUser
   */


  export type AggregateYTUser = {
    _count: YTUserCountAggregateOutputType | null
    _avg: YTUserAvgAggregateOutputType | null
    _sum: YTUserSumAggregateOutputType | null
    _min: YTUserMinAggregateOutputType | null
    _max: YTUserMaxAggregateOutputType | null
  }

  export type YTUserAvgAggregateOutputType = {
    id: number | null
  }

  export type YTUserSumAggregateOutputType = {
    id: number | null
  }

  export type YTUserMinAggregateOutputType = {
    id: number | null
    userName: string | null
    profileImage: string | null
    email: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTUserMaxAggregateOutputType = {
    id: number | null
    userName: string | null
    profileImage: string | null
    email: string | null
    bio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTUserCountAggregateOutputType = {
    id: number
    userName: number
    profileImage: number
    email: number
    bio: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTUserAvgAggregateInputType = {
    id?: true
  }

  export type YTUserSumAggregateInputType = {
    id?: true
  }

  export type YTUserMinAggregateInputType = {
    id?: true
    userName?: true
    profileImage?: true
    email?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTUserMaxAggregateInputType = {
    id?: true
    userName?: true
    profileImage?: true
    email?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTUserCountAggregateInputType = {
    id?: true
    userName?: true
    profileImage?: true
    email?: true
    bio?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTUserAggregateArgs = {
    /**
     * Filter which YTUser to aggregate.
     */
    where?: YTUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTUsers to fetch.
     */
    orderBy?: Enumerable<YTUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTUsers
    **/
    _count?: true | YTUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTUserMaxAggregateInputType
  }

  export type GetYTUserAggregateType<T extends YTUserAggregateArgs> = {
        [P in keyof T & keyof AggregateYTUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTUser[P]>
      : GetScalarType<T[P], AggregateYTUser[P]>
  }




  export type YTUserGroupByArgs = {
    where?: YTUserWhereInput
    orderBy?: Enumerable<YTUserOrderByWithAggregationInput>
    by: YTUserScalarFieldEnum[]
    having?: YTUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTUserCountAggregateInputType | true
    _avg?: YTUserAvgAggregateInputType
    _sum?: YTUserSumAggregateInputType
    _min?: YTUserMinAggregateInputType
    _max?: YTUserMaxAggregateInputType
  }


  export type YTUserGroupByOutputType = {
    id: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt: Date
    updatedAt: Date
    _count: YTUserCountAggregateOutputType | null
    _avg: YTUserAvgAggregateOutputType | null
    _sum: YTUserSumAggregateOutputType | null
    _min: YTUserMinAggregateOutputType | null
    _max: YTUserMaxAggregateOutputType | null
  }

  type GetYTUserGroupByPayload<T extends YTUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTUserGroupByOutputType[P]>
            : GetScalarType<T[P], YTUserGroupByOutputType[P]>
        }
      >
    >


  export type YTUserSelect = {
    id?: boolean
    userName?: boolean
    profileImage?: boolean
    email?: boolean
    bio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ChanelOnUser?: boolean | YTUser$ChanelOnUserArgs
    YTAdmin?: boolean | YTUser$YTAdminArgs
    YTComment?: boolean | YTUser$YTCommentArgs
    YTSubComment?: boolean | YTUser$YTSubCommentArgs
    YTSubscribe?: boolean | YTUser$YTSubscribeArgs
    _count?: boolean | YTUserCountOutputTypeArgs
  }


  export type YTUserInclude = {
    ChanelOnUser?: boolean | YTUser$ChanelOnUserArgs
    YTAdmin?: boolean | YTUser$YTAdminArgs
    YTComment?: boolean | YTUser$YTCommentArgs
    YTSubComment?: boolean | YTUser$YTSubCommentArgs
    YTSubscribe?: boolean | YTUser$YTSubscribeArgs
    _count?: boolean | YTUserCountOutputTypeArgs
  }

  export type YTUserGetPayload<S extends boolean | null | undefined | YTUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTUser :
    S extends undefined ? never :
    S extends { include: any } & (YTUserArgs | YTUserFindManyArgs)
    ? YTUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ChanelOnUser' ? Array < ChanelOnUserGetPayload<S['include'][P]>>  :
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['include'][P]>>  :
        P extends 'YTComment' ? Array < YTCommentGetPayload<S['include'][P]>>  :
        P extends 'YTSubComment' ? Array < YTSubCommentGetPayload<S['include'][P]>>  :
        P extends 'YTSubscribe' ? Array < YTSubscribeGetPayload<S['include'][P]>>  :
        P extends '_count' ? YTUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTUserArgs | YTUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ChanelOnUser' ? Array < ChanelOnUserGetPayload<S['select'][P]>>  :
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['select'][P]>>  :
        P extends 'YTComment' ? Array < YTCommentGetPayload<S['select'][P]>>  :
        P extends 'YTSubComment' ? Array < YTSubCommentGetPayload<S['select'][P]>>  :
        P extends 'YTSubscribe' ? Array < YTSubscribeGetPayload<S['select'][P]>>  :
        P extends '_count' ? YTUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YTUser ? YTUser[P] : never
  } 
      : YTUser


  type YTUserCountArgs = 
    Omit<YTUserFindManyArgs, 'select' | 'include'> & {
      select?: YTUserCountAggregateInputType | true
    }

  export interface YTUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTUser that matches the filter.
     * @param {YTUserFindUniqueArgs} args - Arguments to find a YTUser
     * @example
     * // Get one YTUser
     * const yTUser = await prisma.yTUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTUser'> extends True ? Prisma__YTUserClient<YTUserGetPayload<T>> : Prisma__YTUserClient<YTUserGetPayload<T> | null, null>

    /**
     * Find one YTUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTUserFindUniqueOrThrowArgs} args - Arguments to find a YTUser
     * @example
     * // Get one YTUser
     * const yTUser = await prisma.yTUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTUserFindUniqueOrThrowArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Find the first YTUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserFindFirstArgs} args - Arguments to find a YTUser
     * @example
     * // Get one YTUser
     * const yTUser = await prisma.yTUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTUser'> extends True ? Prisma__YTUserClient<YTUserGetPayload<T>> : Prisma__YTUserClient<YTUserGetPayload<T> | null, null>

    /**
     * Find the first YTUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserFindFirstOrThrowArgs} args - Arguments to find a YTUser
     * @example
     * // Get one YTUser
     * const yTUser = await prisma.yTUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTUserFindFirstOrThrowArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Find zero or more YTUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTUsers
     * const yTUsers = await prisma.yTUser.findMany()
     * 
     * // Get first 10 YTUsers
     * const yTUsers = await prisma.yTUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTUserWithIdOnly = await prisma.yTUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTUserFindManyArgs>(
      args?: SelectSubset<T, YTUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTUserGetPayload<T>>>

    /**
     * Create a YTUser.
     * @param {YTUserCreateArgs} args - Arguments to create a YTUser.
     * @example
     * // Create one YTUser
     * const YTUser = await prisma.yTUser.create({
     *   data: {
     *     // ... data to create a YTUser
     *   }
     * })
     * 
    **/
    create<T extends YTUserCreateArgs>(
      args: SelectSubset<T, YTUserCreateArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Create many YTUsers.
     *     @param {YTUserCreateManyArgs} args - Arguments to create many YTUsers.
     *     @example
     *     // Create many YTUsers
     *     const yTUser = await prisma.yTUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTUserCreateManyArgs>(
      args?: SelectSubset<T, YTUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTUser.
     * @param {YTUserDeleteArgs} args - Arguments to delete one YTUser.
     * @example
     * // Delete one YTUser
     * const YTUser = await prisma.yTUser.delete({
     *   where: {
     *     // ... filter to delete one YTUser
     *   }
     * })
     * 
    **/
    delete<T extends YTUserDeleteArgs>(
      args: SelectSubset<T, YTUserDeleteArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Update one YTUser.
     * @param {YTUserUpdateArgs} args - Arguments to update one YTUser.
     * @example
     * // Update one YTUser
     * const yTUser = await prisma.yTUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTUserUpdateArgs>(
      args: SelectSubset<T, YTUserUpdateArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Delete zero or more YTUsers.
     * @param {YTUserDeleteManyArgs} args - Arguments to filter YTUsers to delete.
     * @example
     * // Delete a few YTUsers
     * const { count } = await prisma.yTUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTUserDeleteManyArgs>(
      args?: SelectSubset<T, YTUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTUsers
     * const yTUser = await prisma.yTUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTUserUpdateManyArgs>(
      args: SelectSubset<T, YTUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTUser.
     * @param {YTUserUpsertArgs} args - Arguments to update or create a YTUser.
     * @example
     * // Update or create a YTUser
     * const yTUser = await prisma.yTUser.upsert({
     *   create: {
     *     // ... data to create a YTUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTUser we want to update
     *   }
     * })
    **/
    upsert<T extends YTUserUpsertArgs>(
      args: SelectSubset<T, YTUserUpsertArgs>
    ): Prisma__YTUserClient<YTUserGetPayload<T>>

    /**
     * Count the number of YTUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserCountArgs} args - Arguments to filter YTUsers to count.
     * @example
     * // Count the number of YTUsers
     * const count = await prisma.yTUser.count({
     *   where: {
     *     // ... the filter for the YTUsers we want to count
     *   }
     * })
    **/
    count<T extends YTUserCountArgs>(
      args?: Subset<T, YTUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTUserAggregateArgs>(args: Subset<T, YTUserAggregateArgs>): Prisma.PrismaPromise<GetYTUserAggregateType<T>>

    /**
     * Group by YTUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTUserGroupByArgs['orderBy'] }
        : { orderBy?: YTUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ChanelOnUser<T extends YTUser$ChanelOnUserArgs= {}>(args?: Subset<T, YTUser$ChanelOnUserArgs>): Prisma.PrismaPromise<Array<ChanelOnUserGetPayload<T>>| Null>;

    YTAdmin<T extends YTUser$YTAdminArgs= {}>(args?: Subset<T, YTUser$YTAdminArgs>): Prisma.PrismaPromise<Array<YTAdminGetPayload<T>>| Null>;

    YTComment<T extends YTUser$YTCommentArgs= {}>(args?: Subset<T, YTUser$YTCommentArgs>): Prisma.PrismaPromise<Array<YTCommentGetPayload<T>>| Null>;

    YTSubComment<T extends YTUser$YTSubCommentArgs= {}>(args?: Subset<T, YTUser$YTSubCommentArgs>): Prisma.PrismaPromise<Array<YTSubCommentGetPayload<T>>| Null>;

    YTSubscribe<T extends YTUser$YTSubscribeArgs= {}>(args?: Subset<T, YTUser$YTSubscribeArgs>): Prisma.PrismaPromise<Array<YTSubscribeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTUser base type for findUnique actions
   */
  export type YTUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter, which YTUser to fetch.
     */
    where: YTUserWhereUniqueInput
  }

  /**
   * YTUser findUnique
   */
  export interface YTUserFindUniqueArgs extends YTUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTUser findUniqueOrThrow
   */
  export type YTUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter, which YTUser to fetch.
     */
    where: YTUserWhereUniqueInput
  }


  /**
   * YTUser base type for findFirst actions
   */
  export type YTUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter, which YTUser to fetch.
     */
    where?: YTUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTUsers to fetch.
     */
    orderBy?: Enumerable<YTUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTUsers.
     */
    cursor?: YTUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTUsers.
     */
    distinct?: Enumerable<YTUserScalarFieldEnum>
  }

  /**
   * YTUser findFirst
   */
  export interface YTUserFindFirstArgs extends YTUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTUser findFirstOrThrow
   */
  export type YTUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter, which YTUser to fetch.
     */
    where?: YTUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTUsers to fetch.
     */
    orderBy?: Enumerable<YTUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTUsers.
     */
    cursor?: YTUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTUsers.
     */
    distinct?: Enumerable<YTUserScalarFieldEnum>
  }


  /**
   * YTUser findMany
   */
  export type YTUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter, which YTUsers to fetch.
     */
    where?: YTUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTUsers to fetch.
     */
    orderBy?: Enumerable<YTUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTUsers.
     */
    cursor?: YTUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTUsers.
     */
    skip?: number
    distinct?: Enumerable<YTUserScalarFieldEnum>
  }


  /**
   * YTUser create
   */
  export type YTUserCreateArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * The data needed to create a YTUser.
     */
    data: XOR<YTUserCreateInput, YTUserUncheckedCreateInput>
  }


  /**
   * YTUser createMany
   */
  export type YTUserCreateManyArgs = {
    /**
     * The data used to create many YTUsers.
     */
    data: Enumerable<YTUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTUser update
   */
  export type YTUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * The data needed to update a YTUser.
     */
    data: XOR<YTUserUpdateInput, YTUserUncheckedUpdateInput>
    /**
     * Choose, which YTUser to update.
     */
    where: YTUserWhereUniqueInput
  }


  /**
   * YTUser updateMany
   */
  export type YTUserUpdateManyArgs = {
    /**
     * The data used to update YTUsers.
     */
    data: XOR<YTUserUpdateManyMutationInput, YTUserUncheckedUpdateManyInput>
    /**
     * Filter which YTUsers to update
     */
    where?: YTUserWhereInput
  }


  /**
   * YTUser upsert
   */
  export type YTUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * The filter to search for the YTUser to update in case it exists.
     */
    where: YTUserWhereUniqueInput
    /**
     * In case the YTUser found by the `where` argument doesn't exist, create a new YTUser with this data.
     */
    create: XOR<YTUserCreateInput, YTUserUncheckedCreateInput>
    /**
     * In case the YTUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTUserUpdateInput, YTUserUncheckedUpdateInput>
  }


  /**
   * YTUser delete
   */
  export type YTUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
    /**
     * Filter which YTUser to delete.
     */
    where: YTUserWhereUniqueInput
  }


  /**
   * YTUser deleteMany
   */
  export type YTUserDeleteManyArgs = {
    /**
     * Filter which YTUsers to delete
     */
    where?: YTUserWhereInput
  }


  /**
   * YTUser.ChanelOnUser
   */
  export type YTUser$ChanelOnUserArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    where?: ChanelOnUserWhereInput
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    cursor?: ChanelOnUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanelOnUserScalarFieldEnum>
  }


  /**
   * YTUser.YTAdmin
   */
  export type YTUser$YTAdminArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    where?: YTAdminWhereInput
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    cursor?: YTAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }


  /**
   * YTUser.YTComment
   */
  export type YTUser$YTCommentArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    where?: YTCommentWhereInput
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    cursor?: YTCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTCommentScalarFieldEnum>
  }


  /**
   * YTUser.YTSubComment
   */
  export type YTUser$YTSubCommentArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    where?: YTSubCommentWhereInput
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    cursor?: YTSubCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTSubCommentScalarFieldEnum>
  }


  /**
   * YTUser.YTSubscribe
   */
  export type YTUser$YTSubscribeArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    where?: YTSubscribeWhereInput
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    cursor?: YTSubscribeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTSubscribeScalarFieldEnum>
  }


  /**
   * YTUser without action
   */
  export type YTUserArgs = {
    /**
     * Select specific fields to fetch from the YTUser
     */
    select?: YTUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTUserInclude | null
  }



  /**
   * Model YTChanel
   */


  export type AggregateYTChanel = {
    _count: YTChanelCountAggregateOutputType | null
    _avg: YTChanelAvgAggregateOutputType | null
    _sum: YTChanelSumAggregateOutputType | null
    _min: YTChanelMinAggregateOutputType | null
    _max: YTChanelMaxAggregateOutputType | null
  }

  export type YTChanelAvgAggregateOutputType = {
    id: number | null
  }

  export type YTChanelSumAggregateOutputType = {
    id: number | null
  }

  export type YTChanelMinAggregateOutputType = {
    id: number | null
    chaneName: string | null
    image: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTChanelMaxAggregateOutputType = {
    id: number | null
    chaneName: string | null
    image: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTChanelCountAggregateOutputType = {
    id: number
    chaneName: number
    image: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTChanelAvgAggregateInputType = {
    id?: true
  }

  export type YTChanelSumAggregateInputType = {
    id?: true
  }

  export type YTChanelMinAggregateInputType = {
    id?: true
    chaneName?: true
    image?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTChanelMaxAggregateInputType = {
    id?: true
    chaneName?: true
    image?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTChanelCountAggregateInputType = {
    id?: true
    chaneName?: true
    image?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTChanelAggregateArgs = {
    /**
     * Filter which YTChanel to aggregate.
     */
    where?: YTChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTChanels to fetch.
     */
    orderBy?: Enumerable<YTChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTChanels
    **/
    _count?: true | YTChanelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTChanelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTChanelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTChanelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTChanelMaxAggregateInputType
  }

  export type GetYTChanelAggregateType<T extends YTChanelAggregateArgs> = {
        [P in keyof T & keyof AggregateYTChanel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTChanel[P]>
      : GetScalarType<T[P], AggregateYTChanel[P]>
  }




  export type YTChanelGroupByArgs = {
    where?: YTChanelWhereInput
    orderBy?: Enumerable<YTChanelOrderByWithAggregationInput>
    by: YTChanelScalarFieldEnum[]
    having?: YTChanelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTChanelCountAggregateInputType | true
    _avg?: YTChanelAvgAggregateInputType
    _sum?: YTChanelSumAggregateInputType
    _min?: YTChanelMinAggregateInputType
    _max?: YTChanelMaxAggregateInputType
  }


  export type YTChanelGroupByOutputType = {
    id: number
    chaneName: string
    image: string | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: YTChanelCountAggregateOutputType | null
    _avg: YTChanelAvgAggregateOutputType | null
    _sum: YTChanelSumAggregateOutputType | null
    _min: YTChanelMinAggregateOutputType | null
    _max: YTChanelMaxAggregateOutputType | null
  }

  type GetYTChanelGroupByPayload<T extends YTChanelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTChanelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTChanelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTChanelGroupByOutputType[P]>
            : GetScalarType<T[P], YTChanelGroupByOutputType[P]>
        }
      >
    >


  export type YTChanelSelect = {
    id?: boolean
    chaneName?: boolean
    image?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ChanelOnUser?: boolean | YTChanel$ChanelOnUserArgs
    YTAdmin?: boolean | YTChanel$YTAdminArgs
    YTVideo?: boolean | YTChanel$YTVideoArgs
    YTSubscribe?: boolean | YTChanel$YTSubscribeArgs
    _count?: boolean | YTChanelCountOutputTypeArgs
  }


  export type YTChanelInclude = {
    ChanelOnUser?: boolean | YTChanel$ChanelOnUserArgs
    YTAdmin?: boolean | YTChanel$YTAdminArgs
    YTVideo?: boolean | YTChanel$YTVideoArgs
    YTSubscribe?: boolean | YTChanel$YTSubscribeArgs
    _count?: boolean | YTChanelCountOutputTypeArgs
  }

  export type YTChanelGetPayload<S extends boolean | null | undefined | YTChanelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTChanel :
    S extends undefined ? never :
    S extends { include: any } & (YTChanelArgs | YTChanelFindManyArgs)
    ? YTChanel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'ChanelOnUser' ? Array < ChanelOnUserGetPayload<S['include'][P]>>  :
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['include'][P]>>  :
        P extends 'YTVideo' ? Array < YTVideoGetPayload<S['include'][P]>>  :
        P extends 'YTSubscribe' ? Array < YTSubscribeGetPayload<S['include'][P]>>  :
        P extends '_count' ? YTChanelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTChanelArgs | YTChanelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'ChanelOnUser' ? Array < ChanelOnUserGetPayload<S['select'][P]>>  :
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['select'][P]>>  :
        P extends 'YTVideo' ? Array < YTVideoGetPayload<S['select'][P]>>  :
        P extends 'YTSubscribe' ? Array < YTSubscribeGetPayload<S['select'][P]>>  :
        P extends '_count' ? YTChanelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YTChanel ? YTChanel[P] : never
  } 
      : YTChanel


  type YTChanelCountArgs = 
    Omit<YTChanelFindManyArgs, 'select' | 'include'> & {
      select?: YTChanelCountAggregateInputType | true
    }

  export interface YTChanelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTChanel that matches the filter.
     * @param {YTChanelFindUniqueArgs} args - Arguments to find a YTChanel
     * @example
     * // Get one YTChanel
     * const yTChanel = await prisma.yTChanel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTChanelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTChanelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTChanel'> extends True ? Prisma__YTChanelClient<YTChanelGetPayload<T>> : Prisma__YTChanelClient<YTChanelGetPayload<T> | null, null>

    /**
     * Find one YTChanel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTChanelFindUniqueOrThrowArgs} args - Arguments to find a YTChanel
     * @example
     * // Get one YTChanel
     * const yTChanel = await prisma.yTChanel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTChanelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTChanelFindUniqueOrThrowArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Find the first YTChanel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelFindFirstArgs} args - Arguments to find a YTChanel
     * @example
     * // Get one YTChanel
     * const yTChanel = await prisma.yTChanel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTChanelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTChanelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTChanel'> extends True ? Prisma__YTChanelClient<YTChanelGetPayload<T>> : Prisma__YTChanelClient<YTChanelGetPayload<T> | null, null>

    /**
     * Find the first YTChanel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelFindFirstOrThrowArgs} args - Arguments to find a YTChanel
     * @example
     * // Get one YTChanel
     * const yTChanel = await prisma.yTChanel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTChanelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTChanelFindFirstOrThrowArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Find zero or more YTChanels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTChanels
     * const yTChanels = await prisma.yTChanel.findMany()
     * 
     * // Get first 10 YTChanels
     * const yTChanels = await prisma.yTChanel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTChanelWithIdOnly = await prisma.yTChanel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTChanelFindManyArgs>(
      args?: SelectSubset<T, YTChanelFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTChanelGetPayload<T>>>

    /**
     * Create a YTChanel.
     * @param {YTChanelCreateArgs} args - Arguments to create a YTChanel.
     * @example
     * // Create one YTChanel
     * const YTChanel = await prisma.yTChanel.create({
     *   data: {
     *     // ... data to create a YTChanel
     *   }
     * })
     * 
    **/
    create<T extends YTChanelCreateArgs>(
      args: SelectSubset<T, YTChanelCreateArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Create many YTChanels.
     *     @param {YTChanelCreateManyArgs} args - Arguments to create many YTChanels.
     *     @example
     *     // Create many YTChanels
     *     const yTChanel = await prisma.yTChanel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTChanelCreateManyArgs>(
      args?: SelectSubset<T, YTChanelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTChanel.
     * @param {YTChanelDeleteArgs} args - Arguments to delete one YTChanel.
     * @example
     * // Delete one YTChanel
     * const YTChanel = await prisma.yTChanel.delete({
     *   where: {
     *     // ... filter to delete one YTChanel
     *   }
     * })
     * 
    **/
    delete<T extends YTChanelDeleteArgs>(
      args: SelectSubset<T, YTChanelDeleteArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Update one YTChanel.
     * @param {YTChanelUpdateArgs} args - Arguments to update one YTChanel.
     * @example
     * // Update one YTChanel
     * const yTChanel = await prisma.yTChanel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTChanelUpdateArgs>(
      args: SelectSubset<T, YTChanelUpdateArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Delete zero or more YTChanels.
     * @param {YTChanelDeleteManyArgs} args - Arguments to filter YTChanels to delete.
     * @example
     * // Delete a few YTChanels
     * const { count } = await prisma.yTChanel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTChanelDeleteManyArgs>(
      args?: SelectSubset<T, YTChanelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTChanels
     * const yTChanel = await prisma.yTChanel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTChanelUpdateManyArgs>(
      args: SelectSubset<T, YTChanelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTChanel.
     * @param {YTChanelUpsertArgs} args - Arguments to update or create a YTChanel.
     * @example
     * // Update or create a YTChanel
     * const yTChanel = await prisma.yTChanel.upsert({
     *   create: {
     *     // ... data to create a YTChanel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTChanel we want to update
     *   }
     * })
    **/
    upsert<T extends YTChanelUpsertArgs>(
      args: SelectSubset<T, YTChanelUpsertArgs>
    ): Prisma__YTChanelClient<YTChanelGetPayload<T>>

    /**
     * Count the number of YTChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelCountArgs} args - Arguments to filter YTChanels to count.
     * @example
     * // Count the number of YTChanels
     * const count = await prisma.yTChanel.count({
     *   where: {
     *     // ... the filter for the YTChanels we want to count
     *   }
     * })
    **/
    count<T extends YTChanelCountArgs>(
      args?: Subset<T, YTChanelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTChanelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTChanelAggregateArgs>(args: Subset<T, YTChanelAggregateArgs>): Prisma.PrismaPromise<GetYTChanelAggregateType<T>>

    /**
     * Group by YTChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTChanelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTChanelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTChanelGroupByArgs['orderBy'] }
        : { orderBy?: YTChanelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTChanelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTChanelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTChanel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTChanelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    ChanelOnUser<T extends YTChanel$ChanelOnUserArgs= {}>(args?: Subset<T, YTChanel$ChanelOnUserArgs>): Prisma.PrismaPromise<Array<ChanelOnUserGetPayload<T>>| Null>;

    YTAdmin<T extends YTChanel$YTAdminArgs= {}>(args?: Subset<T, YTChanel$YTAdminArgs>): Prisma.PrismaPromise<Array<YTAdminGetPayload<T>>| Null>;

    YTVideo<T extends YTChanel$YTVideoArgs= {}>(args?: Subset<T, YTChanel$YTVideoArgs>): Prisma.PrismaPromise<Array<YTVideoGetPayload<T>>| Null>;

    YTSubscribe<T extends YTChanel$YTSubscribeArgs= {}>(args?: Subset<T, YTChanel$YTSubscribeArgs>): Prisma.PrismaPromise<Array<YTSubscribeGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTChanel base type for findUnique actions
   */
  export type YTChanelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter, which YTChanel to fetch.
     */
    where: YTChanelWhereUniqueInput
  }

  /**
   * YTChanel findUnique
   */
  export interface YTChanelFindUniqueArgs extends YTChanelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTChanel findUniqueOrThrow
   */
  export type YTChanelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter, which YTChanel to fetch.
     */
    where: YTChanelWhereUniqueInput
  }


  /**
   * YTChanel base type for findFirst actions
   */
  export type YTChanelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter, which YTChanel to fetch.
     */
    where?: YTChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTChanels to fetch.
     */
    orderBy?: Enumerable<YTChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTChanels.
     */
    cursor?: YTChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTChanels.
     */
    distinct?: Enumerable<YTChanelScalarFieldEnum>
  }

  /**
   * YTChanel findFirst
   */
  export interface YTChanelFindFirstArgs extends YTChanelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTChanel findFirstOrThrow
   */
  export type YTChanelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter, which YTChanel to fetch.
     */
    where?: YTChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTChanels to fetch.
     */
    orderBy?: Enumerable<YTChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTChanels.
     */
    cursor?: YTChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTChanels.
     */
    distinct?: Enumerable<YTChanelScalarFieldEnum>
  }


  /**
   * YTChanel findMany
   */
  export type YTChanelFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter, which YTChanels to fetch.
     */
    where?: YTChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTChanels to fetch.
     */
    orderBy?: Enumerable<YTChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTChanels.
     */
    cursor?: YTChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTChanels.
     */
    skip?: number
    distinct?: Enumerable<YTChanelScalarFieldEnum>
  }


  /**
   * YTChanel create
   */
  export type YTChanelCreateArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * The data needed to create a YTChanel.
     */
    data: XOR<YTChanelCreateInput, YTChanelUncheckedCreateInput>
  }


  /**
   * YTChanel createMany
   */
  export type YTChanelCreateManyArgs = {
    /**
     * The data used to create many YTChanels.
     */
    data: Enumerable<YTChanelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTChanel update
   */
  export type YTChanelUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * The data needed to update a YTChanel.
     */
    data: XOR<YTChanelUpdateInput, YTChanelUncheckedUpdateInput>
    /**
     * Choose, which YTChanel to update.
     */
    where: YTChanelWhereUniqueInput
  }


  /**
   * YTChanel updateMany
   */
  export type YTChanelUpdateManyArgs = {
    /**
     * The data used to update YTChanels.
     */
    data: XOR<YTChanelUpdateManyMutationInput, YTChanelUncheckedUpdateManyInput>
    /**
     * Filter which YTChanels to update
     */
    where?: YTChanelWhereInput
  }


  /**
   * YTChanel upsert
   */
  export type YTChanelUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * The filter to search for the YTChanel to update in case it exists.
     */
    where: YTChanelWhereUniqueInput
    /**
     * In case the YTChanel found by the `where` argument doesn't exist, create a new YTChanel with this data.
     */
    create: XOR<YTChanelCreateInput, YTChanelUncheckedCreateInput>
    /**
     * In case the YTChanel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTChanelUpdateInput, YTChanelUncheckedUpdateInput>
  }


  /**
   * YTChanel delete
   */
  export type YTChanelDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
    /**
     * Filter which YTChanel to delete.
     */
    where: YTChanelWhereUniqueInput
  }


  /**
   * YTChanel deleteMany
   */
  export type YTChanelDeleteManyArgs = {
    /**
     * Filter which YTChanels to delete
     */
    where?: YTChanelWhereInput
  }


  /**
   * YTChanel.ChanelOnUser
   */
  export type YTChanel$ChanelOnUserArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    where?: ChanelOnUserWhereInput
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    cursor?: ChanelOnUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChanelOnUserScalarFieldEnum>
  }


  /**
   * YTChanel.YTAdmin
   */
  export type YTChanel$YTAdminArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    where?: YTAdminWhereInput
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    cursor?: YTAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }


  /**
   * YTChanel.YTVideo
   */
  export type YTChanel$YTVideoArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    where?: YTVideoWhereInput
    orderBy?: Enumerable<YTVideoOrderByWithRelationInput>
    cursor?: YTVideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTVideoScalarFieldEnum>
  }


  /**
   * YTChanel.YTSubscribe
   */
  export type YTChanel$YTSubscribeArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    where?: YTSubscribeWhereInput
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    cursor?: YTSubscribeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTSubscribeScalarFieldEnum>
  }


  /**
   * YTChanel without action
   */
  export type YTChanelArgs = {
    /**
     * Select specific fields to fetch from the YTChanel
     */
    select?: YTChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTChanelInclude | null
  }



  /**
   * Model ChanelOnUser
   */


  export type AggregateChanelOnUser = {
    _count: ChanelOnUserCountAggregateOutputType | null
    _avg: ChanelOnUserAvgAggregateOutputType | null
    _sum: ChanelOnUserSumAggregateOutputType | null
    _min: ChanelOnUserMinAggregateOutputType | null
    _max: ChanelOnUserMaxAggregateOutputType | null
  }

  export type ChanelOnUserAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    chanelId: number | null
  }

  export type ChanelOnUserSumAggregateOutputType = {
    id: number | null
    userId: number | null
    chanelId: number | null
  }

  export type ChanelOnUserMinAggregateOutputType = {
    id: number | null
    userId: number | null
    chanelId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChanelOnUserMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    chanelId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ChanelOnUserCountAggregateOutputType = {
    id: number
    userId: number
    chanelId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ChanelOnUserAvgAggregateInputType = {
    id?: true
    userId?: true
    chanelId?: true
  }

  export type ChanelOnUserSumAggregateInputType = {
    id?: true
    userId?: true
    chanelId?: true
  }

  export type ChanelOnUserMinAggregateInputType = {
    id?: true
    userId?: true
    chanelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChanelOnUserMaxAggregateInputType = {
    id?: true
    userId?: true
    chanelId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ChanelOnUserCountAggregateInputType = {
    id?: true
    userId?: true
    chanelId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ChanelOnUserAggregateArgs = {
    /**
     * Filter which ChanelOnUser to aggregate.
     */
    where?: ChanelOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanelOnUsers to fetch.
     */
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChanelOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanelOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanelOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChanelOnUsers
    **/
    _count?: true | ChanelOnUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChanelOnUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChanelOnUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChanelOnUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChanelOnUserMaxAggregateInputType
  }

  export type GetChanelOnUserAggregateType<T extends ChanelOnUserAggregateArgs> = {
        [P in keyof T & keyof AggregateChanelOnUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChanelOnUser[P]>
      : GetScalarType<T[P], AggregateChanelOnUser[P]>
  }




  export type ChanelOnUserGroupByArgs = {
    where?: ChanelOnUserWhereInput
    orderBy?: Enumerable<ChanelOnUserOrderByWithAggregationInput>
    by: ChanelOnUserScalarFieldEnum[]
    having?: ChanelOnUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChanelOnUserCountAggregateInputType | true
    _avg?: ChanelOnUserAvgAggregateInputType
    _sum?: ChanelOnUserSumAggregateInputType
    _min?: ChanelOnUserMinAggregateInputType
    _max?: ChanelOnUserMaxAggregateInputType
  }


  export type ChanelOnUserGroupByOutputType = {
    id: number
    userId: number
    chanelId: number
    createdAt: Date
    updatedAt: Date
    _count: ChanelOnUserCountAggregateOutputType | null
    _avg: ChanelOnUserAvgAggregateOutputType | null
    _sum: ChanelOnUserSumAggregateOutputType | null
    _min: ChanelOnUserMinAggregateOutputType | null
    _max: ChanelOnUserMaxAggregateOutputType | null
  }

  type GetChanelOnUserGroupByPayload<T extends ChanelOnUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChanelOnUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChanelOnUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChanelOnUserGroupByOutputType[P]>
            : GetScalarType<T[P], ChanelOnUserGroupByOutputType[P]>
        }
      >
    >


  export type ChanelOnUserSelect = {
    id?: boolean
    user?: boolean | YTUserArgs
    userId?: boolean
    chanel?: boolean | YTChanelArgs
    chanelId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type ChanelOnUserInclude = {
    user?: boolean | YTUserArgs
    chanel?: boolean | YTChanelArgs
  }

  export type ChanelOnUserGetPayload<S extends boolean | null | undefined | ChanelOnUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChanelOnUser :
    S extends undefined ? never :
    S extends { include: any } & (ChanelOnUserArgs | ChanelOnUserFindManyArgs)
    ? ChanelOnUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? YTUserGetPayload<S['include'][P]> :
        P extends 'chanel' ? YTChanelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChanelOnUserArgs | ChanelOnUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? YTUserGetPayload<S['select'][P]> :
        P extends 'chanel' ? YTChanelGetPayload<S['select'][P]> :  P extends keyof ChanelOnUser ? ChanelOnUser[P] : never
  } 
      : ChanelOnUser


  type ChanelOnUserCountArgs = 
    Omit<ChanelOnUserFindManyArgs, 'select' | 'include'> & {
      select?: ChanelOnUserCountAggregateInputType | true
    }

  export interface ChanelOnUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChanelOnUser that matches the filter.
     * @param {ChanelOnUserFindUniqueArgs} args - Arguments to find a ChanelOnUser
     * @example
     * // Get one ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChanelOnUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChanelOnUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChanelOnUser'> extends True ? Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>> : Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T> | null, null>

    /**
     * Find one ChanelOnUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChanelOnUserFindUniqueOrThrowArgs} args - Arguments to find a ChanelOnUser
     * @example
     * // Get one ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChanelOnUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChanelOnUserFindUniqueOrThrowArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Find the first ChanelOnUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserFindFirstArgs} args - Arguments to find a ChanelOnUser
     * @example
     * // Get one ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChanelOnUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChanelOnUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChanelOnUser'> extends True ? Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>> : Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T> | null, null>

    /**
     * Find the first ChanelOnUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserFindFirstOrThrowArgs} args - Arguments to find a ChanelOnUser
     * @example
     * // Get one ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChanelOnUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChanelOnUserFindFirstOrThrowArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Find zero or more ChanelOnUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChanelOnUsers
     * const chanelOnUsers = await prisma.chanelOnUser.findMany()
     * 
     * // Get first 10 ChanelOnUsers
     * const chanelOnUsers = await prisma.chanelOnUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chanelOnUserWithIdOnly = await prisma.chanelOnUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChanelOnUserFindManyArgs>(
      args?: SelectSubset<T, ChanelOnUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChanelOnUserGetPayload<T>>>

    /**
     * Create a ChanelOnUser.
     * @param {ChanelOnUserCreateArgs} args - Arguments to create a ChanelOnUser.
     * @example
     * // Create one ChanelOnUser
     * const ChanelOnUser = await prisma.chanelOnUser.create({
     *   data: {
     *     // ... data to create a ChanelOnUser
     *   }
     * })
     * 
    **/
    create<T extends ChanelOnUserCreateArgs>(
      args: SelectSubset<T, ChanelOnUserCreateArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Create many ChanelOnUsers.
     *     @param {ChanelOnUserCreateManyArgs} args - Arguments to create many ChanelOnUsers.
     *     @example
     *     // Create many ChanelOnUsers
     *     const chanelOnUser = await prisma.chanelOnUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChanelOnUserCreateManyArgs>(
      args?: SelectSubset<T, ChanelOnUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChanelOnUser.
     * @param {ChanelOnUserDeleteArgs} args - Arguments to delete one ChanelOnUser.
     * @example
     * // Delete one ChanelOnUser
     * const ChanelOnUser = await prisma.chanelOnUser.delete({
     *   where: {
     *     // ... filter to delete one ChanelOnUser
     *   }
     * })
     * 
    **/
    delete<T extends ChanelOnUserDeleteArgs>(
      args: SelectSubset<T, ChanelOnUserDeleteArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Update one ChanelOnUser.
     * @param {ChanelOnUserUpdateArgs} args - Arguments to update one ChanelOnUser.
     * @example
     * // Update one ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChanelOnUserUpdateArgs>(
      args: SelectSubset<T, ChanelOnUserUpdateArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Delete zero or more ChanelOnUsers.
     * @param {ChanelOnUserDeleteManyArgs} args - Arguments to filter ChanelOnUsers to delete.
     * @example
     * // Delete a few ChanelOnUsers
     * const { count } = await prisma.chanelOnUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChanelOnUserDeleteManyArgs>(
      args?: SelectSubset<T, ChanelOnUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChanelOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChanelOnUsers
     * const chanelOnUser = await prisma.chanelOnUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChanelOnUserUpdateManyArgs>(
      args: SelectSubset<T, ChanelOnUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChanelOnUser.
     * @param {ChanelOnUserUpsertArgs} args - Arguments to update or create a ChanelOnUser.
     * @example
     * // Update or create a ChanelOnUser
     * const chanelOnUser = await prisma.chanelOnUser.upsert({
     *   create: {
     *     // ... data to create a ChanelOnUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChanelOnUser we want to update
     *   }
     * })
    **/
    upsert<T extends ChanelOnUserUpsertArgs>(
      args: SelectSubset<T, ChanelOnUserUpsertArgs>
    ): Prisma__ChanelOnUserClient<ChanelOnUserGetPayload<T>>

    /**
     * Count the number of ChanelOnUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserCountArgs} args - Arguments to filter ChanelOnUsers to count.
     * @example
     * // Count the number of ChanelOnUsers
     * const count = await prisma.chanelOnUser.count({
     *   where: {
     *     // ... the filter for the ChanelOnUsers we want to count
     *   }
     * })
    **/
    count<T extends ChanelOnUserCountArgs>(
      args?: Subset<T, ChanelOnUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChanelOnUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChanelOnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChanelOnUserAggregateArgs>(args: Subset<T, ChanelOnUserAggregateArgs>): Prisma.PrismaPromise<GetChanelOnUserAggregateType<T>>

    /**
     * Group by ChanelOnUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChanelOnUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChanelOnUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChanelOnUserGroupByArgs['orderBy'] }
        : { orderBy?: ChanelOnUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChanelOnUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChanelOnUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChanelOnUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChanelOnUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends YTUserArgs= {}>(args?: Subset<T, YTUserArgs>): Prisma__YTUserClient<YTUserGetPayload<T> | Null>;

    chanel<T extends YTChanelArgs= {}>(args?: Subset<T, YTChanelArgs>): Prisma__YTChanelClient<YTChanelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChanelOnUser base type for findUnique actions
   */
  export type ChanelOnUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter, which ChanelOnUser to fetch.
     */
    where: ChanelOnUserWhereUniqueInput
  }

  /**
   * ChanelOnUser findUnique
   */
  export interface ChanelOnUserFindUniqueArgs extends ChanelOnUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanelOnUser findUniqueOrThrow
   */
  export type ChanelOnUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter, which ChanelOnUser to fetch.
     */
    where: ChanelOnUserWhereUniqueInput
  }


  /**
   * ChanelOnUser base type for findFirst actions
   */
  export type ChanelOnUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter, which ChanelOnUser to fetch.
     */
    where?: ChanelOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanelOnUsers to fetch.
     */
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanelOnUsers.
     */
    cursor?: ChanelOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanelOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanelOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanelOnUsers.
     */
    distinct?: Enumerable<ChanelOnUserScalarFieldEnum>
  }

  /**
   * ChanelOnUser findFirst
   */
  export interface ChanelOnUserFindFirstArgs extends ChanelOnUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChanelOnUser findFirstOrThrow
   */
  export type ChanelOnUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter, which ChanelOnUser to fetch.
     */
    where?: ChanelOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanelOnUsers to fetch.
     */
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChanelOnUsers.
     */
    cursor?: ChanelOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanelOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanelOnUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChanelOnUsers.
     */
    distinct?: Enumerable<ChanelOnUserScalarFieldEnum>
  }


  /**
   * ChanelOnUser findMany
   */
  export type ChanelOnUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter, which ChanelOnUsers to fetch.
     */
    where?: ChanelOnUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChanelOnUsers to fetch.
     */
    orderBy?: Enumerable<ChanelOnUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChanelOnUsers.
     */
    cursor?: ChanelOnUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChanelOnUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChanelOnUsers.
     */
    skip?: number
    distinct?: Enumerable<ChanelOnUserScalarFieldEnum>
  }


  /**
   * ChanelOnUser create
   */
  export type ChanelOnUserCreateArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * The data needed to create a ChanelOnUser.
     */
    data: XOR<ChanelOnUserCreateInput, ChanelOnUserUncheckedCreateInput>
  }


  /**
   * ChanelOnUser createMany
   */
  export type ChanelOnUserCreateManyArgs = {
    /**
     * The data used to create many ChanelOnUsers.
     */
    data: Enumerable<ChanelOnUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChanelOnUser update
   */
  export type ChanelOnUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * The data needed to update a ChanelOnUser.
     */
    data: XOR<ChanelOnUserUpdateInput, ChanelOnUserUncheckedUpdateInput>
    /**
     * Choose, which ChanelOnUser to update.
     */
    where: ChanelOnUserWhereUniqueInput
  }


  /**
   * ChanelOnUser updateMany
   */
  export type ChanelOnUserUpdateManyArgs = {
    /**
     * The data used to update ChanelOnUsers.
     */
    data: XOR<ChanelOnUserUpdateManyMutationInput, ChanelOnUserUncheckedUpdateManyInput>
    /**
     * Filter which ChanelOnUsers to update
     */
    where?: ChanelOnUserWhereInput
  }


  /**
   * ChanelOnUser upsert
   */
  export type ChanelOnUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * The filter to search for the ChanelOnUser to update in case it exists.
     */
    where: ChanelOnUserWhereUniqueInput
    /**
     * In case the ChanelOnUser found by the `where` argument doesn't exist, create a new ChanelOnUser with this data.
     */
    create: XOR<ChanelOnUserCreateInput, ChanelOnUserUncheckedCreateInput>
    /**
     * In case the ChanelOnUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChanelOnUserUpdateInput, ChanelOnUserUncheckedUpdateInput>
  }


  /**
   * ChanelOnUser delete
   */
  export type ChanelOnUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
    /**
     * Filter which ChanelOnUser to delete.
     */
    where: ChanelOnUserWhereUniqueInput
  }


  /**
   * ChanelOnUser deleteMany
   */
  export type ChanelOnUserDeleteManyArgs = {
    /**
     * Filter which ChanelOnUsers to delete
     */
    where?: ChanelOnUserWhereInput
  }


  /**
   * ChanelOnUser without action
   */
  export type ChanelOnUserArgs = {
    /**
     * Select specific fields to fetch from the ChanelOnUser
     */
    select?: ChanelOnUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChanelOnUserInclude | null
  }



  /**
   * Model YTAdmin
   */


  export type AggregateYTAdmin = {
    _count: YTAdminCountAggregateOutputType | null
    _avg: YTAdminAvgAggregateOutputType | null
    _sum: YTAdminSumAggregateOutputType | null
    _min: YTAdminMinAggregateOutputType | null
    _max: YTAdminMaxAggregateOutputType | null
  }

  export type YTAdminAvgAggregateOutputType = {
    id: number | null
    chanelId: number | null
    adminUserId: number | null
    roleId: number | null
  }

  export type YTAdminSumAggregateOutputType = {
    id: number | null
    chanelId: number | null
    adminUserId: number | null
    roleId: number | null
  }

  export type YTAdminMinAggregateOutputType = {
    id: number | null
    chanelId: number | null
    adminUserId: number | null
    roleId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTAdminMaxAggregateOutputType = {
    id: number | null
    chanelId: number | null
    adminUserId: number | null
    roleId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTAdminCountAggregateOutputType = {
    id: number
    chanelId: number
    adminUserId: number
    roleId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTAdminAvgAggregateInputType = {
    id?: true
    chanelId?: true
    adminUserId?: true
    roleId?: true
  }

  export type YTAdminSumAggregateInputType = {
    id?: true
    chanelId?: true
    adminUserId?: true
    roleId?: true
  }

  export type YTAdminMinAggregateInputType = {
    id?: true
    chanelId?: true
    adminUserId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTAdminMaxAggregateInputType = {
    id?: true
    chanelId?: true
    adminUserId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTAdminCountAggregateInputType = {
    id?: true
    chanelId?: true
    adminUserId?: true
    roleId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTAdminAggregateArgs = {
    /**
     * Filter which YTAdmin to aggregate.
     */
    where?: YTAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTAdmins to fetch.
     */
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTAdmins
    **/
    _count?: true | YTAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTAdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTAdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTAdminMaxAggregateInputType
  }

  export type GetYTAdminAggregateType<T extends YTAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateYTAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTAdmin[P]>
      : GetScalarType<T[P], AggregateYTAdmin[P]>
  }




  export type YTAdminGroupByArgs = {
    where?: YTAdminWhereInput
    orderBy?: Enumerable<YTAdminOrderByWithAggregationInput>
    by: YTAdminScalarFieldEnum[]
    having?: YTAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTAdminCountAggregateInputType | true
    _avg?: YTAdminAvgAggregateInputType
    _sum?: YTAdminSumAggregateInputType
    _min?: YTAdminMinAggregateInputType
    _max?: YTAdminMaxAggregateInputType
  }


  export type YTAdminGroupByOutputType = {
    id: number
    chanelId: number
    adminUserId: number
    roleId: number
    createdAt: Date
    updatedAt: Date
    _count: YTAdminCountAggregateOutputType | null
    _avg: YTAdminAvgAggregateOutputType | null
    _sum: YTAdminSumAggregateOutputType | null
    _min: YTAdminMinAggregateOutputType | null
    _max: YTAdminMaxAggregateOutputType | null
  }

  type GetYTAdminGroupByPayload<T extends YTAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTAdminGroupByOutputType[P]>
            : GetScalarType<T[P], YTAdminGroupByOutputType[P]>
        }
      >
    >


  export type YTAdminSelect = {
    id?: boolean
    chanel?: boolean | YTChanelArgs
    chanelId?: boolean
    adminUser?: boolean | YTUserArgs
    adminUserId?: boolean
    role?: boolean | YTRoleArgs
    roleId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YTAdminInclude = {
    chanel?: boolean | YTChanelArgs
    adminUser?: boolean | YTUserArgs
    role?: boolean | YTRoleArgs
  }

  export type YTAdminGetPayload<S extends boolean | null | undefined | YTAdminArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTAdmin :
    S extends undefined ? never :
    S extends { include: any } & (YTAdminArgs | YTAdminFindManyArgs)
    ? YTAdmin  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['include'][P]> :
        P extends 'adminUser' ? YTUserGetPayload<S['include'][P]> :
        P extends 'role' ? YTRoleGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTAdminArgs | YTAdminFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['select'][P]> :
        P extends 'adminUser' ? YTUserGetPayload<S['select'][P]> :
        P extends 'role' ? YTRoleGetPayload<S['select'][P]> :  P extends keyof YTAdmin ? YTAdmin[P] : never
  } 
      : YTAdmin


  type YTAdminCountArgs = 
    Omit<YTAdminFindManyArgs, 'select' | 'include'> & {
      select?: YTAdminCountAggregateInputType | true
    }

  export interface YTAdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTAdmin that matches the filter.
     * @param {YTAdminFindUniqueArgs} args - Arguments to find a YTAdmin
     * @example
     * // Get one YTAdmin
     * const yTAdmin = await prisma.yTAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTAdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTAdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTAdmin'> extends True ? Prisma__YTAdminClient<YTAdminGetPayload<T>> : Prisma__YTAdminClient<YTAdminGetPayload<T> | null, null>

    /**
     * Find one YTAdmin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTAdminFindUniqueOrThrowArgs} args - Arguments to find a YTAdmin
     * @example
     * // Get one YTAdmin
     * const yTAdmin = await prisma.yTAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTAdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTAdminFindUniqueOrThrowArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Find the first YTAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminFindFirstArgs} args - Arguments to find a YTAdmin
     * @example
     * // Get one YTAdmin
     * const yTAdmin = await prisma.yTAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTAdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTAdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTAdmin'> extends True ? Prisma__YTAdminClient<YTAdminGetPayload<T>> : Prisma__YTAdminClient<YTAdminGetPayload<T> | null, null>

    /**
     * Find the first YTAdmin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminFindFirstOrThrowArgs} args - Arguments to find a YTAdmin
     * @example
     * // Get one YTAdmin
     * const yTAdmin = await prisma.yTAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTAdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTAdminFindFirstOrThrowArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Find zero or more YTAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTAdmins
     * const yTAdmins = await prisma.yTAdmin.findMany()
     * 
     * // Get first 10 YTAdmins
     * const yTAdmins = await prisma.yTAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTAdminWithIdOnly = await prisma.yTAdmin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTAdminFindManyArgs>(
      args?: SelectSubset<T, YTAdminFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTAdminGetPayload<T>>>

    /**
     * Create a YTAdmin.
     * @param {YTAdminCreateArgs} args - Arguments to create a YTAdmin.
     * @example
     * // Create one YTAdmin
     * const YTAdmin = await prisma.yTAdmin.create({
     *   data: {
     *     // ... data to create a YTAdmin
     *   }
     * })
     * 
    **/
    create<T extends YTAdminCreateArgs>(
      args: SelectSubset<T, YTAdminCreateArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Create many YTAdmins.
     *     @param {YTAdminCreateManyArgs} args - Arguments to create many YTAdmins.
     *     @example
     *     // Create many YTAdmins
     *     const yTAdmin = await prisma.yTAdmin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTAdminCreateManyArgs>(
      args?: SelectSubset<T, YTAdminCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTAdmin.
     * @param {YTAdminDeleteArgs} args - Arguments to delete one YTAdmin.
     * @example
     * // Delete one YTAdmin
     * const YTAdmin = await prisma.yTAdmin.delete({
     *   where: {
     *     // ... filter to delete one YTAdmin
     *   }
     * })
     * 
    **/
    delete<T extends YTAdminDeleteArgs>(
      args: SelectSubset<T, YTAdminDeleteArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Update one YTAdmin.
     * @param {YTAdminUpdateArgs} args - Arguments to update one YTAdmin.
     * @example
     * // Update one YTAdmin
     * const yTAdmin = await prisma.yTAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTAdminUpdateArgs>(
      args: SelectSubset<T, YTAdminUpdateArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Delete zero or more YTAdmins.
     * @param {YTAdminDeleteManyArgs} args - Arguments to filter YTAdmins to delete.
     * @example
     * // Delete a few YTAdmins
     * const { count } = await prisma.yTAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTAdminDeleteManyArgs>(
      args?: SelectSubset<T, YTAdminDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTAdmins
     * const yTAdmin = await prisma.yTAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTAdminUpdateManyArgs>(
      args: SelectSubset<T, YTAdminUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTAdmin.
     * @param {YTAdminUpsertArgs} args - Arguments to update or create a YTAdmin.
     * @example
     * // Update or create a YTAdmin
     * const yTAdmin = await prisma.yTAdmin.upsert({
     *   create: {
     *     // ... data to create a YTAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTAdmin we want to update
     *   }
     * })
    **/
    upsert<T extends YTAdminUpsertArgs>(
      args: SelectSubset<T, YTAdminUpsertArgs>
    ): Prisma__YTAdminClient<YTAdminGetPayload<T>>

    /**
     * Count the number of YTAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminCountArgs} args - Arguments to filter YTAdmins to count.
     * @example
     * // Count the number of YTAdmins
     * const count = await prisma.yTAdmin.count({
     *   where: {
     *     // ... the filter for the YTAdmins we want to count
     *   }
     * })
    **/
    count<T extends YTAdminCountArgs>(
      args?: Subset<T, YTAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTAdminAggregateArgs>(args: Subset<T, YTAdminAggregateArgs>): Prisma.PrismaPromise<GetYTAdminAggregateType<T>>

    /**
     * Group by YTAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTAdminGroupByArgs['orderBy'] }
        : { orderBy?: YTAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTAdminClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanel<T extends YTChanelArgs= {}>(args?: Subset<T, YTChanelArgs>): Prisma__YTChanelClient<YTChanelGetPayload<T> | Null>;

    adminUser<T extends YTUserArgs= {}>(args?: Subset<T, YTUserArgs>): Prisma__YTUserClient<YTUserGetPayload<T> | Null>;

    role<T extends YTRoleArgs= {}>(args?: Subset<T, YTRoleArgs>): Prisma__YTRoleClient<YTRoleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTAdmin base type for findUnique actions
   */
  export type YTAdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter, which YTAdmin to fetch.
     */
    where: YTAdminWhereUniqueInput
  }

  /**
   * YTAdmin findUnique
   */
  export interface YTAdminFindUniqueArgs extends YTAdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTAdmin findUniqueOrThrow
   */
  export type YTAdminFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter, which YTAdmin to fetch.
     */
    where: YTAdminWhereUniqueInput
  }


  /**
   * YTAdmin base type for findFirst actions
   */
  export type YTAdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter, which YTAdmin to fetch.
     */
    where?: YTAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTAdmins to fetch.
     */
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTAdmins.
     */
    cursor?: YTAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTAdmins.
     */
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }

  /**
   * YTAdmin findFirst
   */
  export interface YTAdminFindFirstArgs extends YTAdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTAdmin findFirstOrThrow
   */
  export type YTAdminFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter, which YTAdmin to fetch.
     */
    where?: YTAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTAdmins to fetch.
     */
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTAdmins.
     */
    cursor?: YTAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTAdmins.
     */
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }


  /**
   * YTAdmin findMany
   */
  export type YTAdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter, which YTAdmins to fetch.
     */
    where?: YTAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTAdmins to fetch.
     */
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTAdmins.
     */
    cursor?: YTAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTAdmins.
     */
    skip?: number
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }


  /**
   * YTAdmin create
   */
  export type YTAdminCreateArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * The data needed to create a YTAdmin.
     */
    data: XOR<YTAdminCreateInput, YTAdminUncheckedCreateInput>
  }


  /**
   * YTAdmin createMany
   */
  export type YTAdminCreateManyArgs = {
    /**
     * The data used to create many YTAdmins.
     */
    data: Enumerable<YTAdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTAdmin update
   */
  export type YTAdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * The data needed to update a YTAdmin.
     */
    data: XOR<YTAdminUpdateInput, YTAdminUncheckedUpdateInput>
    /**
     * Choose, which YTAdmin to update.
     */
    where: YTAdminWhereUniqueInput
  }


  /**
   * YTAdmin updateMany
   */
  export type YTAdminUpdateManyArgs = {
    /**
     * The data used to update YTAdmins.
     */
    data: XOR<YTAdminUpdateManyMutationInput, YTAdminUncheckedUpdateManyInput>
    /**
     * Filter which YTAdmins to update
     */
    where?: YTAdminWhereInput
  }


  /**
   * YTAdmin upsert
   */
  export type YTAdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * The filter to search for the YTAdmin to update in case it exists.
     */
    where: YTAdminWhereUniqueInput
    /**
     * In case the YTAdmin found by the `where` argument doesn't exist, create a new YTAdmin with this data.
     */
    create: XOR<YTAdminCreateInput, YTAdminUncheckedCreateInput>
    /**
     * In case the YTAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTAdminUpdateInput, YTAdminUncheckedUpdateInput>
  }


  /**
   * YTAdmin delete
   */
  export type YTAdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    /**
     * Filter which YTAdmin to delete.
     */
    where: YTAdminWhereUniqueInput
  }


  /**
   * YTAdmin deleteMany
   */
  export type YTAdminDeleteManyArgs = {
    /**
     * Filter which YTAdmins to delete
     */
    where?: YTAdminWhereInput
  }


  /**
   * YTAdmin without action
   */
  export type YTAdminArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
  }



  /**
   * Model YTRole
   */


  export type AggregateYTRole = {
    _count: YTRoleCountAggregateOutputType | null
    _avg: YTRoleAvgAggregateOutputType | null
    _sum: YTRoleSumAggregateOutputType | null
    _min: YTRoleMinAggregateOutputType | null
    _max: YTRoleMaxAggregateOutputType | null
  }

  export type YTRoleAvgAggregateOutputType = {
    id: number | null
  }

  export type YTRoleSumAggregateOutputType = {
    id: number | null
  }

  export type YTRoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTRoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTRoleCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTRoleAvgAggregateInputType = {
    id?: true
  }

  export type YTRoleSumAggregateInputType = {
    id?: true
  }

  export type YTRoleMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTRoleMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTRoleCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTRoleAggregateArgs = {
    /**
     * Filter which YTRole to aggregate.
     */
    where?: YTRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRoles to fetch.
     */
    orderBy?: Enumerable<YTRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTRoles
    **/
    _count?: true | YTRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTRoleMaxAggregateInputType
  }

  export type GetYTRoleAggregateType<T extends YTRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateYTRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTRole[P]>
      : GetScalarType<T[P], AggregateYTRole[P]>
  }




  export type YTRoleGroupByArgs = {
    where?: YTRoleWhereInput
    orderBy?: Enumerable<YTRoleOrderByWithAggregationInput>
    by: YTRoleScalarFieldEnum[]
    having?: YTRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTRoleCountAggregateInputType | true
    _avg?: YTRoleAvgAggregateInputType
    _sum?: YTRoleSumAggregateInputType
    _min?: YTRoleMinAggregateInputType
    _max?: YTRoleMaxAggregateInputType
  }


  export type YTRoleGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: YTRoleCountAggregateOutputType | null
    _avg: YTRoleAvgAggregateOutputType | null
    _sum: YTRoleSumAggregateOutputType | null
    _min: YTRoleMinAggregateOutputType | null
    _max: YTRoleMaxAggregateOutputType | null
  }

  type GetYTRoleGroupByPayload<T extends YTRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTRoleGroupByOutputType[P]>
            : GetScalarType<T[P], YTRoleGroupByOutputType[P]>
        }
      >
    >


  export type YTRoleSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    YTAdmin?: boolean | YTRole$YTAdminArgs
    YTRolePermission?: boolean | YTRole$YTRolePermissionArgs
    _count?: boolean | YTRoleCountOutputTypeArgs
  }


  export type YTRoleInclude = {
    YTAdmin?: boolean | YTRole$YTAdminArgs
    YTRolePermission?: boolean | YTRole$YTRolePermissionArgs
    _count?: boolean | YTRoleCountOutputTypeArgs
  }

  export type YTRoleGetPayload<S extends boolean | null | undefined | YTRoleArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTRole :
    S extends undefined ? never :
    S extends { include: any } & (YTRoleArgs | YTRoleFindManyArgs)
    ? YTRole  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['include'][P]>>  :
        P extends 'YTRolePermission' ? Array < YTRolePermissionGetPayload<S['include'][P]>>  :
        P extends '_count' ? YTRoleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTRoleArgs | YTRoleFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'YTAdmin' ? Array < YTAdminGetPayload<S['select'][P]>>  :
        P extends 'YTRolePermission' ? Array < YTRolePermissionGetPayload<S['select'][P]>>  :
        P extends '_count' ? YTRoleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YTRole ? YTRole[P] : never
  } 
      : YTRole


  type YTRoleCountArgs = 
    Omit<YTRoleFindManyArgs, 'select' | 'include'> & {
      select?: YTRoleCountAggregateInputType | true
    }

  export interface YTRoleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTRole that matches the filter.
     * @param {YTRoleFindUniqueArgs} args - Arguments to find a YTRole
     * @example
     * // Get one YTRole
     * const yTRole = await prisma.yTRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTRoleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTRoleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTRole'> extends True ? Prisma__YTRoleClient<YTRoleGetPayload<T>> : Prisma__YTRoleClient<YTRoleGetPayload<T> | null, null>

    /**
     * Find one YTRole that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTRoleFindUniqueOrThrowArgs} args - Arguments to find a YTRole
     * @example
     * // Get one YTRole
     * const yTRole = await prisma.yTRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTRoleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTRoleFindUniqueOrThrowArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Find the first YTRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleFindFirstArgs} args - Arguments to find a YTRole
     * @example
     * // Get one YTRole
     * const yTRole = await prisma.yTRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTRoleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTRoleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTRole'> extends True ? Prisma__YTRoleClient<YTRoleGetPayload<T>> : Prisma__YTRoleClient<YTRoleGetPayload<T> | null, null>

    /**
     * Find the first YTRole that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleFindFirstOrThrowArgs} args - Arguments to find a YTRole
     * @example
     * // Get one YTRole
     * const yTRole = await prisma.yTRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTRoleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTRoleFindFirstOrThrowArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Find zero or more YTRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTRoles
     * const yTRoles = await prisma.yTRole.findMany()
     * 
     * // Get first 10 YTRoles
     * const yTRoles = await prisma.yTRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTRoleWithIdOnly = await prisma.yTRole.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTRoleFindManyArgs>(
      args?: SelectSubset<T, YTRoleFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTRoleGetPayload<T>>>

    /**
     * Create a YTRole.
     * @param {YTRoleCreateArgs} args - Arguments to create a YTRole.
     * @example
     * // Create one YTRole
     * const YTRole = await prisma.yTRole.create({
     *   data: {
     *     // ... data to create a YTRole
     *   }
     * })
     * 
    **/
    create<T extends YTRoleCreateArgs>(
      args: SelectSubset<T, YTRoleCreateArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Create many YTRoles.
     *     @param {YTRoleCreateManyArgs} args - Arguments to create many YTRoles.
     *     @example
     *     // Create many YTRoles
     *     const yTRole = await prisma.yTRole.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTRoleCreateManyArgs>(
      args?: SelectSubset<T, YTRoleCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTRole.
     * @param {YTRoleDeleteArgs} args - Arguments to delete one YTRole.
     * @example
     * // Delete one YTRole
     * const YTRole = await prisma.yTRole.delete({
     *   where: {
     *     // ... filter to delete one YTRole
     *   }
     * })
     * 
    **/
    delete<T extends YTRoleDeleteArgs>(
      args: SelectSubset<T, YTRoleDeleteArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Update one YTRole.
     * @param {YTRoleUpdateArgs} args - Arguments to update one YTRole.
     * @example
     * // Update one YTRole
     * const yTRole = await prisma.yTRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTRoleUpdateArgs>(
      args: SelectSubset<T, YTRoleUpdateArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Delete zero or more YTRoles.
     * @param {YTRoleDeleteManyArgs} args - Arguments to filter YTRoles to delete.
     * @example
     * // Delete a few YTRoles
     * const { count } = await prisma.yTRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTRoleDeleteManyArgs>(
      args?: SelectSubset<T, YTRoleDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTRoles
     * const yTRole = await prisma.yTRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTRoleUpdateManyArgs>(
      args: SelectSubset<T, YTRoleUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTRole.
     * @param {YTRoleUpsertArgs} args - Arguments to update or create a YTRole.
     * @example
     * // Update or create a YTRole
     * const yTRole = await prisma.yTRole.upsert({
     *   create: {
     *     // ... data to create a YTRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTRole we want to update
     *   }
     * })
    **/
    upsert<T extends YTRoleUpsertArgs>(
      args: SelectSubset<T, YTRoleUpsertArgs>
    ): Prisma__YTRoleClient<YTRoleGetPayload<T>>

    /**
     * Count the number of YTRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleCountArgs} args - Arguments to filter YTRoles to count.
     * @example
     * // Count the number of YTRoles
     * const count = await prisma.yTRole.count({
     *   where: {
     *     // ... the filter for the YTRoles we want to count
     *   }
     * })
    **/
    count<T extends YTRoleCountArgs>(
      args?: Subset<T, YTRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTRoleAggregateArgs>(args: Subset<T, YTRoleAggregateArgs>): Prisma.PrismaPromise<GetYTRoleAggregateType<T>>

    /**
     * Group by YTRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTRoleGroupByArgs['orderBy'] }
        : { orderBy?: YTRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTRoleClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    YTAdmin<T extends YTRole$YTAdminArgs= {}>(args?: Subset<T, YTRole$YTAdminArgs>): Prisma.PrismaPromise<Array<YTAdminGetPayload<T>>| Null>;

    YTRolePermission<T extends YTRole$YTRolePermissionArgs= {}>(args?: Subset<T, YTRole$YTRolePermissionArgs>): Prisma.PrismaPromise<Array<YTRolePermissionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTRole base type for findUnique actions
   */
  export type YTRoleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter, which YTRole to fetch.
     */
    where: YTRoleWhereUniqueInput
  }

  /**
   * YTRole findUnique
   */
  export interface YTRoleFindUniqueArgs extends YTRoleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTRole findUniqueOrThrow
   */
  export type YTRoleFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter, which YTRole to fetch.
     */
    where: YTRoleWhereUniqueInput
  }


  /**
   * YTRole base type for findFirst actions
   */
  export type YTRoleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter, which YTRole to fetch.
     */
    where?: YTRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRoles to fetch.
     */
    orderBy?: Enumerable<YTRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTRoles.
     */
    cursor?: YTRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTRoles.
     */
    distinct?: Enumerable<YTRoleScalarFieldEnum>
  }

  /**
   * YTRole findFirst
   */
  export interface YTRoleFindFirstArgs extends YTRoleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTRole findFirstOrThrow
   */
  export type YTRoleFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter, which YTRole to fetch.
     */
    where?: YTRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRoles to fetch.
     */
    orderBy?: Enumerable<YTRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTRoles.
     */
    cursor?: YTRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTRoles.
     */
    distinct?: Enumerable<YTRoleScalarFieldEnum>
  }


  /**
   * YTRole findMany
   */
  export type YTRoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter, which YTRoles to fetch.
     */
    where?: YTRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRoles to fetch.
     */
    orderBy?: Enumerable<YTRoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTRoles.
     */
    cursor?: YTRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRoles.
     */
    skip?: number
    distinct?: Enumerable<YTRoleScalarFieldEnum>
  }


  /**
   * YTRole create
   */
  export type YTRoleCreateArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * The data needed to create a YTRole.
     */
    data: XOR<YTRoleCreateInput, YTRoleUncheckedCreateInput>
  }


  /**
   * YTRole createMany
   */
  export type YTRoleCreateManyArgs = {
    /**
     * The data used to create many YTRoles.
     */
    data: Enumerable<YTRoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTRole update
   */
  export type YTRoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * The data needed to update a YTRole.
     */
    data: XOR<YTRoleUpdateInput, YTRoleUncheckedUpdateInput>
    /**
     * Choose, which YTRole to update.
     */
    where: YTRoleWhereUniqueInput
  }


  /**
   * YTRole updateMany
   */
  export type YTRoleUpdateManyArgs = {
    /**
     * The data used to update YTRoles.
     */
    data: XOR<YTRoleUpdateManyMutationInput, YTRoleUncheckedUpdateManyInput>
    /**
     * Filter which YTRoles to update
     */
    where?: YTRoleWhereInput
  }


  /**
   * YTRole upsert
   */
  export type YTRoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * The filter to search for the YTRole to update in case it exists.
     */
    where: YTRoleWhereUniqueInput
    /**
     * In case the YTRole found by the `where` argument doesn't exist, create a new YTRole with this data.
     */
    create: XOR<YTRoleCreateInput, YTRoleUncheckedCreateInput>
    /**
     * In case the YTRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTRoleUpdateInput, YTRoleUncheckedUpdateInput>
  }


  /**
   * YTRole delete
   */
  export type YTRoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
    /**
     * Filter which YTRole to delete.
     */
    where: YTRoleWhereUniqueInput
  }


  /**
   * YTRole deleteMany
   */
  export type YTRoleDeleteManyArgs = {
    /**
     * Filter which YTRoles to delete
     */
    where?: YTRoleWhereInput
  }


  /**
   * YTRole.YTAdmin
   */
  export type YTRole$YTAdminArgs = {
    /**
     * Select specific fields to fetch from the YTAdmin
     */
    select?: YTAdminSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTAdminInclude | null
    where?: YTAdminWhereInput
    orderBy?: Enumerable<YTAdminOrderByWithRelationInput>
    cursor?: YTAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTAdminScalarFieldEnum>
  }


  /**
   * YTRole.YTRolePermission
   */
  export type YTRole$YTRolePermissionArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    where?: YTRolePermissionWhereInput
    orderBy?: Enumerable<YTRolePermissionOrderByWithRelationInput>
    cursor?: YTRolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTRolePermissionScalarFieldEnum>
  }


  /**
   * YTRole without action
   */
  export type YTRoleArgs = {
    /**
     * Select specific fields to fetch from the YTRole
     */
    select?: YTRoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRoleInclude | null
  }



  /**
   * Model YTRolePermission
   */


  export type AggregateYTRolePermission = {
    _count: YTRolePermissionCountAggregateOutputType | null
    _avg: YTRolePermissionAvgAggregateOutputType | null
    _sum: YTRolePermissionSumAggregateOutputType | null
    _min: YTRolePermissionMinAggregateOutputType | null
    _max: YTRolePermissionMaxAggregateOutputType | null
  }

  export type YTRolePermissionAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type YTRolePermissionSumAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type YTRolePermissionMinAggregateOutputType = {
    id: number | null
    roleId: number | null
    permissionName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTRolePermissionMaxAggregateOutputType = {
    id: number | null
    roleId: number | null
    permissionName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTRolePermissionCountAggregateOutputType = {
    id: number
    roleId: number
    permissionName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTRolePermissionAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type YTRolePermissionSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type YTRolePermissionMinAggregateInputType = {
    id?: true
    roleId?: true
    permissionName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTRolePermissionMaxAggregateInputType = {
    id?: true
    roleId?: true
    permissionName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTRolePermissionCountAggregateInputType = {
    id?: true
    roleId?: true
    permissionName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTRolePermissionAggregateArgs = {
    /**
     * Filter which YTRolePermission to aggregate.
     */
    where?: YTRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRolePermissions to fetch.
     */
    orderBy?: Enumerable<YTRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTRolePermissions
    **/
    _count?: true | YTRolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTRolePermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTRolePermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTRolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTRolePermissionMaxAggregateInputType
  }

  export type GetYTRolePermissionAggregateType<T extends YTRolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateYTRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTRolePermission[P]>
      : GetScalarType<T[P], AggregateYTRolePermission[P]>
  }




  export type YTRolePermissionGroupByArgs = {
    where?: YTRolePermissionWhereInput
    orderBy?: Enumerable<YTRolePermissionOrderByWithAggregationInput>
    by: YTRolePermissionScalarFieldEnum[]
    having?: YTRolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTRolePermissionCountAggregateInputType | true
    _avg?: YTRolePermissionAvgAggregateInputType
    _sum?: YTRolePermissionSumAggregateInputType
    _min?: YTRolePermissionMinAggregateInputType
    _max?: YTRolePermissionMaxAggregateInputType
  }


  export type YTRolePermissionGroupByOutputType = {
    id: number
    roleId: number
    permissionName: string
    createdAt: Date
    updatedAt: Date
    _count: YTRolePermissionCountAggregateOutputType | null
    _avg: YTRolePermissionAvgAggregateOutputType | null
    _sum: YTRolePermissionSumAggregateOutputType | null
    _min: YTRolePermissionMinAggregateOutputType | null
    _max: YTRolePermissionMaxAggregateOutputType | null
  }

  type GetYTRolePermissionGroupByPayload<T extends YTRolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTRolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTRolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTRolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], YTRolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type YTRolePermissionSelect = {
    id?: boolean
    roldid?: boolean | YTRoleArgs
    roleId?: boolean
    permissionName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YTRolePermissionInclude = {
    roldid?: boolean | YTRoleArgs
  }

  export type YTRolePermissionGetPayload<S extends boolean | null | undefined | YTRolePermissionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTRolePermission :
    S extends undefined ? never :
    S extends { include: any } & (YTRolePermissionArgs | YTRolePermissionFindManyArgs)
    ? YTRolePermission  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'roldid' ? YTRoleGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTRolePermissionArgs | YTRolePermissionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'roldid' ? YTRoleGetPayload<S['select'][P]> :  P extends keyof YTRolePermission ? YTRolePermission[P] : never
  } 
      : YTRolePermission


  type YTRolePermissionCountArgs = 
    Omit<YTRolePermissionFindManyArgs, 'select' | 'include'> & {
      select?: YTRolePermissionCountAggregateInputType | true
    }

  export interface YTRolePermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTRolePermission that matches the filter.
     * @param {YTRolePermissionFindUniqueArgs} args - Arguments to find a YTRolePermission
     * @example
     * // Get one YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTRolePermissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTRolePermissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTRolePermission'> extends True ? Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>> : Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T> | null, null>

    /**
     * Find one YTRolePermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTRolePermissionFindUniqueOrThrowArgs} args - Arguments to find a YTRolePermission
     * @example
     * // Get one YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTRolePermissionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTRolePermissionFindUniqueOrThrowArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Find the first YTRolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionFindFirstArgs} args - Arguments to find a YTRolePermission
     * @example
     * // Get one YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTRolePermissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTRolePermissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTRolePermission'> extends True ? Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>> : Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T> | null, null>

    /**
     * Find the first YTRolePermission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionFindFirstOrThrowArgs} args - Arguments to find a YTRolePermission
     * @example
     * // Get one YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTRolePermissionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTRolePermissionFindFirstOrThrowArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Find zero or more YTRolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTRolePermissions
     * const yTRolePermissions = await prisma.yTRolePermission.findMany()
     * 
     * // Get first 10 YTRolePermissions
     * const yTRolePermissions = await prisma.yTRolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTRolePermissionWithIdOnly = await prisma.yTRolePermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTRolePermissionFindManyArgs>(
      args?: SelectSubset<T, YTRolePermissionFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTRolePermissionGetPayload<T>>>

    /**
     * Create a YTRolePermission.
     * @param {YTRolePermissionCreateArgs} args - Arguments to create a YTRolePermission.
     * @example
     * // Create one YTRolePermission
     * const YTRolePermission = await prisma.yTRolePermission.create({
     *   data: {
     *     // ... data to create a YTRolePermission
     *   }
     * })
     * 
    **/
    create<T extends YTRolePermissionCreateArgs>(
      args: SelectSubset<T, YTRolePermissionCreateArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Create many YTRolePermissions.
     *     @param {YTRolePermissionCreateManyArgs} args - Arguments to create many YTRolePermissions.
     *     @example
     *     // Create many YTRolePermissions
     *     const yTRolePermission = await prisma.yTRolePermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTRolePermissionCreateManyArgs>(
      args?: SelectSubset<T, YTRolePermissionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTRolePermission.
     * @param {YTRolePermissionDeleteArgs} args - Arguments to delete one YTRolePermission.
     * @example
     * // Delete one YTRolePermission
     * const YTRolePermission = await prisma.yTRolePermission.delete({
     *   where: {
     *     // ... filter to delete one YTRolePermission
     *   }
     * })
     * 
    **/
    delete<T extends YTRolePermissionDeleteArgs>(
      args: SelectSubset<T, YTRolePermissionDeleteArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Update one YTRolePermission.
     * @param {YTRolePermissionUpdateArgs} args - Arguments to update one YTRolePermission.
     * @example
     * // Update one YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTRolePermissionUpdateArgs>(
      args: SelectSubset<T, YTRolePermissionUpdateArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Delete zero or more YTRolePermissions.
     * @param {YTRolePermissionDeleteManyArgs} args - Arguments to filter YTRolePermissions to delete.
     * @example
     * // Delete a few YTRolePermissions
     * const { count } = await prisma.yTRolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTRolePermissionDeleteManyArgs>(
      args?: SelectSubset<T, YTRolePermissionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTRolePermissions
     * const yTRolePermission = await prisma.yTRolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTRolePermissionUpdateManyArgs>(
      args: SelectSubset<T, YTRolePermissionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTRolePermission.
     * @param {YTRolePermissionUpsertArgs} args - Arguments to update or create a YTRolePermission.
     * @example
     * // Update or create a YTRolePermission
     * const yTRolePermission = await prisma.yTRolePermission.upsert({
     *   create: {
     *     // ... data to create a YTRolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTRolePermission we want to update
     *   }
     * })
    **/
    upsert<T extends YTRolePermissionUpsertArgs>(
      args: SelectSubset<T, YTRolePermissionUpsertArgs>
    ): Prisma__YTRolePermissionClient<YTRolePermissionGetPayload<T>>

    /**
     * Count the number of YTRolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionCountArgs} args - Arguments to filter YTRolePermissions to count.
     * @example
     * // Count the number of YTRolePermissions
     * const count = await prisma.yTRolePermission.count({
     *   where: {
     *     // ... the filter for the YTRolePermissions we want to count
     *   }
     * })
    **/
    count<T extends YTRolePermissionCountArgs>(
      args?: Subset<T, YTRolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTRolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTRolePermissionAggregateArgs>(args: Subset<T, YTRolePermissionAggregateArgs>): Prisma.PrismaPromise<GetYTRolePermissionAggregateType<T>>

    /**
     * Group by YTRolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTRolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTRolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTRolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: YTRolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTRolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTRolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTRolePermissionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    roldid<T extends YTRoleArgs= {}>(args?: Subset<T, YTRoleArgs>): Prisma__YTRoleClient<YTRoleGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTRolePermission base type for findUnique actions
   */
  export type YTRolePermissionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter, which YTRolePermission to fetch.
     */
    where: YTRolePermissionWhereUniqueInput
  }

  /**
   * YTRolePermission findUnique
   */
  export interface YTRolePermissionFindUniqueArgs extends YTRolePermissionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTRolePermission findUniqueOrThrow
   */
  export type YTRolePermissionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter, which YTRolePermission to fetch.
     */
    where: YTRolePermissionWhereUniqueInput
  }


  /**
   * YTRolePermission base type for findFirst actions
   */
  export type YTRolePermissionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter, which YTRolePermission to fetch.
     */
    where?: YTRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRolePermissions to fetch.
     */
    orderBy?: Enumerable<YTRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTRolePermissions.
     */
    cursor?: YTRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTRolePermissions.
     */
    distinct?: Enumerable<YTRolePermissionScalarFieldEnum>
  }

  /**
   * YTRolePermission findFirst
   */
  export interface YTRolePermissionFindFirstArgs extends YTRolePermissionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTRolePermission findFirstOrThrow
   */
  export type YTRolePermissionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter, which YTRolePermission to fetch.
     */
    where?: YTRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRolePermissions to fetch.
     */
    orderBy?: Enumerable<YTRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTRolePermissions.
     */
    cursor?: YTRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTRolePermissions.
     */
    distinct?: Enumerable<YTRolePermissionScalarFieldEnum>
  }


  /**
   * YTRolePermission findMany
   */
  export type YTRolePermissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter, which YTRolePermissions to fetch.
     */
    where?: YTRolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTRolePermissions to fetch.
     */
    orderBy?: Enumerable<YTRolePermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTRolePermissions.
     */
    cursor?: YTRolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTRolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTRolePermissions.
     */
    skip?: number
    distinct?: Enumerable<YTRolePermissionScalarFieldEnum>
  }


  /**
   * YTRolePermission create
   */
  export type YTRolePermissionCreateArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * The data needed to create a YTRolePermission.
     */
    data: XOR<YTRolePermissionCreateInput, YTRolePermissionUncheckedCreateInput>
  }


  /**
   * YTRolePermission createMany
   */
  export type YTRolePermissionCreateManyArgs = {
    /**
     * The data used to create many YTRolePermissions.
     */
    data: Enumerable<YTRolePermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTRolePermission update
   */
  export type YTRolePermissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * The data needed to update a YTRolePermission.
     */
    data: XOR<YTRolePermissionUpdateInput, YTRolePermissionUncheckedUpdateInput>
    /**
     * Choose, which YTRolePermission to update.
     */
    where: YTRolePermissionWhereUniqueInput
  }


  /**
   * YTRolePermission updateMany
   */
  export type YTRolePermissionUpdateManyArgs = {
    /**
     * The data used to update YTRolePermissions.
     */
    data: XOR<YTRolePermissionUpdateManyMutationInput, YTRolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which YTRolePermissions to update
     */
    where?: YTRolePermissionWhereInput
  }


  /**
   * YTRolePermission upsert
   */
  export type YTRolePermissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * The filter to search for the YTRolePermission to update in case it exists.
     */
    where: YTRolePermissionWhereUniqueInput
    /**
     * In case the YTRolePermission found by the `where` argument doesn't exist, create a new YTRolePermission with this data.
     */
    create: XOR<YTRolePermissionCreateInput, YTRolePermissionUncheckedCreateInput>
    /**
     * In case the YTRolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTRolePermissionUpdateInput, YTRolePermissionUncheckedUpdateInput>
  }


  /**
   * YTRolePermission delete
   */
  export type YTRolePermissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
    /**
     * Filter which YTRolePermission to delete.
     */
    where: YTRolePermissionWhereUniqueInput
  }


  /**
   * YTRolePermission deleteMany
   */
  export type YTRolePermissionDeleteManyArgs = {
    /**
     * Filter which YTRolePermissions to delete
     */
    where?: YTRolePermissionWhereInput
  }


  /**
   * YTRolePermission without action
   */
  export type YTRolePermissionArgs = {
    /**
     * Select specific fields to fetch from the YTRolePermission
     */
    select?: YTRolePermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTRolePermissionInclude | null
  }



  /**
   * Model YTSubscribe
   */


  export type AggregateYTSubscribe = {
    _count: YTSubscribeCountAggregateOutputType | null
    _avg: YTSubscribeAvgAggregateOutputType | null
    _sum: YTSubscribeSumAggregateOutputType | null
    _min: YTSubscribeMinAggregateOutputType | null
    _max: YTSubscribeMaxAggregateOutputType | null
  }

  export type YTSubscribeAvgAggregateOutputType = {
    id: number | null
    chanelId: number | null
    subscribeUserId: number | null
  }

  export type YTSubscribeSumAggregateOutputType = {
    id: number | null
    chanelId: number | null
    subscribeUserId: number | null
  }

  export type YTSubscribeMinAggregateOutputType = {
    id: number | null
    chanelId: number | null
    subscribeUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTSubscribeMaxAggregateOutputType = {
    id: number | null
    chanelId: number | null
    subscribeUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTSubscribeCountAggregateOutputType = {
    id: number
    chanelId: number
    subscribeUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTSubscribeAvgAggregateInputType = {
    id?: true
    chanelId?: true
    subscribeUserId?: true
  }

  export type YTSubscribeSumAggregateInputType = {
    id?: true
    chanelId?: true
    subscribeUserId?: true
  }

  export type YTSubscribeMinAggregateInputType = {
    id?: true
    chanelId?: true
    subscribeUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTSubscribeMaxAggregateInputType = {
    id?: true
    chanelId?: true
    subscribeUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTSubscribeCountAggregateInputType = {
    id?: true
    chanelId?: true
    subscribeUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTSubscribeAggregateArgs = {
    /**
     * Filter which YTSubscribe to aggregate.
     */
    where?: YTSubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubscribes to fetch.
     */
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTSubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubscribes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubscribes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTSubscribes
    **/
    _count?: true | YTSubscribeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTSubscribeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTSubscribeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTSubscribeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTSubscribeMaxAggregateInputType
  }

  export type GetYTSubscribeAggregateType<T extends YTSubscribeAggregateArgs> = {
        [P in keyof T & keyof AggregateYTSubscribe]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTSubscribe[P]>
      : GetScalarType<T[P], AggregateYTSubscribe[P]>
  }




  export type YTSubscribeGroupByArgs = {
    where?: YTSubscribeWhereInput
    orderBy?: Enumerable<YTSubscribeOrderByWithAggregationInput>
    by: YTSubscribeScalarFieldEnum[]
    having?: YTSubscribeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTSubscribeCountAggregateInputType | true
    _avg?: YTSubscribeAvgAggregateInputType
    _sum?: YTSubscribeSumAggregateInputType
    _min?: YTSubscribeMinAggregateInputType
    _max?: YTSubscribeMaxAggregateInputType
  }


  export type YTSubscribeGroupByOutputType = {
    id: number
    chanelId: number
    subscribeUserId: number
    createdAt: Date
    updatedAt: Date
    _count: YTSubscribeCountAggregateOutputType | null
    _avg: YTSubscribeAvgAggregateOutputType | null
    _sum: YTSubscribeSumAggregateOutputType | null
    _min: YTSubscribeMinAggregateOutputType | null
    _max: YTSubscribeMaxAggregateOutputType | null
  }

  type GetYTSubscribeGroupByPayload<T extends YTSubscribeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTSubscribeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTSubscribeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTSubscribeGroupByOutputType[P]>
            : GetScalarType<T[P], YTSubscribeGroupByOutputType[P]>
        }
      >
    >


  export type YTSubscribeSelect = {
    id?: boolean
    chanel?: boolean | YTChanelArgs
    chanelId?: boolean
    subscribeUser?: boolean | YTUserArgs
    subscribeUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YTSubscribeInclude = {
    chanel?: boolean | YTChanelArgs
    subscribeUser?: boolean | YTUserArgs
  }

  export type YTSubscribeGetPayload<S extends boolean | null | undefined | YTSubscribeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTSubscribe :
    S extends undefined ? never :
    S extends { include: any } & (YTSubscribeArgs | YTSubscribeFindManyArgs)
    ? YTSubscribe  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['include'][P]> :
        P extends 'subscribeUser' ? YTUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTSubscribeArgs | YTSubscribeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['select'][P]> :
        P extends 'subscribeUser' ? YTUserGetPayload<S['select'][P]> :  P extends keyof YTSubscribe ? YTSubscribe[P] : never
  } 
      : YTSubscribe


  type YTSubscribeCountArgs = 
    Omit<YTSubscribeFindManyArgs, 'select' | 'include'> & {
      select?: YTSubscribeCountAggregateInputType | true
    }

  export interface YTSubscribeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTSubscribe that matches the filter.
     * @param {YTSubscribeFindUniqueArgs} args - Arguments to find a YTSubscribe
     * @example
     * // Get one YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTSubscribeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTSubscribeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTSubscribe'> extends True ? Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>> : Prisma__YTSubscribeClient<YTSubscribeGetPayload<T> | null, null>

    /**
     * Find one YTSubscribe that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTSubscribeFindUniqueOrThrowArgs} args - Arguments to find a YTSubscribe
     * @example
     * // Get one YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTSubscribeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTSubscribeFindUniqueOrThrowArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Find the first YTSubscribe that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeFindFirstArgs} args - Arguments to find a YTSubscribe
     * @example
     * // Get one YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTSubscribeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTSubscribeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTSubscribe'> extends True ? Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>> : Prisma__YTSubscribeClient<YTSubscribeGetPayload<T> | null, null>

    /**
     * Find the first YTSubscribe that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeFindFirstOrThrowArgs} args - Arguments to find a YTSubscribe
     * @example
     * // Get one YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTSubscribeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTSubscribeFindFirstOrThrowArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Find zero or more YTSubscribes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTSubscribes
     * const yTSubscribes = await prisma.yTSubscribe.findMany()
     * 
     * // Get first 10 YTSubscribes
     * const yTSubscribes = await prisma.yTSubscribe.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTSubscribeWithIdOnly = await prisma.yTSubscribe.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTSubscribeFindManyArgs>(
      args?: SelectSubset<T, YTSubscribeFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTSubscribeGetPayload<T>>>

    /**
     * Create a YTSubscribe.
     * @param {YTSubscribeCreateArgs} args - Arguments to create a YTSubscribe.
     * @example
     * // Create one YTSubscribe
     * const YTSubscribe = await prisma.yTSubscribe.create({
     *   data: {
     *     // ... data to create a YTSubscribe
     *   }
     * })
     * 
    **/
    create<T extends YTSubscribeCreateArgs>(
      args: SelectSubset<T, YTSubscribeCreateArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Create many YTSubscribes.
     *     @param {YTSubscribeCreateManyArgs} args - Arguments to create many YTSubscribes.
     *     @example
     *     // Create many YTSubscribes
     *     const yTSubscribe = await prisma.yTSubscribe.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTSubscribeCreateManyArgs>(
      args?: SelectSubset<T, YTSubscribeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTSubscribe.
     * @param {YTSubscribeDeleteArgs} args - Arguments to delete one YTSubscribe.
     * @example
     * // Delete one YTSubscribe
     * const YTSubscribe = await prisma.yTSubscribe.delete({
     *   where: {
     *     // ... filter to delete one YTSubscribe
     *   }
     * })
     * 
    **/
    delete<T extends YTSubscribeDeleteArgs>(
      args: SelectSubset<T, YTSubscribeDeleteArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Update one YTSubscribe.
     * @param {YTSubscribeUpdateArgs} args - Arguments to update one YTSubscribe.
     * @example
     * // Update one YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTSubscribeUpdateArgs>(
      args: SelectSubset<T, YTSubscribeUpdateArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Delete zero or more YTSubscribes.
     * @param {YTSubscribeDeleteManyArgs} args - Arguments to filter YTSubscribes to delete.
     * @example
     * // Delete a few YTSubscribes
     * const { count } = await prisma.yTSubscribe.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTSubscribeDeleteManyArgs>(
      args?: SelectSubset<T, YTSubscribeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTSubscribes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTSubscribes
     * const yTSubscribe = await prisma.yTSubscribe.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTSubscribeUpdateManyArgs>(
      args: SelectSubset<T, YTSubscribeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTSubscribe.
     * @param {YTSubscribeUpsertArgs} args - Arguments to update or create a YTSubscribe.
     * @example
     * // Update or create a YTSubscribe
     * const yTSubscribe = await prisma.yTSubscribe.upsert({
     *   create: {
     *     // ... data to create a YTSubscribe
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTSubscribe we want to update
     *   }
     * })
    **/
    upsert<T extends YTSubscribeUpsertArgs>(
      args: SelectSubset<T, YTSubscribeUpsertArgs>
    ): Prisma__YTSubscribeClient<YTSubscribeGetPayload<T>>

    /**
     * Count the number of YTSubscribes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeCountArgs} args - Arguments to filter YTSubscribes to count.
     * @example
     * // Count the number of YTSubscribes
     * const count = await prisma.yTSubscribe.count({
     *   where: {
     *     // ... the filter for the YTSubscribes we want to count
     *   }
     * })
    **/
    count<T extends YTSubscribeCountArgs>(
      args?: Subset<T, YTSubscribeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTSubscribeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTSubscribe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTSubscribeAggregateArgs>(args: Subset<T, YTSubscribeAggregateArgs>): Prisma.PrismaPromise<GetYTSubscribeAggregateType<T>>

    /**
     * Group by YTSubscribe.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubscribeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTSubscribeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTSubscribeGroupByArgs['orderBy'] }
        : { orderBy?: YTSubscribeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTSubscribeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTSubscribeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTSubscribe.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTSubscribeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanel<T extends YTChanelArgs= {}>(args?: Subset<T, YTChanelArgs>): Prisma__YTChanelClient<YTChanelGetPayload<T> | Null>;

    subscribeUser<T extends YTUserArgs= {}>(args?: Subset<T, YTUserArgs>): Prisma__YTUserClient<YTUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTSubscribe base type for findUnique actions
   */
  export type YTSubscribeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter, which YTSubscribe to fetch.
     */
    where: YTSubscribeWhereUniqueInput
  }

  /**
   * YTSubscribe findUnique
   */
  export interface YTSubscribeFindUniqueArgs extends YTSubscribeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTSubscribe findUniqueOrThrow
   */
  export type YTSubscribeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter, which YTSubscribe to fetch.
     */
    where: YTSubscribeWhereUniqueInput
  }


  /**
   * YTSubscribe base type for findFirst actions
   */
  export type YTSubscribeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter, which YTSubscribe to fetch.
     */
    where?: YTSubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubscribes to fetch.
     */
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTSubscribes.
     */
    cursor?: YTSubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubscribes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubscribes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTSubscribes.
     */
    distinct?: Enumerable<YTSubscribeScalarFieldEnum>
  }

  /**
   * YTSubscribe findFirst
   */
  export interface YTSubscribeFindFirstArgs extends YTSubscribeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTSubscribe findFirstOrThrow
   */
  export type YTSubscribeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter, which YTSubscribe to fetch.
     */
    where?: YTSubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubscribes to fetch.
     */
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTSubscribes.
     */
    cursor?: YTSubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubscribes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubscribes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTSubscribes.
     */
    distinct?: Enumerable<YTSubscribeScalarFieldEnum>
  }


  /**
   * YTSubscribe findMany
   */
  export type YTSubscribeFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter, which YTSubscribes to fetch.
     */
    where?: YTSubscribeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubscribes to fetch.
     */
    orderBy?: Enumerable<YTSubscribeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTSubscribes.
     */
    cursor?: YTSubscribeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubscribes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubscribes.
     */
    skip?: number
    distinct?: Enumerable<YTSubscribeScalarFieldEnum>
  }


  /**
   * YTSubscribe create
   */
  export type YTSubscribeCreateArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * The data needed to create a YTSubscribe.
     */
    data: XOR<YTSubscribeCreateInput, YTSubscribeUncheckedCreateInput>
  }


  /**
   * YTSubscribe createMany
   */
  export type YTSubscribeCreateManyArgs = {
    /**
     * The data used to create many YTSubscribes.
     */
    data: Enumerable<YTSubscribeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTSubscribe update
   */
  export type YTSubscribeUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * The data needed to update a YTSubscribe.
     */
    data: XOR<YTSubscribeUpdateInput, YTSubscribeUncheckedUpdateInput>
    /**
     * Choose, which YTSubscribe to update.
     */
    where: YTSubscribeWhereUniqueInput
  }


  /**
   * YTSubscribe updateMany
   */
  export type YTSubscribeUpdateManyArgs = {
    /**
     * The data used to update YTSubscribes.
     */
    data: XOR<YTSubscribeUpdateManyMutationInput, YTSubscribeUncheckedUpdateManyInput>
    /**
     * Filter which YTSubscribes to update
     */
    where?: YTSubscribeWhereInput
  }


  /**
   * YTSubscribe upsert
   */
  export type YTSubscribeUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * The filter to search for the YTSubscribe to update in case it exists.
     */
    where: YTSubscribeWhereUniqueInput
    /**
     * In case the YTSubscribe found by the `where` argument doesn't exist, create a new YTSubscribe with this data.
     */
    create: XOR<YTSubscribeCreateInput, YTSubscribeUncheckedCreateInput>
    /**
     * In case the YTSubscribe was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTSubscribeUpdateInput, YTSubscribeUncheckedUpdateInput>
  }


  /**
   * YTSubscribe delete
   */
  export type YTSubscribeDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
    /**
     * Filter which YTSubscribe to delete.
     */
    where: YTSubscribeWhereUniqueInput
  }


  /**
   * YTSubscribe deleteMany
   */
  export type YTSubscribeDeleteManyArgs = {
    /**
     * Filter which YTSubscribes to delete
     */
    where?: YTSubscribeWhereInput
  }


  /**
   * YTSubscribe without action
   */
  export type YTSubscribeArgs = {
    /**
     * Select specific fields to fetch from the YTSubscribe
     */
    select?: YTSubscribeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubscribeInclude | null
  }



  /**
   * Model YTVideo
   */


  export type AggregateYTVideo = {
    _count: YTVideoCountAggregateOutputType | null
    _avg: YTVideoAvgAggregateOutputType | null
    _sum: YTVideoSumAggregateOutputType | null
    _min: YTVideoMinAggregateOutputType | null
    _max: YTVideoMaxAggregateOutputType | null
  }

  export type YTVideoAvgAggregateOutputType = {
    id: number | null
    chanelId: number | null
  }

  export type YTVideoSumAggregateOutputType = {
    id: number | null
    chanelId: number | null
  }

  export type YTVideoMinAggregateOutputType = {
    id: number | null
    chanelId: number | null
    videoLink: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTVideoMaxAggregateOutputType = {
    id: number | null
    chanelId: number | null
    videoLink: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTVideoCountAggregateOutputType = {
    id: number
    chanelId: number
    videoLink: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTVideoAvgAggregateInputType = {
    id?: true
    chanelId?: true
  }

  export type YTVideoSumAggregateInputType = {
    id?: true
    chanelId?: true
  }

  export type YTVideoMinAggregateInputType = {
    id?: true
    chanelId?: true
    videoLink?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTVideoMaxAggregateInputType = {
    id?: true
    chanelId?: true
    videoLink?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTVideoCountAggregateInputType = {
    id?: true
    chanelId?: true
    videoLink?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTVideoAggregateArgs = {
    /**
     * Filter which YTVideo to aggregate.
     */
    where?: YTVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTVideos to fetch.
     */
    orderBy?: Enumerable<YTVideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTVideos
    **/
    _count?: true | YTVideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTVideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTVideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTVideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTVideoMaxAggregateInputType
  }

  export type GetYTVideoAggregateType<T extends YTVideoAggregateArgs> = {
        [P in keyof T & keyof AggregateYTVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTVideo[P]>
      : GetScalarType<T[P], AggregateYTVideo[P]>
  }




  export type YTVideoGroupByArgs = {
    where?: YTVideoWhereInput
    orderBy?: Enumerable<YTVideoOrderByWithAggregationInput>
    by: YTVideoScalarFieldEnum[]
    having?: YTVideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTVideoCountAggregateInputType | true
    _avg?: YTVideoAvgAggregateInputType
    _sum?: YTVideoSumAggregateInputType
    _min?: YTVideoMinAggregateInputType
    _max?: YTVideoMaxAggregateInputType
  }


  export type YTVideoGroupByOutputType = {
    id: number
    chanelId: number
    videoLink: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: YTVideoCountAggregateOutputType | null
    _avg: YTVideoAvgAggregateOutputType | null
    _sum: YTVideoSumAggregateOutputType | null
    _min: YTVideoMinAggregateOutputType | null
    _max: YTVideoMaxAggregateOutputType | null
  }

  type GetYTVideoGroupByPayload<T extends YTVideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTVideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTVideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTVideoGroupByOutputType[P]>
            : GetScalarType<T[P], YTVideoGroupByOutputType[P]>
        }
      >
    >


  export type YTVideoSelect = {
    id?: boolean
    chanel?: boolean | YTChanelArgs
    chanelId?: boolean
    videoLink?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    YTComment?: boolean | YTVideo$YTCommentArgs
    _count?: boolean | YTVideoCountOutputTypeArgs
  }


  export type YTVideoInclude = {
    chanel?: boolean | YTChanelArgs
    YTComment?: boolean | YTVideo$YTCommentArgs
    _count?: boolean | YTVideoCountOutputTypeArgs
  }

  export type YTVideoGetPayload<S extends boolean | null | undefined | YTVideoArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTVideo :
    S extends undefined ? never :
    S extends { include: any } & (YTVideoArgs | YTVideoFindManyArgs)
    ? YTVideo  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['include'][P]> :
        P extends 'YTComment' ? Array < YTCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? YTVideoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTVideoArgs | YTVideoFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanel' ? YTChanelGetPayload<S['select'][P]> :
        P extends 'YTComment' ? Array < YTCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? YTVideoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YTVideo ? YTVideo[P] : never
  } 
      : YTVideo


  type YTVideoCountArgs = 
    Omit<YTVideoFindManyArgs, 'select' | 'include'> & {
      select?: YTVideoCountAggregateInputType | true
    }

  export interface YTVideoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTVideo that matches the filter.
     * @param {YTVideoFindUniqueArgs} args - Arguments to find a YTVideo
     * @example
     * // Get one YTVideo
     * const yTVideo = await prisma.yTVideo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTVideoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTVideoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTVideo'> extends True ? Prisma__YTVideoClient<YTVideoGetPayload<T>> : Prisma__YTVideoClient<YTVideoGetPayload<T> | null, null>

    /**
     * Find one YTVideo that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTVideoFindUniqueOrThrowArgs} args - Arguments to find a YTVideo
     * @example
     * // Get one YTVideo
     * const yTVideo = await prisma.yTVideo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTVideoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTVideoFindUniqueOrThrowArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Find the first YTVideo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoFindFirstArgs} args - Arguments to find a YTVideo
     * @example
     * // Get one YTVideo
     * const yTVideo = await prisma.yTVideo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTVideoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTVideoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTVideo'> extends True ? Prisma__YTVideoClient<YTVideoGetPayload<T>> : Prisma__YTVideoClient<YTVideoGetPayload<T> | null, null>

    /**
     * Find the first YTVideo that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoFindFirstOrThrowArgs} args - Arguments to find a YTVideo
     * @example
     * // Get one YTVideo
     * const yTVideo = await prisma.yTVideo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTVideoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTVideoFindFirstOrThrowArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Find zero or more YTVideos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTVideos
     * const yTVideos = await prisma.yTVideo.findMany()
     * 
     * // Get first 10 YTVideos
     * const yTVideos = await prisma.yTVideo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTVideoWithIdOnly = await prisma.yTVideo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTVideoFindManyArgs>(
      args?: SelectSubset<T, YTVideoFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTVideoGetPayload<T>>>

    /**
     * Create a YTVideo.
     * @param {YTVideoCreateArgs} args - Arguments to create a YTVideo.
     * @example
     * // Create one YTVideo
     * const YTVideo = await prisma.yTVideo.create({
     *   data: {
     *     // ... data to create a YTVideo
     *   }
     * })
     * 
    **/
    create<T extends YTVideoCreateArgs>(
      args: SelectSubset<T, YTVideoCreateArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Create many YTVideos.
     *     @param {YTVideoCreateManyArgs} args - Arguments to create many YTVideos.
     *     @example
     *     // Create many YTVideos
     *     const yTVideo = await prisma.yTVideo.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTVideoCreateManyArgs>(
      args?: SelectSubset<T, YTVideoCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTVideo.
     * @param {YTVideoDeleteArgs} args - Arguments to delete one YTVideo.
     * @example
     * // Delete one YTVideo
     * const YTVideo = await prisma.yTVideo.delete({
     *   where: {
     *     // ... filter to delete one YTVideo
     *   }
     * })
     * 
    **/
    delete<T extends YTVideoDeleteArgs>(
      args: SelectSubset<T, YTVideoDeleteArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Update one YTVideo.
     * @param {YTVideoUpdateArgs} args - Arguments to update one YTVideo.
     * @example
     * // Update one YTVideo
     * const yTVideo = await prisma.yTVideo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTVideoUpdateArgs>(
      args: SelectSubset<T, YTVideoUpdateArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Delete zero or more YTVideos.
     * @param {YTVideoDeleteManyArgs} args - Arguments to filter YTVideos to delete.
     * @example
     * // Delete a few YTVideos
     * const { count } = await prisma.yTVideo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTVideoDeleteManyArgs>(
      args?: SelectSubset<T, YTVideoDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTVideos
     * const yTVideo = await prisma.yTVideo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTVideoUpdateManyArgs>(
      args: SelectSubset<T, YTVideoUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTVideo.
     * @param {YTVideoUpsertArgs} args - Arguments to update or create a YTVideo.
     * @example
     * // Update or create a YTVideo
     * const yTVideo = await prisma.yTVideo.upsert({
     *   create: {
     *     // ... data to create a YTVideo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTVideo we want to update
     *   }
     * })
    **/
    upsert<T extends YTVideoUpsertArgs>(
      args: SelectSubset<T, YTVideoUpsertArgs>
    ): Prisma__YTVideoClient<YTVideoGetPayload<T>>

    /**
     * Count the number of YTVideos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoCountArgs} args - Arguments to filter YTVideos to count.
     * @example
     * // Count the number of YTVideos
     * const count = await prisma.yTVideo.count({
     *   where: {
     *     // ... the filter for the YTVideos we want to count
     *   }
     * })
    **/
    count<T extends YTVideoCountArgs>(
      args?: Subset<T, YTVideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTVideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTVideoAggregateArgs>(args: Subset<T, YTVideoAggregateArgs>): Prisma.PrismaPromise<GetYTVideoAggregateType<T>>

    /**
     * Group by YTVideo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTVideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTVideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTVideoGroupByArgs['orderBy'] }
        : { orderBy?: YTVideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTVideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTVideo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTVideoClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanel<T extends YTChanelArgs= {}>(args?: Subset<T, YTChanelArgs>): Prisma__YTChanelClient<YTChanelGetPayload<T> | Null>;

    YTComment<T extends YTVideo$YTCommentArgs= {}>(args?: Subset<T, YTVideo$YTCommentArgs>): Prisma.PrismaPromise<Array<YTCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTVideo base type for findUnique actions
   */
  export type YTVideoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter, which YTVideo to fetch.
     */
    where: YTVideoWhereUniqueInput
  }

  /**
   * YTVideo findUnique
   */
  export interface YTVideoFindUniqueArgs extends YTVideoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTVideo findUniqueOrThrow
   */
  export type YTVideoFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter, which YTVideo to fetch.
     */
    where: YTVideoWhereUniqueInput
  }


  /**
   * YTVideo base type for findFirst actions
   */
  export type YTVideoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter, which YTVideo to fetch.
     */
    where?: YTVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTVideos to fetch.
     */
    orderBy?: Enumerable<YTVideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTVideos.
     */
    cursor?: YTVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTVideos.
     */
    distinct?: Enumerable<YTVideoScalarFieldEnum>
  }

  /**
   * YTVideo findFirst
   */
  export interface YTVideoFindFirstArgs extends YTVideoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTVideo findFirstOrThrow
   */
  export type YTVideoFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter, which YTVideo to fetch.
     */
    where?: YTVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTVideos to fetch.
     */
    orderBy?: Enumerable<YTVideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTVideos.
     */
    cursor?: YTVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTVideos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTVideos.
     */
    distinct?: Enumerable<YTVideoScalarFieldEnum>
  }


  /**
   * YTVideo findMany
   */
  export type YTVideoFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter, which YTVideos to fetch.
     */
    where?: YTVideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTVideos to fetch.
     */
    orderBy?: Enumerable<YTVideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTVideos.
     */
    cursor?: YTVideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTVideos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTVideos.
     */
    skip?: number
    distinct?: Enumerable<YTVideoScalarFieldEnum>
  }


  /**
   * YTVideo create
   */
  export type YTVideoCreateArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * The data needed to create a YTVideo.
     */
    data: XOR<YTVideoCreateInput, YTVideoUncheckedCreateInput>
  }


  /**
   * YTVideo createMany
   */
  export type YTVideoCreateManyArgs = {
    /**
     * The data used to create many YTVideos.
     */
    data: Enumerable<YTVideoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTVideo update
   */
  export type YTVideoUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * The data needed to update a YTVideo.
     */
    data: XOR<YTVideoUpdateInput, YTVideoUncheckedUpdateInput>
    /**
     * Choose, which YTVideo to update.
     */
    where: YTVideoWhereUniqueInput
  }


  /**
   * YTVideo updateMany
   */
  export type YTVideoUpdateManyArgs = {
    /**
     * The data used to update YTVideos.
     */
    data: XOR<YTVideoUpdateManyMutationInput, YTVideoUncheckedUpdateManyInput>
    /**
     * Filter which YTVideos to update
     */
    where?: YTVideoWhereInput
  }


  /**
   * YTVideo upsert
   */
  export type YTVideoUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * The filter to search for the YTVideo to update in case it exists.
     */
    where: YTVideoWhereUniqueInput
    /**
     * In case the YTVideo found by the `where` argument doesn't exist, create a new YTVideo with this data.
     */
    create: XOR<YTVideoCreateInput, YTVideoUncheckedCreateInput>
    /**
     * In case the YTVideo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTVideoUpdateInput, YTVideoUncheckedUpdateInput>
  }


  /**
   * YTVideo delete
   */
  export type YTVideoDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
    /**
     * Filter which YTVideo to delete.
     */
    where: YTVideoWhereUniqueInput
  }


  /**
   * YTVideo deleteMany
   */
  export type YTVideoDeleteManyArgs = {
    /**
     * Filter which YTVideos to delete
     */
    where?: YTVideoWhereInput
  }


  /**
   * YTVideo.YTComment
   */
  export type YTVideo$YTCommentArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    where?: YTCommentWhereInput
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    cursor?: YTCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTCommentScalarFieldEnum>
  }


  /**
   * YTVideo without action
   */
  export type YTVideoArgs = {
    /**
     * Select specific fields to fetch from the YTVideo
     */
    select?: YTVideoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTVideoInclude | null
  }



  /**
   * Model YTComment
   */


  export type AggregateYTComment = {
    _count: YTCommentCountAggregateOutputType | null
    _avg: YTCommentAvgAggregateOutputType | null
    _sum: YTCommentSumAggregateOutputType | null
    _min: YTCommentMinAggregateOutputType | null
    _max: YTCommentMaxAggregateOutputType | null
  }

  export type YTCommentAvgAggregateOutputType = {
    id: number | null
    videoId: number | null
    commentFromUserId: number | null
  }

  export type YTCommentSumAggregateOutputType = {
    id: number | null
    videoId: number | null
    commentFromUserId: number | null
  }

  export type YTCommentMinAggregateOutputType = {
    id: number | null
    videoId: number | null
    commentDetail: string | null
    commentFromUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTCommentMaxAggregateOutputType = {
    id: number | null
    videoId: number | null
    commentDetail: string | null
    commentFromUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTCommentCountAggregateOutputType = {
    id: number
    videoId: number
    commentDetail: number
    commentFromUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTCommentAvgAggregateInputType = {
    id?: true
    videoId?: true
    commentFromUserId?: true
  }

  export type YTCommentSumAggregateInputType = {
    id?: true
    videoId?: true
    commentFromUserId?: true
  }

  export type YTCommentMinAggregateInputType = {
    id?: true
    videoId?: true
    commentDetail?: true
    commentFromUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTCommentMaxAggregateInputType = {
    id?: true
    videoId?: true
    commentDetail?: true
    commentFromUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTCommentCountAggregateInputType = {
    id?: true
    videoId?: true
    commentDetail?: true
    commentFromUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTCommentAggregateArgs = {
    /**
     * Filter which YTComment to aggregate.
     */
    where?: YTCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTComments to fetch.
     */
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTComments
    **/
    _count?: true | YTCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTCommentMaxAggregateInputType
  }

  export type GetYTCommentAggregateType<T extends YTCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateYTComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTComment[P]>
      : GetScalarType<T[P], AggregateYTComment[P]>
  }




  export type YTCommentGroupByArgs = {
    where?: YTCommentWhereInput
    orderBy?: Enumerable<YTCommentOrderByWithAggregationInput>
    by: YTCommentScalarFieldEnum[]
    having?: YTCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTCommentCountAggregateInputType | true
    _avg?: YTCommentAvgAggregateInputType
    _sum?: YTCommentSumAggregateInputType
    _min?: YTCommentMinAggregateInputType
    _max?: YTCommentMaxAggregateInputType
  }


  export type YTCommentGroupByOutputType = {
    id: number
    videoId: number
    commentDetail: string
    commentFromUserId: number
    createdAt: Date
    updatedAt: Date
    _count: YTCommentCountAggregateOutputType | null
    _avg: YTCommentAvgAggregateOutputType | null
    _sum: YTCommentSumAggregateOutputType | null
    _min: YTCommentMinAggregateOutputType | null
    _max: YTCommentMaxAggregateOutputType | null
  }

  type GetYTCommentGroupByPayload<T extends YTCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTCommentGroupByOutputType[P]>
            : GetScalarType<T[P], YTCommentGroupByOutputType[P]>
        }
      >
    >


  export type YTCommentSelect = {
    id?: boolean
    video?: boolean | YTVideoArgs
    videoId?: boolean
    commentDetail?: boolean
    commentFromUser?: boolean | YTUserArgs
    commentFromUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    YTSubComment?: boolean | YTComment$YTSubCommentArgs
    _count?: boolean | YTCommentCountOutputTypeArgs
  }


  export type YTCommentInclude = {
    video?: boolean | YTVideoArgs
    commentFromUser?: boolean | YTUserArgs
    YTSubComment?: boolean | YTComment$YTSubCommentArgs
    _count?: boolean | YTCommentCountOutputTypeArgs
  }

  export type YTCommentGetPayload<S extends boolean | null | undefined | YTCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTComment :
    S extends undefined ? never :
    S extends { include: any } & (YTCommentArgs | YTCommentFindManyArgs)
    ? YTComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'video' ? YTVideoGetPayload<S['include'][P]> :
        P extends 'commentFromUser' ? YTUserGetPayload<S['include'][P]> :
        P extends 'YTSubComment' ? Array < YTSubCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? YTCommentCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTCommentArgs | YTCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'video' ? YTVideoGetPayload<S['select'][P]> :
        P extends 'commentFromUser' ? YTUserGetPayload<S['select'][P]> :
        P extends 'YTSubComment' ? Array < YTSubCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? YTCommentCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YTComment ? YTComment[P] : never
  } 
      : YTComment


  type YTCommentCountArgs = 
    Omit<YTCommentFindManyArgs, 'select' | 'include'> & {
      select?: YTCommentCountAggregateInputType | true
    }

  export interface YTCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTComment that matches the filter.
     * @param {YTCommentFindUniqueArgs} args - Arguments to find a YTComment
     * @example
     * // Get one YTComment
     * const yTComment = await prisma.yTComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTComment'> extends True ? Prisma__YTCommentClient<YTCommentGetPayload<T>> : Prisma__YTCommentClient<YTCommentGetPayload<T> | null, null>

    /**
     * Find one YTComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTCommentFindUniqueOrThrowArgs} args - Arguments to find a YTComment
     * @example
     * // Get one YTComment
     * const yTComment = await prisma.yTComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTCommentFindUniqueOrThrowArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Find the first YTComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentFindFirstArgs} args - Arguments to find a YTComment
     * @example
     * // Get one YTComment
     * const yTComment = await prisma.yTComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTComment'> extends True ? Prisma__YTCommentClient<YTCommentGetPayload<T>> : Prisma__YTCommentClient<YTCommentGetPayload<T> | null, null>

    /**
     * Find the first YTComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentFindFirstOrThrowArgs} args - Arguments to find a YTComment
     * @example
     * // Get one YTComment
     * const yTComment = await prisma.yTComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTCommentFindFirstOrThrowArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Find zero or more YTComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTComments
     * const yTComments = await prisma.yTComment.findMany()
     * 
     * // Get first 10 YTComments
     * const yTComments = await prisma.yTComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTCommentWithIdOnly = await prisma.yTComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTCommentFindManyArgs>(
      args?: SelectSubset<T, YTCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTCommentGetPayload<T>>>

    /**
     * Create a YTComment.
     * @param {YTCommentCreateArgs} args - Arguments to create a YTComment.
     * @example
     * // Create one YTComment
     * const YTComment = await prisma.yTComment.create({
     *   data: {
     *     // ... data to create a YTComment
     *   }
     * })
     * 
    **/
    create<T extends YTCommentCreateArgs>(
      args: SelectSubset<T, YTCommentCreateArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Create many YTComments.
     *     @param {YTCommentCreateManyArgs} args - Arguments to create many YTComments.
     *     @example
     *     // Create many YTComments
     *     const yTComment = await prisma.yTComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTCommentCreateManyArgs>(
      args?: SelectSubset<T, YTCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTComment.
     * @param {YTCommentDeleteArgs} args - Arguments to delete one YTComment.
     * @example
     * // Delete one YTComment
     * const YTComment = await prisma.yTComment.delete({
     *   where: {
     *     // ... filter to delete one YTComment
     *   }
     * })
     * 
    **/
    delete<T extends YTCommentDeleteArgs>(
      args: SelectSubset<T, YTCommentDeleteArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Update one YTComment.
     * @param {YTCommentUpdateArgs} args - Arguments to update one YTComment.
     * @example
     * // Update one YTComment
     * const yTComment = await prisma.yTComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTCommentUpdateArgs>(
      args: SelectSubset<T, YTCommentUpdateArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Delete zero or more YTComments.
     * @param {YTCommentDeleteManyArgs} args - Arguments to filter YTComments to delete.
     * @example
     * // Delete a few YTComments
     * const { count } = await prisma.yTComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTCommentDeleteManyArgs>(
      args?: SelectSubset<T, YTCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTComments
     * const yTComment = await prisma.yTComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTCommentUpdateManyArgs>(
      args: SelectSubset<T, YTCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTComment.
     * @param {YTCommentUpsertArgs} args - Arguments to update or create a YTComment.
     * @example
     * // Update or create a YTComment
     * const yTComment = await prisma.yTComment.upsert({
     *   create: {
     *     // ... data to create a YTComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTComment we want to update
     *   }
     * })
    **/
    upsert<T extends YTCommentUpsertArgs>(
      args: SelectSubset<T, YTCommentUpsertArgs>
    ): Prisma__YTCommentClient<YTCommentGetPayload<T>>

    /**
     * Count the number of YTComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentCountArgs} args - Arguments to filter YTComments to count.
     * @example
     * // Count the number of YTComments
     * const count = await prisma.yTComment.count({
     *   where: {
     *     // ... the filter for the YTComments we want to count
     *   }
     * })
    **/
    count<T extends YTCommentCountArgs>(
      args?: Subset<T, YTCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTCommentAggregateArgs>(args: Subset<T, YTCommentAggregateArgs>): Prisma.PrismaPromise<GetYTCommentAggregateType<T>>

    /**
     * Group by YTComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTCommentGroupByArgs['orderBy'] }
        : { orderBy?: YTCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    video<T extends YTVideoArgs= {}>(args?: Subset<T, YTVideoArgs>): Prisma__YTVideoClient<YTVideoGetPayload<T> | Null>;

    commentFromUser<T extends YTUserArgs= {}>(args?: Subset<T, YTUserArgs>): Prisma__YTUserClient<YTUserGetPayload<T> | Null>;

    YTSubComment<T extends YTComment$YTSubCommentArgs= {}>(args?: Subset<T, YTComment$YTSubCommentArgs>): Prisma.PrismaPromise<Array<YTSubCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTComment base type for findUnique actions
   */
  export type YTCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter, which YTComment to fetch.
     */
    where: YTCommentWhereUniqueInput
  }

  /**
   * YTComment findUnique
   */
  export interface YTCommentFindUniqueArgs extends YTCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTComment findUniqueOrThrow
   */
  export type YTCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter, which YTComment to fetch.
     */
    where: YTCommentWhereUniqueInput
  }


  /**
   * YTComment base type for findFirst actions
   */
  export type YTCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter, which YTComment to fetch.
     */
    where?: YTCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTComments to fetch.
     */
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTComments.
     */
    cursor?: YTCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTComments.
     */
    distinct?: Enumerable<YTCommentScalarFieldEnum>
  }

  /**
   * YTComment findFirst
   */
  export interface YTCommentFindFirstArgs extends YTCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTComment findFirstOrThrow
   */
  export type YTCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter, which YTComment to fetch.
     */
    where?: YTCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTComments to fetch.
     */
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTComments.
     */
    cursor?: YTCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTComments.
     */
    distinct?: Enumerable<YTCommentScalarFieldEnum>
  }


  /**
   * YTComment findMany
   */
  export type YTCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter, which YTComments to fetch.
     */
    where?: YTCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTComments to fetch.
     */
    orderBy?: Enumerable<YTCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTComments.
     */
    cursor?: YTCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTComments.
     */
    skip?: number
    distinct?: Enumerable<YTCommentScalarFieldEnum>
  }


  /**
   * YTComment create
   */
  export type YTCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * The data needed to create a YTComment.
     */
    data: XOR<YTCommentCreateInput, YTCommentUncheckedCreateInput>
  }


  /**
   * YTComment createMany
   */
  export type YTCommentCreateManyArgs = {
    /**
     * The data used to create many YTComments.
     */
    data: Enumerable<YTCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTComment update
   */
  export type YTCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * The data needed to update a YTComment.
     */
    data: XOR<YTCommentUpdateInput, YTCommentUncheckedUpdateInput>
    /**
     * Choose, which YTComment to update.
     */
    where: YTCommentWhereUniqueInput
  }


  /**
   * YTComment updateMany
   */
  export type YTCommentUpdateManyArgs = {
    /**
     * The data used to update YTComments.
     */
    data: XOR<YTCommentUpdateManyMutationInput, YTCommentUncheckedUpdateManyInput>
    /**
     * Filter which YTComments to update
     */
    where?: YTCommentWhereInput
  }


  /**
   * YTComment upsert
   */
  export type YTCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * The filter to search for the YTComment to update in case it exists.
     */
    where: YTCommentWhereUniqueInput
    /**
     * In case the YTComment found by the `where` argument doesn't exist, create a new YTComment with this data.
     */
    create: XOR<YTCommentCreateInput, YTCommentUncheckedCreateInput>
    /**
     * In case the YTComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTCommentUpdateInput, YTCommentUncheckedUpdateInput>
  }


  /**
   * YTComment delete
   */
  export type YTCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
    /**
     * Filter which YTComment to delete.
     */
    where: YTCommentWhereUniqueInput
  }


  /**
   * YTComment deleteMany
   */
  export type YTCommentDeleteManyArgs = {
    /**
     * Filter which YTComments to delete
     */
    where?: YTCommentWhereInput
  }


  /**
   * YTComment.YTSubComment
   */
  export type YTComment$YTSubCommentArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    where?: YTSubCommentWhereInput
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    cursor?: YTSubCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YTSubCommentScalarFieldEnum>
  }


  /**
   * YTComment without action
   */
  export type YTCommentArgs = {
    /**
     * Select specific fields to fetch from the YTComment
     */
    select?: YTCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTCommentInclude | null
  }



  /**
   * Model YTSubComment
   */


  export type AggregateYTSubComment = {
    _count: YTSubCommentCountAggregateOutputType | null
    _avg: YTSubCommentAvgAggregateOutputType | null
    _sum: YTSubCommentSumAggregateOutputType | null
    _min: YTSubCommentMinAggregateOutputType | null
    _max: YTSubCommentMaxAggregateOutputType | null
  }

  export type YTSubCommentAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentFromUserId: number | null
  }

  export type YTSubCommentSumAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentFromUserId: number | null
  }

  export type YTSubCommentMinAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentDetail: string | null
    subCommentFromUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTSubCommentMaxAggregateOutputType = {
    id: number | null
    commentId: number | null
    subCommentDetail: string | null
    subCommentFromUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YTSubCommentCountAggregateOutputType = {
    id: number
    commentId: number
    subCommentDetail: number
    subCommentFromUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YTSubCommentAvgAggregateInputType = {
    id?: true
    commentId?: true
    subCommentFromUserId?: true
  }

  export type YTSubCommentSumAggregateInputType = {
    id?: true
    commentId?: true
    subCommentFromUserId?: true
  }

  export type YTSubCommentMinAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    subCommentFromUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTSubCommentMaxAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    subCommentFromUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YTSubCommentCountAggregateInputType = {
    id?: true
    commentId?: true
    subCommentDetail?: true
    subCommentFromUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YTSubCommentAggregateArgs = {
    /**
     * Filter which YTSubComment to aggregate.
     */
    where?: YTSubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubComments to fetch.
     */
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YTSubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YTSubComments
    **/
    _count?: true | YTSubCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YTSubCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YTSubCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YTSubCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YTSubCommentMaxAggregateInputType
  }

  export type GetYTSubCommentAggregateType<T extends YTSubCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateYTSubComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYTSubComment[P]>
      : GetScalarType<T[P], AggregateYTSubComment[P]>
  }




  export type YTSubCommentGroupByArgs = {
    where?: YTSubCommentWhereInput
    orderBy?: Enumerable<YTSubCommentOrderByWithAggregationInput>
    by: YTSubCommentScalarFieldEnum[]
    having?: YTSubCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YTSubCommentCountAggregateInputType | true
    _avg?: YTSubCommentAvgAggregateInputType
    _sum?: YTSubCommentSumAggregateInputType
    _min?: YTSubCommentMinAggregateInputType
    _max?: YTSubCommentMaxAggregateInputType
  }


  export type YTSubCommentGroupByOutputType = {
    id: number
    commentId: number
    subCommentDetail: string
    subCommentFromUserId: number
    createdAt: Date
    updatedAt: Date
    _count: YTSubCommentCountAggregateOutputType | null
    _avg: YTSubCommentAvgAggregateOutputType | null
    _sum: YTSubCommentSumAggregateOutputType | null
    _min: YTSubCommentMinAggregateOutputType | null
    _max: YTSubCommentMaxAggregateOutputType | null
  }

  type GetYTSubCommentGroupByPayload<T extends YTSubCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YTSubCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YTSubCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YTSubCommentGroupByOutputType[P]>
            : GetScalarType<T[P], YTSubCommentGroupByOutputType[P]>
        }
      >
    >


  export type YTSubCommentSelect = {
    id?: boolean
    comment?: boolean | YTCommentArgs
    commentId?: boolean
    subCommentDetail?: boolean
    subCommentFromUser?: boolean | YTUserArgs
    subCommentFromUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YTSubCommentInclude = {
    comment?: boolean | YTCommentArgs
    subCommentFromUser?: boolean | YTUserArgs
  }

  export type YTSubCommentGetPayload<S extends boolean | null | undefined | YTSubCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YTSubComment :
    S extends undefined ? never :
    S extends { include: any } & (YTSubCommentArgs | YTSubCommentFindManyArgs)
    ? YTSubComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comment' ? YTCommentGetPayload<S['include'][P]> :
        P extends 'subCommentFromUser' ? YTUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YTSubCommentArgs | YTSubCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comment' ? YTCommentGetPayload<S['select'][P]> :
        P extends 'subCommentFromUser' ? YTUserGetPayload<S['select'][P]> :  P extends keyof YTSubComment ? YTSubComment[P] : never
  } 
      : YTSubComment


  type YTSubCommentCountArgs = 
    Omit<YTSubCommentFindManyArgs, 'select' | 'include'> & {
      select?: YTSubCommentCountAggregateInputType | true
    }

  export interface YTSubCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YTSubComment that matches the filter.
     * @param {YTSubCommentFindUniqueArgs} args - Arguments to find a YTSubComment
     * @example
     * // Get one YTSubComment
     * const yTSubComment = await prisma.yTSubComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YTSubCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YTSubCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YTSubComment'> extends True ? Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>> : Prisma__YTSubCommentClient<YTSubCommentGetPayload<T> | null, null>

    /**
     * Find one YTSubComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YTSubCommentFindUniqueOrThrowArgs} args - Arguments to find a YTSubComment
     * @example
     * // Get one YTSubComment
     * const yTSubComment = await prisma.yTSubComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YTSubCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YTSubCommentFindUniqueOrThrowArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Find the first YTSubComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentFindFirstArgs} args - Arguments to find a YTSubComment
     * @example
     * // Get one YTSubComment
     * const yTSubComment = await prisma.yTSubComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YTSubCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YTSubCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YTSubComment'> extends True ? Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>> : Prisma__YTSubCommentClient<YTSubCommentGetPayload<T> | null, null>

    /**
     * Find the first YTSubComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentFindFirstOrThrowArgs} args - Arguments to find a YTSubComment
     * @example
     * // Get one YTSubComment
     * const yTSubComment = await prisma.yTSubComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YTSubCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YTSubCommentFindFirstOrThrowArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Find zero or more YTSubComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YTSubComments
     * const yTSubComments = await prisma.yTSubComment.findMany()
     * 
     * // Get first 10 YTSubComments
     * const yTSubComments = await prisma.yTSubComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yTSubCommentWithIdOnly = await prisma.yTSubComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YTSubCommentFindManyArgs>(
      args?: SelectSubset<T, YTSubCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<YTSubCommentGetPayload<T>>>

    /**
     * Create a YTSubComment.
     * @param {YTSubCommentCreateArgs} args - Arguments to create a YTSubComment.
     * @example
     * // Create one YTSubComment
     * const YTSubComment = await prisma.yTSubComment.create({
     *   data: {
     *     // ... data to create a YTSubComment
     *   }
     * })
     * 
    **/
    create<T extends YTSubCommentCreateArgs>(
      args: SelectSubset<T, YTSubCommentCreateArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Create many YTSubComments.
     *     @param {YTSubCommentCreateManyArgs} args - Arguments to create many YTSubComments.
     *     @example
     *     // Create many YTSubComments
     *     const yTSubComment = await prisma.yTSubComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YTSubCommentCreateManyArgs>(
      args?: SelectSubset<T, YTSubCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YTSubComment.
     * @param {YTSubCommentDeleteArgs} args - Arguments to delete one YTSubComment.
     * @example
     * // Delete one YTSubComment
     * const YTSubComment = await prisma.yTSubComment.delete({
     *   where: {
     *     // ... filter to delete one YTSubComment
     *   }
     * })
     * 
    **/
    delete<T extends YTSubCommentDeleteArgs>(
      args: SelectSubset<T, YTSubCommentDeleteArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Update one YTSubComment.
     * @param {YTSubCommentUpdateArgs} args - Arguments to update one YTSubComment.
     * @example
     * // Update one YTSubComment
     * const yTSubComment = await prisma.yTSubComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YTSubCommentUpdateArgs>(
      args: SelectSubset<T, YTSubCommentUpdateArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Delete zero or more YTSubComments.
     * @param {YTSubCommentDeleteManyArgs} args - Arguments to filter YTSubComments to delete.
     * @example
     * // Delete a few YTSubComments
     * const { count } = await prisma.yTSubComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YTSubCommentDeleteManyArgs>(
      args?: SelectSubset<T, YTSubCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YTSubComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YTSubComments
     * const yTSubComment = await prisma.yTSubComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YTSubCommentUpdateManyArgs>(
      args: SelectSubset<T, YTSubCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YTSubComment.
     * @param {YTSubCommentUpsertArgs} args - Arguments to update or create a YTSubComment.
     * @example
     * // Update or create a YTSubComment
     * const yTSubComment = await prisma.yTSubComment.upsert({
     *   create: {
     *     // ... data to create a YTSubComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YTSubComment we want to update
     *   }
     * })
    **/
    upsert<T extends YTSubCommentUpsertArgs>(
      args: SelectSubset<T, YTSubCommentUpsertArgs>
    ): Prisma__YTSubCommentClient<YTSubCommentGetPayload<T>>

    /**
     * Count the number of YTSubComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentCountArgs} args - Arguments to filter YTSubComments to count.
     * @example
     * // Count the number of YTSubComments
     * const count = await prisma.yTSubComment.count({
     *   where: {
     *     // ... the filter for the YTSubComments we want to count
     *   }
     * })
    **/
    count<T extends YTSubCommentCountArgs>(
      args?: Subset<T, YTSubCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YTSubCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YTSubComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YTSubCommentAggregateArgs>(args: Subset<T, YTSubCommentAggregateArgs>): Prisma.PrismaPromise<GetYTSubCommentAggregateType<T>>

    /**
     * Group by YTSubComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YTSubCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YTSubCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YTSubCommentGroupByArgs['orderBy'] }
        : { orderBy?: YTSubCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YTSubCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYTSubCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YTSubComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YTSubCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comment<T extends YTCommentArgs= {}>(args?: Subset<T, YTCommentArgs>): Prisma__YTCommentClient<YTCommentGetPayload<T> | Null>;

    subCommentFromUser<T extends YTUserArgs= {}>(args?: Subset<T, YTUserArgs>): Prisma__YTUserClient<YTUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YTSubComment base type for findUnique actions
   */
  export type YTSubCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter, which YTSubComment to fetch.
     */
    where: YTSubCommentWhereUniqueInput
  }

  /**
   * YTSubComment findUnique
   */
  export interface YTSubCommentFindUniqueArgs extends YTSubCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTSubComment findUniqueOrThrow
   */
  export type YTSubCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter, which YTSubComment to fetch.
     */
    where: YTSubCommentWhereUniqueInput
  }


  /**
   * YTSubComment base type for findFirst actions
   */
  export type YTSubCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter, which YTSubComment to fetch.
     */
    where?: YTSubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubComments to fetch.
     */
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTSubComments.
     */
    cursor?: YTSubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTSubComments.
     */
    distinct?: Enumerable<YTSubCommentScalarFieldEnum>
  }

  /**
   * YTSubComment findFirst
   */
  export interface YTSubCommentFindFirstArgs extends YTSubCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YTSubComment findFirstOrThrow
   */
  export type YTSubCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter, which YTSubComment to fetch.
     */
    where?: YTSubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubComments to fetch.
     */
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YTSubComments.
     */
    cursor?: YTSubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YTSubComments.
     */
    distinct?: Enumerable<YTSubCommentScalarFieldEnum>
  }


  /**
   * YTSubComment findMany
   */
  export type YTSubCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter, which YTSubComments to fetch.
     */
    where?: YTSubCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YTSubComments to fetch.
     */
    orderBy?: Enumerable<YTSubCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YTSubComments.
     */
    cursor?: YTSubCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YTSubComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YTSubComments.
     */
    skip?: number
    distinct?: Enumerable<YTSubCommentScalarFieldEnum>
  }


  /**
   * YTSubComment create
   */
  export type YTSubCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * The data needed to create a YTSubComment.
     */
    data: XOR<YTSubCommentCreateInput, YTSubCommentUncheckedCreateInput>
  }


  /**
   * YTSubComment createMany
   */
  export type YTSubCommentCreateManyArgs = {
    /**
     * The data used to create many YTSubComments.
     */
    data: Enumerable<YTSubCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YTSubComment update
   */
  export type YTSubCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * The data needed to update a YTSubComment.
     */
    data: XOR<YTSubCommentUpdateInput, YTSubCommentUncheckedUpdateInput>
    /**
     * Choose, which YTSubComment to update.
     */
    where: YTSubCommentWhereUniqueInput
  }


  /**
   * YTSubComment updateMany
   */
  export type YTSubCommentUpdateManyArgs = {
    /**
     * The data used to update YTSubComments.
     */
    data: XOR<YTSubCommentUpdateManyMutationInput, YTSubCommentUncheckedUpdateManyInput>
    /**
     * Filter which YTSubComments to update
     */
    where?: YTSubCommentWhereInput
  }


  /**
   * YTSubComment upsert
   */
  export type YTSubCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * The filter to search for the YTSubComment to update in case it exists.
     */
    where: YTSubCommentWhereUniqueInput
    /**
     * In case the YTSubComment found by the `where` argument doesn't exist, create a new YTSubComment with this data.
     */
    create: XOR<YTSubCommentCreateInput, YTSubCommentUncheckedCreateInput>
    /**
     * In case the YTSubComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YTSubCommentUpdateInput, YTSubCommentUncheckedUpdateInput>
  }


  /**
   * YTSubComment delete
   */
  export type YTSubCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
    /**
     * Filter which YTSubComment to delete.
     */
    where: YTSubCommentWhereUniqueInput
  }


  /**
   * YTSubComment deleteMany
   */
  export type YTSubCommentDeleteManyArgs = {
    /**
     * Filter which YTSubComments to delete
     */
    where?: YTSubCommentWhereInput
  }


  /**
   * YTSubComment without action
   */
  export type YTSubCommentArgs = {
    /**
     * Select specific fields to fetch from the YTSubComment
     */
    select?: YTSubCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YTSubCommentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BinKitchenCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenCategoryScalarFieldEnum = (typeof BinKitchenCategoryScalarFieldEnum)[keyof typeof BinKitchenCategoryScalarFieldEnum]


  export const BinKitchenMenuScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    price: 'price',
    categoryName: 'categoryName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenMenuScalarFieldEnum = (typeof BinKitchenMenuScalarFieldEnum)[keyof typeof BinKitchenMenuScalarFieldEnum]


  export const BinKitchenOrderItemScalarFieldEnum: {
    id: 'id',
    menuId: 'menuId',
    orderId: 'orderId',
    quantity: 'quantity',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenOrderItemScalarFieldEnum = (typeof BinKitchenOrderItemScalarFieldEnum)[keyof typeof BinKitchenOrderItemScalarFieldEnum]


  export const BinKitchenOrderScalarFieldEnum: {
    id: 'id',
    status: 'status',
    tableId: 'tableId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenOrderScalarFieldEnum = (typeof BinKitchenOrderScalarFieldEnum)[keyof typeof BinKitchenOrderScalarFieldEnum]


  export const BookOnAuthorScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    authorId: 'authorId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookOnAuthorScalarFieldEnum = (typeof BookOnAuthorScalarFieldEnum)[keyof typeof BookOnAuthorScalarFieldEnum]


  export const BookOnCategoryScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BookOnCategoryScalarFieldEnum = (typeof BookOnCategoryScalarFieldEnum)[keyof typeof BookOnCategoryScalarFieldEnum]


  export const ChanelOnUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    chanelId: 'chanelId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ChanelOnUserScalarFieldEnum = (typeof ChanelOnUserScalarFieldEnum)[keyof typeof ChanelOnUserScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    commentDetail: 'commentDetail',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const DirectMsgScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    msgDetail: 'msgDetail',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DirectMsgScalarFieldEnum = (typeof DirectMsgScalarFieldEnum)[keyof typeof DirectMsgScalarFieldEnum]


  export const FBDirectMsgScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    msgDetail: 'msgDetail',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FBDirectMsgScalarFieldEnum = (typeof FBDirectMsgScalarFieldEnum)[keyof typeof FBDirectMsgScalarFieldEnum]


  export const FBHashtagScalarFieldEnum: {
    id: 'id',
    hashtag: 'hashtag',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FBHashtagScalarFieldEnum = (typeof FBHashtagScalarFieldEnum)[keyof typeof FBHashtagScalarFieldEnum]


  export const FBPostOnHashtagScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    hashtagId: 'hashtagId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FBPostOnHashtagScalarFieldEnum = (typeof FBPostOnHashtagScalarFieldEnum)[keyof typeof FBPostOnHashtagScalarFieldEnum]


  export const FBPostScalarFieldEnum: {
    id: 'id',
    postByUserId: 'postByUserId',
    postInUserId: 'postInUserId',
    postDetail: 'postDetail',
    image: 'image',
    groupId: 'groupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FBPostScalarFieldEnum = (typeof FBPostScalarFieldEnum)[keyof typeof FBPostScalarFieldEnum]


  export const FBUserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    profileImage: 'profileImage',
    coverImage: 'coverImage',
    bio: 'bio',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FBUserScalarFieldEnum = (typeof FBUserScalarFieldEnum)[keyof typeof FBUserScalarFieldEnum]


  export const FollowingScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FollowingScalarFieldEnum = (typeof FollowingScalarFieldEnum)[keyof typeof FollowingScalarFieldEnum]


  export const FriendsScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toUserId: 'toUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FriendsScalarFieldEnum = (typeof FriendsScalarFieldEnum)[keyof typeof FriendsScalarFieldEnum]


  export const GroupOnUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    groupId: 'groupId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupOnUserScalarFieldEnum = (typeof GroupOnUserScalarFieldEnum)[keyof typeof GroupOnUserScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    groupImage: 'groupImage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const HashtagScalarFieldEnum: {
    id: 'id',
    hashtag: 'hashtag',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HashtagScalarFieldEnum = (typeof HashtagScalarFieldEnum)[keyof typeof HashtagScalarFieldEnum]


  export const LibraryAuthorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryAuthorScalarFieldEnum = (typeof LibraryAuthorScalarFieldEnum)[keyof typeof LibraryAuthorScalarFieldEnum]


  export const LibraryBookCopyScalarFieldEnum: {
    id: 'id',
    bookId: 'bookId',
    atUniversityId: 'atUniversityId',
    currentBorrowBytudentId: 'currentBorrowBytudentId',
    status: 'status',
    isbn: 'isbn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryBookCopyScalarFieldEnum = (typeof LibraryBookCopyScalarFieldEnum)[keyof typeof LibraryBookCopyScalarFieldEnum]


  export const LibraryBookScalarFieldEnum: {
    id: 'id',
    universityId: 'universityId',
    name: 'name',
    isbn: 'isbn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryBookScalarFieldEnum = (typeof LibraryBookScalarFieldEnum)[keyof typeof LibraryBookScalarFieldEnum]


  export const LibraryCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryCategoryScalarFieldEnum = (typeof LibraryCategoryScalarFieldEnum)[keyof typeof LibraryCategoryScalarFieldEnum]


  export const LibraryHistoryOfBookCopyScalarFieldEnum: {
    id: 'id',
    copyId: 'copyId',
    oncetBorrowBytudentId: 'oncetBorrowBytudentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryHistoryOfBookCopyScalarFieldEnum = (typeof LibraryHistoryOfBookCopyScalarFieldEnum)[keyof typeof LibraryHistoryOfBookCopyScalarFieldEnum]


  export const LibraryStudentBorrowingScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    bookCopyId: 'bookCopyId',
    borrowingDate: 'borrowingDate',
    targetReturnDate: 'targetReturnDate',
    actualReturnDate: 'actualReturnDate',
    borrowFromUniversityId: 'borrowFromUniversityId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryStudentBorrowingScalarFieldEnum = (typeof LibraryStudentBorrowingScalarFieldEnum)[keyof typeof LibraryStudentBorrowingScalarFieldEnum]


  export const LibraryStudentRequestScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    bookCopyId: 'bookCopyId',
    fromUniversityId: 'fromUniversityId',
    toUniversityId: 'toUniversityId',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryStudentRequestScalarFieldEnum = (typeof LibraryStudentRequestScalarFieldEnum)[keyof typeof LibraryStudentRequestScalarFieldEnum]


  export const LibraryStudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryStudentScalarFieldEnum = (typeof LibraryStudentScalarFieldEnum)[keyof typeof LibraryStudentScalarFieldEnum]


  export const LibraryUniversityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LibraryUniversityScalarFieldEnum = (typeof LibraryUniversityScalarFieldEnum)[keyof typeof LibraryUniversityScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    likeTypeId: 'likeTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const LikeTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LikeTypeScalarFieldEnum = (typeof LikeTypeScalarFieldEnum)[keyof typeof LikeTypeScalarFieldEnum]


  export const MeetingMembersScalarFieldEnum: {
    id: 'id',
    bookedId: 'bookedId',
    name: 'name',
    email: 'email',
    tel: 'tel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingMembersScalarFieldEnum = (typeof MeetingMembersScalarFieldEnum)[keyof typeof MeetingMembersScalarFieldEnum]


  export const MeetingRoomBookedScalarFieldEnum: {
    id: 'id',
    meetingRoomId: 'meetingRoomId',
    userId: 'userId',
    bookingStart: 'bookingStart',
    bookingEnd: 'bookingEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingRoomBookedScalarFieldEnum = (typeof MeetingRoomBookedScalarFieldEnum)[keyof typeof MeetingRoomBookedScalarFieldEnum]


  export const MeetingRoomScalarFieldEnum: {
    id: 'id',
    name: 'name',
    floor: 'floor',
    building: 'building',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingRoomScalarFieldEnum = (typeof MeetingRoomScalarFieldEnum)[keyof typeof MeetingRoomScalarFieldEnum]


  export const MeetingUserAvailableScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    availableStart: 'availableStart',
    availableEnd: 'availableEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingUserAvailableScalarFieldEnum = (typeof MeetingUserAvailableScalarFieldEnum)[keyof typeof MeetingUserAvailableScalarFieldEnum]


  export const MeetingUserBookedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    meetingRoomId: 'meetingRoomId',
    meetingDetail: 'meetingDetail',
    bookingStart: 'bookingStart',
    bookingEnd: 'bookingEnd',
    nameOfBooker: 'nameOfBooker',
    tel: 'tel',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingUserBookedScalarFieldEnum = (typeof MeetingUserBookedScalarFieldEnum)[keyof typeof MeetingUserBookedScalarFieldEnum]


  export const MeetingUserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    profileImage: 'profileImage',
    postion: 'postion',
    bio: 'bio',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetingUserScalarFieldEnum = (typeof MeetingUserScalarFieldEnum)[keyof typeof MeetingUserScalarFieldEnum]


  export const PostOnHashtagScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    hashtagId: 'hashtagId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostOnHashtagScalarFieldEnum = (typeof PostOnHashtagScalarFieldEnum)[keyof typeof PostOnHashtagScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    postDetail: 'postDetail',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReplyScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    reply: 'reply',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ReplyScalarFieldEnum = (typeof ReplyScalarFieldEnum)[keyof typeof ReplyScalarFieldEnum]


  export const ShareScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    userId: 'userId',
    shareStatusId: 'shareStatusId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


  export const ShareStatusScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShareStatusScalarFieldEnum = (typeof ShareStatusScalarFieldEnum)[keyof typeof ShareStatusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SubCommentScalarFieldEnum: {
    id: 'id',
    commentId: 'commentId',
    subCommentDetail: 'subCommentDetail',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubCommentScalarFieldEnum = (typeof SubCommentScalarFieldEnum)[keyof typeof SubCommentScalarFieldEnum]


  export const TodoListScalarFieldEnum: {
    id: 'id',
    task: 'task',
    status: 'status',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TodoListScalarFieldEnum = (typeof TodoListScalarFieldEnum)[keyof typeof TodoListScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TriviaCategoryScalarFieldEnum: {
    id: 'id',
    categoryName: 'categoryName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaCategoryScalarFieldEnum = (typeof TriviaCategoryScalarFieldEnum)[keyof typeof TriviaCategoryScalarFieldEnum]


  export const TriviaChoiceScalarFieldEnum: {
    id: 'id',
    choiceName: 'choiceName',
    quizId: 'quizId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaChoiceScalarFieldEnum = (typeof TriviaChoiceScalarFieldEnum)[keyof typeof TriviaChoiceScalarFieldEnum]


  export const TriviaQuizScalarFieldEnum: {
    id: 'id',
    quizName: 'quizName',
    categoryId: 'categoryId',
    triviaAnswerChoiceId: 'triviaAnswerChoiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaQuizScalarFieldEnum = (typeof TriviaQuizScalarFieldEnum)[keyof typeof TriviaQuizScalarFieldEnum]


  export const TriviaRoundQuizChoiceScalarFieldEnum: {
    id: 'id',
    roundQuizId: 'roundQuizId',
    quizChoiceId: 'quizChoiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaRoundQuizChoiceScalarFieldEnum = (typeof TriviaRoundQuizChoiceScalarFieldEnum)[keyof typeof TriviaRoundQuizChoiceScalarFieldEnum]


  export const TriviaRoundQuizScalarFieldEnum: {
    id: 'id',
    roundId: 'roundId',
    quizId: 'quizId',
    playerChooseChoice: 'playerChooseChoice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaRoundQuizScalarFieldEnum = (typeof TriviaRoundQuizScalarFieldEnum)[keyof typeof TriviaRoundQuizScalarFieldEnum]


  export const TriviaRoundScalarFieldEnum: {
    id: 'id',
    name: 'name',
    score: 'score',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaRoundScalarFieldEnum = (typeof TriviaRoundScalarFieldEnum)[keyof typeof TriviaRoundScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    profileImage: 'profileImage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WashingBranchScalarFieldEnum: {
    id: 'id',
    branchName: 'branchName',
    address: 'address',
    tel: 'tel',
    area: 'area',
    ownerName: 'ownerName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingBranchScalarFieldEnum = (typeof WashingBranchScalarFieldEnum)[keyof typeof WashingBranchScalarFieldEnum]


  export const WashingMachineMaintenanceScalarFieldEnum: {
    id: 'id',
    machineId: 'machineId',
    symptom: 'symptom',
    failureLevel: 'failureLevel',
    mechanicName: 'mechanicName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingMachineMaintenanceScalarFieldEnum = (typeof WashingMachineMaintenanceScalarFieldEnum)[keyof typeof WashingMachineMaintenanceScalarFieldEnum]


  export const WashingMachineOnProgramScalarFieldEnum: {
    id: 'id',
    machineId: 'machineId',
    programId: 'programId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingMachineOnProgramScalarFieldEnum = (typeof WashingMachineOnProgramScalarFieldEnum)[keyof typeof WashingMachineOnProgramScalarFieldEnum]


  export const WashingMachineProgramScalarFieldEnum: {
    id: 'id',
    programName: 'programName',
    price: 'price',
    time: 'time',
    maxWeight: 'maxWeight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingMachineProgramScalarFieldEnum = (typeof WashingMachineProgramScalarFieldEnum)[keyof typeof WashingMachineProgramScalarFieldEnum]


  export const WashingMachineScalarFieldEnum: {
    id: 'id',
    branchId: 'branchId',
    brand: 'brand',
    weight: 'weight',
    type: 'type',
    productionYear: 'productionYear',
    warrantyEnd: 'warrantyEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingMachineScalarFieldEnum = (typeof WashingMachineScalarFieldEnum)[keyof typeof WashingMachineScalarFieldEnum]


  export const WashingTopUpScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    topUpAmount: 'topUpAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingTopUpScalarFieldEnum = (typeof WashingTopUpScalarFieldEnum)[keyof typeof WashingTopUpScalarFieldEnum]


  export const WashingUseHistoryScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    branchId: 'branchId',
    machineId: 'machineId',
    programId: 'programId',
    price: 'price',
    startTime: 'startTime',
    endTime: 'endTime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingUseHistoryScalarFieldEnum = (typeof WashingUseHistoryScalarFieldEnum)[keyof typeof WashingUseHistoryScalarFieldEnum]


  export const WashingUserScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    tel: 'tel',
    remainCoupon: 'remainCoupon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WashingUserScalarFieldEnum = (typeof WashingUserScalarFieldEnum)[keyof typeof WashingUserScalarFieldEnum]


  export const YTAdminScalarFieldEnum: {
    id: 'id',
    chanelId: 'chanelId',
    adminUserId: 'adminUserId',
    roleId: 'roleId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTAdminScalarFieldEnum = (typeof YTAdminScalarFieldEnum)[keyof typeof YTAdminScalarFieldEnum]


  export const YTChanelScalarFieldEnum: {
    id: 'id',
    chaneName: 'chaneName',
    image: 'image',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTChanelScalarFieldEnum = (typeof YTChanelScalarFieldEnum)[keyof typeof YTChanelScalarFieldEnum]


  export const YTCommentScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    commentDetail: 'commentDetail',
    commentFromUserId: 'commentFromUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTCommentScalarFieldEnum = (typeof YTCommentScalarFieldEnum)[keyof typeof YTCommentScalarFieldEnum]


  export const YTRolePermissionScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    permissionName: 'permissionName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTRolePermissionScalarFieldEnum = (typeof YTRolePermissionScalarFieldEnum)[keyof typeof YTRolePermissionScalarFieldEnum]


  export const YTRoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTRoleScalarFieldEnum = (typeof YTRoleScalarFieldEnum)[keyof typeof YTRoleScalarFieldEnum]


  export const YTSubCommentScalarFieldEnum: {
    id: 'id',
    commentId: 'commentId',
    subCommentDetail: 'subCommentDetail',
    subCommentFromUserId: 'subCommentFromUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTSubCommentScalarFieldEnum = (typeof YTSubCommentScalarFieldEnum)[keyof typeof YTSubCommentScalarFieldEnum]


  export const YTSubscribeScalarFieldEnum: {
    id: 'id',
    chanelId: 'chanelId',
    subscribeUserId: 'subscribeUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTSubscribeScalarFieldEnum = (typeof YTSubscribeScalarFieldEnum)[keyof typeof YTSubscribeScalarFieldEnum]


  export const YTUserScalarFieldEnum: {
    id: 'id',
    userName: 'userName',
    profileImage: 'profileImage',
    email: 'email',
    bio: 'bio',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTUserScalarFieldEnum = (typeof YTUserScalarFieldEnum)[keyof typeof YTUserScalarFieldEnum]


  export const YTVideoScalarFieldEnum: {
    id: 'id',
    chanelId: 'chanelId',
    videoLink: 'videoLink',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YTVideoScalarFieldEnum = (typeof YTVideoScalarFieldEnum)[keyof typeof YTVideoScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type BinKitchenCategoryWhereInput = {
    AND?: Enumerable<BinKitchenCategoryWhereInput>
    OR?: Enumerable<BinKitchenCategoryWhereInput>
    NOT?: Enumerable<BinKitchenCategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    BinKitchenMenu?: BinKitchenMenuListRelationFilter
  }

  export type BinKitchenCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    BinKitchenMenu?: BinKitchenMenuOrderByRelationAggregateInput
  }

  export type BinKitchenCategoryWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type BinKitchenCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenCategoryCountOrderByAggregateInput
    _avg?: BinKitchenCategoryAvgOrderByAggregateInput
    _max?: BinKitchenCategoryMaxOrderByAggregateInput
    _min?: BinKitchenCategoryMinOrderByAggregateInput
    _sum?: BinKitchenCategorySumOrderByAggregateInput
  }

  export type BinKitchenCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenMenuWhereInput = {
    AND?: Enumerable<BinKitchenMenuWhereInput>
    OR?: Enumerable<BinKitchenMenuWhereInput>
    NOT?: Enumerable<BinKitchenMenuWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    category?: XOR<BinKitchenCategoryRelationFilter, BinKitchenCategoryWhereInput> | null
    categoryName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemListRelationFilter
  }

  export type BinKitchenMenuOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    category?: BinKitchenCategoryOrderByWithRelationInput
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    BinKitchenOrderItem?: BinKitchenOrderItemOrderByRelationAggregateInput
  }

  export type BinKitchenMenuWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenMenuOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenMenuCountOrderByAggregateInput
    _avg?: BinKitchenMenuAvgOrderByAggregateInput
    _max?: BinKitchenMenuMaxOrderByAggregateInput
    _min?: BinKitchenMenuMinOrderByAggregateInput
    _sum?: BinKitchenMenuSumOrderByAggregateInput
  }

  export type BinKitchenMenuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    categoryName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenOrderWhereInput = {
    AND?: Enumerable<BinKitchenOrderWhereInput>
    OR?: Enumerable<BinKitchenOrderWhereInput>
    NOT?: Enumerable<BinKitchenOrderWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    tableId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemListRelationFilter
  }

  export type BinKitchenOrderOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    BinKitchenOrderItem?: BinKitchenOrderItemOrderByRelationAggregateInput
  }

  export type BinKitchenOrderWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenOrderOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenOrderCountOrderByAggregateInput
    _avg?: BinKitchenOrderAvgOrderByAggregateInput
    _max?: BinKitchenOrderMaxOrderByAggregateInput
    _min?: BinKitchenOrderMinOrderByAggregateInput
    _sum?: BinKitchenOrderSumOrderByAggregateInput
  }

  export type BinKitchenOrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    tableId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenOrderItemWhereInput = {
    AND?: Enumerable<BinKitchenOrderItemWhereInput>
    OR?: Enumerable<BinKitchenOrderItemWhereInput>
    NOT?: Enumerable<BinKitchenOrderItemWhereInput>
    id?: IntFilter | number
    menu?: XOR<BinKitchenMenuRelationFilter, BinKitchenMenuWhereInput>
    menuId?: IntFilter | number
    order?: XOR<BinKitchenOrderRelationFilter, BinKitchenOrderWhereInput> | null
    orderId?: IntNullableFilter | number | null
    quantity?: IntFilter | number
    totalPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    menu?: BinKitchenMenuOrderByWithRelationInput
    menuId?: SortOrder
    order?: BinKitchenOrderOrderByWithRelationInput
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenOrderItemCountOrderByAggregateInput
    _avg?: BinKitchenOrderItemAvgOrderByAggregateInput
    _max?: BinKitchenOrderItemMaxOrderByAggregateInput
    _min?: BinKitchenOrderItemMinOrderByAggregateInput
    _sum?: BinKitchenOrderItemSumOrderByAggregateInput
  }

  export type BinKitchenOrderItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    menuId?: IntWithAggregatesFilter | number
    orderId?: IntNullableWithAggregatesFilter | number | null
    quantity?: IntWithAggregatesFilter | number
    totalPrice?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FBUserWhereInput = {
    AND?: Enumerable<FBUserWhereInput>
    OR?: Enumerable<FBUserWhereInput>
    NOT?: Enumerable<FBUserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    profileImage?: StringFilter | string
    coverImage?: StringFilter | string
    bio?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    fromFriends?: FriendsListRelationFilter
    toFriends?: FriendsListRelationFilter
    Comment?: CommentListRelationFilter
    SubComment?: SubCommentListRelationFilter
    GroupOnUser?: GroupOnUserListRelationFilter
    Like?: LikeListRelationFilter
    Share?: ShareListRelationFilter
    fromDirectMsg?: FBDirectMsgListRelationFilter
    toDirectMsg?: FBDirectMsgListRelationFilter
    postByUser?: FBPostListRelationFilter
    postInUser?: FBPostListRelationFilter
  }

  export type FBUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromFriends?: FriendsOrderByRelationAggregateInput
    toFriends?: FriendsOrderByRelationAggregateInput
    Comment?: CommentOrderByRelationAggregateInput
    SubComment?: SubCommentOrderByRelationAggregateInput
    GroupOnUser?: GroupOnUserOrderByRelationAggregateInput
    Like?: LikeOrderByRelationAggregateInput
    Share?: ShareOrderByRelationAggregateInput
    fromDirectMsg?: FBDirectMsgOrderByRelationAggregateInput
    toDirectMsg?: FBDirectMsgOrderByRelationAggregateInput
    postByUser?: FBPostOrderByRelationAggregateInput
    postInUser?: FBPostOrderByRelationAggregateInput
  }

  export type FBUserWhereUniqueInput = {
    id?: number
  }

  export type FBUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FBUserCountOrderByAggregateInput
    _avg?: FBUserAvgOrderByAggregateInput
    _max?: FBUserMaxOrderByAggregateInput
    _min?: FBUserMinOrderByAggregateInput
    _sum?: FBUserSumOrderByAggregateInput
  }

  export type FBUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FBUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<FBUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FBUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    profileImage?: StringWithAggregatesFilter | string
    coverImage?: StringWithAggregatesFilter | string
    bio?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FriendsWhereInput = {
    AND?: Enumerable<FriendsWhereInput>
    OR?: Enumerable<FriendsWhereInput>
    NOT?: Enumerable<FriendsWhereInput>
    id?: IntFilter | number
    from?: XOR<FBUserRelationFilter, FBUserWhereInput>
    fromUserId?: IntFilter | number
    to?: XOR<FBUserRelationFilter, FBUserWhereInput>
    toUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FriendsOrderByWithRelationInput = {
    id?: SortOrder
    from?: FBUserOrderByWithRelationInput
    fromUserId?: SortOrder
    to?: FBUserOrderByWithRelationInput
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendsWhereUniqueInput = {
    id?: number
    fromUserId_toUserId?: FriendsFromUserIdToUserIdCompoundUniqueInput
  }

  export type FriendsOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FriendsCountOrderByAggregateInput
    _avg?: FriendsAvgOrderByAggregateInput
    _max?: FriendsMaxOrderByAggregateInput
    _min?: FriendsMinOrderByAggregateInput
    _sum?: FriendsSumOrderByAggregateInput
  }

  export type FriendsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FriendsScalarWhereWithAggregatesInput>
    OR?: Enumerable<FriendsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FriendsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromUserId?: IntWithAggregatesFilter | number
    toUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FBPostWhereInput = {
    AND?: Enumerable<FBPostWhereInput>
    OR?: Enumerable<FBPostWhereInput>
    NOT?: Enumerable<FBPostWhereInput>
    id?: IntFilter | number
    postByUser?: XOR<FBUserRelationFilter, FBUserWhereInput> | null
    postByUserId?: IntNullableFilter | number | null
    postInUser?: XOR<FBUserRelationFilter, FBUserWhereInput> | null
    postInUserId?: IntNullableFilter | number | null
    postDetail?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    group?: XOR<GroupRelationFilter, GroupWhereInput> | null
    groupId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Comment?: CommentListRelationFilter
    Like?: LikeListRelationFilter
    Share?: ShareListRelationFilter
    PostOnHashtag?: FBPostOnHashtagListRelationFilter
  }

  export type FBPostOrderByWithRelationInput = {
    id?: SortOrder
    postByUser?: FBUserOrderByWithRelationInput
    postByUserId?: SortOrder
    postInUser?: FBUserOrderByWithRelationInput
    postInUserId?: SortOrder
    postDetail?: SortOrder
    image?: SortOrder
    group?: GroupOrderByWithRelationInput
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Comment?: CommentOrderByRelationAggregateInput
    Like?: LikeOrderByRelationAggregateInput
    Share?: ShareOrderByRelationAggregateInput
    PostOnHashtag?: FBPostOnHashtagOrderByRelationAggregateInput
  }

  export type FBPostWhereUniqueInput = {
    id?: number
  }

  export type FBPostOrderByWithAggregationInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    postDetail?: SortOrder
    image?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FBPostCountOrderByAggregateInput
    _avg?: FBPostAvgOrderByAggregateInput
    _max?: FBPostMaxOrderByAggregateInput
    _min?: FBPostMinOrderByAggregateInput
    _sum?: FBPostSumOrderByAggregateInput
  }

  export type FBPostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FBPostScalarWhereWithAggregatesInput>
    OR?: Enumerable<FBPostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FBPostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postByUserId?: IntNullableWithAggregatesFilter | number | null
    postInUserId?: IntNullableWithAggregatesFilter | number | null
    postDetail?: StringNullableWithAggregatesFilter | string | null
    image?: StringNullableWithAggregatesFilter | string | null
    groupId?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    post?: XOR<FBPostRelationFilter, FBPostWhereInput>
    postId?: IntFilter | number
    commentDetail?: StringFilter | string
    fromUserId?: XOR<FBUserRelationFilter, FBUserWhereInput>
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    SubComment?: SubCommentListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    post?: FBPostOrderByWithRelationInput
    postId?: SortOrder
    commentDetail?: SortOrder
    fromUserId?: FBUserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    SubComment?: SubCommentOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    commentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _avg?: CommentAvgOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
    _sum?: CommentSumOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    commentDetail?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SubCommentWhereInput = {
    AND?: Enumerable<SubCommentWhereInput>
    OR?: Enumerable<SubCommentWhereInput>
    NOT?: Enumerable<SubCommentWhereInput>
    id?: IntFilter | number
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
    commentId?: IntFilter | number
    subCommentDetail?: StringFilter | string
    fromUserId?: XOR<FBUserRelationFilter, FBUserWhereInput>
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SubCommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: CommentOrderByWithRelationInput
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    fromUserId?: FBUserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubCommentWhereUniqueInput = {
    id?: number
  }

  export type SubCommentOrderByWithAggregationInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubCommentCountOrderByAggregateInput
    _avg?: SubCommentAvgOrderByAggregateInput
    _max?: SubCommentMaxOrderByAggregateInput
    _min?: SubCommentMinOrderByAggregateInput
    _sum?: SubCommentSumOrderByAggregateInput
  }

  export type SubCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SubCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<SubCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SubCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentId?: IntWithAggregatesFilter | number
    subCommentDetail?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LikeWhereInput = {
    AND?: Enumerable<LikeWhereInput>
    OR?: Enumerable<LikeWhereInput>
    NOT?: Enumerable<LikeWhereInput>
    id?: IntFilter | number
    post?: XOR<FBPostRelationFilter, FBPostWhereInput>
    postId?: IntFilter | number
    fromUserId?: XOR<FBUserRelationFilter, FBUserWhereInput>
    userId?: IntFilter | number
    likeType?: XOR<LikeTypeRelationFilter, LikeTypeWhereInput>
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LikeOrderByWithRelationInput = {
    id?: SortOrder
    post?: FBPostOrderByWithRelationInput
    postId?: SortOrder
    fromUserId?: FBUserOrderByWithRelationInput
    userId?: SortOrder
    likeType?: LikeTypeOrderByWithRelationInput
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeWhereUniqueInput = {
    id?: number
  }

  export type LikeOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LikeCountOrderByAggregateInput
    _avg?: LikeAvgOrderByAggregateInput
    _max?: LikeMaxOrderByAggregateInput
    _min?: LikeMinOrderByAggregateInput
    _sum?: LikeSumOrderByAggregateInput
  }

  export type LikeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LikeScalarWhereWithAggregatesInput>
    OR?: Enumerable<LikeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LikeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    likeTypeId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShareWhereInput = {
    AND?: Enumerable<ShareWhereInput>
    OR?: Enumerable<ShareWhereInput>
    NOT?: Enumerable<ShareWhereInput>
    id?: IntFilter | number
    post?: XOR<FBPostRelationFilter, FBPostWhereInput>
    postId?: IntFilter | number
    fromUserId?: XOR<FBUserRelationFilter, FBUserWhereInput>
    userId?: IntFilter | number
    shareStatus?: XOR<ShareStatusRelationFilter, ShareStatusWhereInput>
    shareStatusId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShareOrderByWithRelationInput = {
    id?: SortOrder
    post?: FBPostOrderByWithRelationInput
    postId?: SortOrder
    fromUserId?: FBUserOrderByWithRelationInput
    userId?: SortOrder
    shareStatus?: ShareStatusOrderByWithRelationInput
    shareStatusId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareWhereUniqueInput = {
    id?: number
  }

  export type ShareOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShareCountOrderByAggregateInput
    _avg?: ShareAvgOrderByAggregateInput
    _max?: ShareMaxOrderByAggregateInput
    _min?: ShareMinOrderByAggregateInput
    _sum?: ShareSumOrderByAggregateInput
  }

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShareScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShareScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShareScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    shareStatusId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupWhereInput = {
    AND?: Enumerable<GroupWhereInput>
    OR?: Enumerable<GroupWhereInput>
    NOT?: Enumerable<GroupWhereInput>
    id?: IntFilter | number
    groupName?: StringFilter | string
    groupImage?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    GroupOnUser?: GroupOnUserListRelationFilter
    FBPost?: FBPostListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    GroupOnUser?: GroupOnUserOrderByRelationAggregateInput
    FBPost?: FBPostOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = {
    id?: number
  }

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    groupName?: StringWithAggregatesFilter | string
    groupImage?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type GroupOnUserWhereInput = {
    AND?: Enumerable<GroupOnUserWhereInput>
    OR?: Enumerable<GroupOnUserWhereInput>
    NOT?: Enumerable<GroupOnUserWhereInput>
    id?: IntFilter | number
    user?: XOR<FBUserRelationFilter, FBUserWhereInput>
    userId?: IntFilter | number
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    groupId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GroupOnUserOrderByWithRelationInput = {
    id?: SortOrder
    user?: FBUserOrderByWithRelationInput
    userId?: SortOrder
    group?: GroupOrderByWithRelationInput
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOnUserWhereUniqueInput = {
    id?: number
  }

  export type GroupOnUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupOnUserCountOrderByAggregateInput
    _avg?: GroupOnUserAvgOrderByAggregateInput
    _max?: GroupOnUserMaxOrderByAggregateInput
    _min?: GroupOnUserMinOrderByAggregateInput
    _sum?: GroupOnUserSumOrderByAggregateInput
  }

  export type GroupOnUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupOnUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupOnUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupOnUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    groupId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LikeTypeWhereInput = {
    AND?: Enumerable<LikeTypeWhereInput>
    OR?: Enumerable<LikeTypeWhereInput>
    NOT?: Enumerable<LikeTypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Like?: LikeListRelationFilter
  }

  export type LikeTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Like?: LikeOrderByRelationAggregateInput
  }

  export type LikeTypeWhereUniqueInput = {
    id?: number
  }

  export type LikeTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LikeTypeCountOrderByAggregateInput
    _avg?: LikeTypeAvgOrderByAggregateInput
    _max?: LikeTypeMaxOrderByAggregateInput
    _min?: LikeTypeMinOrderByAggregateInput
    _sum?: LikeTypeSumOrderByAggregateInput
  }

  export type LikeTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LikeTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<LikeTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LikeTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ShareStatusWhereInput = {
    AND?: Enumerable<ShareStatusWhereInput>
    OR?: Enumerable<ShareStatusWhereInput>
    NOT?: Enumerable<ShareStatusWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Share?: ShareListRelationFilter
  }

  export type ShareStatusOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Share?: ShareOrderByRelationAggregateInput
  }

  export type ShareStatusWhereUniqueInput = {
    id?: number
  }

  export type ShareStatusOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShareStatusCountOrderByAggregateInput
    _avg?: ShareStatusAvgOrderByAggregateInput
    _max?: ShareStatusMaxOrderByAggregateInput
    _min?: ShareStatusMinOrderByAggregateInput
    _sum?: ShareStatusSumOrderByAggregateInput
  }

  export type ShareStatusScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ShareStatusScalarWhereWithAggregatesInput>
    OR?: Enumerable<ShareStatusScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ShareStatusScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FBDirectMsgWhereInput = {
    AND?: Enumerable<FBDirectMsgWhereInput>
    OR?: Enumerable<FBDirectMsgWhereInput>
    NOT?: Enumerable<FBDirectMsgWhereInput>
    id?: IntFilter | number
    from?: XOR<FBUserRelationFilter, FBUserWhereInput>
    fromUserId?: IntFilter | number
    to?: XOR<FBUserRelationFilter, FBUserWhereInput>
    toUserId?: IntFilter | number
    msgDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBDirectMsgOrderByWithRelationInput = {
    id?: SortOrder
    from?: FBUserOrderByWithRelationInput
    fromUserId?: SortOrder
    to?: FBUserOrderByWithRelationInput
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBDirectMsgWhereUniqueInput = {
    id?: number
  }

  export type FBDirectMsgOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FBDirectMsgCountOrderByAggregateInput
    _avg?: FBDirectMsgAvgOrderByAggregateInput
    _max?: FBDirectMsgMaxOrderByAggregateInput
    _min?: FBDirectMsgMinOrderByAggregateInput
    _sum?: FBDirectMsgSumOrderByAggregateInput
  }

  export type FBDirectMsgScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FBDirectMsgScalarWhereWithAggregatesInput>
    OR?: Enumerable<FBDirectMsgScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FBDirectMsgScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromUserId?: IntWithAggregatesFilter | number
    toUserId?: IntWithAggregatesFilter | number
    msgDetail?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FBHashtagWhereInput = {
    AND?: Enumerable<FBHashtagWhereInput>
    OR?: Enumerable<FBHashtagWhereInput>
    NOT?: Enumerable<FBHashtagWhereInput>
    id?: IntFilter | number
    hashtag?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    PostOnHashtag?: FBPostOnHashtagListRelationFilter
  }

  export type FBHashtagOrderByWithRelationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    PostOnHashtag?: FBPostOnHashtagOrderByRelationAggregateInput
  }

  export type FBHashtagWhereUniqueInput = {
    id?: number
    hashtag?: string
  }

  export type FBHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FBHashtagCountOrderByAggregateInput
    _avg?: FBHashtagAvgOrderByAggregateInput
    _max?: FBHashtagMaxOrderByAggregateInput
    _min?: FBHashtagMinOrderByAggregateInput
    _sum?: FBHashtagSumOrderByAggregateInput
  }

  export type FBHashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FBHashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<FBHashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FBHashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    hashtag?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FBPostOnHashtagWhereInput = {
    AND?: Enumerable<FBPostOnHashtagWhereInput>
    OR?: Enumerable<FBPostOnHashtagWhereInput>
    NOT?: Enumerable<FBPostOnHashtagWhereInput>
    id?: IntFilter | number
    post?: XOR<FBPostRelationFilter, FBPostWhereInput>
    hashtag?: XOR<FBHashtagRelationFilter, FBHashtagWhereInput>
    postId?: IntFilter | number
    hashtagId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBPostOnHashtagOrderByWithRelationInput = {
    id?: SortOrder
    post?: FBPostOrderByWithRelationInput
    hashtag?: FBHashtagOrderByWithRelationInput
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostOnHashtagWhereUniqueInput = {
    id?: number
  }

  export type FBPostOnHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FBPostOnHashtagCountOrderByAggregateInput
    _avg?: FBPostOnHashtagAvgOrderByAggregateInput
    _max?: FBPostOnHashtagMaxOrderByAggregateInput
    _min?: FBPostOnHashtagMinOrderByAggregateInput
    _sum?: FBPostOnHashtagSumOrderByAggregateInput
  }

  export type FBPostOnHashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FBPostOnHashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<FBPostOnHashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FBPostOnHashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    hashtagId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryUniversityWhereInput = {
    AND?: Enumerable<LibraryUniversityWhereInput>
    OR?: Enumerable<LibraryUniversityWhereInput>
    NOT?: Enumerable<LibraryUniversityWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    libraryBook?: LibraryBookListRelationFilter
    libraryBookCopy?: LibraryBookCopyListRelationFilter
    fromUniversity?: LibraryStudentRequestListRelationFilter
    toUniversity?: LibraryStudentRequestListRelationFilter
    libraryStudentBorrowing?: LibraryStudentBorrowingListRelationFilter
  }

  export type LibraryUniversityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    libraryBook?: LibraryBookOrderByRelationAggregateInput
    libraryBookCopy?: LibraryBookCopyOrderByRelationAggregateInput
    fromUniversity?: LibraryStudentRequestOrderByRelationAggregateInput
    toUniversity?: LibraryStudentRequestOrderByRelationAggregateInput
    libraryStudentBorrowing?: LibraryStudentBorrowingOrderByRelationAggregateInput
  }

  export type LibraryUniversityWhereUniqueInput = {
    id?: number
  }

  export type LibraryUniversityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryUniversityCountOrderByAggregateInput
    _avg?: LibraryUniversityAvgOrderByAggregateInput
    _max?: LibraryUniversityMaxOrderByAggregateInput
    _min?: LibraryUniversityMinOrderByAggregateInput
    _sum?: LibraryUniversitySumOrderByAggregateInput
  }

  export type LibraryUniversityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryUniversityScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryUniversityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryUniversityScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryStudentWhereInput = {
    AND?: Enumerable<LibraryStudentWhereInput>
    OR?: Enumerable<LibraryStudentWhereInput>
    NOT?: Enumerable<LibraryStudentWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    libraryBookCopy?: LibraryBookCopyListRelationFilter
    historyOfBookCopy?: LibraryHistoryOfBookCopyListRelationFilter
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestListRelationFilter
    libraryStudentBorrowing?: LibraryStudentBorrowingListRelationFilter
  }

  export type LibraryStudentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    libraryBookCopy?: LibraryBookCopyOrderByRelationAggregateInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyOrderByRelationAggregateInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestOrderByRelationAggregateInput
    libraryStudentBorrowing?: LibraryStudentBorrowingOrderByRelationAggregateInput
  }

  export type LibraryStudentWhereUniqueInput = {
    id?: number
  }

  export type LibraryStudentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryStudentCountOrderByAggregateInput
    _avg?: LibraryStudentAvgOrderByAggregateInput
    _max?: LibraryStudentMaxOrderByAggregateInput
    _min?: LibraryStudentMinOrderByAggregateInput
    _sum?: LibraryStudentSumOrderByAggregateInput
  }

  export type LibraryStudentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryStudentScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryStudentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryStudentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryBookWhereInput = {
    AND?: Enumerable<LibraryBookWhereInput>
    OR?: Enumerable<LibraryBookWhereInput>
    NOT?: Enumerable<LibraryBookWhereInput>
    id?: IntFilter | number
    university?: XOR<LibraryUniversityRelationFilter, LibraryUniversityWhereInput>
    universityId?: IntFilter | number
    name?: StringFilter | string
    isbn?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    libraryBookCopy?: LibraryBookCopyListRelationFilter
    bookOnAuthor?: BookOnAuthorListRelationFilter
    bookOnCategory?: BookOnCategoryListRelationFilter
  }

  export type LibraryBookOrderByWithRelationInput = {
    id?: SortOrder
    university?: LibraryUniversityOrderByWithRelationInput
    universityId?: SortOrder
    name?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    libraryBookCopy?: LibraryBookCopyOrderByRelationAggregateInput
    bookOnAuthor?: BookOnAuthorOrderByRelationAggregateInput
    bookOnCategory?: BookOnCategoryOrderByRelationAggregateInput
  }

  export type LibraryBookWhereUniqueInput = {
    id?: number
  }

  export type LibraryBookOrderByWithAggregationInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryBookCountOrderByAggregateInput
    _avg?: LibraryBookAvgOrderByAggregateInput
    _max?: LibraryBookMaxOrderByAggregateInput
    _min?: LibraryBookMinOrderByAggregateInput
    _sum?: LibraryBookSumOrderByAggregateInput
  }

  export type LibraryBookScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryBookScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryBookScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryBookScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    universityId?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    isbn?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryBookCopyWhereInput = {
    AND?: Enumerable<LibraryBookCopyWhereInput>
    OR?: Enumerable<LibraryBookCopyWhereInput>
    NOT?: Enumerable<LibraryBookCopyWhereInput>
    id?: IntFilter | number
    book?: XOR<LibraryBookRelationFilter, LibraryBookWhereInput>
    bookId?: IntFilter | number
    atUniversity?: XOR<LibraryUniversityRelationFilter, LibraryUniversityWhereInput> | null
    atUniversityId?: IntNullableFilter | number | null
    currentBorrowByStudent?: XOR<LibraryStudentRelationFilter, LibraryStudentWhereInput> | null
    currentBorrowBytudentId?: IntNullableFilter | number | null
    status?: StringFilter | string
    isbn?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyListRelationFilter
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestListRelationFilter
    libraryStudentBorrowing?: LibraryStudentBorrowingListRelationFilter
  }

  export type LibraryBookCopyOrderByWithRelationInput = {
    id?: SortOrder
    book?: LibraryBookOrderByWithRelationInput
    bookId?: SortOrder
    atUniversity?: LibraryUniversityOrderByWithRelationInput
    atUniversityId?: SortOrder
    currentBorrowByStudent?: LibraryStudentOrderByWithRelationInput
    currentBorrowBytudentId?: SortOrder
    status?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    historyOfBookCopy?: LibraryHistoryOfBookCopyOrderByRelationAggregateInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestOrderByRelationAggregateInput
    libraryStudentBorrowing?: LibraryStudentBorrowingOrderByRelationAggregateInput
  }

  export type LibraryBookCopyWhereUniqueInput = {
    id?: number
  }

  export type LibraryBookCopyOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
    status?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryBookCopyCountOrderByAggregateInput
    _avg?: LibraryBookCopyAvgOrderByAggregateInput
    _max?: LibraryBookCopyMaxOrderByAggregateInput
    _min?: LibraryBookCopyMinOrderByAggregateInput
    _sum?: LibraryBookCopySumOrderByAggregateInput
  }

  export type LibraryBookCopyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryBookCopyScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryBookCopyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryBookCopyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    atUniversityId?: IntNullableWithAggregatesFilter | number | null
    currentBorrowBytudentId?: IntNullableWithAggregatesFilter | number | null
    status?: StringWithAggregatesFilter | string
    isbn?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryHistoryOfBookCopyWhereInput = {
    AND?: Enumerable<LibraryHistoryOfBookCopyWhereInput>
    OR?: Enumerable<LibraryHistoryOfBookCopyWhereInput>
    NOT?: Enumerable<LibraryHistoryOfBookCopyWhereInput>
    id?: IntFilter | number
    copy?: XOR<LibraryBookCopyRelationFilter, LibraryBookCopyWhereInput>
    copyId?: IntFilter | number
    onceBorrowByStudent?: XOR<LibraryStudentRelationFilter, LibraryStudentWhereInput> | null
    oncetBorrowBytudentId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryHistoryOfBookCopyOrderByWithRelationInput = {
    id?: SortOrder
    copy?: LibraryBookCopyOrderByWithRelationInput
    copyId?: SortOrder
    onceBorrowByStudent?: LibraryStudentOrderByWithRelationInput
    oncetBorrowBytudentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryHistoryOfBookCopyWhereUniqueInput = {
    id?: number
  }

  export type LibraryHistoryOfBookCopyOrderByWithAggregationInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryHistoryOfBookCopyCountOrderByAggregateInput
    _avg?: LibraryHistoryOfBookCopyAvgOrderByAggregateInput
    _max?: LibraryHistoryOfBookCopyMaxOrderByAggregateInput
    _min?: LibraryHistoryOfBookCopyMinOrderByAggregateInput
    _sum?: LibraryHistoryOfBookCopySumOrderByAggregateInput
  }

  export type LibraryHistoryOfBookCopyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryHistoryOfBookCopyScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryHistoryOfBookCopyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryHistoryOfBookCopyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    copyId?: IntWithAggregatesFilter | number
    oncetBorrowBytudentId?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryCategoryWhereInput = {
    AND?: Enumerable<LibraryCategoryWhereInput>
    OR?: Enumerable<LibraryCategoryWhereInput>
    NOT?: Enumerable<LibraryCategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    bookOnCategory?: BookOnCategoryListRelationFilter
  }

  export type LibraryCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookOnCategory?: BookOnCategoryOrderByRelationAggregateInput
  }

  export type LibraryCategoryWhereUniqueInput = {
    id?: number
  }

  export type LibraryCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryCategoryCountOrderByAggregateInput
    _avg?: LibraryCategoryAvgOrderByAggregateInput
    _max?: LibraryCategoryMaxOrderByAggregateInput
    _min?: LibraryCategoryMinOrderByAggregateInput
    _sum?: LibraryCategorySumOrderByAggregateInput
  }

  export type LibraryCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryAuthorWhereInput = {
    AND?: Enumerable<LibraryAuthorWhereInput>
    OR?: Enumerable<LibraryAuthorWhereInput>
    NOT?: Enumerable<LibraryAuthorWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    bookOnAuthor?: BookOnAuthorListRelationFilter
  }

  export type LibraryAuthorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bookOnAuthor?: BookOnAuthorOrderByRelationAggregateInput
  }

  export type LibraryAuthorWhereUniqueInput = {
    id?: number
  }

  export type LibraryAuthorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryAuthorCountOrderByAggregateInput
    _avg?: LibraryAuthorAvgOrderByAggregateInput
    _max?: LibraryAuthorMaxOrderByAggregateInput
    _min?: LibraryAuthorMinOrderByAggregateInput
    _sum?: LibraryAuthorSumOrderByAggregateInput
  }

  export type LibraryAuthorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryAuthorScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryAuthorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryAuthorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BookOnAuthorWhereInput = {
    AND?: Enumerable<BookOnAuthorWhereInput>
    OR?: Enumerable<BookOnAuthorWhereInput>
    NOT?: Enumerable<BookOnAuthorWhereInput>
    id?: IntFilter | number
    book?: XOR<LibraryBookRelationFilter, LibraryBookWhereInput>
    bookId?: IntFilter | number
    author?: XOR<LibraryAuthorRelationFilter, LibraryAuthorWhereInput>
    authorId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BookOnAuthorOrderByWithRelationInput = {
    id?: SortOrder
    book?: LibraryBookOrderByWithRelationInput
    bookId?: SortOrder
    author?: LibraryAuthorOrderByWithRelationInput
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnAuthorWhereUniqueInput = {
    id?: number
  }

  export type BookOnAuthorOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookOnAuthorCountOrderByAggregateInput
    _avg?: BookOnAuthorAvgOrderByAggregateInput
    _max?: BookOnAuthorMaxOrderByAggregateInput
    _min?: BookOnAuthorMinOrderByAggregateInput
    _sum?: BookOnAuthorSumOrderByAggregateInput
  }

  export type BookOnAuthorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookOnAuthorScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookOnAuthorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookOnAuthorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    authorId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BookOnCategoryWhereInput = {
    AND?: Enumerable<BookOnCategoryWhereInput>
    OR?: Enumerable<BookOnCategoryWhereInput>
    NOT?: Enumerable<BookOnCategoryWhereInput>
    id?: IntFilter | number
    book?: XOR<LibraryBookRelationFilter, LibraryBookWhereInput>
    bookId?: IntFilter | number
    category?: XOR<LibraryCategoryRelationFilter, LibraryCategoryWhereInput>
    categoryId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BookOnCategoryOrderByWithRelationInput = {
    id?: SortOrder
    book?: LibraryBookOrderByWithRelationInput
    bookId?: SortOrder
    category?: LibraryCategoryOrderByWithRelationInput
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnCategoryWhereUniqueInput = {
    id?: number
  }

  export type BookOnCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BookOnCategoryCountOrderByAggregateInput
    _avg?: BookOnCategoryAvgOrderByAggregateInput
    _max?: BookOnCategoryMaxOrderByAggregateInput
    _min?: BookOnCategoryMinOrderByAggregateInput
    _sum?: BookOnCategorySumOrderByAggregateInput
  }

  export type BookOnCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BookOnCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<BookOnCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BookOnCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookId?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryStudentRequestWhereInput = {
    AND?: Enumerable<LibraryStudentRequestWhereInput>
    OR?: Enumerable<LibraryStudentRequestWhereInput>
    NOT?: Enumerable<LibraryStudentRequestWhereInput>
    id?: IntFilter | number
    student?: XOR<LibraryStudentRelationFilter, LibraryStudentWhereInput>
    studentId?: IntFilter | number
    bookCopy?: XOR<LibraryBookCopyRelationFilter, LibraryBookCopyWhereInput>
    bookCopyId?: IntFilter | number
    fromUniversity?: XOR<LibraryUniversityRelationFilter, LibraryUniversityWhereInput>
    fromUniversityId?: IntFilter | number
    toUniversity?: XOR<LibraryUniversityRelationFilter, LibraryUniversityWhereInput>
    toUniversityId?: IntFilter | number
    status?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryStudentRequestOrderByWithRelationInput = {
    id?: SortOrder
    student?: LibraryStudentOrderByWithRelationInput
    studentId?: SortOrder
    bookCopy?: LibraryBookCopyOrderByWithRelationInput
    bookCopyId?: SortOrder
    fromUniversity?: LibraryUniversityOrderByWithRelationInput
    fromUniversityId?: SortOrder
    toUniversity?: LibraryUniversityOrderByWithRelationInput
    toUniversityId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentRequestWhereUniqueInput = {
    id?: number
  }

  export type LibraryStudentRequestOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryStudentRequestCountOrderByAggregateInput
    _avg?: LibraryStudentRequestAvgOrderByAggregateInput
    _max?: LibraryStudentRequestMaxOrderByAggregateInput
    _min?: LibraryStudentRequestMinOrderByAggregateInput
    _sum?: LibraryStudentRequestSumOrderByAggregateInput
  }

  export type LibraryStudentRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryStudentRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryStudentRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryStudentRequestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    studentId?: IntWithAggregatesFilter | number
    bookCopyId?: IntWithAggregatesFilter | number
    fromUniversityId?: IntWithAggregatesFilter | number
    toUniversityId?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type LibraryStudentBorrowingWhereInput = {
    AND?: Enumerable<LibraryStudentBorrowingWhereInput>
    OR?: Enumerable<LibraryStudentBorrowingWhereInput>
    NOT?: Enumerable<LibraryStudentBorrowingWhereInput>
    id?: IntFilter | number
    stident?: XOR<LibraryStudentRelationFilter, LibraryStudentWhereInput>
    studentId?: IntFilter | number
    bookCopy?: XOR<LibraryBookCopyRelationFilter, LibraryBookCopyWhereInput>
    bookCopyId?: IntFilter | number
    borrowingDate?: DateTimeFilter | Date | string
    targetReturnDate?: DateTimeFilter | Date | string
    actualReturnDate?: DateTimeNullableFilter | Date | string | null
    borrowFromUniversity?: XOR<LibraryUniversityRelationFilter, LibraryUniversityWhereInput>
    borrowFromUniversityId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryStudentBorrowingOrderByWithRelationInput = {
    id?: SortOrder
    stident?: LibraryStudentOrderByWithRelationInput
    studentId?: SortOrder
    bookCopy?: LibraryBookCopyOrderByWithRelationInput
    bookCopyId?: SortOrder
    borrowingDate?: SortOrder
    targetReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    borrowFromUniversity?: LibraryUniversityOrderByWithRelationInput
    borrowFromUniversityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentBorrowingWhereUniqueInput = {
    id?: number
  }

  export type LibraryStudentBorrowingOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowingDate?: SortOrder
    targetReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    borrowFromUniversityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LibraryStudentBorrowingCountOrderByAggregateInput
    _avg?: LibraryStudentBorrowingAvgOrderByAggregateInput
    _max?: LibraryStudentBorrowingMaxOrderByAggregateInput
    _min?: LibraryStudentBorrowingMinOrderByAggregateInput
    _sum?: LibraryStudentBorrowingSumOrderByAggregateInput
  }

  export type LibraryStudentBorrowingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LibraryStudentBorrowingScalarWhereWithAggregatesInput>
    OR?: Enumerable<LibraryStudentBorrowingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LibraryStudentBorrowingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    studentId?: IntWithAggregatesFilter | number
    bookCopyId?: IntWithAggregatesFilter | number
    borrowingDate?: DateTimeWithAggregatesFilter | Date | string
    targetReturnDate?: DateTimeWithAggregatesFilter | Date | string
    actualReturnDate?: DateTimeNullableWithAggregatesFilter | Date | string | null
    borrowFromUniversityId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingUserWhereInput = {
    AND?: Enumerable<MeetingUserWhereInput>
    OR?: Enumerable<MeetingUserWhereInput>
    NOT?: Enumerable<MeetingUserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    profileImage?: StringNullableFilter | string | null
    postion?: StringNullableFilter | string | null
    bio?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    MeetingUserBooked?: MeetingUserBookedListRelationFilter
    MeetingUserAvailable?: MeetingUserAvailableListRelationFilter
    MeetingRoomBooked?: MeetingRoomBookedListRelationFilter
  }

  export type MeetingUserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    postion?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    MeetingUserBooked?: MeetingUserBookedOrderByRelationAggregateInput
    MeetingUserAvailable?: MeetingUserAvailableOrderByRelationAggregateInput
    MeetingRoomBooked?: MeetingRoomBookedOrderByRelationAggregateInput
  }

  export type MeetingUserWhereUniqueInput = {
    id?: number
  }

  export type MeetingUserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    postion?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingUserCountOrderByAggregateInput
    _avg?: MeetingUserAvgOrderByAggregateInput
    _max?: MeetingUserMaxOrderByAggregateInput
    _min?: MeetingUserMinOrderByAggregateInput
    _sum?: MeetingUserSumOrderByAggregateInput
  }

  export type MeetingUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    profileImage?: StringNullableWithAggregatesFilter | string | null
    postion?: StringNullableWithAggregatesFilter | string | null
    bio?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingUserBookedWhereInput = {
    AND?: Enumerable<MeetingUserBookedWhereInput>
    OR?: Enumerable<MeetingUserBookedWhereInput>
    NOT?: Enumerable<MeetingUserBookedWhereInput>
    id?: IntFilter | number
    user?: XOR<MeetingUserRelationFilter, MeetingUserWhereInput>
    userId?: IntFilter | number
    meetingRoom?: XOR<MeetingRoomRelationFilter, MeetingRoomWhereInput>
    meetingRoomId?: IntFilter | number
    meetingDetail?: StringNullableFilter | string | null
    bookingStart?: DateTimeFilter | Date | string
    bookingEnd?: DateTimeFilter | Date | string
    nameOfBooker?: StringFilter | string
    tel?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    MeetingMembers?: MeetingMembersListRelationFilter
  }

  export type MeetingUserBookedOrderByWithRelationInput = {
    id?: SortOrder
    user?: MeetingUserOrderByWithRelationInput
    userId?: SortOrder
    meetingRoom?: MeetingRoomOrderByWithRelationInput
    meetingRoomId?: SortOrder
    meetingDetail?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    nameOfBooker?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    MeetingMembers?: MeetingMembersOrderByRelationAggregateInput
  }

  export type MeetingUserBookedWhereUniqueInput = {
    id?: number
  }

  export type MeetingUserBookedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
    meetingDetail?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    nameOfBooker?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingUserBookedCountOrderByAggregateInput
    _avg?: MeetingUserBookedAvgOrderByAggregateInput
    _max?: MeetingUserBookedMaxOrderByAggregateInput
    _min?: MeetingUserBookedMinOrderByAggregateInput
    _sum?: MeetingUserBookedSumOrderByAggregateInput
  }

  export type MeetingUserBookedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingUserBookedScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingUserBookedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingUserBookedScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    meetingRoomId?: IntWithAggregatesFilter | number
    meetingDetail?: StringNullableWithAggregatesFilter | string | null
    bookingStart?: DateTimeWithAggregatesFilter | Date | string
    bookingEnd?: DateTimeWithAggregatesFilter | Date | string
    nameOfBooker?: StringWithAggregatesFilter | string
    tel?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingMembersWhereInput = {
    AND?: Enumerable<MeetingMembersWhereInput>
    OR?: Enumerable<MeetingMembersWhereInput>
    NOT?: Enumerable<MeetingMembersWhereInput>
    id?: IntFilter | number
    booking?: XOR<MeetingUserBookedRelationFilter, MeetingUserBookedWhereInput>
    bookedId?: IntFilter | number
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    tel?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingMembersOrderByWithRelationInput = {
    id?: SortOrder
    booking?: MeetingUserBookedOrderByWithRelationInput
    bookedId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingMembersWhereUniqueInput = {
    id?: number
  }

  export type MeetingMembersOrderByWithAggregationInput = {
    id?: SortOrder
    bookedId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingMembersCountOrderByAggregateInput
    _avg?: MeetingMembersAvgOrderByAggregateInput
    _max?: MeetingMembersMaxOrderByAggregateInput
    _min?: MeetingMembersMinOrderByAggregateInput
    _sum?: MeetingMembersSumOrderByAggregateInput
  }

  export type MeetingMembersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingMembersScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingMembersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingMembersScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    bookedId?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    tel?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingUserAvailableWhereInput = {
    AND?: Enumerable<MeetingUserAvailableWhereInput>
    OR?: Enumerable<MeetingUserAvailableWhereInput>
    NOT?: Enumerable<MeetingUserAvailableWhereInput>
    id?: IntFilter | number
    user?: XOR<MeetingUserRelationFilter, MeetingUserWhereInput>
    userId?: IntFilter | number
    availableStart?: DateTimeFilter | Date | string
    availableEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingUserAvailableOrderByWithRelationInput = {
    id?: SortOrder
    user?: MeetingUserOrderByWithRelationInput
    userId?: SortOrder
    availableStart?: SortOrder
    availableEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserAvailableWhereUniqueInput = {
    id?: number
  }

  export type MeetingUserAvailableOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    availableStart?: SortOrder
    availableEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingUserAvailableCountOrderByAggregateInput
    _avg?: MeetingUserAvailableAvgOrderByAggregateInput
    _max?: MeetingUserAvailableMaxOrderByAggregateInput
    _min?: MeetingUserAvailableMinOrderByAggregateInput
    _sum?: MeetingUserAvailableSumOrderByAggregateInput
  }

  export type MeetingUserAvailableScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingUserAvailableScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingUserAvailableScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingUserAvailableScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    availableStart?: DateTimeWithAggregatesFilter | Date | string
    availableEnd?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingRoomWhereInput = {
    AND?: Enumerable<MeetingRoomWhereInput>
    OR?: Enumerable<MeetingRoomWhereInput>
    NOT?: Enumerable<MeetingRoomWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    floor?: IntFilter | number
    building?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    MeetingUserBooked?: MeetingUserBookedListRelationFilter
    MeetingRoomBooked?: MeetingRoomBookedListRelationFilter
  }

  export type MeetingRoomOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    floor?: SortOrder
    building?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    MeetingUserBooked?: MeetingUserBookedOrderByRelationAggregateInput
    MeetingRoomBooked?: MeetingRoomBookedOrderByRelationAggregateInput
  }

  export type MeetingRoomWhereUniqueInput = {
    id?: number
  }

  export type MeetingRoomOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    floor?: SortOrder
    building?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingRoomCountOrderByAggregateInput
    _avg?: MeetingRoomAvgOrderByAggregateInput
    _max?: MeetingRoomMaxOrderByAggregateInput
    _min?: MeetingRoomMinOrderByAggregateInput
    _sum?: MeetingRoomSumOrderByAggregateInput
  }

  export type MeetingRoomScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingRoomScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingRoomScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingRoomScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    floor?: IntWithAggregatesFilter | number
    building?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type MeetingRoomBookedWhereInput = {
    AND?: Enumerable<MeetingRoomBookedWhereInput>
    OR?: Enumerable<MeetingRoomBookedWhereInput>
    NOT?: Enumerable<MeetingRoomBookedWhereInput>
    id?: IntFilter | number
    meetingRoom?: XOR<MeetingRoomRelationFilter, MeetingRoomWhereInput>
    meetingRoomId?: IntFilter | number
    byUserId?: XOR<MeetingUserRelationFilter, MeetingUserWhereInput>
    userId?: IntFilter | number
    bookingStart?: DateTimeFilter | Date | string
    bookingEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingRoomBookedOrderByWithRelationInput = {
    id?: SortOrder
    meetingRoom?: MeetingRoomOrderByWithRelationInput
    meetingRoomId?: SortOrder
    byUserId?: MeetingUserOrderByWithRelationInput
    userId?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomBookedWhereUniqueInput = {
    id?: number
  }

  export type MeetingRoomBookedOrderByWithAggregationInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetingRoomBookedCountOrderByAggregateInput
    _avg?: MeetingRoomBookedAvgOrderByAggregateInput
    _max?: MeetingRoomBookedMaxOrderByAggregateInput
    _min?: MeetingRoomBookedMinOrderByAggregateInput
    _sum?: MeetingRoomBookedSumOrderByAggregateInput
  }

  export type MeetingRoomBookedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MeetingRoomBookedScalarWhereWithAggregatesInput>
    OR?: Enumerable<MeetingRoomBookedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MeetingRoomBookedScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    meetingRoomId?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    bookingStart?: DateTimeWithAggregatesFilter | Date | string
    bookingEnd?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TodoListWhereInput = {
    AND?: Enumerable<TodoListWhereInput>
    OR?: Enumerable<TodoListWhereInput>
    NOT?: Enumerable<TodoListWhereInput>
    id?: IntFilter | number
    task?: StringFilter | string
    status?: StringFilter | string
    note?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TodoListOrderByWithRelationInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListWhereUniqueInput = {
    id?: number
  }

  export type TodoListOrderByWithAggregationInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TodoListCountOrderByAggregateInput
    _avg?: TodoListAvgOrderByAggregateInput
    _max?: TodoListMaxOrderByAggregateInput
    _min?: TodoListMinOrderByAggregateInput
    _sum?: TodoListSumOrderByAggregateInput
  }

  export type TodoListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    task?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    note?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaCategoryWhereInput = {
    AND?: Enumerable<TriviaCategoryWhereInput>
    OR?: Enumerable<TriviaCategoryWhereInput>
    NOT?: Enumerable<TriviaCategoryWhereInput>
    id?: IntFilter | number
    categoryName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    triviaQuiz?: TriviaQuizListRelationFilter
    triviaRound?: TriviaRoundListRelationFilter
  }

  export type TriviaCategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    triviaQuiz?: TriviaQuizOrderByRelationAggregateInput
    triviaRound?: TriviaRoundOrderByRelationAggregateInput
  }

  export type TriviaCategoryWhereUniqueInput = {
    id?: number
  }

  export type TriviaCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaCategoryCountOrderByAggregateInput
    _avg?: TriviaCategoryAvgOrderByAggregateInput
    _max?: TriviaCategoryMaxOrderByAggregateInput
    _min?: TriviaCategoryMinOrderByAggregateInput
    _sum?: TriviaCategorySumOrderByAggregateInput
  }

  export type TriviaCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    categoryName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaQuizWhereInput = {
    AND?: Enumerable<TriviaQuizWhereInput>
    OR?: Enumerable<TriviaQuizWhereInput>
    NOT?: Enumerable<TriviaQuizWhereInput>
    id?: IntFilter | number
    quizName?: StringFilter | string
    category?: XOR<TriviaCategoryRelationFilter, TriviaCategoryWhereInput>
    categoryId?: IntFilter | number
    answer?: XOR<TriviaChoiceRelationFilter, TriviaChoiceWhereInput>
    triviaAnswerChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    triviaRoundQuiz?: TriviaRoundQuizListRelationFilter
    TriviaChoice?: TriviaChoiceListRelationFilter
  }

  export type TriviaQuizOrderByWithRelationInput = {
    id?: SortOrder
    quizName?: SortOrder
    category?: TriviaCategoryOrderByWithRelationInput
    categoryId?: SortOrder
    answer?: TriviaChoiceOrderByWithRelationInput
    triviaAnswerChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    triviaRoundQuiz?: TriviaRoundQuizOrderByRelationAggregateInput
    TriviaChoice?: TriviaChoiceOrderByRelationAggregateInput
  }

  export type TriviaQuizWhereUniqueInput = {
    id?: number
    triviaAnswerChoiceId?: number
  }

  export type TriviaQuizOrderByWithAggregationInput = {
    id?: SortOrder
    quizName?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaQuizCountOrderByAggregateInput
    _avg?: TriviaQuizAvgOrderByAggregateInput
    _max?: TriviaQuizMaxOrderByAggregateInput
    _min?: TriviaQuizMinOrderByAggregateInput
    _sum?: TriviaQuizSumOrderByAggregateInput
  }

  export type TriviaQuizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quizName?: StringWithAggregatesFilter | string
    categoryId?: IntWithAggregatesFilter | number
    triviaAnswerChoiceId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaChoiceWhereInput = {
    AND?: Enumerable<TriviaChoiceWhereInput>
    OR?: Enumerable<TriviaChoiceWhereInput>
    NOT?: Enumerable<TriviaChoiceWhereInput>
    id?: IntFilter | number
    choiceName?: StringFilter | string
    quiz?: XOR<TriviaQuizRelationFilter, TriviaQuizWhereInput> | null
    quizId?: IntNullableFilter | number | null
    triviaQuizAnswer?: XOR<TriviaQuizRelationFilter, TriviaQuizWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceListRelationFilter
  }

  export type TriviaChoiceOrderByWithRelationInput = {
    id?: SortOrder
    choiceName?: SortOrder
    quiz?: TriviaQuizOrderByWithRelationInput
    quizId?: SortOrder
    triviaQuizAnswer?: TriviaQuizOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceOrderByRelationAggregateInput
  }

  export type TriviaChoiceWhereUniqueInput = {
    id?: number
  }

  export type TriviaChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    choiceName?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaChoiceCountOrderByAggregateInput
    _avg?: TriviaChoiceAvgOrderByAggregateInput
    _max?: TriviaChoiceMaxOrderByAggregateInput
    _min?: TriviaChoiceMinOrderByAggregateInput
    _sum?: TriviaChoiceSumOrderByAggregateInput
  }

  export type TriviaChoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    choiceName?: StringWithAggregatesFilter | string
    quizId?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaRoundWhereInput = {
    AND?: Enumerable<TriviaRoundWhereInput>
    OR?: Enumerable<TriviaRoundWhereInput>
    NOT?: Enumerable<TriviaRoundWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    score?: IntFilter | number
    category?: XOR<TriviaCategoryRelationFilter, TriviaCategoryWhereInput>
    categoryId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    triviaRoundQuiz?: TriviaRoundQuizListRelationFilter
  }

  export type TriviaRoundOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    score?: SortOrder
    category?: TriviaCategoryOrderByWithRelationInput
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    triviaRoundQuiz?: TriviaRoundQuizOrderByRelationAggregateInput
  }

  export type TriviaRoundWhereUniqueInput = {
    id?: number
  }

  export type TriviaRoundOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaRoundCountOrderByAggregateInput
    _avg?: TriviaRoundAvgOrderByAggregateInput
    _max?: TriviaRoundMaxOrderByAggregateInput
    _min?: TriviaRoundMinOrderByAggregateInput
    _sum?: TriviaRoundSumOrderByAggregateInput
  }

  export type TriviaRoundScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringNullableWithAggregatesFilter | string | null
    score?: IntWithAggregatesFilter | number
    categoryId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaRoundQuizWhereInput = {
    AND?: Enumerable<TriviaRoundQuizWhereInput>
    OR?: Enumerable<TriviaRoundQuizWhereInput>
    NOT?: Enumerable<TriviaRoundQuizWhereInput>
    id?: IntFilter | number
    round?: XOR<TriviaRoundRelationFilter, TriviaRoundWhereInput>
    roundId?: IntFilter | number
    quiz?: XOR<TriviaQuizRelationFilter, TriviaQuizWhereInput>
    quizId?: IntFilter | number
    playerChooseChoice?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceListRelationFilter
  }

  export type TriviaRoundQuizOrderByWithRelationInput = {
    id?: SortOrder
    round?: TriviaRoundOrderByWithRelationInput
    roundId?: SortOrder
    quiz?: TriviaQuizOrderByWithRelationInput
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceOrderByRelationAggregateInput
  }

  export type TriviaRoundQuizWhereUniqueInput = {
    id?: number
  }

  export type TriviaRoundQuizOrderByWithAggregationInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaRoundQuizCountOrderByAggregateInput
    _avg?: TriviaRoundQuizAvgOrderByAggregateInput
    _max?: TriviaRoundQuizMaxOrderByAggregateInput
    _min?: TriviaRoundQuizMinOrderByAggregateInput
    _sum?: TriviaRoundQuizSumOrderByAggregateInput
  }

  export type TriviaRoundQuizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    roundId?: IntWithAggregatesFilter | number
    quizId?: IntWithAggregatesFilter | number
    playerChooseChoice?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaRoundQuizChoiceWhereInput = {
    AND?: Enumerable<TriviaRoundQuizChoiceWhereInput>
    OR?: Enumerable<TriviaRoundQuizChoiceWhereInput>
    NOT?: Enumerable<TriviaRoundQuizChoiceWhereInput>
    id?: IntFilter | number
    roundQuiz?: XOR<TriviaRoundQuizRelationFilter, TriviaRoundQuizWhereInput>
    roundQuizId?: IntFilter | number
    roundQuizChoice?: XOR<TriviaChoiceRelationFilter, TriviaChoiceWhereInput>
    quizChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaRoundQuizChoiceOrderByWithRelationInput = {
    id?: SortOrder
    roundQuiz?: TriviaRoundQuizOrderByWithRelationInput
    roundQuizId?: SortOrder
    roundQuizChoice?: TriviaChoiceOrderByWithRelationInput
    quizChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizChoiceWhereUniqueInput = {
    id?: number
  }

  export type TriviaRoundQuizChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaRoundQuizChoiceCountOrderByAggregateInput
    _avg?: TriviaRoundQuizChoiceAvgOrderByAggregateInput
    _max?: TriviaRoundQuizChoiceMaxOrderByAggregateInput
    _min?: TriviaRoundQuizChoiceMinOrderByAggregateInput
    _sum?: TriviaRoundQuizChoiceSumOrderByAggregateInput
  }

  export type TriviaRoundQuizChoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaRoundQuizChoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaRoundQuizChoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaRoundQuizChoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    roundQuizId?: IntWithAggregatesFilter | number
    quizChoiceId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    profileImage?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    fromFolowing?: FollowingListRelationFilter
    toFollowing?: FollowingListRelationFilter
    post?: PostListRelationFilter
    fromDirectMessage?: DirectMsgListRelationFilter
    toDirectMessage?: DirectMsgListRelationFilter
    Reply?: ReplyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fromFolowing?: FollowingOrderByRelationAggregateInput
    toFollowing?: FollowingOrderByRelationAggregateInput
    post?: PostOrderByRelationAggregateInput
    fromDirectMessage?: DirectMsgOrderByRelationAggregateInput
    toDirectMessage?: DirectMsgOrderByRelationAggregateInput
    Reply?: ReplyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    profileImage?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FollowingWhereInput = {
    AND?: Enumerable<FollowingWhereInput>
    OR?: Enumerable<FollowingWhereInput>
    NOT?: Enumerable<FollowingWhereInput>
    id?: IntFilter | number
    from?: XOR<UserRelationFilter, UserWhereInput>
    fromUserId?: IntFilter | number
    to?: XOR<UserRelationFilter, UserWhereInput>
    toUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FollowingOrderByWithRelationInput = {
    id?: SortOrder
    from?: UserOrderByWithRelationInput
    fromUserId?: SortOrder
    to?: UserOrderByWithRelationInput
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FollowingWhereUniqueInput = {
    id?: number
    fromUserId_toUserId?: FollowingFromUserIdToUserIdCompoundUniqueInput
  }

  export type FollowingOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FollowingCountOrderByAggregateInput
    _avg?: FollowingAvgOrderByAggregateInput
    _max?: FollowingMaxOrderByAggregateInput
    _min?: FollowingMinOrderByAggregateInput
    _sum?: FollowingSumOrderByAggregateInput
  }

  export type FollowingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FollowingScalarWhereWithAggregatesInput>
    OR?: Enumerable<FollowingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FollowingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromUserId?: IntWithAggregatesFilter | number
    toUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PostWhereInput = {
    AND?: Enumerable<PostWhereInput>
    OR?: Enumerable<PostWhereInput>
    NOT?: Enumerable<PostWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    postDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    reply?: ReplyListRelationFilter
    postOnHashtag?: PostOnHashtagListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
    postDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reply?: ReplyOrderByRelationAggregateInput
    postOnHashtag?: PostOnHashtagOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = {
    id?: number
  }

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    postDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostCountOrderByAggregateInput
    _avg?: PostAvgOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
    _sum?: PostSumOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    postDetail?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DirectMsgWhereInput = {
    AND?: Enumerable<DirectMsgWhereInput>
    OR?: Enumerable<DirectMsgWhereInput>
    NOT?: Enumerable<DirectMsgWhereInput>
    id?: IntFilter | number
    from?: XOR<UserRelationFilter, UserWhereInput>
    fromUserId?: IntFilter | number
    to?: XOR<UserRelationFilter, UserWhereInput>
    toUserId?: IntFilter | number
    msgDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DirectMsgOrderByWithRelationInput = {
    id?: SortOrder
    from?: UserOrderByWithRelationInput
    fromUserId?: SortOrder
    to?: UserOrderByWithRelationInput
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMsgWhereUniqueInput = {
    id?: number
  }

  export type DirectMsgOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DirectMsgCountOrderByAggregateInput
    _avg?: DirectMsgAvgOrderByAggregateInput
    _max?: DirectMsgMaxOrderByAggregateInput
    _min?: DirectMsgMinOrderByAggregateInput
    _sum?: DirectMsgSumOrderByAggregateInput
  }

  export type DirectMsgScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DirectMsgScalarWhereWithAggregatesInput>
    OR?: Enumerable<DirectMsgScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DirectMsgScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromUserId?: IntWithAggregatesFilter | number
    toUserId?: IntWithAggregatesFilter | number
    msgDetail?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type HashtagWhereInput = {
    AND?: Enumerable<HashtagWhereInput>
    OR?: Enumerable<HashtagWhereInput>
    NOT?: Enumerable<HashtagWhereInput>
    id?: IntFilter | number
    hashtag?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    postOnHashtag?: PostOnHashtagListRelationFilter
  }

  export type HashtagOrderByWithRelationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    postOnHashtag?: PostOnHashtagOrderByRelationAggregateInput
  }

  export type HashtagWhereUniqueInput = {
    id?: number
    hashtag?: string
  }

  export type HashtagOrderByWithAggregationInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HashtagCountOrderByAggregateInput
    _avg?: HashtagAvgOrderByAggregateInput
    _max?: HashtagMaxOrderByAggregateInput
    _min?: HashtagMinOrderByAggregateInput
    _sum?: HashtagSumOrderByAggregateInput
  }

  export type HashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<HashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    hashtag?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ReplyWhereInput = {
    AND?: Enumerable<ReplyWhereInput>
    OR?: Enumerable<ReplyWhereInput>
    NOT?: Enumerable<ReplyWhereInput>
    id?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    postId?: IntFilter | number
    reply?: StringFilter | string
    replyUser?: XOR<UserRelationFilter, UserWhereInput>
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ReplyOrderByWithRelationInput = {
    id?: SortOrder
    post?: PostOrderByWithRelationInput
    postId?: SortOrder
    reply?: SortOrder
    replyUser?: UserOrderByWithRelationInput
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplyWhereUniqueInput = {
    id?: number
  }

  export type ReplyOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    reply?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ReplyCountOrderByAggregateInput
    _avg?: ReplyAvgOrderByAggregateInput
    _max?: ReplyMaxOrderByAggregateInput
    _min?: ReplyMinOrderByAggregateInput
    _sum?: ReplySumOrderByAggregateInput
  }

  export type ReplyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReplyScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReplyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReplyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    reply?: StringWithAggregatesFilter | string
    userId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PostOnHashtagWhereInput = {
    AND?: Enumerable<PostOnHashtagWhereInput>
    OR?: Enumerable<PostOnHashtagWhereInput>
    NOT?: Enumerable<PostOnHashtagWhereInput>
    id?: IntFilter | number
    post?: XOR<PostRelationFilter, PostWhereInput>
    hashtag?: XOR<HashtagRelationFilter, HashtagWhereInput>
    postId?: IntFilter | number
    hashtagId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PostOnHashtagOrderByWithRelationInput = {
    id?: SortOrder
    post?: PostOrderByWithRelationInput
    hashtag?: HashtagOrderByWithRelationInput
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostOnHashtagWhereUniqueInput = {
    id?: number
  }

  export type PostOnHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PostOnHashtagCountOrderByAggregateInput
    _avg?: PostOnHashtagAvgOrderByAggregateInput
    _max?: PostOnHashtagMaxOrderByAggregateInput
    _min?: PostOnHashtagMinOrderByAggregateInput
    _sum?: PostOnHashtagSumOrderByAggregateInput
  }

  export type PostOnHashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PostOnHashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<PostOnHashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PostOnHashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    hashtagId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingBranchWhereInput = {
    AND?: Enumerable<WashingBranchWhereInput>
    OR?: Enumerable<WashingBranchWhereInput>
    NOT?: Enumerable<WashingBranchWhereInput>
    id?: IntFilter | number
    branchName?: StringFilter | string
    address?: StringFilter | string
    tel?: StringFilter | string
    area?: IntFilter | number
    ownerName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    WashingMachine?: WashingMachineListRelationFilter
    WashingUseHistory?: WashingUseHistoryListRelationFilter
  }

  export type WashingBranchOrderByWithRelationInput = {
    id?: SortOrder
    branchName?: SortOrder
    address?: SortOrder
    tel?: SortOrder
    area?: SortOrder
    ownerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    WashingMachine?: WashingMachineOrderByRelationAggregateInput
    WashingUseHistory?: WashingUseHistoryOrderByRelationAggregateInput
  }

  export type WashingBranchWhereUniqueInput = {
    id?: number
  }

  export type WashingBranchOrderByWithAggregationInput = {
    id?: SortOrder
    branchName?: SortOrder
    address?: SortOrder
    tel?: SortOrder
    area?: SortOrder
    ownerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingBranchCountOrderByAggregateInput
    _avg?: WashingBranchAvgOrderByAggregateInput
    _max?: WashingBranchMaxOrderByAggregateInput
    _min?: WashingBranchMinOrderByAggregateInput
    _sum?: WashingBranchSumOrderByAggregateInput
  }

  export type WashingBranchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingBranchScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingBranchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingBranchScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    branchName?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    tel?: StringWithAggregatesFilter | string
    area?: IntWithAggregatesFilter | number
    ownerName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingMachineWhereInput = {
    AND?: Enumerable<WashingMachineWhereInput>
    OR?: Enumerable<WashingMachineWhereInput>
    NOT?: Enumerable<WashingMachineWhereInput>
    id?: IntFilter | number
    branch?: XOR<WashingBranchRelationFilter, WashingBranchWhereInput>
    branchId?: IntFilter | number
    brand?: StringFilter | string
    weight?: IntFilter | number
    type?: StringFilter | string
    productionYear?: DateTimeFilter | Date | string
    warrantyEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceListRelationFilter
    WashingUseHistory?: WashingUseHistoryListRelationFilter
    WashingMachineOnProgram?: WashingMachineOnProgramListRelationFilter
  }

  export type WashingMachineOrderByWithRelationInput = {
    id?: SortOrder
    branch?: WashingBranchOrderByWithRelationInput
    branchId?: SortOrder
    brand?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    productionYear?: SortOrder
    warrantyEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    WashingMachineMaintenance?: WashingMachineMaintenanceOrderByRelationAggregateInput
    WashingUseHistory?: WashingUseHistoryOrderByRelationAggregateInput
    WashingMachineOnProgram?: WashingMachineOnProgramOrderByRelationAggregateInput
  }

  export type WashingMachineWhereUniqueInput = {
    id?: number
  }

  export type WashingMachineOrderByWithAggregationInput = {
    id?: SortOrder
    branchId?: SortOrder
    brand?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    productionYear?: SortOrder
    warrantyEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingMachineCountOrderByAggregateInput
    _avg?: WashingMachineAvgOrderByAggregateInput
    _max?: WashingMachineMaxOrderByAggregateInput
    _min?: WashingMachineMinOrderByAggregateInput
    _sum?: WashingMachineSumOrderByAggregateInput
  }

  export type WashingMachineScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingMachineScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingMachineScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingMachineScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    branchId?: IntWithAggregatesFilter | number
    brand?: StringWithAggregatesFilter | string
    weight?: IntWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    productionYear?: DateTimeWithAggregatesFilter | Date | string
    warrantyEnd?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingMachineMaintenanceWhereInput = {
    AND?: Enumerable<WashingMachineMaintenanceWhereInput>
    OR?: Enumerable<WashingMachineMaintenanceWhereInput>
    NOT?: Enumerable<WashingMachineMaintenanceWhereInput>
    id?: IntFilter | number
    machine?: XOR<WashingMachineRelationFilter, WashingMachineWhereInput>
    machineId?: IntFilter | number
    symptom?: StringFilter | string
    failureLevel?: IntFilter | number
    mechanicName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingMachineMaintenanceOrderByWithRelationInput = {
    id?: SortOrder
    machine?: WashingMachineOrderByWithRelationInput
    machineId?: SortOrder
    symptom?: SortOrder
    failureLevel?: SortOrder
    mechanicName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineMaintenanceWhereUniqueInput = {
    id?: number
  }

  export type WashingMachineMaintenanceOrderByWithAggregationInput = {
    id?: SortOrder
    machineId?: SortOrder
    symptom?: SortOrder
    failureLevel?: SortOrder
    mechanicName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingMachineMaintenanceCountOrderByAggregateInput
    _avg?: WashingMachineMaintenanceAvgOrderByAggregateInput
    _max?: WashingMachineMaintenanceMaxOrderByAggregateInput
    _min?: WashingMachineMaintenanceMinOrderByAggregateInput
    _sum?: WashingMachineMaintenanceSumOrderByAggregateInput
  }

  export type WashingMachineMaintenanceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingMachineMaintenanceScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingMachineMaintenanceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingMachineMaintenanceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    machineId?: IntWithAggregatesFilter | number
    symptom?: StringWithAggregatesFilter | string
    failureLevel?: IntWithAggregatesFilter | number
    mechanicName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingMachineProgramWhereInput = {
    AND?: Enumerable<WashingMachineProgramWhereInput>
    OR?: Enumerable<WashingMachineProgramWhereInput>
    NOT?: Enumerable<WashingMachineProgramWhereInput>
    id?: IntFilter | number
    programName?: StringFilter | string
    price?: IntFilter | number
    time?: IntFilter | number
    maxWeight?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    WashingUseHistory?: WashingUseHistoryListRelationFilter
    WashingMachineOnProgram?: WashingMachineOnProgramListRelationFilter
  }

  export type WashingMachineProgramOrderByWithRelationInput = {
    id?: SortOrder
    programName?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    WashingUseHistory?: WashingUseHistoryOrderByRelationAggregateInput
    WashingMachineOnProgram?: WashingMachineOnProgramOrderByRelationAggregateInput
  }

  export type WashingMachineProgramWhereUniqueInput = {
    id?: number
  }

  export type WashingMachineProgramOrderByWithAggregationInput = {
    id?: SortOrder
    programName?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingMachineProgramCountOrderByAggregateInput
    _avg?: WashingMachineProgramAvgOrderByAggregateInput
    _max?: WashingMachineProgramMaxOrderByAggregateInput
    _min?: WashingMachineProgramMinOrderByAggregateInput
    _sum?: WashingMachineProgramSumOrderByAggregateInput
  }

  export type WashingMachineProgramScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingMachineProgramScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingMachineProgramScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingMachineProgramScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    programName?: StringWithAggregatesFilter | string
    price?: IntWithAggregatesFilter | number
    time?: IntWithAggregatesFilter | number
    maxWeight?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingMachineOnProgramWhereInput = {
    AND?: Enumerable<WashingMachineOnProgramWhereInput>
    OR?: Enumerable<WashingMachineOnProgramWhereInput>
    NOT?: Enumerable<WashingMachineOnProgramWhereInput>
    id?: IntFilter | number
    machine?: XOR<WashingMachineRelationFilter, WashingMachineWhereInput>
    machineId?: IntFilter | number
    program?: XOR<WashingMachineProgramRelationFilter, WashingMachineProgramWhereInput>
    programId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingMachineOnProgramOrderByWithRelationInput = {
    id?: SortOrder
    machine?: WashingMachineOrderByWithRelationInput
    machineId?: SortOrder
    program?: WashingMachineProgramOrderByWithRelationInput
    programId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineOnProgramWhereUniqueInput = {
    id?: number
  }

  export type WashingMachineOnProgramOrderByWithAggregationInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingMachineOnProgramCountOrderByAggregateInput
    _avg?: WashingMachineOnProgramAvgOrderByAggregateInput
    _max?: WashingMachineOnProgramMaxOrderByAggregateInput
    _min?: WashingMachineOnProgramMinOrderByAggregateInput
    _sum?: WashingMachineOnProgramSumOrderByAggregateInput
  }

  export type WashingMachineOnProgramScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingMachineOnProgramScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingMachineOnProgramScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingMachineOnProgramScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    machineId?: IntWithAggregatesFilter | number
    programId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingUserWhereInput = {
    AND?: Enumerable<WashingUserWhereInput>
    OR?: Enumerable<WashingUserWhereInput>
    NOT?: Enumerable<WashingUserWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    tel?: StringFilter | string
    remainCoupon?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    WashingTopUp?: WashingTopUpListRelationFilter
    WashingUseHistory?: WashingUseHistoryListRelationFilter
  }

  export type WashingUserOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    tel?: SortOrder
    remainCoupon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    WashingTopUp?: WashingTopUpOrderByRelationAggregateInput
    WashingUseHistory?: WashingUseHistoryOrderByRelationAggregateInput
  }

  export type WashingUserWhereUniqueInput = {
    id?: number
  }

  export type WashingUserOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    tel?: SortOrder
    remainCoupon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingUserCountOrderByAggregateInput
    _avg?: WashingUserAvgOrderByAggregateInput
    _max?: WashingUserMaxOrderByAggregateInput
    _min?: WashingUserMinOrderByAggregateInput
    _sum?: WashingUserSumOrderByAggregateInput
  }

  export type WashingUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userName?: StringWithAggregatesFilter | string
    tel?: StringWithAggregatesFilter | string
    remainCoupon?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingTopUpWhereInput = {
    AND?: Enumerable<WashingTopUpWhereInput>
    OR?: Enumerable<WashingTopUpWhereInput>
    NOT?: Enumerable<WashingTopUpWhereInput>
    id?: IntFilter | number
    user?: XOR<WashingUserRelationFilter, WashingUserWhereInput>
    userId?: IntFilter | number
    topUpAmount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingTopUpOrderByWithRelationInput = {
    id?: SortOrder
    user?: WashingUserOrderByWithRelationInput
    userId?: SortOrder
    topUpAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingTopUpWhereUniqueInput = {
    id?: number
  }

  export type WashingTopUpOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingTopUpCountOrderByAggregateInput
    _avg?: WashingTopUpAvgOrderByAggregateInput
    _max?: WashingTopUpMaxOrderByAggregateInput
    _min?: WashingTopUpMinOrderByAggregateInput
    _sum?: WashingTopUpSumOrderByAggregateInput
  }

  export type WashingTopUpScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingTopUpScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingTopUpScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingTopUpScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    topUpAmount?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type WashingUseHistoryWhereInput = {
    AND?: Enumerable<WashingUseHistoryWhereInput>
    OR?: Enumerable<WashingUseHistoryWhereInput>
    NOT?: Enumerable<WashingUseHistoryWhereInput>
    id?: IntFilter | number
    user?: XOR<WashingUserRelationFilter, WashingUserWhereInput>
    userId?: IntFilter | number
    useAtBranch?: XOR<WashingBranchRelationFilter, WashingBranchWhereInput>
    branchId?: IntFilter | number
    useAtMachine?: XOR<WashingMachineRelationFilter, WashingMachineWhereInput>
    machineId?: IntFilter | number
    useProgram?: XOR<WashingMachineProgramRelationFilter, WashingMachineProgramWhereInput>
    programId?: IntFilter | number
    price?: IntFilter | number
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingUseHistoryOrderByWithRelationInput = {
    id?: SortOrder
    user?: WashingUserOrderByWithRelationInput
    userId?: SortOrder
    useAtBranch?: WashingBranchOrderByWithRelationInput
    branchId?: SortOrder
    useAtMachine?: WashingMachineOrderByWithRelationInput
    machineId?: SortOrder
    useProgram?: WashingMachineProgramOrderByWithRelationInput
    programId?: SortOrder
    price?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUseHistoryWhereUniqueInput = {
    id?: number
  }

  export type WashingUseHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WashingUseHistoryCountOrderByAggregateInput
    _avg?: WashingUseHistoryAvgOrderByAggregateInput
    _max?: WashingUseHistoryMaxOrderByAggregateInput
    _min?: WashingUseHistoryMinOrderByAggregateInput
    _sum?: WashingUseHistorySumOrderByAggregateInput
  }

  export type WashingUseHistoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WashingUseHistoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<WashingUseHistoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WashingUseHistoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    branchId?: IntWithAggregatesFilter | number
    machineId?: IntWithAggregatesFilter | number
    programId?: IntWithAggregatesFilter | number
    price?: IntWithAggregatesFilter | number
    startTime?: DateTimeWithAggregatesFilter | Date | string
    endTime?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTUserWhereInput = {
    AND?: Enumerable<YTUserWhereInput>
    OR?: Enumerable<YTUserWhereInput>
    NOT?: Enumerable<YTUserWhereInput>
    id?: IntFilter | number
    userName?: StringFilter | string
    profileImage?: StringFilter | string
    email?: StringFilter | string
    bio?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    ChanelOnUser?: ChanelOnUserListRelationFilter
    YTAdmin?: YTAdminListRelationFilter
    YTComment?: YTCommentListRelationFilter
    YTSubComment?: YTSubCommentListRelationFilter
    YTSubscribe?: YTSubscribeListRelationFilter
  }

  export type YTUserOrderByWithRelationInput = {
    id?: SortOrder
    userName?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ChanelOnUser?: ChanelOnUserOrderByRelationAggregateInput
    YTAdmin?: YTAdminOrderByRelationAggregateInput
    YTComment?: YTCommentOrderByRelationAggregateInput
    YTSubComment?: YTSubCommentOrderByRelationAggregateInput
    YTSubscribe?: YTSubscribeOrderByRelationAggregateInput
  }

  export type YTUserWhereUniqueInput = {
    id?: number
  }

  export type YTUserOrderByWithAggregationInput = {
    id?: SortOrder
    userName?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTUserCountOrderByAggregateInput
    _avg?: YTUserAvgOrderByAggregateInput
    _max?: YTUserMaxOrderByAggregateInput
    _min?: YTUserMinOrderByAggregateInput
    _sum?: YTUserSumOrderByAggregateInput
  }

  export type YTUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userName?: StringWithAggregatesFilter | string
    profileImage?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    bio?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTChanelWhereInput = {
    AND?: Enumerable<YTChanelWhereInput>
    OR?: Enumerable<YTChanelWhereInput>
    NOT?: Enumerable<YTChanelWhereInput>
    id?: IntFilter | number
    chaneName?: StringFilter | string
    image?: StringNullableFilter | string | null
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    ChanelOnUser?: ChanelOnUserListRelationFilter
    YTAdmin?: YTAdminListRelationFilter
    YTVideo?: YTVideoListRelationFilter
    YTSubscribe?: YTSubscribeListRelationFilter
  }

  export type YTChanelOrderByWithRelationInput = {
    id?: SortOrder
    chaneName?: SortOrder
    image?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ChanelOnUser?: ChanelOnUserOrderByRelationAggregateInput
    YTAdmin?: YTAdminOrderByRelationAggregateInput
    YTVideo?: YTVideoOrderByRelationAggregateInput
    YTSubscribe?: YTSubscribeOrderByRelationAggregateInput
  }

  export type YTChanelWhereUniqueInput = {
    id?: number
  }

  export type YTChanelOrderByWithAggregationInput = {
    id?: SortOrder
    chaneName?: SortOrder
    image?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTChanelCountOrderByAggregateInput
    _avg?: YTChanelAvgOrderByAggregateInput
    _max?: YTChanelMaxOrderByAggregateInput
    _min?: YTChanelMinOrderByAggregateInput
    _sum?: YTChanelSumOrderByAggregateInput
  }

  export type YTChanelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTChanelScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTChanelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTChanelScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    chaneName?: StringWithAggregatesFilter | string
    image?: StringNullableWithAggregatesFilter | string | null
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ChanelOnUserWhereInput = {
    AND?: Enumerable<ChanelOnUserWhereInput>
    OR?: Enumerable<ChanelOnUserWhereInput>
    NOT?: Enumerable<ChanelOnUserWhereInput>
    id?: IntFilter | number
    user?: XOR<YTUserRelationFilter, YTUserWhereInput>
    userId?: IntFilter | number
    chanel?: XOR<YTChanelRelationFilter, YTChanelWhereInput>
    chanelId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ChanelOnUserOrderByWithRelationInput = {
    id?: SortOrder
    user?: YTUserOrderByWithRelationInput
    userId?: SortOrder
    chanel?: YTChanelOrderByWithRelationInput
    chanelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChanelOnUserWhereUniqueInput = {
    id?: number
  }

  export type ChanelOnUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ChanelOnUserCountOrderByAggregateInput
    _avg?: ChanelOnUserAvgOrderByAggregateInput
    _max?: ChanelOnUserMaxOrderByAggregateInput
    _min?: ChanelOnUserMinOrderByAggregateInput
    _sum?: ChanelOnUserSumOrderByAggregateInput
  }

  export type ChanelOnUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChanelOnUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChanelOnUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChanelOnUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTAdminWhereInput = {
    AND?: Enumerable<YTAdminWhereInput>
    OR?: Enumerable<YTAdminWhereInput>
    NOT?: Enumerable<YTAdminWhereInput>
    id?: IntFilter | number
    chanel?: XOR<YTChanelRelationFilter, YTChanelWhereInput>
    chanelId?: IntFilter | number
    adminUser?: XOR<YTUserRelationFilter, YTUserWhereInput>
    adminUserId?: IntFilter | number
    role?: XOR<YTRoleRelationFilter, YTRoleWhereInput>
    roleId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTAdminOrderByWithRelationInput = {
    id?: SortOrder
    chanel?: YTChanelOrderByWithRelationInput
    chanelId?: SortOrder
    adminUser?: YTUserOrderByWithRelationInput
    adminUserId?: SortOrder
    role?: YTRoleOrderByWithRelationInput
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTAdminWhereUniqueInput = {
    id?: number
  }

  export type YTAdminOrderByWithAggregationInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTAdminCountOrderByAggregateInput
    _avg?: YTAdminAvgOrderByAggregateInput
    _max?: YTAdminMaxOrderByAggregateInput
    _min?: YTAdminMinOrderByAggregateInput
    _sum?: YTAdminSumOrderByAggregateInput
  }

  export type YTAdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTAdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTAdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTAdminScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    adminUserId?: IntWithAggregatesFilter | number
    roleId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTRoleWhereInput = {
    AND?: Enumerable<YTRoleWhereInput>
    OR?: Enumerable<YTRoleWhereInput>
    NOT?: Enumerable<YTRoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    YTAdmin?: YTAdminListRelationFilter
    YTRolePermission?: YTRolePermissionListRelationFilter
  }

  export type YTRoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    YTAdmin?: YTAdminOrderByRelationAggregateInput
    YTRolePermission?: YTRolePermissionOrderByRelationAggregateInput
  }

  export type YTRoleWhereUniqueInput = {
    id?: number
  }

  export type YTRoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTRoleCountOrderByAggregateInput
    _avg?: YTRoleAvgOrderByAggregateInput
    _max?: YTRoleMaxOrderByAggregateInput
    _min?: YTRoleMinOrderByAggregateInput
    _sum?: YTRoleSumOrderByAggregateInput
  }

  export type YTRoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTRoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTRoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTRoleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTRolePermissionWhereInput = {
    AND?: Enumerable<YTRolePermissionWhereInput>
    OR?: Enumerable<YTRolePermissionWhereInput>
    NOT?: Enumerable<YTRolePermissionWhereInput>
    id?: IntFilter | number
    roldid?: XOR<YTRoleRelationFilter, YTRoleWhereInput>
    roleId?: IntFilter | number
    permissionName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTRolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    roldid?: YTRoleOrderByWithRelationInput
    roleId?: SortOrder
    permissionName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRolePermissionWhereUniqueInput = {
    id?: number
  }

  export type YTRolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTRolePermissionCountOrderByAggregateInput
    _avg?: YTRolePermissionAvgOrderByAggregateInput
    _max?: YTRolePermissionMaxOrderByAggregateInput
    _min?: YTRolePermissionMinOrderByAggregateInput
    _sum?: YTRolePermissionSumOrderByAggregateInput
  }

  export type YTRolePermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTRolePermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTRolePermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTRolePermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    roleId?: IntWithAggregatesFilter | number
    permissionName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTSubscribeWhereInput = {
    AND?: Enumerable<YTSubscribeWhereInput>
    OR?: Enumerable<YTSubscribeWhereInput>
    NOT?: Enumerable<YTSubscribeWhereInput>
    id?: IntFilter | number
    chanel?: XOR<YTChanelRelationFilter, YTChanelWhereInput>
    chanelId?: IntFilter | number
    subscribeUser?: XOR<YTUserRelationFilter, YTUserWhereInput>
    subscribeUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTSubscribeOrderByWithRelationInput = {
    id?: SortOrder
    chanel?: YTChanelOrderByWithRelationInput
    chanelId?: SortOrder
    subscribeUser?: YTUserOrderByWithRelationInput
    subscribeUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubscribeWhereUniqueInput = {
    id?: number
  }

  export type YTSubscribeOrderByWithAggregationInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTSubscribeCountOrderByAggregateInput
    _avg?: YTSubscribeAvgOrderByAggregateInput
    _max?: YTSubscribeMaxOrderByAggregateInput
    _min?: YTSubscribeMinOrderByAggregateInput
    _sum?: YTSubscribeSumOrderByAggregateInput
  }

  export type YTSubscribeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTSubscribeScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTSubscribeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTSubscribeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    subscribeUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTVideoWhereInput = {
    AND?: Enumerable<YTVideoWhereInput>
    OR?: Enumerable<YTVideoWhereInput>
    NOT?: Enumerable<YTVideoWhereInput>
    id?: IntFilter | number
    chanel?: XOR<YTChanelRelationFilter, YTChanelWhereInput>
    chanelId?: IntFilter | number
    videoLink?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    YTComment?: YTCommentListRelationFilter
  }

  export type YTVideoOrderByWithRelationInput = {
    id?: SortOrder
    chanel?: YTChanelOrderByWithRelationInput
    chanelId?: SortOrder
    videoLink?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    YTComment?: YTCommentOrderByRelationAggregateInput
  }

  export type YTVideoWhereUniqueInput = {
    id?: number
  }

  export type YTVideoOrderByWithAggregationInput = {
    id?: SortOrder
    chanelId?: SortOrder
    videoLink?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTVideoCountOrderByAggregateInput
    _avg?: YTVideoAvgOrderByAggregateInput
    _max?: YTVideoMaxOrderByAggregateInput
    _min?: YTVideoMinOrderByAggregateInput
    _sum?: YTVideoSumOrderByAggregateInput
  }

  export type YTVideoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTVideoScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTVideoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTVideoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    videoLink?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTCommentWhereInput = {
    AND?: Enumerable<YTCommentWhereInput>
    OR?: Enumerable<YTCommentWhereInput>
    NOT?: Enumerable<YTCommentWhereInput>
    id?: IntFilter | number
    video?: XOR<YTVideoRelationFilter, YTVideoWhereInput>
    videoId?: IntFilter | number
    commentDetail?: StringFilter | string
    commentFromUser?: XOR<YTUserRelationFilter, YTUserWhereInput>
    commentFromUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    YTSubComment?: YTSubCommentListRelationFilter
  }

  export type YTCommentOrderByWithRelationInput = {
    id?: SortOrder
    video?: YTVideoOrderByWithRelationInput
    videoId?: SortOrder
    commentDetail?: SortOrder
    commentFromUser?: YTUserOrderByWithRelationInput
    commentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    YTSubComment?: YTSubCommentOrderByRelationAggregateInput
  }

  export type YTCommentWhereUniqueInput = {
    id?: number
  }

  export type YTCommentOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentDetail?: SortOrder
    commentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTCommentCountOrderByAggregateInput
    _avg?: YTCommentAvgOrderByAggregateInput
    _max?: YTCommentMaxOrderByAggregateInput
    _min?: YTCommentMinOrderByAggregateInput
    _sum?: YTCommentSumOrderByAggregateInput
  }

  export type YTCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    videoId?: IntWithAggregatesFilter | number
    commentDetail?: StringWithAggregatesFilter | string
    commentFromUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YTSubCommentWhereInput = {
    AND?: Enumerable<YTSubCommentWhereInput>
    OR?: Enumerable<YTSubCommentWhereInput>
    NOT?: Enumerable<YTSubCommentWhereInput>
    id?: IntFilter | number
    comment?: XOR<YTCommentRelationFilter, YTCommentWhereInput>
    commentId?: IntFilter | number
    subCommentDetail?: StringFilter | string
    subCommentFromUser?: XOR<YTUserRelationFilter, YTUserWhereInput>
    subCommentFromUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTSubCommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: YTCommentOrderByWithRelationInput
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    subCommentFromUser?: YTUserOrderByWithRelationInput
    subCommentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubCommentWhereUniqueInput = {
    id?: number
  }

  export type YTSubCommentOrderByWithAggregationInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    subCommentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YTSubCommentCountOrderByAggregateInput
    _avg?: YTSubCommentAvgOrderByAggregateInput
    _max?: YTSubCommentMaxOrderByAggregateInput
    _min?: YTSubCommentMinOrderByAggregateInput
    _sum?: YTSubCommentSumOrderByAggregateInput
  }

  export type YTSubCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YTSubCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<YTSubCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YTSubCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentId?: IntWithAggregatesFilter | number
    subCommentDetail?: StringWithAggregatesFilter | string
    subCommentFromUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenCategoryCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenMenu?: BinKitchenMenuCreateNestedManyWithoutCategoryInput
  }

  export type BinKitchenCategoryUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenMenu?: BinKitchenMenuUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type BinKitchenCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenMenu?: BinKitchenMenuUpdateManyWithoutCategoryNestedInput
  }

  export type BinKitchenCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenMenu?: BinKitchenMenuUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type BinKitchenCategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuCreateInput = {
    name: string
    image: string
    price: number
    category?: BinKitchenCategoryCreateNestedOneWithoutBinKitchenMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemCreateNestedManyWithoutMenuInput
  }

  export type BinKitchenMenuUncheckedCreateInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput
  }

  export type BinKitchenMenuUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    category?: BinKitchenCategoryUpdateOneWithoutBinKitchenMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUpdateManyWithoutMenuNestedInput
  }

  export type BinKitchenMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type BinKitchenMenuCreateManyInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderCreateInput = {
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemCreateNestedManyWithoutOrderInput
  }

  export type BinKitchenOrderUncheckedCreateInput = {
    id?: number
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutOrderInput
  }

  export type BinKitchenOrderUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUpdateManyWithoutOrderNestedInput
  }

  export type BinKitchenOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedUpdateManyWithoutOrderNestedInput
  }

  export type BinKitchenOrderCreateManyInput = {
    id?: number
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateInput = {
    menu: BinKitchenMenuCreateNestedOneWithoutBinKitchenOrderItemInput
    order?: BinKitchenOrderCreateNestedOneWithoutBinKitchenOrderItemInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateInput = {
    id?: number
    menuId: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateInput = {
    menu?: BinKitchenMenuUpdateOneRequiredWithoutBinKitchenOrderItemNestedInput
    order?: BinKitchenOrderUpdateOneWithoutBinKitchenOrderItemNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyInput = {
    id?: number
    menuId: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBUserCreateInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserCreateManyInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsCreateInput = {
    from: FBUserCreateNestedOneWithoutFromFriendsInput
    to: FBUserCreateNestedOneWithoutToFriendsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUpdateInput = {
    from?: FBUserUpdateOneRequiredWithoutFromFriendsNestedInput
    to?: FBUserUpdateOneRequiredWithoutToFriendsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsCreateManyInput = {
    id?: number
    fromUserId: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostCreateInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostUpdateInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBPostCreateManyInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostUpdateManyMutationInput = {
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    post: FBPostCreateNestedOneWithoutCommentInput
    commentDetail: string
    fromUserId: FBUserCreateNestedOneWithoutCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: number
    postId: number
    commentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    post?: FBPostUpdateOneRequiredWithoutCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    fromUserId?: FBUserUpdateOneRequiredWithoutCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: number
    postId: number
    commentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentCreateInput = {
    comment: CommentCreateNestedOneWithoutSubCommentInput
    subCommentDetail: string
    fromUserId: FBUserCreateNestedOneWithoutSubCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUncheckedCreateInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUpdateInput = {
    comment?: CommentUpdateOneRequiredWithoutSubCommentNestedInput
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    fromUserId?: FBUserUpdateOneRequiredWithoutSubCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentCreateManyInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUpdateManyMutationInput = {
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateInput = {
    post: FBPostCreateNestedOneWithoutLikeInput
    fromUserId: FBUserCreateNestedOneWithoutLikeInput
    likeType: LikeTypeCreateNestedOneWithoutLikeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUncheckedCreateInput = {
    id?: number
    postId: number
    userId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUpdateInput = {
    post?: FBPostUpdateOneRequiredWithoutLikeNestedInput
    fromUserId?: FBUserUpdateOneRequiredWithoutLikeNestedInput
    likeType?: LikeTypeUpdateOneRequiredWithoutLikeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyInput = {
    id?: number
    postId: number
    userId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareCreateInput = {
    post: FBPostCreateNestedOneWithoutShareInput
    fromUserId: FBUserCreateNestedOneWithoutShareInput
    shareStatus: ShareStatusCreateNestedOneWithoutShareInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUncheckedCreateInput = {
    id?: number
    postId: number
    userId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUpdateInput = {
    post?: FBPostUpdateOneRequiredWithoutShareNestedInput
    fromUserId?: FBUserUpdateOneRequiredWithoutShareNestedInput
    shareStatus?: ShareStatusUpdateOneRequiredWithoutShareNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shareStatusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareCreateManyInput = {
    id?: number
    postId: number
    userId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shareStatusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupCreateInput = {
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutGroupInput
    FBPost?: FBPostCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutGroupInput
    FBPost?: FBPostUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupOnUser?: GroupOnUserUpdateManyWithoutGroupNestedInput
    FBPost?: FBPostUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutGroupNestedInput
    FBPost?: FBPostUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: number
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserCreateInput = {
    user: FBUserCreateNestedOneWithoutGroupOnUserInput
    group: GroupCreateNestedOneWithoutGroupOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUncheckedCreateInput = {
    id?: number
    userId: number
    groupId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUpdateInput = {
    user?: FBUserUpdateOneRequiredWithoutGroupOnUserNestedInput
    group?: GroupUpdateOneRequiredWithoutGroupOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserCreateManyInput = {
    id?: number
    userId: number
    groupId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeTypeCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Like?: LikeCreateNestedManyWithoutLikeTypeInput
  }

  export type LikeTypeUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Like?: LikeUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type LikeTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Like?: LikeUpdateManyWithoutLikeTypeNestedInput
  }

  export type LikeTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Like?: LikeUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type LikeTypeCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareStatusCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Share?: ShareCreateNestedManyWithoutShareStatusInput
  }

  export type ShareStatusUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Share?: ShareUncheckedCreateNestedManyWithoutShareStatusInput
  }

  export type ShareStatusUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Share?: ShareUpdateManyWithoutShareStatusNestedInput
  }

  export type ShareStatusUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Share?: ShareUncheckedUpdateManyWithoutShareStatusNestedInput
  }

  export type ShareStatusCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareStatusUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareStatusUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgCreateInput = {
    from: FBUserCreateNestedOneWithoutFromDirectMsgInput
    to: FBUserCreateNestedOneWithoutToDirectMsgInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgUpdateInput = {
    from?: FBUserUpdateOneRequiredWithoutFromDirectMsgNestedInput
    to?: FBUserUpdateOneRequiredWithoutToDirectMsgNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgCreateManyInput = {
    id?: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgUpdateManyMutationInput = {
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBHashtagCreateInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutHashtagInput
  }

  export type FBHashtagUncheckedCreateInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutHashtagInput
  }

  export type FBHashtagUpdateInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutHashtagNestedInput
  }

  export type FBHashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutHashtagNestedInput
  }

  export type FBHashtagCreateManyInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBHashtagUpdateManyMutationInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBHashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagCreateInput = {
    post: FBPostCreateNestedOneWithoutPostOnHashtagInput
    hashtag: FBHashtagCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUncheckedCreateInput = {
    id?: number
    postId: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUpdateInput = {
    post?: FBPostUpdateOneRequiredWithoutPostOnHashtagNestedInput
    hashtag?: FBHashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagCreateManyInput = {
    id?: number
    postId: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryUniversityCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookUncheckedCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryUniversityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryUniversityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutStidentNestedInput
  }

  export type LibraryStudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutStidentNestedInput
  }

  export type LibraryStudentCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCreateInput = {
    university: LibraryUniversityCreateNestedOneWithoutLibraryBookInput
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUncheckedCreateInput = {
    id?: number
    universityId: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorUncheckedCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryUncheckedCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUpdateInput = {
    university?: LibraryUniversityUpdateOneRequiredWithoutLibraryBookNestedInput
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUncheckedUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUncheckedUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookCreateManyInput = {
    id?: number
    universityId: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCopyCreateInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUpdateInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyCreateManyInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookCopyUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCopyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyCreateInput = {
    copy: LibraryBookCopyCreateNestedOneWithoutHistoryOfBookCopyInput
    onceBorrowByStudent?: LibraryStudentCreateNestedOneWithoutHistoryOfBookCopyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedCreateInput = {
    id?: number
    copyId: number
    oncetBorrowBytudentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUpdateInput = {
    copy?: LibraryBookCopyUpdateOneRequiredWithoutHistoryOfBookCopyNestedInput
    onceBorrowByStudent?: LibraryStudentUpdateOneWithoutHistoryOfBookCopyNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    copyId?: IntFieldUpdateOperationsInput | number
    oncetBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyCreateManyInput = {
    id?: number
    copyId: number
    oncetBorrowBytudentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    copyId?: IntFieldUpdateOperationsInput | number
    oncetBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryCategoryCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnCategory?: BookOnCategoryCreateNestedManyWithoutCategoryInput
  }

  export type LibraryCategoryUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnCategory?: BookOnCategoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type LibraryCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnCategory?: BookOnCategoryUpdateManyWithoutCategoryNestedInput
  }

  export type LibraryCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnCategory?: BookOnCategoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type LibraryCategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryAuthorCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnAuthor?: BookOnAuthorCreateNestedManyWithoutAuthorInput
  }

  export type LibraryAuthorUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnAuthor?: BookOnAuthorUncheckedCreateNestedManyWithoutAuthorInput
  }

  export type LibraryAuthorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnAuthor?: BookOnAuthorUpdateManyWithoutAuthorNestedInput
  }

  export type LibraryAuthorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnAuthor?: BookOnAuthorUncheckedUpdateManyWithoutAuthorNestedInput
  }

  export type LibraryAuthorCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryAuthorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryAuthorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorCreateInput = {
    book: LibraryBookCreateNestedOneWithoutBookOnAuthorInput
    author: LibraryAuthorCreateNestedOneWithoutBookOnAuthorInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUncheckedCreateInput = {
    id?: number
    bookId: number
    authorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUpdateInput = {
    book?: LibraryBookUpdateOneRequiredWithoutBookOnAuthorNestedInput
    author?: LibraryAuthorUpdateOneRequiredWithoutBookOnAuthorNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorCreateManyInput = {
    id?: number
    bookId: number
    authorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryCreateInput = {
    book: LibraryBookCreateNestedOneWithoutBookOnCategoryInput
    category: LibraryCategoryCreateNestedOneWithoutBookOnCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUncheckedCreateInput = {
    id?: number
    bookId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUpdateInput = {
    book?: LibraryBookUpdateOneRequiredWithoutBookOnCategoryNestedInput
    category?: LibraryCategoryUpdateOneRequiredWithoutBookOnCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryCreateManyInput = {
    id?: number
    bookId: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestCreateInput = {
    student: LibraryStudentCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    fromUniversity: LibraryUniversityCreateNestedOneWithoutFromUniversityInput
    toUniversity: LibraryUniversityCreateNestedOneWithoutToUniversityInput
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUncheckedCreateInput = {
    id?: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUpdateInput = {
    student?: LibraryStudentUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    fromUniversity?: LibraryUniversityUpdateOneRequiredWithoutFromUniversityNestedInput
    toUniversity?: LibraryUniversityUpdateOneRequiredWithoutToUniversityNestedInput
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestCreateManyInput = {
    id?: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingCreateInput = {
    stident: LibraryStudentCreateNestedOneWithoutLibraryStudentBorrowingInput
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryStudentBorrowingInput
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversity: LibraryUniversityCreateNestedOneWithoutLibraryStudentBorrowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUncheckedCreateInput = {
    id?: number
    studentId: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUpdateInput = {
    stident?: LibraryStudentUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversity?: LibraryUniversityUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversityId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingCreateManyInput = {
    id?: number
    studentId: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUpdateManyMutationInput = {
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversityId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserCreateInput = {
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedCreateNestedManyWithoutUserInput
    MeetingUserAvailable?: MeetingUserAvailableCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserUncheckedCreateInput = {
    id?: number
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedCreateNestedManyWithoutUserInput
    MeetingUserAvailable?: MeetingUserAvailableUncheckedCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUpdateManyWithoutUserNestedInput
    MeetingUserAvailable?: MeetingUserAvailableUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedUpdateManyWithoutUserNestedInput
    MeetingUserAvailable?: MeetingUserAvailableUncheckedUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingUserCreateManyInput = {
    id?: number
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserBookedCreateInput = {
    user: MeetingUserCreateNestedOneWithoutMeetingUserBookedInput
    meetingRoom: MeetingRoomCreateNestedOneWithoutMeetingUserBookedInput
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedUncheckedCreateInput = {
    id?: number
    userId: number
    meetingRoomId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersUncheckedCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedUpdateInput = {
    user?: MeetingUserUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingRoom?: MeetingRoomUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUpdateManyWithoutBookingNestedInput
  }

  export type MeetingUserBookedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type MeetingUserBookedCreateManyInput = {
    id?: number
    userId: number
    meetingRoomId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserBookedUpdateManyMutationInput = {
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserBookedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersCreateInput = {
    booking: MeetingUserBookedCreateNestedOneWithoutMeetingMembersInput
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersUncheckedCreateInput = {
    id?: number
    bookedId: number
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersUpdateInput = {
    booking?: MeetingUserBookedUpdateOneRequiredWithoutMeetingMembersNestedInput
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookedId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersCreateManyInput = {
    id?: number
    bookedId: number
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookedId?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableCreateInput = {
    user: MeetingUserCreateNestedOneWithoutMeetingUserAvailableInput
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableUncheckedCreateInput = {
    id?: number
    userId: number
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableUpdateInput = {
    user?: MeetingUserUpdateOneRequiredWithoutMeetingUserAvailableNestedInput
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableCreateManyInput = {
    id?: number
    userId: number
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableUpdateManyMutationInput = {
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomCreateInput = {
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedCreateNestedManyWithoutMeetingRoomInput
    MeetingRoomBooked?: MeetingRoomBookedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomUncheckedCreateInput = {
    id?: number
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedCreateNestedManyWithoutMeetingRoomInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUpdateManyWithoutMeetingRoomNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingRoomCreateManyInput = {
    id?: number
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedCreateInput = {
    meetingRoom: MeetingRoomCreateNestedOneWithoutMeetingRoomBookedInput
    byUserId: MeetingUserCreateNestedOneWithoutMeetingRoomBookedInput
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedUncheckedCreateInput = {
    id?: number
    meetingRoomId: number
    userId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedUpdateInput = {
    meetingRoom?: MeetingRoomUpdateOneRequiredWithoutMeetingRoomBookedNestedInput
    byUserId?: MeetingUserUpdateOneRequiredWithoutMeetingRoomBookedNestedInput
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedCreateManyInput = {
    id?: number
    meetingRoomId: number
    userId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedUpdateManyMutationInput = {
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListCreateInput = {
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUncheckedCreateInput = {
    id?: number
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUpdateInput = {
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListCreateManyInput = {
    id?: number
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUpdateManyMutationInput = {
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaCategoryCreateInput = {
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaQuiz?: TriviaQuizCreateNestedManyWithoutCategoryInput
    triviaRound?: TriviaRoundCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUncheckedCreateInput = {
    id?: number
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaQuiz?: TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput
    triviaRound?: TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUpdateInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaQuiz?: TriviaQuizUpdateManyWithoutCategoryNestedInput
    triviaRound?: TriviaRoundUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaQuiz?: TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput
    triviaRound?: TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryCreateManyInput = {
    id?: number
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaCategoryUpdateManyMutationInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizCreateInput = {
    quizName: string
    category: TriviaCategoryCreateNestedOneWithoutTriviaQuizInput
    answer: TriviaChoiceCreateNestedOneWithoutTriviaQuizAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateInput = {
    id?: number
    quizName: string
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUpdateInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaQuizNestedInput
    answer?: TriviaChoiceUpdateOneRequiredWithoutTriviaQuizAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizCreateManyInput = {
    id?: number
    quizName: string
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaQuizUpdateManyMutationInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceCreateInput = {
    choiceName: string
    quiz?: TriviaQuizCreateNestedOneWithoutTriviaChoiceInput
    triviaQuizAnswer?: TriviaQuizCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceUncheckedCreateInput = {
    id?: number
    choiceName: string
    quizId?: number | null
    triviaQuizAnswer?: TriviaQuizUncheckedCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceUpdateInput = {
    choiceName?: StringFieldUpdateOperationsInput | string
    quiz?: TriviaQuizUpdateOneWithoutTriviaChoiceNestedInput
    triviaQuizAnswer?: TriviaQuizUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    triviaQuizAnswer?: TriviaQuizUncheckedUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaChoiceCreateManyInput = {
    id?: number
    choiceName: string
    quizId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceUpdateManyMutationInput = {
    choiceName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundCreateInput = {
    name?: string | null
    score: number
    category: TriviaCategoryCreateNestedOneWithoutTriviaRoundInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUncheckedCreateInput = {
    id?: number
    name?: string | null
    score: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaRoundNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundCreateManyInput = {
    id?: number
    name?: string | null
    score: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateInput = {
    round: TriviaRoundCreateNestedOneWithoutTriviaRoundQuizInput
    quiz: TriviaQuizCreateNestedOneWithoutTriviaRoundQuizInput
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizUncheckedCreateInput = {
    id?: number
    roundId: number
    quizId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizUpdateInput = {
    round?: TriviaRoundUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    quiz?: TriviaQuizUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizCreateManyInput = {
    id?: number
    roundId: number
    quizId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateManyMutationInput = {
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceCreateInput = {
    roundQuiz: TriviaRoundQuizCreateNestedOneWithoutTriviaRoundQuizChoiceInput
    roundQuizChoice: TriviaChoiceCreateNestedOneWithoutTriviaRoundQuizChoiceInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedCreateInput = {
    id?: number
    roundQuizId: number
    quizChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUpdateInput = {
    roundQuiz?: TriviaRoundQuizUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput
    roundQuizChoice?: TriviaChoiceUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundQuizId?: IntFieldUpdateOperationsInput | number
    quizChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceCreateManyInput = {
    id?: number
    roundQuizId: number
    quizChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundQuizId?: IntFieldUpdateOperationsInput | number
    quizChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    post?: PostCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingCreateInput = {
    from: UserCreateNestedOneWithoutFromFolowingInput
    to: UserCreateNestedOneWithoutToFollowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUpdateInput = {
    from?: UserUpdateOneRequiredWithoutFromFolowingNestedInput
    to?: UserUpdateOneRequiredWithoutToFollowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingCreateManyInput = {
    id?: number
    fromUserId: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    user: UserCreateNestedOneWithoutPostInput
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutPostInput
    postOnHashtag?: PostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: number
    userId: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutPostInput
    postOnHashtag?: PostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutPostNestedInput
    postOnHashtag?: PostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutPostNestedInput
    postOnHashtag?: PostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: number
    userId: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostUpdateManyMutationInput = {
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgCreateInput = {
    from: UserCreateNestedOneWithoutFromDirectMessageInput
    to: UserCreateNestedOneWithoutToDirectMessageInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgUpdateInput = {
    from?: UserUpdateOneRequiredWithoutFromDirectMessageNestedInput
    to?: UserUpdateOneRequiredWithoutToDirectMessageNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgCreateManyInput = {
    id?: number
    fromUserId: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgUpdateManyMutationInput = {
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HashtagCreateInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postOnHashtag?: PostOnHashtagCreateNestedManyWithoutHashtagInput
  }

  export type HashtagUncheckedCreateInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postOnHashtag?: PostOnHashtagUncheckedCreateNestedManyWithoutHashtagInput
  }

  export type HashtagUpdateInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postOnHashtag?: PostOnHashtagUpdateManyWithoutHashtagNestedInput
  }

  export type HashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postOnHashtag?: PostOnHashtagUncheckedUpdateManyWithoutHashtagNestedInput
  }

  export type HashtagCreateManyInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HashtagUpdateManyMutationInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateInput = {
    post: PostCreateNestedOneWithoutReplyInput
    reply: string
    replyUser: UserCreateNestedOneWithoutReplyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUncheckedCreateInput = {
    id?: number
    postId: number
    reply: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUpdateInput = {
    post?: PostUpdateOneRequiredWithoutReplyNestedInput
    reply?: StringFieldUpdateOperationsInput | string
    replyUser?: UserUpdateOneRequiredWithoutReplyNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    reply?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateManyInput = {
    id?: number
    postId: number
    reply: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUpdateManyMutationInput = {
    reply?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    reply?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagCreateInput = {
    post: PostCreateNestedOneWithoutPostOnHashtagInput
    hashtag: HashtagCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUncheckedCreateInput = {
    id?: number
    postId: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUpdateInput = {
    post?: PostUpdateOneRequiredWithoutPostOnHashtagNestedInput
    hashtag?: HashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagCreateManyInput = {
    id?: number
    postId: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingBranchCreateInput = {
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachine?: WashingMachineCreateNestedManyWithoutBranchInput
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtBranchInput
  }

  export type WashingBranchUncheckedCreateInput = {
    id?: number
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachine?: WashingMachineUncheckedCreateNestedManyWithoutBranchInput
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtBranchInput
  }

  export type WashingBranchUpdateInput = {
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachine?: WashingMachineUpdateManyWithoutBranchNestedInput
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtBranchNestedInput
  }

  export type WashingBranchUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachine?: WashingMachineUncheckedUpdateManyWithoutBranchNestedInput
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtBranchNestedInput
  }

  export type WashingBranchCreateManyInput = {
    id?: number
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingBranchUpdateManyMutationInput = {
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingBranchUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineCreateInput = {
    branch: WashingBranchCreateNestedOneWithoutWashingMachineInput
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineUncheckedCreateInput = {
    id?: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineUpdateInput = {
    branch?: WashingBranchUpdateOneRequiredWithoutWashingMachineNestedInput
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineCreateManyInput = {
    id?: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineUpdateManyMutationInput = {
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceCreateInput = {
    machine: WashingMachineCreateNestedOneWithoutWashingMachineMaintenanceInput
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceUncheckedCreateInput = {
    id?: number
    machineId: number
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceUpdateInput = {
    machine?: WashingMachineUpdateOneRequiredWithoutWashingMachineMaintenanceNestedInput
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceCreateManyInput = {
    id?: number
    machineId: number
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceUpdateManyMutationInput = {
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineProgramCreateInput = {
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseProgramInput
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutProgramInput
  }

  export type WashingMachineProgramUncheckedCreateInput = {
    id?: number
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseProgramInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutProgramInput
  }

  export type WashingMachineProgramUpdateInput = {
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseProgramNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutProgramNestedInput
  }

  export type WashingMachineProgramUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseProgramNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type WashingMachineProgramCreateManyInput = {
    id?: number
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineProgramUpdateManyMutationInput = {
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineProgramUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramCreateInput = {
    machine: WashingMachineCreateNestedOneWithoutWashingMachineOnProgramInput
    program: WashingMachineProgramCreateNestedOneWithoutWashingMachineOnProgramInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramUncheckedCreateInput = {
    id?: number
    machineId: number
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramUpdateInput = {
    machine?: WashingMachineUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput
    program?: WashingMachineProgramUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramCreateManyInput = {
    id?: number
    machineId: number
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUserCreateInput = {
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingTopUp?: WashingTopUpCreateNestedManyWithoutUserInput
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUserInput
  }

  export type WashingUserUncheckedCreateInput = {
    id?: number
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingTopUp?: WashingTopUpUncheckedCreateNestedManyWithoutUserInput
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type WashingUserUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingTopUp?: WashingTopUpUpdateManyWithoutUserNestedInput
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUserNestedInput
  }

  export type WashingUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingTopUp?: WashingTopUpUncheckedUpdateManyWithoutUserNestedInput
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WashingUserCreateManyInput = {
    id?: number
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUserUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpCreateInput = {
    user: WashingUserCreateNestedOneWithoutWashingTopUpInput
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpUncheckedCreateInput = {
    id?: number
    userId: number
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpUpdateInput = {
    user?: WashingUserUpdateOneRequiredWithoutWashingTopUpNestedInput
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpCreateManyInput = {
    id?: number
    userId: number
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpUpdateManyMutationInput = {
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryCreateInput = {
    user: WashingUserCreateNestedOneWithoutWashingUseHistoryInput
    useAtBranch: WashingBranchCreateNestedOneWithoutWashingUseHistoryInput
    useAtMachine: WashingMachineCreateNestedOneWithoutWashingUseHistoryInput
    useProgram: WashingMachineProgramCreateNestedOneWithoutWashingUseHistoryInput
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUncheckedCreateInput = {
    id?: number
    userId: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUpdateInput = {
    user?: WashingUserUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtBranch?: WashingBranchUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtMachine?: WashingMachineUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useProgram?: WashingMachineProgramUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryCreateManyInput = {
    id?: number
    userId: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUpdateManyMutationInput = {
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTUserCreateInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUncheckedCreateInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUpdateInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserCreateManyInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTUserUpdateManyMutationInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTChanelCreateInput = {
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUncheckedCreateInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoUncheckedCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUpdateInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUncheckedUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelCreateManyInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTChanelUpdateManyMutationInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTChanelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserCreateInput = {
    user: YTUserCreateNestedOneWithoutChanelOnUserInput
    chanel: YTChanelCreateNestedOneWithoutChanelOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUncheckedCreateInput = {
    id?: number
    userId: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUpdateInput = {
    user?: YTUserUpdateOneRequiredWithoutChanelOnUserNestedInput
    chanel?: YTChanelUpdateOneRequiredWithoutChanelOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserCreateManyInput = {
    id?: number
    userId: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminCreateInput = {
    chanel: YTChanelCreateNestedOneWithoutYTAdminInput
    adminUser: YTUserCreateNestedOneWithoutYTAdminInput
    role: YTRoleCreateNestedOneWithoutYTAdminInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUncheckedCreateInput = {
    id?: number
    chanelId: number
    adminUserId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUpdateInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTAdminNestedInput
    adminUser?: YTUserUpdateOneRequiredWithoutYTAdminNestedInput
    role?: YTRoleUpdateOneRequiredWithoutYTAdminNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    adminUserId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminCreateManyInput = {
    id?: number
    chanelId: number
    adminUserId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    adminUserId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRoleCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminCreateNestedManyWithoutRoleInput
    YTRolePermission?: YTRolePermissionCreateNestedManyWithoutRoldidInput
  }

  export type YTRoleUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutRoleInput
    YTRolePermission?: YTRolePermissionUncheckedCreateNestedManyWithoutRoldidInput
  }

  export type YTRoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUpdateManyWithoutRoleNestedInput
    YTRolePermission?: YTRolePermissionUpdateManyWithoutRoldidNestedInput
  }

  export type YTRoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutRoleNestedInput
    YTRolePermission?: YTRolePermissionUncheckedUpdateManyWithoutRoldidNestedInput
  }

  export type YTRoleCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionCreateInput = {
    roldid: YTRoleCreateNestedOneWithoutYTRolePermissionInput
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionUncheckedCreateInput = {
    id?: number
    roleId: number
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionUpdateInput = {
    roldid?: YTRoleUpdateOneRequiredWithoutYTRolePermissionNestedInput
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionCreateManyInput = {
    id?: number
    roleId: number
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionUpdateManyMutationInput = {
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeCreateInput = {
    chanel: YTChanelCreateNestedOneWithoutYTSubscribeInput
    subscribeUser: YTUserCreateNestedOneWithoutYTSubscribeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeUncheckedCreateInput = {
    id?: number
    chanelId: number
    subscribeUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeUpdateInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTSubscribeNestedInput
    subscribeUser?: YTUserUpdateOneRequiredWithoutYTSubscribeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    subscribeUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeCreateManyInput = {
    id?: number
    chanelId: number
    subscribeUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    subscribeUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTVideoCreateInput = {
    chanel: YTChanelCreateNestedOneWithoutYTVideoInput
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTComment?: YTCommentCreateNestedManyWithoutVideoInput
  }

  export type YTVideoUncheckedCreateInput = {
    id?: number
    chanelId: number
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutVideoInput
  }

  export type YTVideoUpdateInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTVideoNestedInput
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTComment?: YTCommentUpdateManyWithoutVideoNestedInput
  }

  export type YTVideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTComment?: YTCommentUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type YTVideoCreateManyInput = {
    id?: number
    chanelId: number
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTVideoUpdateManyMutationInput = {
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTVideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTCommentCreateInput = {
    video: YTVideoCreateNestedOneWithoutYTCommentInput
    commentDetail: string
    commentFromUser: YTUserCreateNestedOneWithoutYTCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentCreateNestedManyWithoutCommentInput
  }

  export type YTCommentUncheckedCreateInput = {
    id?: number
    videoId: number
    commentDetail: string
    commentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YTCommentUpdateInput = {
    video?: YTVideoUpdateOneRequiredWithoutYTCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUser?: YTUserUpdateOneRequiredWithoutYTCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUpdateManyWithoutCommentNestedInput
  }

  export type YTCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YTCommentCreateManyInput = {
    id?: number
    videoId: number
    commentDetail: string
    commentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTCommentUpdateManyMutationInput = {
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentCreateInput = {
    comment: YTCommentCreateNestedOneWithoutYTSubCommentInput
    subCommentDetail: string
    subCommentFromUser: YTUserCreateNestedOneWithoutYTSubCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUncheckedCreateInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    subCommentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUpdateInput = {
    comment?: YTCommentUpdateOneRequiredWithoutYTSubCommentNestedInput
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    subCommentFromUser?: YTUserUpdateOneRequiredWithoutYTSubCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    subCommentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentCreateManyInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    subCommentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUpdateManyMutationInput = {
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    subCommentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BinKitchenMenuListRelationFilter = {
    every?: BinKitchenMenuWhereInput
    some?: BinKitchenMenuWhereInput
    none?: BinKitchenMenuWhereInput
  }

  export type BinKitchenMenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BinKitchenCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BinKitchenCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BinKitchenCategoryRelationFilter = {
    is?: BinKitchenCategoryWhereInput | null
    isNot?: BinKitchenCategoryWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BinKitchenOrderItemListRelationFilter = {
    every?: BinKitchenOrderItemWhereInput
    some?: BinKitchenOrderItemWhereInput
    none?: BinKitchenOrderItemWhereInput
  }

  export type BinKitchenOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BinKitchenMenuCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type BinKitchenMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BinKitchenOrderCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
  }

  export type BinKitchenOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderSumOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
  }

  export type BinKitchenMenuRelationFilter = {
    is?: BinKitchenMenuWhereInput
    isNot?: BinKitchenMenuWhereInput
  }

  export type BinKitchenOrderRelationFilter = {
    is?: BinKitchenOrderWhereInput | null
    isNot?: BinKitchenOrderWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BinKitchenOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type BinKitchenOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type FriendsListRelationFilter = {
    every?: FriendsWhereInput
    some?: FriendsWhereInput
    none?: FriendsWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type SubCommentListRelationFilter = {
    every?: SubCommentWhereInput
    some?: SubCommentWhereInput
    none?: SubCommentWhereInput
  }

  export type GroupOnUserListRelationFilter = {
    every?: GroupOnUserWhereInput
    some?: GroupOnUserWhereInput
    none?: GroupOnUserWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type ShareListRelationFilter = {
    every?: ShareWhereInput
    some?: ShareWhereInput
    none?: ShareWhereInput
  }

  export type FBDirectMsgListRelationFilter = {
    every?: FBDirectMsgWhereInput
    some?: FBDirectMsgWhereInput
    none?: FBDirectMsgWhereInput
  }

  export type FBPostListRelationFilter = {
    every?: FBPostWhereInput
    some?: FBPostWhereInput
    none?: FBPostWhereInput
  }

  export type FriendsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupOnUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FBDirectMsgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FBPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FBUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FBUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FBUserRelationFilter = {
    is?: FBUserWhereInput | null
    isNot?: FBUserWhereInput | null
  }

  export type FriendsFromUserIdToUserIdCompoundUniqueInput = {
    fromUserId: number
    toUserId: number
  }

  export type FriendsCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendsAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type FriendsMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendsMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FriendsSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type FBPostOnHashtagListRelationFilter = {
    every?: FBPostOnHashtagWhereInput
    some?: FBPostOnHashtagWhereInput
    none?: FBPostOnHashtagWhereInput
  }

  export type FBPostOnHashtagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FBPostCountOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    postDetail?: SortOrder
    image?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostAvgOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    groupId?: SortOrder
  }

  export type FBPostMaxOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    postDetail?: SortOrder
    image?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostMinOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    postDetail?: SortOrder
    image?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostSumOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
    postInUserId?: SortOrder
    groupId?: SortOrder
  }

  export type FBPostRelationFilter = {
    is?: FBPostWhereInput
    isNot?: FBPostWhereInput
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    commentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    commentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    commentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type SubCommentCountOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
  }

  export type SubCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubCommentMinOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    userId?: SortOrder
  }

  export type LikeTypeRelationFilter = {
    is?: LikeTypeWhereInput
    isNot?: LikeTypeWhereInput
  }

  export type LikeCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type LikeMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type ShareStatusRelationFilter = {
    is?: ShareStatusWhereInput
    isNot?: ShareStatusWhereInput
  }

  export type ShareCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
  }

  export type ShareMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
    shareStatusId?: SortOrder
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupOnUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOnUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type GroupOnUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOnUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOnUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    groupId?: SortOrder
  }

  export type LikeTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LikeTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShareStatusCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareStatusAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShareStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareStatusMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareStatusSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FBDirectMsgCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBDirectMsgAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type FBDirectMsgMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBDirectMsgMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBDirectMsgSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type FBHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBHashtagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FBHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBHashtagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FBHashtagRelationFilter = {
    is?: FBHashtagWhereInput
    isNot?: FBHashtagWhereInput
  }

  export type FBPostOnHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostOnHashtagAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
  }

  export type FBPostOnHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostOnHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FBPostOnHashtagSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
  }

  export type LibraryBookListRelationFilter = {
    every?: LibraryBookWhereInput
    some?: LibraryBookWhereInput
    none?: LibraryBookWhereInput
  }

  export type LibraryBookCopyListRelationFilter = {
    every?: LibraryBookCopyWhereInput
    some?: LibraryBookCopyWhereInput
    none?: LibraryBookCopyWhereInput
  }

  export type LibraryStudentRequestListRelationFilter = {
    every?: LibraryStudentRequestWhereInput
    some?: LibraryStudentRequestWhereInput
    none?: LibraryStudentRequestWhereInput
  }

  export type LibraryStudentBorrowingListRelationFilter = {
    every?: LibraryStudentBorrowingWhereInput
    some?: LibraryStudentBorrowingWhereInput
    none?: LibraryStudentBorrowingWhereInput
  }

  export type LibraryBookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryBookCopyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryStudentRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryStudentBorrowingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryUniversityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryUniversityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryUniversityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryUniversityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryUniversitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryHistoryOfBookCopyListRelationFilter = {
    every?: LibraryHistoryOfBookCopyWhereInput
    some?: LibraryHistoryOfBookCopyWhereInput
    none?: LibraryHistoryOfBookCopyWhereInput
  }

  export type LibraryHistoryOfBookCopyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryStudentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryStudentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryUniversityRelationFilter = {
    is?: LibraryUniversityWhereInput | null
    isNot?: LibraryUniversityWhereInput | null
  }

  export type BookOnAuthorListRelationFilter = {
    every?: BookOnAuthorWhereInput
    some?: BookOnAuthorWhereInput
    none?: BookOnAuthorWhereInput
  }

  export type BookOnCategoryListRelationFilter = {
    every?: BookOnCategoryWhereInput
    some?: BookOnCategoryWhereInput
    none?: BookOnCategoryWhereInput
  }

  export type BookOnAuthorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookOnCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LibraryBookCountOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookAvgOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
  }

  export type LibraryBookMaxOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookMinOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
    name?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookSumOrderByAggregateInput = {
    id?: SortOrder
    universityId?: SortOrder
  }

  export type LibraryBookRelationFilter = {
    is?: LibraryBookWhereInput
    isNot?: LibraryBookWhereInput
  }

  export type LibraryStudentRelationFilter = {
    is?: LibraryStudentWhereInput | null
    isNot?: LibraryStudentWhereInput | null
  }

  export type LibraryBookCopyCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
    status?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookCopyAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
  }

  export type LibraryBookCopyMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
    status?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookCopyMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
    status?: SortOrder
    isbn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryBookCopySumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    atUniversityId?: SortOrder
    currentBorrowBytudentId?: SortOrder
  }

  export type LibraryBookCopyRelationFilter = {
    is?: LibraryBookCopyWhereInput
    isNot?: LibraryBookCopyWhereInput
  }

  export type LibraryHistoryOfBookCopyCountOrderByAggregateInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryHistoryOfBookCopyAvgOrderByAggregateInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
  }

  export type LibraryHistoryOfBookCopyMaxOrderByAggregateInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryHistoryOfBookCopyMinOrderByAggregateInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryHistoryOfBookCopySumOrderByAggregateInput = {
    id?: SortOrder
    copyId?: SortOrder
    oncetBorrowBytudentId?: SortOrder
  }

  export type LibraryCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryAuthorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryAuthorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryAuthorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryAuthorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryAuthorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LibraryAuthorRelationFilter = {
    is?: LibraryAuthorWhereInput
    isNot?: LibraryAuthorWhereInput
  }

  export type BookOnAuthorCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnAuthorAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type BookOnAuthorMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnAuthorMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnAuthorSumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    authorId?: SortOrder
  }

  export type LibraryCategoryRelationFilter = {
    is?: LibraryCategoryWhereInput
    isNot?: LibraryCategoryWhereInput
  }

  export type BookOnCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
  }

  export type BookOnCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BookOnCategorySumOrderByAggregateInput = {
    id?: SortOrder
    bookId?: SortOrder
    categoryId?: SortOrder
  }

  export type LibraryStudentRequestCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
  }

  export type LibraryStudentRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentRequestMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentRequestSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    fromUniversityId?: SortOrder
    toUniversityId?: SortOrder
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type LibraryStudentBorrowingCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowingDate?: SortOrder
    targetReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    borrowFromUniversityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentBorrowingAvgOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowFromUniversityId?: SortOrder
  }

  export type LibraryStudentBorrowingMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowingDate?: SortOrder
    targetReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    borrowFromUniversityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentBorrowingMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowingDate?: SortOrder
    targetReturnDate?: SortOrder
    actualReturnDate?: SortOrder
    borrowFromUniversityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LibraryStudentBorrowingSumOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    bookCopyId?: SortOrder
    borrowFromUniversityId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type MeetingUserBookedListRelationFilter = {
    every?: MeetingUserBookedWhereInput
    some?: MeetingUserBookedWhereInput
    none?: MeetingUserBookedWhereInput
  }

  export type MeetingUserAvailableListRelationFilter = {
    every?: MeetingUserAvailableWhereInput
    some?: MeetingUserAvailableWhereInput
    none?: MeetingUserAvailableWhereInput
  }

  export type MeetingRoomBookedListRelationFilter = {
    every?: MeetingRoomBookedWhereInput
    some?: MeetingRoomBookedWhereInput
    none?: MeetingRoomBookedWhereInput
  }

  export type MeetingUserBookedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingUserAvailableOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingRoomBookedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingUserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    postion?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MeetingUserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    postion?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    postion?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MeetingUserRelationFilter = {
    is?: MeetingUserWhereInput
    isNot?: MeetingUserWhereInput
  }

  export type MeetingRoomRelationFilter = {
    is?: MeetingRoomWhereInput
    isNot?: MeetingRoomWhereInput
  }

  export type MeetingMembersListRelationFilter = {
    every?: MeetingMembersWhereInput
    some?: MeetingMembersWhereInput
    none?: MeetingMembersWhereInput
  }

  export type MeetingMembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetingUserBookedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
    meetingDetail?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    nameOfBooker?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserBookedAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
  }

  export type MeetingUserBookedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
    meetingDetail?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    nameOfBooker?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserBookedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
    meetingDetail?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    nameOfBooker?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserBookedSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    meetingRoomId?: SortOrder
  }

  export type MeetingUserBookedRelationFilter = {
    is?: MeetingUserBookedWhereInput
    isNot?: MeetingUserBookedWhereInput
  }

  export type MeetingMembersCountOrderByAggregateInput = {
    id?: SortOrder
    bookedId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingMembersAvgOrderByAggregateInput = {
    id?: SortOrder
    bookedId?: SortOrder
  }

  export type MeetingMembersMaxOrderByAggregateInput = {
    id?: SortOrder
    bookedId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingMembersMinOrderByAggregateInput = {
    id?: SortOrder
    bookedId?: SortOrder
    name?: SortOrder
    email?: SortOrder
    tel?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingMembersSumOrderByAggregateInput = {
    id?: SortOrder
    bookedId?: SortOrder
  }

  export type MeetingUserAvailableCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableStart?: SortOrder
    availableEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserAvailableAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MeetingUserAvailableMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableStart?: SortOrder
    availableEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserAvailableMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    availableStart?: SortOrder
    availableEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingUserAvailableSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MeetingRoomCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    floor?: SortOrder
    building?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    floor?: SortOrder
  }

  export type MeetingRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    floor?: SortOrder
    building?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    floor?: SortOrder
    building?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomSumOrderByAggregateInput = {
    id?: SortOrder
    floor?: SortOrder
  }

  export type MeetingRoomBookedCountOrderByAggregateInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomBookedAvgOrderByAggregateInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
  }

  export type MeetingRoomBookedMaxOrderByAggregateInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomBookedMinOrderByAggregateInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
    bookingStart?: SortOrder
    bookingEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetingRoomBookedSumOrderByAggregateInput = {
    id?: SortOrder
    meetingRoomId?: SortOrder
    userId?: SortOrder
  }

  export type TodoListCountOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TodoListMaxOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListMinOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaQuizListRelationFilter = {
    every?: TriviaQuizWhereInput
    some?: TriviaQuizWhereInput
    none?: TriviaQuizWhereInput
  }

  export type TriviaRoundListRelationFilter = {
    every?: TriviaRoundWhereInput
    some?: TriviaRoundWhereInput
    none?: TriviaRoundWhereInput
  }

  export type TriviaQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaCategoryRelationFilter = {
    is?: TriviaCategoryWhereInput
    isNot?: TriviaCategoryWhereInput
  }

  export type TriviaChoiceRelationFilter = {
    is?: TriviaChoiceWhereInput
    isNot?: TriviaChoiceWhereInput
  }

  export type TriviaRoundQuizListRelationFilter = {
    every?: TriviaRoundQuizWhereInput
    some?: TriviaRoundQuizWhereInput
    none?: TriviaRoundQuizWhereInput
  }

  export type TriviaChoiceListRelationFilter = {
    every?: TriviaChoiceWhereInput
    some?: TriviaChoiceWhereInput
    none?: TriviaChoiceWhereInput
  }

  export type TriviaRoundQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaQuizCountOrderByAggregateInput = {
    id?: SortOrder
    quizName?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
  }

  export type TriviaQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    quizName?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaQuizMinOrderByAggregateInput = {
    id?: SortOrder
    quizName?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaQuizSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    triviaAnswerChoiceId?: SortOrder
  }

  export type TriviaQuizRelationFilter = {
    is?: TriviaQuizWhereInput
    isNot?: TriviaQuizWhereInput
  }

  export type TriviaRoundQuizChoiceListRelationFilter = {
    every?: TriviaRoundQuizChoiceWhereInput
    some?: TriviaRoundQuizChoiceWhereInput
    none?: TriviaRoundQuizChoiceWhereInput
  }

  export type TriviaRoundQuizChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    choiceName?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type TriviaChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    choiceName?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    choiceName?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type TriviaRoundCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundAvgOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
  }

  export type TriviaRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundSumOrderByAggregateInput = {
    id?: SortOrder
    score?: SortOrder
    categoryId?: SortOrder
  }

  export type TriviaRoundRelationFilter = {
    is?: TriviaRoundWhereInput
    isNot?: TriviaRoundWhereInput
  }

  export type TriviaRoundQuizCountOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
  }

  export type TriviaRoundQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizMinOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizSumOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    playerChooseChoice?: SortOrder
  }

  export type TriviaRoundQuizRelationFilter = {
    is?: TriviaRoundQuizWhereInput
    isNot?: TriviaRoundQuizWhereInput
  }

  export type TriviaRoundQuizChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizChoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
  }

  export type TriviaRoundQuizChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizChoiceSumOrderByAggregateInput = {
    id?: SortOrder
    roundQuizId?: SortOrder
    quizChoiceId?: SortOrder
  }

  export type FollowingListRelationFilter = {
    every?: FollowingWhereInput
    some?: FollowingWhereInput
    none?: FollowingWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type DirectMsgListRelationFilter = {
    every?: DirectMsgWhereInput
    some?: DirectMsgWhereInput
    none?: DirectMsgWhereInput
  }

  export type ReplyListRelationFilter = {
    every?: ReplyWhereInput
    some?: ReplyWhereInput
    none?: ReplyWhereInput
  }

  export type FollowingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DirectMsgOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    profileImage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FollowingFromUserIdToUserIdCompoundUniqueInput = {
    fromUserId: number
    toUserId: number
  }

  export type FollowingCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FollowingAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type FollowingMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FollowingMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FollowingSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type PostOnHashtagListRelationFilter = {
    every?: PostOnHashtagWhereInput
    some?: PostOnHashtagWhereInput
    none?: PostOnHashtagWhereInput
  }

  export type PostOnHashtagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DirectMsgCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMsgAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type DirectMsgMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMsgMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
    msgDetail?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DirectMsgSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toUserId?: SortOrder
  }

  export type HashtagCountOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HashtagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type HashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HashtagMinOrderByAggregateInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HashtagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type ReplyCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reply?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type ReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reply?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplyMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    reply?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ReplySumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    userId?: SortOrder
  }

  export type HashtagRelationFilter = {
    is?: HashtagWhereInput
    isNot?: HashtagWhereInput
  }

  export type PostOnHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostOnHashtagAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
  }

  export type PostOnHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostOnHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PostOnHashtagSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    hashtagId?: SortOrder
  }

  export type WashingMachineListRelationFilter = {
    every?: WashingMachineWhereInput
    some?: WashingMachineWhereInput
    none?: WashingMachineWhereInput
  }

  export type WashingUseHistoryListRelationFilter = {
    every?: WashingUseHistoryWhereInput
    some?: WashingUseHistoryWhereInput
    none?: WashingUseHistoryWhereInput
  }

  export type WashingMachineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WashingUseHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WashingBranchCountOrderByAggregateInput = {
    id?: SortOrder
    branchName?: SortOrder
    address?: SortOrder
    tel?: SortOrder
    area?: SortOrder
    ownerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingBranchAvgOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
  }

  export type WashingBranchMaxOrderByAggregateInput = {
    id?: SortOrder
    branchName?: SortOrder
    address?: SortOrder
    tel?: SortOrder
    area?: SortOrder
    ownerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingBranchMinOrderByAggregateInput = {
    id?: SortOrder
    branchName?: SortOrder
    address?: SortOrder
    tel?: SortOrder
    area?: SortOrder
    ownerName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingBranchSumOrderByAggregateInput = {
    id?: SortOrder
    area?: SortOrder
  }

  export type WashingBranchRelationFilter = {
    is?: WashingBranchWhereInput
    isNot?: WashingBranchWhereInput
  }

  export type WashingMachineMaintenanceListRelationFilter = {
    every?: WashingMachineMaintenanceWhereInput
    some?: WashingMachineMaintenanceWhereInput
    none?: WashingMachineMaintenanceWhereInput
  }

  export type WashingMachineOnProgramListRelationFilter = {
    every?: WashingMachineOnProgramWhereInput
    some?: WashingMachineOnProgramWhereInput
    none?: WashingMachineOnProgramWhereInput
  }

  export type WashingMachineMaintenanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WashingMachineOnProgramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WashingMachineCountOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    brand?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    productionYear?: SortOrder
    warrantyEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineAvgOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    weight?: SortOrder
  }

  export type WashingMachineMaxOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    brand?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    productionYear?: SortOrder
    warrantyEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineMinOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    brand?: SortOrder
    weight?: SortOrder
    type?: SortOrder
    productionYear?: SortOrder
    warrantyEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineSumOrderByAggregateInput = {
    id?: SortOrder
    branchId?: SortOrder
    weight?: SortOrder
  }

  export type WashingMachineRelationFilter = {
    is?: WashingMachineWhereInput
    isNot?: WashingMachineWhereInput
  }

  export type WashingMachineMaintenanceCountOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    symptom?: SortOrder
    failureLevel?: SortOrder
    mechanicName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineMaintenanceAvgOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    failureLevel?: SortOrder
  }

  export type WashingMachineMaintenanceMaxOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    symptom?: SortOrder
    failureLevel?: SortOrder
    mechanicName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineMaintenanceMinOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    symptom?: SortOrder
    failureLevel?: SortOrder
    mechanicName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineMaintenanceSumOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    failureLevel?: SortOrder
  }

  export type WashingMachineProgramCountOrderByAggregateInput = {
    id?: SortOrder
    programName?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineProgramAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
  }

  export type WashingMachineProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    programName?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineProgramMinOrderByAggregateInput = {
    id?: SortOrder
    programName?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineProgramSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    time?: SortOrder
    maxWeight?: SortOrder
  }

  export type WashingMachineProgramRelationFilter = {
    is?: WashingMachineProgramWhereInput
    isNot?: WashingMachineProgramWhereInput
  }

  export type WashingMachineOnProgramCountOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineOnProgramAvgOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
  }

  export type WashingMachineOnProgramMaxOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineOnProgramMinOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingMachineOnProgramSumOrderByAggregateInput = {
    id?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
  }

  export type WashingTopUpListRelationFilter = {
    every?: WashingTopUpWhereInput
    some?: WashingTopUpWhereInput
    none?: WashingTopUpWhereInput
  }

  export type WashingTopUpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WashingUserCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    tel?: SortOrder
    remainCoupon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUserAvgOrderByAggregateInput = {
    id?: SortOrder
    remainCoupon?: SortOrder
  }

  export type WashingUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    tel?: SortOrder
    remainCoupon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUserMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    tel?: SortOrder
    remainCoupon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUserSumOrderByAggregateInput = {
    id?: SortOrder
    remainCoupon?: SortOrder
  }

  export type WashingUserRelationFilter = {
    is?: WashingUserWhereInput
    isNot?: WashingUserWhereInput
  }

  export type WashingTopUpCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingTopUpAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
  }

  export type WashingTopUpMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingTopUpMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingTopUpSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    topUpAmount?: SortOrder
  }

  export type WashingUseHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUseHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
  }

  export type WashingUseHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUseHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WashingUseHistorySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    branchId?: SortOrder
    machineId?: SortOrder
    programId?: SortOrder
    price?: SortOrder
  }

  export type ChanelOnUserListRelationFilter = {
    every?: ChanelOnUserWhereInput
    some?: ChanelOnUserWhereInput
    none?: ChanelOnUserWhereInput
  }

  export type YTAdminListRelationFilter = {
    every?: YTAdminWhereInput
    some?: YTAdminWhereInput
    none?: YTAdminWhereInput
  }

  export type YTCommentListRelationFilter = {
    every?: YTCommentWhereInput
    some?: YTCommentWhereInput
    none?: YTCommentWhereInput
  }

  export type YTSubCommentListRelationFilter = {
    every?: YTSubCommentWhereInput
    some?: YTSubCommentWhereInput
    none?: YTSubCommentWhereInput
  }

  export type YTSubscribeListRelationFilter = {
    every?: YTSubscribeWhereInput
    some?: YTSubscribeWhereInput
    none?: YTSubscribeWhereInput
  }

  export type ChanelOnUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTSubCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTSubscribeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTUserCountOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTUserMinOrderByAggregateInput = {
    id?: SortOrder
    userName?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    bio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTVideoListRelationFilter = {
    every?: YTVideoWhereInput
    some?: YTVideoWhereInput
    none?: YTVideoWhereInput
  }

  export type YTVideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTChanelCountOrderByAggregateInput = {
    id?: SortOrder
    chaneName?: SortOrder
    image?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTChanelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTChanelMaxOrderByAggregateInput = {
    id?: SortOrder
    chaneName?: SortOrder
    image?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTChanelMinOrderByAggregateInput = {
    id?: SortOrder
    chaneName?: SortOrder
    image?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTChanelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTUserRelationFilter = {
    is?: YTUserWhereInput
    isNot?: YTUserWhereInput
  }

  export type YTChanelRelationFilter = {
    is?: YTChanelWhereInput
    isNot?: YTChanelWhereInput
  }

  export type ChanelOnUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChanelOnUserAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
  }

  export type ChanelOnUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChanelOnUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ChanelOnUserSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    chanelId?: SortOrder
  }

  export type YTRoleRelationFilter = {
    is?: YTRoleWhereInput
    isNot?: YTRoleWhereInput
  }

  export type YTAdminCountOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTAdminAvgOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
  }

  export type YTAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTAdminMinOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTAdminSumOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    adminUserId?: SortOrder
    roleId?: SortOrder
  }

  export type YTRolePermissionListRelationFilter = {
    every?: YTRolePermissionWhereInput
    some?: YTRolePermissionWhereInput
    none?: YTRolePermissionWhereInput
  }

  export type YTRolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YTRoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YTRolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRolePermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type YTRolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    permissionName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTRolePermissionSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type YTSubscribeCountOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubscribeAvgOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
  }

  export type YTSubscribeMaxOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubscribeMinOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubscribeSumOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    subscribeUserId?: SortOrder
  }

  export type YTVideoCountOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    videoLink?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTVideoAvgOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
  }

  export type YTVideoMaxOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    videoLink?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTVideoMinOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    videoLink?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTVideoSumOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
  }

  export type YTVideoRelationFilter = {
    is?: YTVideoWhereInput
    isNot?: YTVideoWhereInput
  }

  export type YTCommentCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentDetail?: SortOrder
    commentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentFromUserId?: SortOrder
  }

  export type YTCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentDetail?: SortOrder
    commentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTCommentMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentDetail?: SortOrder
    commentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTCommentSumOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    commentFromUserId?: SortOrder
  }

  export type YTCommentRelationFilter = {
    is?: YTCommentWhereInput
    isNot?: YTCommentWhereInput
  }

  export type YTSubCommentCountOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    subCommentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentFromUserId?: SortOrder
  }

  export type YTSubCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    subCommentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubCommentMinOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentDetail?: SortOrder
    subCommentFromUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YTSubCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    subCommentFromUserId?: SortOrder
  }

  export type BinKitchenMenuCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
  }

  export type BinKitchenMenuUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BinKitchenMenuUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    set?: Enumerable<BinKitchenMenuWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    delete?: Enumerable<BinKitchenMenuWhereUniqueInput>
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    update?: Enumerable<BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BinKitchenMenuScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BinKitchenMenuUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    set?: Enumerable<BinKitchenMenuWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    delete?: Enumerable<BinKitchenMenuWhereUniqueInput>
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    update?: Enumerable<BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BinKitchenMenuScalarWhereInput>
  }

  export type BinKitchenCategoryCreateNestedOneWithoutBinKitchenMenuInput = {
    create?: XOR<BinKitchenCategoryCreateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedCreateWithoutBinKitchenMenuInput>
    connectOrCreate?: BinKitchenCategoryCreateOrConnectWithoutBinKitchenMenuInput
    connect?: BinKitchenCategoryWhereUniqueInput
  }

  export type BinKitchenOrderItemCreateNestedManyWithoutMenuInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BinKitchenCategoryUpdateOneWithoutBinKitchenMenuNestedInput = {
    create?: XOR<BinKitchenCategoryCreateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedCreateWithoutBinKitchenMenuInput>
    connectOrCreate?: BinKitchenCategoryCreateOrConnectWithoutBinKitchenMenuInput
    upsert?: BinKitchenCategoryUpsertWithoutBinKitchenMenuInput
    disconnect?: boolean
    delete?: boolean
    connect?: BinKitchenCategoryWhereUniqueInput
    update?: XOR<BinKitchenCategoryUpdateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedUpdateWithoutBinKitchenMenuInput>
  }

  export type BinKitchenOrderItemUpdateManyWithoutMenuNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenOrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenMenuCreateNestedOneWithoutBinKitchenOrderItemInput = {
    create?: XOR<BinKitchenMenuCreateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedCreateWithoutBinKitchenOrderItemInput>
    connectOrCreate?: BinKitchenMenuCreateOrConnectWithoutBinKitchenOrderItemInput
    connect?: BinKitchenMenuWhereUniqueInput
  }

  export type BinKitchenOrderCreateNestedOneWithoutBinKitchenOrderItemInput = {
    create?: XOR<BinKitchenOrderCreateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedCreateWithoutBinKitchenOrderItemInput>
    connectOrCreate?: BinKitchenOrderCreateOrConnectWithoutBinKitchenOrderItemInput
    connect?: BinKitchenOrderWhereUniqueInput
  }

  export type BinKitchenMenuUpdateOneRequiredWithoutBinKitchenOrderItemNestedInput = {
    create?: XOR<BinKitchenMenuCreateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedCreateWithoutBinKitchenOrderItemInput>
    connectOrCreate?: BinKitchenMenuCreateOrConnectWithoutBinKitchenOrderItemInput
    upsert?: BinKitchenMenuUpsertWithoutBinKitchenOrderItemInput
    connect?: BinKitchenMenuWhereUniqueInput
    update?: XOR<BinKitchenMenuUpdateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedUpdateWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenOrderUpdateOneWithoutBinKitchenOrderItemNestedInput = {
    create?: XOR<BinKitchenOrderCreateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedCreateWithoutBinKitchenOrderItemInput>
    connectOrCreate?: BinKitchenOrderCreateOrConnectWithoutBinKitchenOrderItemInput
    upsert?: BinKitchenOrderUpsertWithoutBinKitchenOrderItemInput
    disconnect?: boolean
    delete?: boolean
    connect?: BinKitchenOrderWhereUniqueInput
    update?: XOR<BinKitchenOrderUpdateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedUpdateWithoutBinKitchenOrderItemInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FriendsCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutFromInput>, Enumerable<FriendsUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutFromInput>
    createMany?: FriendsCreateManyFromInputEnvelope
    connect?: Enumerable<FriendsWhereUniqueInput>
  }

  export type FriendsCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutToInput>, Enumerable<FriendsUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutToInput>
    createMany?: FriendsCreateManyToInputEnvelope
    connect?: Enumerable<FriendsWhereUniqueInput>
  }

  export type CommentCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFromUserIdInput>, Enumerable<CommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFromUserIdInput>
    createMany?: CommentCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type SubCommentCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutFromUserIdInput>, Enumerable<SubCommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutFromUserIdInput>
    createMany?: SubCommentCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<SubCommentWhereUniqueInput>
  }

  export type GroupOnUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutUserInput>, Enumerable<GroupOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutUserInput>
    createMany?: GroupOnUserCreateManyUserInputEnvelope
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
  }

  export type LikeCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<LikeCreateWithoutFromUserIdInput>, Enumerable<LikeUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutFromUserIdInput>
    createMany?: LikeCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type ShareCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<ShareCreateWithoutFromUserIdInput>, Enumerable<ShareUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutFromUserIdInput>
    createMany?: ShareCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FBDirectMsgCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutFromInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutFromInput>
    createMany?: FBDirectMsgCreateManyFromInputEnvelope
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
  }

  export type FBDirectMsgCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutToInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutToInput>
    createMany?: FBDirectMsgCreateManyToInputEnvelope
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
  }

  export type FBPostCreateNestedManyWithoutPostByUserInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostByUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostByUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostByUserInput>
    createMany?: FBPostCreateManyPostByUserInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type FBPostCreateNestedManyWithoutPostInUserInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostInUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostInUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostInUserInput>
    createMany?: FBPostCreateManyPostInUserInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type FriendsUncheckedCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutFromInput>, Enumerable<FriendsUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutFromInput>
    createMany?: FriendsCreateManyFromInputEnvelope
    connect?: Enumerable<FriendsWhereUniqueInput>
  }

  export type FriendsUncheckedCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutToInput>, Enumerable<FriendsUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutToInput>
    createMany?: FriendsCreateManyToInputEnvelope
    connect?: Enumerable<FriendsWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFromUserIdInput>, Enumerable<CommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFromUserIdInput>
    createMany?: CommentCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutFromUserIdInput>, Enumerable<SubCommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutFromUserIdInput>
    createMany?: SubCommentCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<SubCommentWhereUniqueInput>
  }

  export type GroupOnUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutUserInput>, Enumerable<GroupOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutUserInput>
    createMany?: GroupOnUserCreateManyUserInputEnvelope
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
  }

  export type LikeUncheckedCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<LikeCreateWithoutFromUserIdInput>, Enumerable<LikeUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutFromUserIdInput>
    createMany?: LikeCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutFromUserIdInput = {
    create?: XOR<Enumerable<ShareCreateWithoutFromUserIdInput>, Enumerable<ShareUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutFromUserIdInput>
    createMany?: ShareCreateManyFromUserIdInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FBDirectMsgUncheckedCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutFromInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutFromInput>
    createMany?: FBDirectMsgCreateManyFromInputEnvelope
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
  }

  export type FBDirectMsgUncheckedCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutToInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutToInput>
    createMany?: FBDirectMsgCreateManyToInputEnvelope
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
  }

  export type FBPostUncheckedCreateNestedManyWithoutPostByUserInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostByUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostByUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostByUserInput>
    createMany?: FBPostCreateManyPostByUserInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type FBPostUncheckedCreateNestedManyWithoutPostInUserInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostInUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostInUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostInUserInput>
    createMany?: FBPostCreateManyPostInUserInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type FriendsUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutFromInput>, Enumerable<FriendsUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FriendsUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FriendsCreateManyFromInputEnvelope
    set?: Enumerable<FriendsWhereUniqueInput>
    disconnect?: Enumerable<FriendsWhereUniqueInput>
    delete?: Enumerable<FriendsWhereUniqueInput>
    connect?: Enumerable<FriendsWhereUniqueInput>
    update?: Enumerable<FriendsUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FriendsUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FriendsScalarWhereInput>
  }

  export type FriendsUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutToInput>, Enumerable<FriendsUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FriendsUpsertWithWhereUniqueWithoutToInput>
    createMany?: FriendsCreateManyToInputEnvelope
    set?: Enumerable<FriendsWhereUniqueInput>
    disconnect?: Enumerable<FriendsWhereUniqueInput>
    delete?: Enumerable<FriendsWhereUniqueInput>
    connect?: Enumerable<FriendsWhereUniqueInput>
    update?: Enumerable<FriendsUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FriendsUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FriendsScalarWhereInput>
  }

  export type CommentUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFromUserIdInput>, Enumerable<CommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: CommentCreateManyFromUserIdInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type SubCommentUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutFromUserIdInput>, Enumerable<SubCommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<SubCommentUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: SubCommentCreateManyFromUserIdInputEnvelope
    set?: Enumerable<SubCommentWhereUniqueInput>
    disconnect?: Enumerable<SubCommentWhereUniqueInput>
    delete?: Enumerable<SubCommentWhereUniqueInput>
    connect?: Enumerable<SubCommentWhereUniqueInput>
    update?: Enumerable<SubCommentUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<SubCommentUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<SubCommentScalarWhereInput>
  }

  export type GroupOnUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutUserInput>, Enumerable<GroupOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GroupOnUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GroupOnUserCreateManyUserInputEnvelope
    set?: Enumerable<GroupOnUserWhereUniqueInput>
    disconnect?: Enumerable<GroupOnUserWhereUniqueInput>
    delete?: Enumerable<GroupOnUserWhereUniqueInput>
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
    update?: Enumerable<GroupOnUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GroupOnUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GroupOnUserScalarWhereInput>
  }

  export type LikeUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutFromUserIdInput>, Enumerable<LikeUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: LikeCreateManyFromUserIdInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type ShareUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutFromUserIdInput>, Enumerable<ShareUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: ShareCreateManyFromUserIdInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FBDirectMsgUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutFromInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FBDirectMsgUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FBDirectMsgCreateManyFromInputEnvelope
    set?: Enumerable<FBDirectMsgWhereUniqueInput>
    disconnect?: Enumerable<FBDirectMsgWhereUniqueInput>
    delete?: Enumerable<FBDirectMsgWhereUniqueInput>
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
    update?: Enumerable<FBDirectMsgUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FBDirectMsgUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FBDirectMsgScalarWhereInput>
  }

  export type FBDirectMsgUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutToInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FBDirectMsgUpsertWithWhereUniqueWithoutToInput>
    createMany?: FBDirectMsgCreateManyToInputEnvelope
    set?: Enumerable<FBDirectMsgWhereUniqueInput>
    disconnect?: Enumerable<FBDirectMsgWhereUniqueInput>
    delete?: Enumerable<FBDirectMsgWhereUniqueInput>
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
    update?: Enumerable<FBDirectMsgUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FBDirectMsgUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FBDirectMsgScalarWhereInput>
  }

  export type FBPostUpdateManyWithoutPostByUserNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostByUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostByUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostByUserInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutPostByUserInput>
    createMany?: FBPostCreateManyPostByUserInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutPostByUserInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutPostByUserInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type FBPostUpdateManyWithoutPostInUserNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostInUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostInUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostInUserInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutPostInUserInput>
    createMany?: FBPostCreateManyPostInUserInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutPostInUserInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutPostInUserInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type FriendsUncheckedUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutFromInput>, Enumerable<FriendsUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FriendsUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FriendsCreateManyFromInputEnvelope
    set?: Enumerable<FriendsWhereUniqueInput>
    disconnect?: Enumerable<FriendsWhereUniqueInput>
    delete?: Enumerable<FriendsWhereUniqueInput>
    connect?: Enumerable<FriendsWhereUniqueInput>
    update?: Enumerable<FriendsUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FriendsUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FriendsScalarWhereInput>
  }

  export type FriendsUncheckedUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FriendsCreateWithoutToInput>, Enumerable<FriendsUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FriendsCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FriendsUpsertWithWhereUniqueWithoutToInput>
    createMany?: FriendsCreateManyToInputEnvelope
    set?: Enumerable<FriendsWhereUniqueInput>
    disconnect?: Enumerable<FriendsWhereUniqueInput>
    delete?: Enumerable<FriendsWhereUniqueInput>
    connect?: Enumerable<FriendsWhereUniqueInput>
    update?: Enumerable<FriendsUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FriendsUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FriendsScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutFromUserIdInput>, Enumerable<CommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: CommentCreateManyFromUserIdInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutFromUserIdInput>, Enumerable<SubCommentUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<SubCommentUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: SubCommentCreateManyFromUserIdInputEnvelope
    set?: Enumerable<SubCommentWhereUniqueInput>
    disconnect?: Enumerable<SubCommentWhereUniqueInput>
    delete?: Enumerable<SubCommentWhereUniqueInput>
    connect?: Enumerable<SubCommentWhereUniqueInput>
    update?: Enumerable<SubCommentUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<SubCommentUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<SubCommentScalarWhereInput>
  }

  export type GroupOnUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutUserInput>, Enumerable<GroupOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<GroupOnUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: GroupOnUserCreateManyUserInputEnvelope
    set?: Enumerable<GroupOnUserWhereUniqueInput>
    disconnect?: Enumerable<GroupOnUserWhereUniqueInput>
    delete?: Enumerable<GroupOnUserWhereUniqueInput>
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
    update?: Enumerable<GroupOnUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<GroupOnUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<GroupOnUserScalarWhereInput>
  }

  export type LikeUncheckedUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutFromUserIdInput>, Enumerable<LikeUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: LikeCreateManyFromUserIdInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutFromUserIdNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutFromUserIdInput>, Enumerable<ShareUncheckedCreateWithoutFromUserIdInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutFromUserIdInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutFromUserIdInput>
    createMany?: ShareCreateManyFromUserIdInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutFromUserIdInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutFromUserIdInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutFromInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FBDirectMsgUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FBDirectMsgCreateManyFromInputEnvelope
    set?: Enumerable<FBDirectMsgWhereUniqueInput>
    disconnect?: Enumerable<FBDirectMsgWhereUniqueInput>
    delete?: Enumerable<FBDirectMsgWhereUniqueInput>
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
    update?: Enumerable<FBDirectMsgUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FBDirectMsgUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FBDirectMsgScalarWhereInput>
  }

  export type FBDirectMsgUncheckedUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FBDirectMsgCreateWithoutToInput>, Enumerable<FBDirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FBDirectMsgCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FBDirectMsgUpsertWithWhereUniqueWithoutToInput>
    createMany?: FBDirectMsgCreateManyToInputEnvelope
    set?: Enumerable<FBDirectMsgWhereUniqueInput>
    disconnect?: Enumerable<FBDirectMsgWhereUniqueInput>
    delete?: Enumerable<FBDirectMsgWhereUniqueInput>
    connect?: Enumerable<FBDirectMsgWhereUniqueInput>
    update?: Enumerable<FBDirectMsgUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FBDirectMsgUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FBDirectMsgScalarWhereInput>
  }

  export type FBPostUncheckedUpdateManyWithoutPostByUserNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostByUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostByUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostByUserInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutPostByUserInput>
    createMany?: FBPostCreateManyPostByUserInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutPostByUserInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutPostByUserInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type FBPostUncheckedUpdateManyWithoutPostInUserNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutPostInUserInput>, Enumerable<FBPostUncheckedCreateWithoutPostInUserInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutPostInUserInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutPostInUserInput>
    createMany?: FBPostCreateManyPostInUserInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutPostInUserInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutPostInUserInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type FBUserCreateNestedOneWithoutFromFriendsInput = {
    create?: XOR<FBUserCreateWithoutFromFriendsInput, FBUserUncheckedCreateWithoutFromFriendsInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutFromFriendsInput
    connect?: FBUserWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutToFriendsInput = {
    create?: XOR<FBUserCreateWithoutToFriendsInput, FBUserUncheckedCreateWithoutToFriendsInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutToFriendsInput
    connect?: FBUserWhereUniqueInput
  }

  export type FBUserUpdateOneRequiredWithoutFromFriendsNestedInput = {
    create?: XOR<FBUserCreateWithoutFromFriendsInput, FBUserUncheckedCreateWithoutFromFriendsInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutFromFriendsInput
    upsert?: FBUserUpsertWithoutFromFriendsInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutFromFriendsInput, FBUserUncheckedUpdateWithoutFromFriendsInput>
  }

  export type FBUserUpdateOneRequiredWithoutToFriendsNestedInput = {
    create?: XOR<FBUserCreateWithoutToFriendsInput, FBUserUncheckedCreateWithoutToFriendsInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutToFriendsInput
    upsert?: FBUserUpsertWithoutToFriendsInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutToFriendsInput, FBUserUncheckedUpdateWithoutToFriendsInput>
  }

  export type FBUserCreateNestedOneWithoutPostByUserInput = {
    create?: XOR<FBUserCreateWithoutPostByUserInput, FBUserUncheckedCreateWithoutPostByUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutPostByUserInput
    connect?: FBUserWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutPostInUserInput = {
    create?: XOR<FBUserCreateWithoutPostInUserInput, FBUserUncheckedCreateWithoutPostInUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutPostInUserInput
    connect?: FBUserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutFBPostInput = {
    create?: XOR<GroupCreateWithoutFBPostInput, GroupUncheckedCreateWithoutFBPostInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFBPostInput
    connect?: GroupWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type LikeCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<LikeCreateWithoutPostInput>, Enumerable<LikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutPostInput>
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type ShareCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ShareCreateWithoutPostInput>, Enumerable<ShareUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutPostInput>
    createMany?: ShareCreateManyPostInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FBPostOnHashtagCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutPostInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutPostInput>
    createMany?: FBPostOnHashtagCreateManyPostInputEnvelope
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: Enumerable<CommentWhereUniqueInput>
  }

  export type LikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<LikeCreateWithoutPostInput>, Enumerable<LikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutPostInput>
    createMany?: LikeCreateManyPostInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ShareCreateWithoutPostInput>, Enumerable<ShareUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutPostInput>
    createMany?: ShareCreateManyPostInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutPostInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutPostInput>
    createMany?: FBPostOnHashtagCreateManyPostInputEnvelope
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
  }

  export type FBUserUpdateOneWithoutPostByUserNestedInput = {
    create?: XOR<FBUserCreateWithoutPostByUserInput, FBUserUncheckedCreateWithoutPostByUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutPostByUserInput
    upsert?: FBUserUpsertWithoutPostByUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutPostByUserInput, FBUserUncheckedUpdateWithoutPostByUserInput>
  }

  export type FBUserUpdateOneWithoutPostInUserNestedInput = {
    create?: XOR<FBUserCreateWithoutPostInUserInput, FBUserUncheckedCreateWithoutPostInUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutPostInUserInput
    upsert?: FBUserUpsertWithoutPostInUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutPostInUserInput, FBUserUncheckedUpdateWithoutPostInUserInput>
  }

  export type GroupUpdateOneWithoutFBPostNestedInput = {
    create?: XOR<GroupCreateWithoutFBPostInput, GroupUncheckedCreateWithoutFBPostInput>
    connectOrCreate?: GroupCreateOrConnectWithoutFBPostInput
    upsert?: GroupUpsertWithoutFBPostInput
    disconnect?: boolean
    delete?: boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<GroupUpdateWithoutFBPostInput, GroupUncheckedUpdateWithoutFBPostInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type LikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutPostInput>, Enumerable<LikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutPostInput>
    createMany?: LikeCreateManyPostInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type ShareUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutPostInput>, Enumerable<ShareUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ShareCreateManyPostInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FBPostOnHashtagUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutPostInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FBPostOnHashtagUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FBPostOnHashtagCreateManyPostInputEnvelope
    set?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    delete?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    update?: Enumerable<FBPostOnHashtagUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FBPostOnHashtagUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FBPostOnHashtagScalarWhereInput>
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<CommentCreateWithoutPostInput>, Enumerable<CommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: CommentCreateManyPostInputEnvelope
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
  }

  export type LikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutPostInput>, Enumerable<LikeUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutPostInput>
    createMany?: LikeCreateManyPostInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutPostInput>, Enumerable<ShareUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ShareCreateManyPostInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutPostInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FBPostOnHashtagUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FBPostOnHashtagCreateManyPostInputEnvelope
    set?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    delete?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    update?: Enumerable<FBPostOnHashtagUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FBPostOnHashtagUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FBPostOnHashtagScalarWhereInput>
  }

  export type FBPostCreateNestedOneWithoutCommentInput = {
    create?: XOR<FBPostCreateWithoutCommentInput, FBPostUncheckedCreateWithoutCommentInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutCommentInput
    connect?: FBPostWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutCommentInput = {
    create?: XOR<FBUserCreateWithoutCommentInput, FBUserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutCommentInput
    connect?: FBUserWhereUniqueInput
  }

  export type SubCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutCommentInput>, Enumerable<SubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutCommentInput>
    createMany?: SubCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<SubCommentWhereUniqueInput>
  }

  export type SubCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutCommentInput>, Enumerable<SubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutCommentInput>
    createMany?: SubCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<SubCommentWhereUniqueInput>
  }

  export type FBPostUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<FBPostCreateWithoutCommentInput, FBPostUncheckedCreateWithoutCommentInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutCommentInput
    upsert?: FBPostUpsertWithoutCommentInput
    connect?: FBPostWhereUniqueInput
    update?: XOR<FBPostUpdateWithoutCommentInput, FBPostUncheckedUpdateWithoutCommentInput>
  }

  export type FBUserUpdateOneRequiredWithoutCommentNestedInput = {
    create?: XOR<FBUserCreateWithoutCommentInput, FBUserUncheckedCreateWithoutCommentInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutCommentInput
    upsert?: FBUserUpsertWithoutCommentInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutCommentInput, FBUserUncheckedUpdateWithoutCommentInput>
  }

  export type SubCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutCommentInput>, Enumerable<SubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<SubCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: SubCommentCreateManyCommentInputEnvelope
    set?: Enumerable<SubCommentWhereUniqueInput>
    disconnect?: Enumerable<SubCommentWhereUniqueInput>
    delete?: Enumerable<SubCommentWhereUniqueInput>
    connect?: Enumerable<SubCommentWhereUniqueInput>
    update?: Enumerable<SubCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<SubCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<SubCommentScalarWhereInput>
  }

  export type SubCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<SubCommentCreateWithoutCommentInput>, Enumerable<SubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<SubCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<SubCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: SubCommentCreateManyCommentInputEnvelope
    set?: Enumerable<SubCommentWhereUniqueInput>
    disconnect?: Enumerable<SubCommentWhereUniqueInput>
    delete?: Enumerable<SubCommentWhereUniqueInput>
    connect?: Enumerable<SubCommentWhereUniqueInput>
    update?: Enumerable<SubCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<SubCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<SubCommentScalarWhereInput>
  }

  export type CommentCreateNestedOneWithoutSubCommentInput = {
    create?: XOR<CommentCreateWithoutSubCommentInput, CommentUncheckedCreateWithoutSubCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutSubCommentInput
    connect?: CommentWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutSubCommentInput = {
    create?: XOR<FBUserCreateWithoutSubCommentInput, FBUserUncheckedCreateWithoutSubCommentInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutSubCommentInput
    connect?: FBUserWhereUniqueInput
  }

  export type CommentUpdateOneRequiredWithoutSubCommentNestedInput = {
    create?: XOR<CommentCreateWithoutSubCommentInput, CommentUncheckedCreateWithoutSubCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutSubCommentInput
    upsert?: CommentUpsertWithoutSubCommentInput
    connect?: CommentWhereUniqueInput
    update?: XOR<CommentUpdateWithoutSubCommentInput, CommentUncheckedUpdateWithoutSubCommentInput>
  }

  export type FBUserUpdateOneRequiredWithoutSubCommentNestedInput = {
    create?: XOR<FBUserCreateWithoutSubCommentInput, FBUserUncheckedCreateWithoutSubCommentInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutSubCommentInput
    upsert?: FBUserUpsertWithoutSubCommentInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutSubCommentInput, FBUserUncheckedUpdateWithoutSubCommentInput>
  }

  export type FBPostCreateNestedOneWithoutLikeInput = {
    create?: XOR<FBPostCreateWithoutLikeInput, FBPostUncheckedCreateWithoutLikeInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutLikeInput
    connect?: FBPostWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutLikeInput = {
    create?: XOR<FBUserCreateWithoutLikeInput, FBUserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutLikeInput
    connect?: FBUserWhereUniqueInput
  }

  export type LikeTypeCreateNestedOneWithoutLikeInput = {
    create?: XOR<LikeTypeCreateWithoutLikeInput, LikeTypeUncheckedCreateWithoutLikeInput>
    connectOrCreate?: LikeTypeCreateOrConnectWithoutLikeInput
    connect?: LikeTypeWhereUniqueInput
  }

  export type FBPostUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<FBPostCreateWithoutLikeInput, FBPostUncheckedCreateWithoutLikeInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutLikeInput
    upsert?: FBPostUpsertWithoutLikeInput
    connect?: FBPostWhereUniqueInput
    update?: XOR<FBPostUpdateWithoutLikeInput, FBPostUncheckedUpdateWithoutLikeInput>
  }

  export type FBUserUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<FBUserCreateWithoutLikeInput, FBUserUncheckedCreateWithoutLikeInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutLikeInput
    upsert?: FBUserUpsertWithoutLikeInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutLikeInput, FBUserUncheckedUpdateWithoutLikeInput>
  }

  export type LikeTypeUpdateOneRequiredWithoutLikeNestedInput = {
    create?: XOR<LikeTypeCreateWithoutLikeInput, LikeTypeUncheckedCreateWithoutLikeInput>
    connectOrCreate?: LikeTypeCreateOrConnectWithoutLikeInput
    upsert?: LikeTypeUpsertWithoutLikeInput
    connect?: LikeTypeWhereUniqueInput
    update?: XOR<LikeTypeUpdateWithoutLikeInput, LikeTypeUncheckedUpdateWithoutLikeInput>
  }

  export type FBPostCreateNestedOneWithoutShareInput = {
    create?: XOR<FBPostCreateWithoutShareInput, FBPostUncheckedCreateWithoutShareInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutShareInput
    connect?: FBPostWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutShareInput = {
    create?: XOR<FBUserCreateWithoutShareInput, FBUserUncheckedCreateWithoutShareInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutShareInput
    connect?: FBUserWhereUniqueInput
  }

  export type ShareStatusCreateNestedOneWithoutShareInput = {
    create?: XOR<ShareStatusCreateWithoutShareInput, ShareStatusUncheckedCreateWithoutShareInput>
    connectOrCreate?: ShareStatusCreateOrConnectWithoutShareInput
    connect?: ShareStatusWhereUniqueInput
  }

  export type FBPostUpdateOneRequiredWithoutShareNestedInput = {
    create?: XOR<FBPostCreateWithoutShareInput, FBPostUncheckedCreateWithoutShareInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutShareInput
    upsert?: FBPostUpsertWithoutShareInput
    connect?: FBPostWhereUniqueInput
    update?: XOR<FBPostUpdateWithoutShareInput, FBPostUncheckedUpdateWithoutShareInput>
  }

  export type FBUserUpdateOneRequiredWithoutShareNestedInput = {
    create?: XOR<FBUserCreateWithoutShareInput, FBUserUncheckedCreateWithoutShareInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutShareInput
    upsert?: FBUserUpsertWithoutShareInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutShareInput, FBUserUncheckedUpdateWithoutShareInput>
  }

  export type ShareStatusUpdateOneRequiredWithoutShareNestedInput = {
    create?: XOR<ShareStatusCreateWithoutShareInput, ShareStatusUncheckedCreateWithoutShareInput>
    connectOrCreate?: ShareStatusCreateOrConnectWithoutShareInput
    upsert?: ShareStatusUpsertWithoutShareInput
    connect?: ShareStatusWhereUniqueInput
    update?: XOR<ShareStatusUpdateWithoutShareInput, ShareStatusUncheckedUpdateWithoutShareInput>
  }

  export type GroupOnUserCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutGroupInput>, Enumerable<GroupOnUserUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutGroupInput>
    createMany?: GroupOnUserCreateManyGroupInputEnvelope
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
  }

  export type FBPostCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutGroupInput>, Enumerable<FBPostUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutGroupInput>
    createMany?: FBPostCreateManyGroupInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type GroupOnUserUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutGroupInput>, Enumerable<GroupOnUserUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutGroupInput>
    createMany?: GroupOnUserCreateManyGroupInputEnvelope
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
  }

  export type FBPostUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutGroupInput>, Enumerable<FBPostUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutGroupInput>
    createMany?: FBPostCreateManyGroupInputEnvelope
    connect?: Enumerable<FBPostWhereUniqueInput>
  }

  export type GroupOnUserUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutGroupInput>, Enumerable<GroupOnUserUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupOnUserUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: GroupOnUserCreateManyGroupInputEnvelope
    set?: Enumerable<GroupOnUserWhereUniqueInput>
    disconnect?: Enumerable<GroupOnUserWhereUniqueInput>
    delete?: Enumerable<GroupOnUserWhereUniqueInput>
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
    update?: Enumerable<GroupOnUserUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupOnUserUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupOnUserScalarWhereInput>
  }

  export type FBPostUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutGroupInput>, Enumerable<FBPostUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: FBPostCreateManyGroupInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type GroupOnUserUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<GroupOnUserCreateWithoutGroupInput>, Enumerable<GroupOnUserUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupOnUserCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupOnUserUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: GroupOnUserCreateManyGroupInputEnvelope
    set?: Enumerable<GroupOnUserWhereUniqueInput>
    disconnect?: Enumerable<GroupOnUserWhereUniqueInput>
    delete?: Enumerable<GroupOnUserWhereUniqueInput>
    connect?: Enumerable<GroupOnUserWhereUniqueInput>
    update?: Enumerable<GroupOnUserUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupOnUserUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupOnUserScalarWhereInput>
  }

  export type FBPostUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<Enumerable<FBPostCreateWithoutGroupInput>, Enumerable<FBPostUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<FBPostCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<FBPostUpsertWithWhereUniqueWithoutGroupInput>
    createMany?: FBPostCreateManyGroupInputEnvelope
    set?: Enumerable<FBPostWhereUniqueInput>
    disconnect?: Enumerable<FBPostWhereUniqueInput>
    delete?: Enumerable<FBPostWhereUniqueInput>
    connect?: Enumerable<FBPostWhereUniqueInput>
    update?: Enumerable<FBPostUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<FBPostUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<FBPostScalarWhereInput>
  }

  export type FBUserCreateNestedOneWithoutGroupOnUserInput = {
    create?: XOR<FBUserCreateWithoutGroupOnUserInput, FBUserUncheckedCreateWithoutGroupOnUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutGroupOnUserInput
    connect?: FBUserWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutGroupOnUserInput = {
    create?: XOR<GroupCreateWithoutGroupOnUserInput, GroupUncheckedCreateWithoutGroupOnUserInput>
    connectOrCreate?: GroupCreateOrConnectWithoutGroupOnUserInput
    connect?: GroupWhereUniqueInput
  }

  export type FBUserUpdateOneRequiredWithoutGroupOnUserNestedInput = {
    create?: XOR<FBUserCreateWithoutGroupOnUserInput, FBUserUncheckedCreateWithoutGroupOnUserInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutGroupOnUserInput
    upsert?: FBUserUpsertWithoutGroupOnUserInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutGroupOnUserInput, FBUserUncheckedUpdateWithoutGroupOnUserInput>
  }

  export type GroupUpdateOneRequiredWithoutGroupOnUserNestedInput = {
    create?: XOR<GroupCreateWithoutGroupOnUserInput, GroupUncheckedCreateWithoutGroupOnUserInput>
    connectOrCreate?: GroupCreateOrConnectWithoutGroupOnUserInput
    upsert?: GroupUpsertWithoutGroupOnUserInput
    connect?: GroupWhereUniqueInput
    update?: XOR<GroupUpdateWithoutGroupOnUserInput, GroupUncheckedUpdateWithoutGroupOnUserInput>
  }

  export type LikeCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<LikeCreateWithoutLikeTypeInput>, Enumerable<LikeUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutLikeTypeInput>
    createMany?: LikeCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type LikeUncheckedCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<LikeCreateWithoutLikeTypeInput>, Enumerable<LikeUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutLikeTypeInput>
    createMany?: LikeCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<LikeWhereUniqueInput>
  }

  export type LikeUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutLikeTypeInput>, Enumerable<LikeUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: LikeCreateManyLikeTypeInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type LikeUncheckedUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<LikeCreateWithoutLikeTypeInput>, Enumerable<LikeUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: LikeCreateManyLikeTypeInputEnvelope
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
  }

  export type ShareCreateNestedManyWithoutShareStatusInput = {
    create?: XOR<Enumerable<ShareCreateWithoutShareStatusInput>, Enumerable<ShareUncheckedCreateWithoutShareStatusInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutShareStatusInput>
    createMany?: ShareCreateManyShareStatusInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type ShareUncheckedCreateNestedManyWithoutShareStatusInput = {
    create?: XOR<Enumerable<ShareCreateWithoutShareStatusInput>, Enumerable<ShareUncheckedCreateWithoutShareStatusInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutShareStatusInput>
    createMany?: ShareCreateManyShareStatusInputEnvelope
    connect?: Enumerable<ShareWhereUniqueInput>
  }

  export type ShareUpdateManyWithoutShareStatusNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutShareStatusInput>, Enumerable<ShareUncheckedCreateWithoutShareStatusInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutShareStatusInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutShareStatusInput>
    createMany?: ShareCreateManyShareStatusInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutShareStatusInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutShareStatusInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type ShareUncheckedUpdateManyWithoutShareStatusNestedInput = {
    create?: XOR<Enumerable<ShareCreateWithoutShareStatusInput>, Enumerable<ShareUncheckedCreateWithoutShareStatusInput>>
    connectOrCreate?: Enumerable<ShareCreateOrConnectWithoutShareStatusInput>
    upsert?: Enumerable<ShareUpsertWithWhereUniqueWithoutShareStatusInput>
    createMany?: ShareCreateManyShareStatusInputEnvelope
    set?: Enumerable<ShareWhereUniqueInput>
    disconnect?: Enumerable<ShareWhereUniqueInput>
    delete?: Enumerable<ShareWhereUniqueInput>
    connect?: Enumerable<ShareWhereUniqueInput>
    update?: Enumerable<ShareUpdateWithWhereUniqueWithoutShareStatusInput>
    updateMany?: Enumerable<ShareUpdateManyWithWhereWithoutShareStatusInput>
    deleteMany?: Enumerable<ShareScalarWhereInput>
  }

  export type FBUserCreateNestedOneWithoutFromDirectMsgInput = {
    create?: XOR<FBUserCreateWithoutFromDirectMsgInput, FBUserUncheckedCreateWithoutFromDirectMsgInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutFromDirectMsgInput
    connect?: FBUserWhereUniqueInput
  }

  export type FBUserCreateNestedOneWithoutToDirectMsgInput = {
    create?: XOR<FBUserCreateWithoutToDirectMsgInput, FBUserUncheckedCreateWithoutToDirectMsgInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutToDirectMsgInput
    connect?: FBUserWhereUniqueInput
  }

  export type FBUserUpdateOneRequiredWithoutFromDirectMsgNestedInput = {
    create?: XOR<FBUserCreateWithoutFromDirectMsgInput, FBUserUncheckedCreateWithoutFromDirectMsgInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutFromDirectMsgInput
    upsert?: FBUserUpsertWithoutFromDirectMsgInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutFromDirectMsgInput, FBUserUncheckedUpdateWithoutFromDirectMsgInput>
  }

  export type FBUserUpdateOneRequiredWithoutToDirectMsgNestedInput = {
    create?: XOR<FBUserCreateWithoutToDirectMsgInput, FBUserUncheckedCreateWithoutToDirectMsgInput>
    connectOrCreate?: FBUserCreateOrConnectWithoutToDirectMsgInput
    upsert?: FBUserUpsertWithoutToDirectMsgInput
    connect?: FBUserWhereUniqueInput
    update?: XOR<FBUserUpdateWithoutToDirectMsgInput, FBUserUncheckedUpdateWithoutToDirectMsgInput>
  }

  export type FBPostOnHashtagCreateNestedManyWithoutHashtagInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutHashtagInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutHashtagInput>
    createMany?: FBPostOnHashtagCreateManyHashtagInputEnvelope
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
  }

  export type FBPostOnHashtagUncheckedCreateNestedManyWithoutHashtagInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutHashtagInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutHashtagInput>
    createMany?: FBPostOnHashtagCreateManyHashtagInputEnvelope
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
  }

  export type FBPostOnHashtagUpdateManyWithoutHashtagNestedInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutHashtagInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutHashtagInput>
    upsert?: Enumerable<FBPostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput>
    createMany?: FBPostOnHashtagCreateManyHashtagInputEnvelope
    set?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    delete?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    update?: Enumerable<FBPostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput>
    updateMany?: Enumerable<FBPostOnHashtagUpdateManyWithWhereWithoutHashtagInput>
    deleteMany?: Enumerable<FBPostOnHashtagScalarWhereInput>
  }

  export type FBPostOnHashtagUncheckedUpdateManyWithoutHashtagNestedInput = {
    create?: XOR<Enumerable<FBPostOnHashtagCreateWithoutHashtagInput>, Enumerable<FBPostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<FBPostOnHashtagCreateOrConnectWithoutHashtagInput>
    upsert?: Enumerable<FBPostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput>
    createMany?: FBPostOnHashtagCreateManyHashtagInputEnvelope
    set?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    delete?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    connect?: Enumerable<FBPostOnHashtagWhereUniqueInput>
    update?: Enumerable<FBPostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput>
    updateMany?: Enumerable<FBPostOnHashtagUpdateManyWithWhereWithoutHashtagInput>
    deleteMany?: Enumerable<FBPostOnHashtagScalarWhereInput>
  }

  export type FBPostCreateNestedOneWithoutPostOnHashtagInput = {
    create?: XOR<FBPostCreateWithoutPostOnHashtagInput, FBPostUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutPostOnHashtagInput
    connect?: FBPostWhereUniqueInput
  }

  export type FBHashtagCreateNestedOneWithoutPostOnHashtagInput = {
    create?: XOR<FBHashtagCreateWithoutPostOnHashtagInput, FBHashtagUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: FBHashtagCreateOrConnectWithoutPostOnHashtagInput
    connect?: FBHashtagWhereUniqueInput
  }

  export type FBPostUpdateOneRequiredWithoutPostOnHashtagNestedInput = {
    create?: XOR<FBPostCreateWithoutPostOnHashtagInput, FBPostUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: FBPostCreateOrConnectWithoutPostOnHashtagInput
    upsert?: FBPostUpsertWithoutPostOnHashtagInput
    connect?: FBPostWhereUniqueInput
    update?: XOR<FBPostUpdateWithoutPostOnHashtagInput, FBPostUncheckedUpdateWithoutPostOnHashtagInput>
  }

  export type FBHashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput = {
    create?: XOR<FBHashtagCreateWithoutPostOnHashtagInput, FBHashtagUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: FBHashtagCreateOrConnectWithoutPostOnHashtagInput
    upsert?: FBHashtagUpsertWithoutPostOnHashtagInput
    connect?: FBHashtagWhereUniqueInput
    update?: XOR<FBHashtagUpdateWithoutPostOnHashtagInput, FBHashtagUncheckedUpdateWithoutPostOnHashtagInput>
  }

  export type LibraryBookCreateNestedManyWithoutUniversityInput = {
    create?: XOR<Enumerable<LibraryBookCreateWithoutUniversityInput>, Enumerable<LibraryBookUncheckedCreateWithoutUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCreateOrConnectWithoutUniversityInput>
    createMany?: LibraryBookCreateManyUniversityInputEnvelope
    connect?: Enumerable<LibraryBookWhereUniqueInput>
  }

  export type LibraryBookCopyCreateNestedManyWithoutAtUniversityInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutAtUniversityInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutAtUniversityInput>
    createMany?: LibraryBookCopyCreateManyAtUniversityInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutFromUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutFromUniversityInput>
    createMany?: LibraryStudentRequestCreateManyFromUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentRequestCreateNestedManyWithoutToUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutToUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutToUniversityInput>
    createMany?: LibraryStudentRequestCreateManyToUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBorrowFromUniversityInput>
    createMany?: LibraryStudentBorrowingCreateManyBorrowFromUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryBookUncheckedCreateNestedManyWithoutUniversityInput = {
    create?: XOR<Enumerable<LibraryBookCreateWithoutUniversityInput>, Enumerable<LibraryBookUncheckedCreateWithoutUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCreateOrConnectWithoutUniversityInput>
    createMany?: LibraryBookCreateManyUniversityInputEnvelope
    connect?: Enumerable<LibraryBookWhereUniqueInput>
  }

  export type LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutAtUniversityInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutAtUniversityInput>
    createMany?: LibraryBookCopyCreateManyAtUniversityInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutFromUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutFromUniversityInput>
    createMany?: LibraryStudentRequestCreateManyFromUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutToUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutToUniversityInput>
    createMany?: LibraryStudentRequestCreateManyToUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBorrowFromUniversityInput>
    createMany?: LibraryStudentBorrowingCreateManyBorrowFromUniversityInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryBookUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryBookCreateWithoutUniversityInput>, Enumerable<LibraryBookUncheckedCreateWithoutUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCreateOrConnectWithoutUniversityInput>
    upsert?: Enumerable<LibraryBookUpsertWithWhereUniqueWithoutUniversityInput>
    createMany?: LibraryBookCreateManyUniversityInputEnvelope
    set?: Enumerable<LibraryBookWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookWhereUniqueInput>
    delete?: Enumerable<LibraryBookWhereUniqueInput>
    connect?: Enumerable<LibraryBookWhereUniqueInput>
    update?: Enumerable<LibraryBookUpdateWithWhereUniqueWithoutUniversityInput>
    updateMany?: Enumerable<LibraryBookUpdateManyWithWhereWithoutUniversityInput>
    deleteMany?: Enumerable<LibraryBookScalarWhereInput>
  }

  export type LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutAtUniversityInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutAtUniversityInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutAtUniversityInput>
    createMany?: LibraryBookCopyCreateManyAtUniversityInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutAtUniversityInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutAtUniversityInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutFromUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutFromUniversityInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutFromUniversityInput>
    createMany?: LibraryStudentRequestCreateManyFromUniversityInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutFromUniversityInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutFromUniversityInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutToUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutToUniversityInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutToUniversityInput>
    createMany?: LibraryStudentRequestCreateManyToUniversityInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutToUniversityInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutToUniversityInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBorrowFromUniversityInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBorrowFromUniversityInput>
    createMany?: LibraryStudentBorrowingCreateManyBorrowFromUniversityInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBorrowFromUniversityInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutBorrowFromUniversityInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryBookCreateWithoutUniversityInput>, Enumerable<LibraryBookUncheckedCreateWithoutUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCreateOrConnectWithoutUniversityInput>
    upsert?: Enumerable<LibraryBookUpsertWithWhereUniqueWithoutUniversityInput>
    createMany?: LibraryBookCreateManyUniversityInputEnvelope
    set?: Enumerable<LibraryBookWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookWhereUniqueInput>
    delete?: Enumerable<LibraryBookWhereUniqueInput>
    connect?: Enumerable<LibraryBookWhereUniqueInput>
    update?: Enumerable<LibraryBookUpdateWithWhereUniqueWithoutUniversityInput>
    updateMany?: Enumerable<LibraryBookUpdateManyWithWhereWithoutUniversityInput>
    deleteMany?: Enumerable<LibraryBookScalarWhereInput>
  }

  export type LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutAtUniversityInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutAtUniversityInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutAtUniversityInput>
    createMany?: LibraryBookCopyCreateManyAtUniversityInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutAtUniversityInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutAtUniversityInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutFromUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutFromUniversityInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutFromUniversityInput>
    createMany?: LibraryStudentRequestCreateManyFromUniversityInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutFromUniversityInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutFromUniversityInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutToUniversityInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutToUniversityInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutToUniversityInput>
    createMany?: LibraryStudentRequestCreateManyToUniversityInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutToUniversityInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutToUniversityInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBorrowFromUniversityInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBorrowFromUniversityInput>
    createMany?: LibraryStudentBorrowingCreateManyBorrowFromUniversityInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBorrowFromUniversityInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutBorrowFromUniversityInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryBookCopyCreateNestedManyWithoutCurrentBorrowByStudentInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutCurrentBorrowByStudentInput>
    createMany?: LibraryBookCopyCreateManyCurrentBorrowByStudentInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type LibraryHistoryOfBookCopyCreateNestedManyWithoutOnceBorrowByStudentInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutOnceBorrowByStudentInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInputEnvelope
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutStudentInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutStudentInput>
    createMany?: LibraryStudentRequestCreateManyStudentInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingCreateNestedManyWithoutStidentInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutStidentInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutStidentInput>
    createMany?: LibraryStudentBorrowingCreateManyStidentInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryBookCopyUncheckedCreateNestedManyWithoutCurrentBorrowByStudentInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutCurrentBorrowByStudentInput>
    createMany?: LibraryBookCopyCreateManyCurrentBorrowByStudentInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutOnceBorrowByStudentInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutOnceBorrowByStudentInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInputEnvelope
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutStudentInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutStudentInput>
    createMany?: LibraryStudentRequestCreateManyStudentInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingUncheckedCreateNestedManyWithoutStidentInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutStidentInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutStidentInput>
    createMany?: LibraryStudentBorrowingCreateManyStidentInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryBookCopyUpdateManyWithoutCurrentBorrowByStudentNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutCurrentBorrowByStudentInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutCurrentBorrowByStudentInput>
    createMany?: LibraryBookCopyCreateManyCurrentBorrowByStudentInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutCurrentBorrowByStudentInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutCurrentBorrowByStudentInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type LibraryHistoryOfBookCopyUpdateManyWithoutOnceBorrowByStudentNestedInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutOnceBorrowByStudentInput>
    upsert?: Enumerable<LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutOnceBorrowByStudentInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInputEnvelope
    set?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutOnceBorrowByStudentInput>
    updateMany?: Enumerable<LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutOnceBorrowByStudentInput>
    deleteMany?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutStudentInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: LibraryStudentRequestCreateManyStudentInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithoutStidentNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutStidentInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutStidentInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutStidentInput>
    createMany?: LibraryStudentBorrowingCreateManyStidentInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutStidentInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutStidentInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryBookCopyUncheckedUpdateManyWithoutCurrentBorrowByStudentNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutCurrentBorrowByStudentInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutCurrentBorrowByStudentInput>
    createMany?: LibraryBookCopyCreateManyCurrentBorrowByStudentInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutCurrentBorrowByStudentInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutCurrentBorrowByStudentInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutOnceBorrowByStudentNestedInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutOnceBorrowByStudentInput>
    upsert?: Enumerable<LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutOnceBorrowByStudentInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInputEnvelope
    set?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutOnceBorrowByStudentInput>
    updateMany?: Enumerable<LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutOnceBorrowByStudentInput>
    deleteMany?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutStudentInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutStudentInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutStudentInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutStudentInput>
    createMany?: LibraryStudentRequestCreateManyStudentInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUncheckedUpdateManyWithoutStidentNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutStidentInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutStidentInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutStidentInput>
    createMany?: LibraryStudentBorrowingCreateManyStidentInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutStidentInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutStidentInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryUniversityCreateNestedOneWithoutLibraryBookInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryBookInput, LibraryUniversityUncheckedCreateWithoutLibraryBookInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryBookInput
    connect?: LibraryUniversityWhereUniqueInput
  }

  export type LibraryBookCopyCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutBookInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutBookInput>
    createMany?: LibraryBookCopyCreateManyBookInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type BookOnAuthorCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutBookInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutBookInput>
    createMany?: BookOnAuthorCreateManyBookInputEnvelope
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
  }

  export type BookOnCategoryCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutBookInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutBookInput>
    createMany?: BookOnCategoryCreateManyBookInputEnvelope
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
  }

  export type LibraryBookCopyUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutBookInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutBookInput>
    createMany?: LibraryBookCopyCreateManyBookInputEnvelope
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
  }

  export type BookOnAuthorUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutBookInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutBookInput>
    createMany?: BookOnAuthorCreateManyBookInputEnvelope
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
  }

  export type BookOnCategoryUncheckedCreateNestedManyWithoutBookInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutBookInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutBookInput>
    createMany?: BookOnCategoryCreateManyBookInputEnvelope
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
  }

  export type LibraryUniversityUpdateOneRequiredWithoutLibraryBookNestedInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryBookInput, LibraryUniversityUncheckedCreateWithoutLibraryBookInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryBookInput
    upsert?: LibraryUniversityUpsertWithoutLibraryBookInput
    connect?: LibraryUniversityWhereUniqueInput
    update?: XOR<LibraryUniversityUpdateWithoutLibraryBookInput, LibraryUniversityUncheckedUpdateWithoutLibraryBookInput>
  }

  export type LibraryBookCopyUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutBookInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutBookInput>
    createMany?: LibraryBookCopyCreateManyBookInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type BookOnAuthorUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutBookInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookOnAuthorUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookOnAuthorCreateManyBookInputEnvelope
    set?: Enumerable<BookOnAuthorWhereUniqueInput>
    disconnect?: Enumerable<BookOnAuthorWhereUniqueInput>
    delete?: Enumerable<BookOnAuthorWhereUniqueInput>
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
    update?: Enumerable<BookOnAuthorUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookOnAuthorUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookOnAuthorScalarWhereInput>
  }

  export type BookOnCategoryUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutBookInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookOnCategoryUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookOnCategoryCreateManyBookInputEnvelope
    set?: Enumerable<BookOnCategoryWhereUniqueInput>
    disconnect?: Enumerable<BookOnCategoryWhereUniqueInput>
    delete?: Enumerable<BookOnCategoryWhereUniqueInput>
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
    update?: Enumerable<BookOnCategoryUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookOnCategoryUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookOnCategoryScalarWhereInput>
  }

  export type LibraryBookCopyUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<LibraryBookCopyCreateWithoutBookInput>, Enumerable<LibraryBookCopyUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<LibraryBookCopyCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<LibraryBookCopyUpsertWithWhereUniqueWithoutBookInput>
    createMany?: LibraryBookCopyCreateManyBookInputEnvelope
    set?: Enumerable<LibraryBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryBookCopyUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<LibraryBookCopyUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<LibraryBookCopyScalarWhereInput>
  }

  export type BookOnAuthorUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutBookInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookOnAuthorUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookOnAuthorCreateManyBookInputEnvelope
    set?: Enumerable<BookOnAuthorWhereUniqueInput>
    disconnect?: Enumerable<BookOnAuthorWhereUniqueInput>
    delete?: Enumerable<BookOnAuthorWhereUniqueInput>
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
    update?: Enumerable<BookOnAuthorUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookOnAuthorUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookOnAuthorScalarWhereInput>
  }

  export type BookOnCategoryUncheckedUpdateManyWithoutBookNestedInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutBookInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutBookInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutBookInput>
    upsert?: Enumerable<BookOnCategoryUpsertWithWhereUniqueWithoutBookInput>
    createMany?: BookOnCategoryCreateManyBookInputEnvelope
    set?: Enumerable<BookOnCategoryWhereUniqueInput>
    disconnect?: Enumerable<BookOnCategoryWhereUniqueInput>
    delete?: Enumerable<BookOnCategoryWhereUniqueInput>
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
    update?: Enumerable<BookOnCategoryUpdateWithWhereUniqueWithoutBookInput>
    updateMany?: Enumerable<BookOnCategoryUpdateManyWithWhereWithoutBookInput>
    deleteMany?: Enumerable<BookOnCategoryScalarWhereInput>
  }

  export type LibraryBookCreateNestedOneWithoutLibraryBookCopyInput = {
    create?: XOR<LibraryBookCreateWithoutLibraryBookCopyInput, LibraryBookUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutLibraryBookCopyInput
    connect?: LibraryBookWhereUniqueInput
  }

  export type LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryBookCopyInput
    connect?: LibraryUniversityWhereUniqueInput
  }

  export type LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryBookCopyInput, LibraryStudentUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryBookCopyInput
    connect?: LibraryStudentWhereUniqueInput
  }

  export type LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutCopyInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutCopyInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyCopyInputEnvelope
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestCreateNestedManyWithoutBookCopyInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutBookCopyInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutBookCopyInput>
    createMany?: LibraryStudentRequestCreateManyBookCopyInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBookCopyInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBookCopyInput>
    createMany?: LibraryStudentBorrowingCreateManyBookCopyInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutCopyInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutCopyInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyCopyInputEnvelope
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
  }

  export type LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutBookCopyInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutBookCopyInput>
    createMany?: LibraryStudentRequestCreateManyBookCopyInputEnvelope
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
  }

  export type LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBookCopyInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBookCopyInput>
    createMany?: LibraryStudentBorrowingCreateManyBookCopyInputEnvelope
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
  }

  export type LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput = {
    create?: XOR<LibraryBookCreateWithoutLibraryBookCopyInput, LibraryBookUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutLibraryBookCopyInput
    upsert?: LibraryBookUpsertWithoutLibraryBookCopyInput
    connect?: LibraryBookWhereUniqueInput
    update?: XOR<LibraryBookUpdateWithoutLibraryBookCopyInput, LibraryBookUncheckedUpdateWithoutLibraryBookCopyInput>
  }

  export type LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryBookCopyInput
    upsert?: LibraryUniversityUpsertWithoutLibraryBookCopyInput
    disconnect?: boolean
    delete?: boolean
    connect?: LibraryUniversityWhereUniqueInput
    update?: XOR<LibraryUniversityUpdateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedUpdateWithoutLibraryBookCopyInput>
  }

  export type LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryBookCopyInput, LibraryStudentUncheckedCreateWithoutLibraryBookCopyInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryBookCopyInput
    upsert?: LibraryStudentUpsertWithoutLibraryBookCopyInput
    disconnect?: boolean
    delete?: boolean
    connect?: LibraryStudentWhereUniqueInput
    update?: XOR<LibraryStudentUpdateWithoutLibraryBookCopyInput, LibraryStudentUncheckedUpdateWithoutLibraryBookCopyInput>
  }

  export type LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutCopyInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutCopyInput>
    upsert?: Enumerable<LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutCopyInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyCopyInputEnvelope
    set?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutCopyInput>
    updateMany?: Enumerable<LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutCopyInput>
    deleteMany?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutBookCopyInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutBookCopyInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutBookCopyInput>
    createMany?: LibraryStudentRequestCreateManyBookCopyInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutBookCopyInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutBookCopyInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBookCopyInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBookCopyInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBookCopyInput>
    createMany?: LibraryStudentBorrowingCreateManyBookCopyInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBookCopyInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutBookCopyInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput = {
    create?: XOR<Enumerable<LibraryHistoryOfBookCopyCreateWithoutCopyInput>, Enumerable<LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>>
    connectOrCreate?: Enumerable<LibraryHistoryOfBookCopyCreateOrConnectWithoutCopyInput>
    upsert?: Enumerable<LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutCopyInput>
    createMany?: LibraryHistoryOfBookCopyCreateManyCopyInputEnvelope
    set?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    disconnect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    delete?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    connect?: Enumerable<LibraryHistoryOfBookCopyWhereUniqueInput>
    update?: Enumerable<LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutCopyInput>
    updateMany?: Enumerable<LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutCopyInput>
    deleteMany?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput = {
    create?: XOR<Enumerable<LibraryStudentRequestCreateWithoutBookCopyInput>, Enumerable<LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentRequestCreateOrConnectWithoutBookCopyInput>
    upsert?: Enumerable<LibraryStudentRequestUpsertWithWhereUniqueWithoutBookCopyInput>
    createMany?: LibraryStudentRequestCreateManyBookCopyInputEnvelope
    set?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    delete?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    connect?: Enumerable<LibraryStudentRequestWhereUniqueInput>
    update?: Enumerable<LibraryStudentRequestUpdateWithWhereUniqueWithoutBookCopyInput>
    updateMany?: Enumerable<LibraryStudentRequestUpdateManyWithWhereWithoutBookCopyInput>
    deleteMany?: Enumerable<LibraryStudentRequestScalarWhereInput>
  }

  export type LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput = {
    create?: XOR<Enumerable<LibraryStudentBorrowingCreateWithoutBookCopyInput>, Enumerable<LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>>
    connectOrCreate?: Enumerable<LibraryStudentBorrowingCreateOrConnectWithoutBookCopyInput>
    upsert?: Enumerable<LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBookCopyInput>
    createMany?: LibraryStudentBorrowingCreateManyBookCopyInputEnvelope
    set?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    disconnect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    delete?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    connect?: Enumerable<LibraryStudentBorrowingWhereUniqueInput>
    update?: Enumerable<LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBookCopyInput>
    updateMany?: Enumerable<LibraryStudentBorrowingUpdateManyWithWhereWithoutBookCopyInput>
    deleteMany?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
  }

  export type LibraryBookCopyCreateNestedOneWithoutHistoryOfBookCopyInput = {
    create?: XOR<LibraryBookCopyCreateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedCreateWithoutHistoryOfBookCopyInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutHistoryOfBookCopyInput
    connect?: LibraryBookCopyWhereUniqueInput
  }

  export type LibraryStudentCreateNestedOneWithoutHistoryOfBookCopyInput = {
    create?: XOR<LibraryStudentCreateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedCreateWithoutHistoryOfBookCopyInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutHistoryOfBookCopyInput
    connect?: LibraryStudentWhereUniqueInput
  }

  export type LibraryBookCopyUpdateOneRequiredWithoutHistoryOfBookCopyNestedInput = {
    create?: XOR<LibraryBookCopyCreateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedCreateWithoutHistoryOfBookCopyInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutHistoryOfBookCopyInput
    upsert?: LibraryBookCopyUpsertWithoutHistoryOfBookCopyInput
    connect?: LibraryBookCopyWhereUniqueInput
    update?: XOR<LibraryBookCopyUpdateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedUpdateWithoutHistoryOfBookCopyInput>
  }

  export type LibraryStudentUpdateOneWithoutHistoryOfBookCopyNestedInput = {
    create?: XOR<LibraryStudentCreateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedCreateWithoutHistoryOfBookCopyInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutHistoryOfBookCopyInput
    upsert?: LibraryStudentUpsertWithoutHistoryOfBookCopyInput
    disconnect?: boolean
    delete?: boolean
    connect?: LibraryStudentWhereUniqueInput
    update?: XOR<LibraryStudentUpdateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedUpdateWithoutHistoryOfBookCopyInput>
  }

  export type BookOnCategoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutCategoryInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutCategoryInput>
    createMany?: BookOnCategoryCreateManyCategoryInputEnvelope
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
  }

  export type BookOnCategoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutCategoryInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutCategoryInput>
    createMany?: BookOnCategoryCreateManyCategoryInputEnvelope
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
  }

  export type BookOnCategoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutCategoryInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BookOnCategoryUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BookOnCategoryCreateManyCategoryInputEnvelope
    set?: Enumerable<BookOnCategoryWhereUniqueInput>
    disconnect?: Enumerable<BookOnCategoryWhereUniqueInput>
    delete?: Enumerable<BookOnCategoryWhereUniqueInput>
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
    update?: Enumerable<BookOnCategoryUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BookOnCategoryUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BookOnCategoryScalarWhereInput>
  }

  export type BookOnCategoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BookOnCategoryCreateWithoutCategoryInput>, Enumerable<BookOnCategoryUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BookOnCategoryCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BookOnCategoryUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BookOnCategoryCreateManyCategoryInputEnvelope
    set?: Enumerable<BookOnCategoryWhereUniqueInput>
    disconnect?: Enumerable<BookOnCategoryWhereUniqueInput>
    delete?: Enumerable<BookOnCategoryWhereUniqueInput>
    connect?: Enumerable<BookOnCategoryWhereUniqueInput>
    update?: Enumerable<BookOnCategoryUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BookOnCategoryUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BookOnCategoryScalarWhereInput>
  }

  export type BookOnAuthorCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutAuthorInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutAuthorInput>
    createMany?: BookOnAuthorCreateManyAuthorInputEnvelope
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
  }

  export type BookOnAuthorUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutAuthorInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutAuthorInput>
    createMany?: BookOnAuthorCreateManyAuthorInputEnvelope
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
  }

  export type BookOnAuthorUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutAuthorInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<BookOnAuthorUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: BookOnAuthorCreateManyAuthorInputEnvelope
    set?: Enumerable<BookOnAuthorWhereUniqueInput>
    disconnect?: Enumerable<BookOnAuthorWhereUniqueInput>
    delete?: Enumerable<BookOnAuthorWhereUniqueInput>
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
    update?: Enumerable<BookOnAuthorUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<BookOnAuthorUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<BookOnAuthorScalarWhereInput>
  }

  export type BookOnAuthorUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<Enumerable<BookOnAuthorCreateWithoutAuthorInput>, Enumerable<BookOnAuthorUncheckedCreateWithoutAuthorInput>>
    connectOrCreate?: Enumerable<BookOnAuthorCreateOrConnectWithoutAuthorInput>
    upsert?: Enumerable<BookOnAuthorUpsertWithWhereUniqueWithoutAuthorInput>
    createMany?: BookOnAuthorCreateManyAuthorInputEnvelope
    set?: Enumerable<BookOnAuthorWhereUniqueInput>
    disconnect?: Enumerable<BookOnAuthorWhereUniqueInput>
    delete?: Enumerable<BookOnAuthorWhereUniqueInput>
    connect?: Enumerable<BookOnAuthorWhereUniqueInput>
    update?: Enumerable<BookOnAuthorUpdateWithWhereUniqueWithoutAuthorInput>
    updateMany?: Enumerable<BookOnAuthorUpdateManyWithWhereWithoutAuthorInput>
    deleteMany?: Enumerable<BookOnAuthorScalarWhereInput>
  }

  export type LibraryBookCreateNestedOneWithoutBookOnAuthorInput = {
    create?: XOR<LibraryBookCreateWithoutBookOnAuthorInput, LibraryBookUncheckedCreateWithoutBookOnAuthorInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutBookOnAuthorInput
    connect?: LibraryBookWhereUniqueInput
  }

  export type LibraryAuthorCreateNestedOneWithoutBookOnAuthorInput = {
    create?: XOR<LibraryAuthorCreateWithoutBookOnAuthorInput, LibraryAuthorUncheckedCreateWithoutBookOnAuthorInput>
    connectOrCreate?: LibraryAuthorCreateOrConnectWithoutBookOnAuthorInput
    connect?: LibraryAuthorWhereUniqueInput
  }

  export type LibraryBookUpdateOneRequiredWithoutBookOnAuthorNestedInput = {
    create?: XOR<LibraryBookCreateWithoutBookOnAuthorInput, LibraryBookUncheckedCreateWithoutBookOnAuthorInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutBookOnAuthorInput
    upsert?: LibraryBookUpsertWithoutBookOnAuthorInput
    connect?: LibraryBookWhereUniqueInput
    update?: XOR<LibraryBookUpdateWithoutBookOnAuthorInput, LibraryBookUncheckedUpdateWithoutBookOnAuthorInput>
  }

  export type LibraryAuthorUpdateOneRequiredWithoutBookOnAuthorNestedInput = {
    create?: XOR<LibraryAuthorCreateWithoutBookOnAuthorInput, LibraryAuthorUncheckedCreateWithoutBookOnAuthorInput>
    connectOrCreate?: LibraryAuthorCreateOrConnectWithoutBookOnAuthorInput
    upsert?: LibraryAuthorUpsertWithoutBookOnAuthorInput
    connect?: LibraryAuthorWhereUniqueInput
    update?: XOR<LibraryAuthorUpdateWithoutBookOnAuthorInput, LibraryAuthorUncheckedUpdateWithoutBookOnAuthorInput>
  }

  export type LibraryBookCreateNestedOneWithoutBookOnCategoryInput = {
    create?: XOR<LibraryBookCreateWithoutBookOnCategoryInput, LibraryBookUncheckedCreateWithoutBookOnCategoryInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutBookOnCategoryInput
    connect?: LibraryBookWhereUniqueInput
  }

  export type LibraryCategoryCreateNestedOneWithoutBookOnCategoryInput = {
    create?: XOR<LibraryCategoryCreateWithoutBookOnCategoryInput, LibraryCategoryUncheckedCreateWithoutBookOnCategoryInput>
    connectOrCreate?: LibraryCategoryCreateOrConnectWithoutBookOnCategoryInput
    connect?: LibraryCategoryWhereUniqueInput
  }

  export type LibraryBookUpdateOneRequiredWithoutBookOnCategoryNestedInput = {
    create?: XOR<LibraryBookCreateWithoutBookOnCategoryInput, LibraryBookUncheckedCreateWithoutBookOnCategoryInput>
    connectOrCreate?: LibraryBookCreateOrConnectWithoutBookOnCategoryInput
    upsert?: LibraryBookUpsertWithoutBookOnCategoryInput
    connect?: LibraryBookWhereUniqueInput
    update?: XOR<LibraryBookUpdateWithoutBookOnCategoryInput, LibraryBookUncheckedUpdateWithoutBookOnCategoryInput>
  }

  export type LibraryCategoryUpdateOneRequiredWithoutBookOnCategoryNestedInput = {
    create?: XOR<LibraryCategoryCreateWithoutBookOnCategoryInput, LibraryCategoryUncheckedCreateWithoutBookOnCategoryInput>
    connectOrCreate?: LibraryCategoryCreateOrConnectWithoutBookOnCategoryInput
    upsert?: LibraryCategoryUpsertWithoutBookOnCategoryInput
    connect?: LibraryCategoryWhereUniqueInput
    update?: XOR<LibraryCategoryUpdateWithoutBookOnCategoryInput, LibraryCategoryUncheckedUpdateWithoutBookOnCategoryInput>
  }

  export type LibraryStudentCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput
    connect?: LibraryStudentWhereUniqueInput
  }

  export type LibraryBookCopyCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput = {
    create?: XOR<LibraryBookCopyCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput
    connect?: LibraryBookCopyWhereUniqueInput
  }

  export type LibraryUniversityCreateNestedOneWithoutFromUniversityInput = {
    create?: XOR<LibraryUniversityCreateWithoutFromUniversityInput, LibraryUniversityUncheckedCreateWithoutFromUniversityInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutFromUniversityInput
    connect?: LibraryUniversityWhereUniqueInput
  }

  export type LibraryUniversityCreateNestedOneWithoutToUniversityInput = {
    create?: XOR<LibraryUniversityCreateWithoutToUniversityInput, LibraryUniversityUncheckedCreateWithoutToUniversityInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutToUniversityInput
    connect?: LibraryUniversityWhereUniqueInput
  }

  export type LibraryStudentUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput
    upsert?: LibraryStudentUpsertWithoutLibraryHistoryOfStudentBorrowingInput
    connect?: LibraryStudentWhereUniqueInput
    update?: XOR<LibraryStudentUpdateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryBookCopyUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput = {
    create?: XOR<LibraryBookCopyCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput
    upsert?: LibraryBookCopyUpsertWithoutLibraryHistoryOfStudentBorrowingInput
    connect?: LibraryBookCopyWhereUniqueInput
    update?: XOR<LibraryBookCopyUpdateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryUniversityUpdateOneRequiredWithoutFromUniversityNestedInput = {
    create?: XOR<LibraryUniversityCreateWithoutFromUniversityInput, LibraryUniversityUncheckedCreateWithoutFromUniversityInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutFromUniversityInput
    upsert?: LibraryUniversityUpsertWithoutFromUniversityInput
    connect?: LibraryUniversityWhereUniqueInput
    update?: XOR<LibraryUniversityUpdateWithoutFromUniversityInput, LibraryUniversityUncheckedUpdateWithoutFromUniversityInput>
  }

  export type LibraryUniversityUpdateOneRequiredWithoutToUniversityNestedInput = {
    create?: XOR<LibraryUniversityCreateWithoutToUniversityInput, LibraryUniversityUncheckedCreateWithoutToUniversityInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutToUniversityInput
    upsert?: LibraryUniversityUpsertWithoutToUniversityInput
    connect?: LibraryUniversityWhereUniqueInput
    update?: XOR<LibraryUniversityUpdateWithoutToUniversityInput, LibraryUniversityUncheckedUpdateWithoutToUniversityInput>
  }

  export type LibraryStudentCreateNestedOneWithoutLibraryStudentBorrowingInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryStudentBorrowingInput
    connect?: LibraryStudentWhereUniqueInput
  }

  export type LibraryBookCopyCreateNestedOneWithoutLibraryStudentBorrowingInput = {
    create?: XOR<LibraryBookCopyCreateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutLibraryStudentBorrowingInput
    connect?: LibraryBookCopyWhereUniqueInput
  }

  export type LibraryUniversityCreateNestedOneWithoutLibraryStudentBorrowingInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryStudentBorrowingInput
    connect?: LibraryUniversityWhereUniqueInput
  }

  export type LibraryStudentUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput = {
    create?: XOR<LibraryStudentCreateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryStudentCreateOrConnectWithoutLibraryStudentBorrowingInput
    upsert?: LibraryStudentUpsertWithoutLibraryStudentBorrowingInput
    connect?: LibraryStudentWhereUniqueInput
    update?: XOR<LibraryStudentUpdateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedUpdateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryBookCopyUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput = {
    create?: XOR<LibraryBookCopyCreateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryBookCopyCreateOrConnectWithoutLibraryStudentBorrowingInput
    upsert?: LibraryBookCopyUpsertWithoutLibraryStudentBorrowingInput
    connect?: LibraryBookCopyWhereUniqueInput
    update?: XOR<LibraryBookCopyUpdateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedUpdateWithoutLibraryStudentBorrowingInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type LibraryUniversityUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput = {
    create?: XOR<LibraryUniversityCreateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedCreateWithoutLibraryStudentBorrowingInput>
    connectOrCreate?: LibraryUniversityCreateOrConnectWithoutLibraryStudentBorrowingInput
    upsert?: LibraryUniversityUpsertWithoutLibraryStudentBorrowingInput
    connect?: LibraryUniversityWhereUniqueInput
    update?: XOR<LibraryUniversityUpdateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedUpdateWithoutLibraryStudentBorrowingInput>
  }

  export type MeetingUserBookedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutUserInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutUserInput>
    createMany?: MeetingUserBookedCreateManyUserInputEnvelope
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
  }

  export type MeetingUserAvailableCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeetingUserAvailableCreateWithoutUserInput>, Enumerable<MeetingUserAvailableUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserAvailableCreateOrConnectWithoutUserInput>
    createMany?: MeetingUserAvailableCreateManyUserInputEnvelope
    connect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
  }

  export type MeetingRoomBookedCreateNestedManyWithoutByUserIdInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutByUserIdInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutByUserIdInput>
    createMany?: MeetingRoomBookedCreateManyByUserIdInputEnvelope
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
  }

  export type MeetingUserBookedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutUserInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutUserInput>
    createMany?: MeetingUserBookedCreateManyUserInputEnvelope
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
  }

  export type MeetingUserAvailableUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<MeetingUserAvailableCreateWithoutUserInput>, Enumerable<MeetingUserAvailableUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserAvailableCreateOrConnectWithoutUserInput>
    createMany?: MeetingUserAvailableCreateManyUserInputEnvelope
    connect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
  }

  export type MeetingRoomBookedUncheckedCreateNestedManyWithoutByUserIdInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutByUserIdInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutByUserIdInput>
    createMany?: MeetingRoomBookedCreateManyByUserIdInputEnvelope
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
  }

  export type MeetingUserBookedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutUserInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeetingUserBookedUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeetingUserBookedCreateManyUserInputEnvelope
    set?: Enumerable<MeetingUserBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    delete?: Enumerable<MeetingUserBookedWhereUniqueInput>
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    update?: Enumerable<MeetingUserBookedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeetingUserBookedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeetingUserBookedScalarWhereInput>
  }

  export type MeetingUserAvailableUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MeetingUserAvailableCreateWithoutUserInput>, Enumerable<MeetingUserAvailableUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserAvailableCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeetingUserAvailableUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeetingUserAvailableCreateManyUserInputEnvelope
    set?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    delete?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    connect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    update?: Enumerable<MeetingUserAvailableUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeetingUserAvailableUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeetingUserAvailableScalarWhereInput>
  }

  export type MeetingRoomBookedUpdateManyWithoutByUserIdNestedInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutByUserIdInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutByUserIdInput>
    upsert?: Enumerable<MeetingRoomBookedUpsertWithWhereUniqueWithoutByUserIdInput>
    createMany?: MeetingRoomBookedCreateManyByUserIdInputEnvelope
    set?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    delete?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    update?: Enumerable<MeetingRoomBookedUpdateWithWhereUniqueWithoutByUserIdInput>
    updateMany?: Enumerable<MeetingRoomBookedUpdateManyWithWhereWithoutByUserIdInput>
    deleteMany?: Enumerable<MeetingRoomBookedScalarWhereInput>
  }

  export type MeetingUserBookedUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutUserInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeetingUserBookedUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeetingUserBookedCreateManyUserInputEnvelope
    set?: Enumerable<MeetingUserBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    delete?: Enumerable<MeetingUserBookedWhereUniqueInput>
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    update?: Enumerable<MeetingUserBookedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeetingUserBookedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeetingUserBookedScalarWhereInput>
  }

  export type MeetingUserAvailableUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<MeetingUserAvailableCreateWithoutUserInput>, Enumerable<MeetingUserAvailableUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<MeetingUserAvailableCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<MeetingUserAvailableUpsertWithWhereUniqueWithoutUserInput>
    createMany?: MeetingUserAvailableCreateManyUserInputEnvelope
    set?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    delete?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    connect?: Enumerable<MeetingUserAvailableWhereUniqueInput>
    update?: Enumerable<MeetingUserAvailableUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<MeetingUserAvailableUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<MeetingUserAvailableScalarWhereInput>
  }

  export type MeetingRoomBookedUncheckedUpdateManyWithoutByUserIdNestedInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutByUserIdInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutByUserIdInput>
    upsert?: Enumerable<MeetingRoomBookedUpsertWithWhereUniqueWithoutByUserIdInput>
    createMany?: MeetingRoomBookedCreateManyByUserIdInputEnvelope
    set?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    delete?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    update?: Enumerable<MeetingRoomBookedUpdateWithWhereUniqueWithoutByUserIdInput>
    updateMany?: Enumerable<MeetingRoomBookedUpdateManyWithWhereWithoutByUserIdInput>
    deleteMany?: Enumerable<MeetingRoomBookedScalarWhereInput>
  }

  export type MeetingUserCreateNestedOneWithoutMeetingUserBookedInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingUserBookedInput, MeetingUserUncheckedCreateWithoutMeetingUserBookedInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingUserBookedInput
    connect?: MeetingUserWhereUniqueInput
  }

  export type MeetingRoomCreateNestedOneWithoutMeetingUserBookedInput = {
    create?: XOR<MeetingRoomCreateWithoutMeetingUserBookedInput, MeetingRoomUncheckedCreateWithoutMeetingUserBookedInput>
    connectOrCreate?: MeetingRoomCreateOrConnectWithoutMeetingUserBookedInput
    connect?: MeetingRoomWhereUniqueInput
  }

  export type MeetingMembersCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<MeetingMembersCreateWithoutBookingInput>, Enumerable<MeetingMembersUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<MeetingMembersCreateOrConnectWithoutBookingInput>
    createMany?: MeetingMembersCreateManyBookingInputEnvelope
    connect?: Enumerable<MeetingMembersWhereUniqueInput>
  }

  export type MeetingMembersUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<Enumerable<MeetingMembersCreateWithoutBookingInput>, Enumerable<MeetingMembersUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<MeetingMembersCreateOrConnectWithoutBookingInput>
    createMany?: MeetingMembersCreateManyBookingInputEnvelope
    connect?: Enumerable<MeetingMembersWhereUniqueInput>
  }

  export type MeetingUserUpdateOneRequiredWithoutMeetingUserBookedNestedInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingUserBookedInput, MeetingUserUncheckedCreateWithoutMeetingUserBookedInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingUserBookedInput
    upsert?: MeetingUserUpsertWithoutMeetingUserBookedInput
    connect?: MeetingUserWhereUniqueInput
    update?: XOR<MeetingUserUpdateWithoutMeetingUserBookedInput, MeetingUserUncheckedUpdateWithoutMeetingUserBookedInput>
  }

  export type MeetingRoomUpdateOneRequiredWithoutMeetingUserBookedNestedInput = {
    create?: XOR<MeetingRoomCreateWithoutMeetingUserBookedInput, MeetingRoomUncheckedCreateWithoutMeetingUserBookedInput>
    connectOrCreate?: MeetingRoomCreateOrConnectWithoutMeetingUserBookedInput
    upsert?: MeetingRoomUpsertWithoutMeetingUserBookedInput
    connect?: MeetingRoomWhereUniqueInput
    update?: XOR<MeetingRoomUpdateWithoutMeetingUserBookedInput, MeetingRoomUncheckedUpdateWithoutMeetingUserBookedInput>
  }

  export type MeetingMembersUpdateManyWithoutBookingNestedInput = {
    create?: XOR<Enumerable<MeetingMembersCreateWithoutBookingInput>, Enumerable<MeetingMembersUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<MeetingMembersCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<MeetingMembersUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: MeetingMembersCreateManyBookingInputEnvelope
    set?: Enumerable<MeetingMembersWhereUniqueInput>
    disconnect?: Enumerable<MeetingMembersWhereUniqueInput>
    delete?: Enumerable<MeetingMembersWhereUniqueInput>
    connect?: Enumerable<MeetingMembersWhereUniqueInput>
    update?: Enumerable<MeetingMembersUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<MeetingMembersUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<MeetingMembersScalarWhereInput>
  }

  export type MeetingMembersUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<Enumerable<MeetingMembersCreateWithoutBookingInput>, Enumerable<MeetingMembersUncheckedCreateWithoutBookingInput>>
    connectOrCreate?: Enumerable<MeetingMembersCreateOrConnectWithoutBookingInput>
    upsert?: Enumerable<MeetingMembersUpsertWithWhereUniqueWithoutBookingInput>
    createMany?: MeetingMembersCreateManyBookingInputEnvelope
    set?: Enumerable<MeetingMembersWhereUniqueInput>
    disconnect?: Enumerable<MeetingMembersWhereUniqueInput>
    delete?: Enumerable<MeetingMembersWhereUniqueInput>
    connect?: Enumerable<MeetingMembersWhereUniqueInput>
    update?: Enumerable<MeetingMembersUpdateWithWhereUniqueWithoutBookingInput>
    updateMany?: Enumerable<MeetingMembersUpdateManyWithWhereWithoutBookingInput>
    deleteMany?: Enumerable<MeetingMembersScalarWhereInput>
  }

  export type MeetingUserBookedCreateNestedOneWithoutMeetingMembersInput = {
    create?: XOR<MeetingUserBookedCreateWithoutMeetingMembersInput, MeetingUserBookedUncheckedCreateWithoutMeetingMembersInput>
    connectOrCreate?: MeetingUserBookedCreateOrConnectWithoutMeetingMembersInput
    connect?: MeetingUserBookedWhereUniqueInput
  }

  export type MeetingUserBookedUpdateOneRequiredWithoutMeetingMembersNestedInput = {
    create?: XOR<MeetingUserBookedCreateWithoutMeetingMembersInput, MeetingUserBookedUncheckedCreateWithoutMeetingMembersInput>
    connectOrCreate?: MeetingUserBookedCreateOrConnectWithoutMeetingMembersInput
    upsert?: MeetingUserBookedUpsertWithoutMeetingMembersInput
    connect?: MeetingUserBookedWhereUniqueInput
    update?: XOR<MeetingUserBookedUpdateWithoutMeetingMembersInput, MeetingUserBookedUncheckedUpdateWithoutMeetingMembersInput>
  }

  export type MeetingUserCreateNestedOneWithoutMeetingUserAvailableInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingUserAvailableInput, MeetingUserUncheckedCreateWithoutMeetingUserAvailableInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingUserAvailableInput
    connect?: MeetingUserWhereUniqueInput
  }

  export type MeetingUserUpdateOneRequiredWithoutMeetingUserAvailableNestedInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingUserAvailableInput, MeetingUserUncheckedCreateWithoutMeetingUserAvailableInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingUserAvailableInput
    upsert?: MeetingUserUpsertWithoutMeetingUserAvailableInput
    connect?: MeetingUserWhereUniqueInput
    update?: XOR<MeetingUserUpdateWithoutMeetingUserAvailableInput, MeetingUserUncheckedUpdateWithoutMeetingUserAvailableInput>
  }

  export type MeetingUserBookedCreateNestedManyWithoutMeetingRoomInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutMeetingRoomInput>
    createMany?: MeetingUserBookedCreateManyMeetingRoomInputEnvelope
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
  }

  export type MeetingRoomBookedCreateNestedManyWithoutMeetingRoomInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutMeetingRoomInput>
    createMany?: MeetingRoomBookedCreateManyMeetingRoomInputEnvelope
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
  }

  export type MeetingUserBookedUncheckedCreateNestedManyWithoutMeetingRoomInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutMeetingRoomInput>
    createMany?: MeetingUserBookedCreateManyMeetingRoomInputEnvelope
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
  }

  export type MeetingRoomBookedUncheckedCreateNestedManyWithoutMeetingRoomInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutMeetingRoomInput>
    createMany?: MeetingRoomBookedCreateManyMeetingRoomInputEnvelope
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
  }

  export type MeetingUserBookedUpdateManyWithoutMeetingRoomNestedInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutMeetingRoomInput>
    upsert?: Enumerable<MeetingUserBookedUpsertWithWhereUniqueWithoutMeetingRoomInput>
    createMany?: MeetingUserBookedCreateManyMeetingRoomInputEnvelope
    set?: Enumerable<MeetingUserBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    delete?: Enumerable<MeetingUserBookedWhereUniqueInput>
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    update?: Enumerable<MeetingUserBookedUpdateWithWhereUniqueWithoutMeetingRoomInput>
    updateMany?: Enumerable<MeetingUserBookedUpdateManyWithWhereWithoutMeetingRoomInput>
    deleteMany?: Enumerable<MeetingUserBookedScalarWhereInput>
  }

  export type MeetingRoomBookedUpdateManyWithoutMeetingRoomNestedInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutMeetingRoomInput>
    upsert?: Enumerable<MeetingRoomBookedUpsertWithWhereUniqueWithoutMeetingRoomInput>
    createMany?: MeetingRoomBookedCreateManyMeetingRoomInputEnvelope
    set?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    delete?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    update?: Enumerable<MeetingRoomBookedUpdateWithWhereUniqueWithoutMeetingRoomInput>
    updateMany?: Enumerable<MeetingRoomBookedUpdateManyWithWhereWithoutMeetingRoomInput>
    deleteMany?: Enumerable<MeetingRoomBookedScalarWhereInput>
  }

  export type MeetingUserBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput = {
    create?: XOR<Enumerable<MeetingUserBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingUserBookedCreateOrConnectWithoutMeetingRoomInput>
    upsert?: Enumerable<MeetingUserBookedUpsertWithWhereUniqueWithoutMeetingRoomInput>
    createMany?: MeetingUserBookedCreateManyMeetingRoomInputEnvelope
    set?: Enumerable<MeetingUserBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    delete?: Enumerable<MeetingUserBookedWhereUniqueInput>
    connect?: Enumerable<MeetingUserBookedWhereUniqueInput>
    update?: Enumerable<MeetingUserBookedUpdateWithWhereUniqueWithoutMeetingRoomInput>
    updateMany?: Enumerable<MeetingUserBookedUpdateManyWithWhereWithoutMeetingRoomInput>
    deleteMany?: Enumerable<MeetingUserBookedScalarWhereInput>
  }

  export type MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput = {
    create?: XOR<Enumerable<MeetingRoomBookedCreateWithoutMeetingRoomInput>, Enumerable<MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>>
    connectOrCreate?: Enumerable<MeetingRoomBookedCreateOrConnectWithoutMeetingRoomInput>
    upsert?: Enumerable<MeetingRoomBookedUpsertWithWhereUniqueWithoutMeetingRoomInput>
    createMany?: MeetingRoomBookedCreateManyMeetingRoomInputEnvelope
    set?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    disconnect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    delete?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    connect?: Enumerable<MeetingRoomBookedWhereUniqueInput>
    update?: Enumerable<MeetingRoomBookedUpdateWithWhereUniqueWithoutMeetingRoomInput>
    updateMany?: Enumerable<MeetingRoomBookedUpdateManyWithWhereWithoutMeetingRoomInput>
    deleteMany?: Enumerable<MeetingRoomBookedScalarWhereInput>
  }

  export type MeetingRoomCreateNestedOneWithoutMeetingRoomBookedInput = {
    create?: XOR<MeetingRoomCreateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedCreateWithoutMeetingRoomBookedInput>
    connectOrCreate?: MeetingRoomCreateOrConnectWithoutMeetingRoomBookedInput
    connect?: MeetingRoomWhereUniqueInput
  }

  export type MeetingUserCreateNestedOneWithoutMeetingRoomBookedInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingRoomBookedInput, MeetingUserUncheckedCreateWithoutMeetingRoomBookedInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingRoomBookedInput
    connect?: MeetingUserWhereUniqueInput
  }

  export type MeetingRoomUpdateOneRequiredWithoutMeetingRoomBookedNestedInput = {
    create?: XOR<MeetingRoomCreateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedCreateWithoutMeetingRoomBookedInput>
    connectOrCreate?: MeetingRoomCreateOrConnectWithoutMeetingRoomBookedInput
    upsert?: MeetingRoomUpsertWithoutMeetingRoomBookedInput
    connect?: MeetingRoomWhereUniqueInput
    update?: XOR<MeetingRoomUpdateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedUpdateWithoutMeetingRoomBookedInput>
  }

  export type MeetingUserUpdateOneRequiredWithoutMeetingRoomBookedNestedInput = {
    create?: XOR<MeetingUserCreateWithoutMeetingRoomBookedInput, MeetingUserUncheckedCreateWithoutMeetingRoomBookedInput>
    connectOrCreate?: MeetingUserCreateOrConnectWithoutMeetingRoomBookedInput
    upsert?: MeetingUserUpsertWithoutMeetingRoomBookedInput
    connect?: MeetingUserWhereUniqueInput
    update?: XOR<MeetingUserUpdateWithoutMeetingRoomBookedInput, MeetingUserUncheckedUpdateWithoutMeetingRoomBookedInput>
  }

  export type TriviaQuizCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
  }

  export type TriviaRoundCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
  }

  export type TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
  }

  export type TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
  }

  export type TriviaQuizUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaQuizWhereUniqueInput>
    delete?: Enumerable<TriviaQuizWhereUniqueInput>
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
    update?: Enumerable<TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaQuizUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaQuizScalarWhereInput>
  }

  export type TriviaRoundUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaRoundWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundWhereUniqueInput>
    delete?: Enumerable<TriviaRoundWhereUniqueInput>
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
    update?: Enumerable<TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaRoundUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaRoundScalarWhereInput>
  }

  export type TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaQuizWhereUniqueInput>
    delete?: Enumerable<TriviaQuizWhereUniqueInput>
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
    update?: Enumerable<TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaQuizUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaQuizScalarWhereInput>
  }

  export type TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaRoundWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundWhereUniqueInput>
    delete?: Enumerable<TriviaRoundWhereUniqueInput>
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
    update?: Enumerable<TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaRoundUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaRoundScalarWhereInput>
  }

  export type TriviaCategoryCreateNestedOneWithoutTriviaQuizInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaQuizInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaQuizInput
    connect?: TriviaCategoryWhereUniqueInput
  }

  export type TriviaChoiceCreateNestedOneWithoutTriviaQuizAnswerInput = {
    create?: XOR<TriviaChoiceCreateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedCreateWithoutTriviaQuizAnswerInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutTriviaQuizAnswerInput
    connect?: TriviaChoiceWhereUniqueInput
  }

  export type TriviaRoundQuizCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaChoiceCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
  }

  export type TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
  }

  export type TriviaCategoryUpdateOneRequiredWithoutTriviaQuizNestedInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaQuizInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaQuizInput
    upsert?: TriviaCategoryUpsertWithoutTriviaQuizInput
    connect?: TriviaCategoryWhereUniqueInput
    update?: XOR<TriviaCategoryUpdateWithoutTriviaQuizInput, TriviaCategoryUncheckedUpdateWithoutTriviaQuizInput>
  }

  export type TriviaChoiceUpdateOneRequiredWithoutTriviaQuizAnswerNestedInput = {
    create?: XOR<TriviaChoiceCreateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedCreateWithoutTriviaQuizAnswerInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutTriviaQuizAnswerInput
    upsert?: TriviaChoiceUpsertWithoutTriviaQuizAnswerInput
    connect?: TriviaChoiceWhereUniqueInput
    update?: XOR<TriviaChoiceUpdateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedUpdateWithoutTriviaQuizAnswerInput>
  }

  export type TriviaRoundQuizUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaChoiceUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
    update?: Enumerable<TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaChoiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaChoiceScalarWhereInput>
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
    update?: Enumerable<TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaChoiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaChoiceScalarWhereInput>
  }

  export type TriviaQuizCreateNestedOneWithoutTriviaChoiceInput = {
    create?: XOR<TriviaQuizCreateWithoutTriviaChoiceInput, TriviaQuizUncheckedCreateWithoutTriviaChoiceInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutTriviaChoiceInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaQuizCreateNestedOneWithoutAnswerInput = {
    create?: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutAnswerInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizChoiceInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizChoiceInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInputEnvelope
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
  }

  export type TriviaQuizUncheckedCreateNestedOneWithoutAnswerInput = {
    create?: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutAnswerInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizChoiceInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizChoiceInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInputEnvelope
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
  }

  export type TriviaQuizUpdateOneWithoutTriviaChoiceNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutTriviaChoiceInput, TriviaQuizUncheckedCreateWithoutTriviaChoiceInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutTriviaChoiceInput
    upsert?: TriviaQuizUpsertWithoutTriviaChoiceInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutTriviaChoiceInput, TriviaQuizUncheckedUpdateWithoutTriviaChoiceInput>
  }

  export type TriviaQuizUpdateOneWithoutAnswerNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutAnswerInput
    upsert?: TriviaQuizUpsertWithoutAnswerInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutAnswerInput, TriviaQuizUncheckedUpdateWithoutAnswerInput>
  }

  export type TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizChoiceNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizChoiceInput>
    upsert?: Enumerable<TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizChoiceInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInputEnvelope
    set?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizChoiceInput>
    updateMany?: Enumerable<TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizChoiceInput>
    deleteMany?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
  }

  export type TriviaQuizUncheckedUpdateOneWithoutAnswerNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutAnswerInput
    upsert?: TriviaQuizUpsertWithoutAnswerInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutAnswerInput, TriviaQuizUncheckedUpdateWithoutAnswerInput>
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizChoiceNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizChoiceInput>
    upsert?: Enumerable<TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizChoiceInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInputEnvelope
    set?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizChoiceInput>
    updateMany?: Enumerable<TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizChoiceInput>
    deleteMany?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
  }

  export type TriviaCategoryCreateNestedOneWithoutTriviaRoundInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaRoundInput, TriviaCategoryUncheckedCreateWithoutTriviaRoundInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaRoundInput
    connect?: TriviaCategoryWhereUniqueInput
  }

  export type TriviaRoundQuizCreateNestedManyWithoutRoundInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaCategoryUpdateOneRequiredWithoutTriviaRoundNestedInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaRoundInput, TriviaCategoryUncheckedCreateWithoutTriviaRoundInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaRoundInput
    upsert?: TriviaCategoryUpsertWithoutTriviaRoundInput
    connect?: TriviaCategoryWhereUniqueInput
    update?: XOR<TriviaCategoryUpdateWithoutTriviaRoundInput, TriviaCategoryUncheckedUpdateWithoutTriviaRoundInput>
  }

  export type TriviaRoundQuizUpdateManyWithoutRoundNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaRoundCreateNestedOneWithoutTriviaRoundQuizInput = {
    create?: XOR<TriviaRoundCreateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedCreateWithoutTriviaRoundQuizInput>
    connectOrCreate?: TriviaRoundCreateOrConnectWithoutTriviaRoundQuizInput
    connect?: TriviaRoundWhereUniqueInput
  }

  export type TriviaQuizCreateNestedOneWithoutTriviaRoundQuizInput = {
    create?: XOR<TriviaQuizCreateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedCreateWithoutTriviaRoundQuizInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutTriviaRoundQuizInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
  }

  export type TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
  }

  export type TriviaRoundUpdateOneRequiredWithoutTriviaRoundQuizNestedInput = {
    create?: XOR<TriviaRoundCreateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedCreateWithoutTriviaRoundQuizInput>
    connectOrCreate?: TriviaRoundCreateOrConnectWithoutTriviaRoundQuizInput
    upsert?: TriviaRoundUpsertWithoutTriviaRoundQuizInput
    connect?: TriviaRoundWhereUniqueInput
    update?: XOR<TriviaRoundUpdateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedUpdateWithoutTriviaRoundQuizInput>
  }

  export type TriviaQuizUpdateOneRequiredWithoutTriviaRoundQuizNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedCreateWithoutTriviaRoundQuizInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutTriviaRoundQuizInput
    upsert?: TriviaQuizUpsertWithoutTriviaRoundQuizInput
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedUpdateWithoutTriviaRoundQuizInput>
  }

  export type TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizInput>
    upsert?: Enumerable<TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput>, Enumerable<TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizInput>
    upsert?: Enumerable<TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizInput>
    createMany?: TriviaRoundQuizChoiceCreateManyRoundQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizChoiceWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
  }

  export type TriviaRoundQuizCreateNestedOneWithoutTriviaRoundQuizChoiceInput = {
    create?: XOR<TriviaRoundQuizCreateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
    connectOrCreate?: TriviaRoundQuizCreateOrConnectWithoutTriviaRoundQuizChoiceInput
    connect?: TriviaRoundQuizWhereUniqueInput
  }

  export type TriviaChoiceCreateNestedOneWithoutTriviaRoundQuizChoiceInput = {
    create?: XOR<TriviaChoiceCreateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutTriviaRoundQuizChoiceInput
    connect?: TriviaChoiceWhereUniqueInput
  }

  export type TriviaRoundQuizUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput = {
    create?: XOR<TriviaRoundQuizCreateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
    connectOrCreate?: TriviaRoundQuizCreateOrConnectWithoutTriviaRoundQuizChoiceInput
    upsert?: TriviaRoundQuizUpsertWithoutTriviaRoundQuizChoiceInput
    connect?: TriviaRoundQuizWhereUniqueInput
    update?: XOR<TriviaRoundQuizUpdateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedUpdateWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaChoiceUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput = {
    create?: XOR<TriviaChoiceCreateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutTriviaRoundQuizChoiceInput
    upsert?: TriviaChoiceUpsertWithoutTriviaRoundQuizChoiceInput
    connect?: TriviaChoiceWhereUniqueInput
    update?: XOR<TriviaChoiceUpdateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedUpdateWithoutTriviaRoundQuizChoiceInput>
  }

  export type FollowingCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutFromInput>, Enumerable<FollowingUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutFromInput>
    createMany?: FollowingCreateManyFromInputEnvelope
    connect?: Enumerable<FollowingWhereUniqueInput>
  }

  export type FollowingCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutToInput>, Enumerable<FollowingUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutToInput>
    createMany?: FollowingCreateManyToInputEnvelope
    connect?: Enumerable<FollowingWhereUniqueInput>
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type DirectMsgCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutFromInput>, Enumerable<DirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutFromInput>
    createMany?: DirectMsgCreateManyFromInputEnvelope
    connect?: Enumerable<DirectMsgWhereUniqueInput>
  }

  export type DirectMsgCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutToInput>, Enumerable<DirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutToInput>
    createMany?: DirectMsgCreateManyToInputEnvelope
    connect?: Enumerable<DirectMsgWhereUniqueInput>
  }

  export type ReplyCreateNestedManyWithoutReplyUserInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutReplyUserInput>, Enumerable<ReplyUncheckedCreateWithoutReplyUserInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutReplyUserInput>
    createMany?: ReplyCreateManyReplyUserInputEnvelope
    connect?: Enumerable<ReplyWhereUniqueInput>
  }

  export type FollowingUncheckedCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutFromInput>, Enumerable<FollowingUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutFromInput>
    createMany?: FollowingCreateManyFromInputEnvelope
    connect?: Enumerable<FollowingWhereUniqueInput>
  }

  export type FollowingUncheckedCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutToInput>, Enumerable<FollowingUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutToInput>
    createMany?: FollowingCreateManyToInputEnvelope
    connect?: Enumerable<FollowingWhereUniqueInput>
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    connect?: Enumerable<PostWhereUniqueInput>
  }

  export type DirectMsgUncheckedCreateNestedManyWithoutFromInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutFromInput>, Enumerable<DirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutFromInput>
    createMany?: DirectMsgCreateManyFromInputEnvelope
    connect?: Enumerable<DirectMsgWhereUniqueInput>
  }

  export type DirectMsgUncheckedCreateNestedManyWithoutToInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutToInput>, Enumerable<DirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutToInput>
    createMany?: DirectMsgCreateManyToInputEnvelope
    connect?: Enumerable<DirectMsgWhereUniqueInput>
  }

  export type ReplyUncheckedCreateNestedManyWithoutReplyUserInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutReplyUserInput>, Enumerable<ReplyUncheckedCreateWithoutReplyUserInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutReplyUserInput>
    createMany?: ReplyCreateManyReplyUserInputEnvelope
    connect?: Enumerable<ReplyWhereUniqueInput>
  }

  export type FollowingUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutFromInput>, Enumerable<FollowingUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FollowingUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FollowingCreateManyFromInputEnvelope
    set?: Enumerable<FollowingWhereUniqueInput>
    disconnect?: Enumerable<FollowingWhereUniqueInput>
    delete?: Enumerable<FollowingWhereUniqueInput>
    connect?: Enumerable<FollowingWhereUniqueInput>
    update?: Enumerable<FollowingUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FollowingUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FollowingScalarWhereInput>
  }

  export type FollowingUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutToInput>, Enumerable<FollowingUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FollowingUpsertWithWhereUniqueWithoutToInput>
    createMany?: FollowingCreateManyToInputEnvelope
    set?: Enumerable<FollowingWhereUniqueInput>
    disconnect?: Enumerable<FollowingWhereUniqueInput>
    delete?: Enumerable<FollowingWhereUniqueInput>
    connect?: Enumerable<FollowingWhereUniqueInput>
    update?: Enumerable<FollowingUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FollowingUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FollowingScalarWhereInput>
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type DirectMsgUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutFromInput>, Enumerable<DirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<DirectMsgUpsertWithWhereUniqueWithoutFromInput>
    createMany?: DirectMsgCreateManyFromInputEnvelope
    set?: Enumerable<DirectMsgWhereUniqueInput>
    disconnect?: Enumerable<DirectMsgWhereUniqueInput>
    delete?: Enumerable<DirectMsgWhereUniqueInput>
    connect?: Enumerable<DirectMsgWhereUniqueInput>
    update?: Enumerable<DirectMsgUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<DirectMsgUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<DirectMsgScalarWhereInput>
  }

  export type DirectMsgUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutToInput>, Enumerable<DirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutToInput>
    upsert?: Enumerable<DirectMsgUpsertWithWhereUniqueWithoutToInput>
    createMany?: DirectMsgCreateManyToInputEnvelope
    set?: Enumerable<DirectMsgWhereUniqueInput>
    disconnect?: Enumerable<DirectMsgWhereUniqueInput>
    delete?: Enumerable<DirectMsgWhereUniqueInput>
    connect?: Enumerable<DirectMsgWhereUniqueInput>
    update?: Enumerable<DirectMsgUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<DirectMsgUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<DirectMsgScalarWhereInput>
  }

  export type ReplyUpdateManyWithoutReplyUserNestedInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutReplyUserInput>, Enumerable<ReplyUncheckedCreateWithoutReplyUserInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutReplyUserInput>
    upsert?: Enumerable<ReplyUpsertWithWhereUniqueWithoutReplyUserInput>
    createMany?: ReplyCreateManyReplyUserInputEnvelope
    set?: Enumerable<ReplyWhereUniqueInput>
    disconnect?: Enumerable<ReplyWhereUniqueInput>
    delete?: Enumerable<ReplyWhereUniqueInput>
    connect?: Enumerable<ReplyWhereUniqueInput>
    update?: Enumerable<ReplyUpdateWithWhereUniqueWithoutReplyUserInput>
    updateMany?: Enumerable<ReplyUpdateManyWithWhereWithoutReplyUserInput>
    deleteMany?: Enumerable<ReplyScalarWhereInput>
  }

  export type FollowingUncheckedUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutFromInput>, Enumerable<FollowingUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<FollowingUpsertWithWhereUniqueWithoutFromInput>
    createMany?: FollowingCreateManyFromInputEnvelope
    set?: Enumerable<FollowingWhereUniqueInput>
    disconnect?: Enumerable<FollowingWhereUniqueInput>
    delete?: Enumerable<FollowingWhereUniqueInput>
    connect?: Enumerable<FollowingWhereUniqueInput>
    update?: Enumerable<FollowingUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<FollowingUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<FollowingScalarWhereInput>
  }

  export type FollowingUncheckedUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<FollowingCreateWithoutToInput>, Enumerable<FollowingUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<FollowingCreateOrConnectWithoutToInput>
    upsert?: Enumerable<FollowingUpsertWithWhereUniqueWithoutToInput>
    createMany?: FollowingCreateManyToInputEnvelope
    set?: Enumerable<FollowingWhereUniqueInput>
    disconnect?: Enumerable<FollowingWhereUniqueInput>
    delete?: Enumerable<FollowingWhereUniqueInput>
    connect?: Enumerable<FollowingWhereUniqueInput>
    update?: Enumerable<FollowingUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<FollowingUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<FollowingScalarWhereInput>
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<PostCreateWithoutUserInput>, Enumerable<PostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<PostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<PostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: PostCreateManyUserInputEnvelope
    set?: Enumerable<PostWhereUniqueInput>
    disconnect?: Enumerable<PostWhereUniqueInput>
    delete?: Enumerable<PostWhereUniqueInput>
    connect?: Enumerable<PostWhereUniqueInput>
    update?: Enumerable<PostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PostScalarWhereInput>
  }

  export type DirectMsgUncheckedUpdateManyWithoutFromNestedInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutFromInput>, Enumerable<DirectMsgUncheckedCreateWithoutFromInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutFromInput>
    upsert?: Enumerable<DirectMsgUpsertWithWhereUniqueWithoutFromInput>
    createMany?: DirectMsgCreateManyFromInputEnvelope
    set?: Enumerable<DirectMsgWhereUniqueInput>
    disconnect?: Enumerable<DirectMsgWhereUniqueInput>
    delete?: Enumerable<DirectMsgWhereUniqueInput>
    connect?: Enumerable<DirectMsgWhereUniqueInput>
    update?: Enumerable<DirectMsgUpdateWithWhereUniqueWithoutFromInput>
    updateMany?: Enumerable<DirectMsgUpdateManyWithWhereWithoutFromInput>
    deleteMany?: Enumerable<DirectMsgScalarWhereInput>
  }

  export type DirectMsgUncheckedUpdateManyWithoutToNestedInput = {
    create?: XOR<Enumerable<DirectMsgCreateWithoutToInput>, Enumerable<DirectMsgUncheckedCreateWithoutToInput>>
    connectOrCreate?: Enumerable<DirectMsgCreateOrConnectWithoutToInput>
    upsert?: Enumerable<DirectMsgUpsertWithWhereUniqueWithoutToInput>
    createMany?: DirectMsgCreateManyToInputEnvelope
    set?: Enumerable<DirectMsgWhereUniqueInput>
    disconnect?: Enumerable<DirectMsgWhereUniqueInput>
    delete?: Enumerable<DirectMsgWhereUniqueInput>
    connect?: Enumerable<DirectMsgWhereUniqueInput>
    update?: Enumerable<DirectMsgUpdateWithWhereUniqueWithoutToInput>
    updateMany?: Enumerable<DirectMsgUpdateManyWithWhereWithoutToInput>
    deleteMany?: Enumerable<DirectMsgScalarWhereInput>
  }

  export type ReplyUncheckedUpdateManyWithoutReplyUserNestedInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutReplyUserInput>, Enumerable<ReplyUncheckedCreateWithoutReplyUserInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutReplyUserInput>
    upsert?: Enumerable<ReplyUpsertWithWhereUniqueWithoutReplyUserInput>
    createMany?: ReplyCreateManyReplyUserInputEnvelope
    set?: Enumerable<ReplyWhereUniqueInput>
    disconnect?: Enumerable<ReplyWhereUniqueInput>
    delete?: Enumerable<ReplyWhereUniqueInput>
    connect?: Enumerable<ReplyWhereUniqueInput>
    update?: Enumerable<ReplyUpdateWithWhereUniqueWithoutReplyUserInput>
    updateMany?: Enumerable<ReplyUpdateManyWithWhereWithoutReplyUserInput>
    deleteMany?: Enumerable<ReplyScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFromFolowingInput = {
    create?: XOR<UserCreateWithoutFromFolowingInput, UserUncheckedCreateWithoutFromFolowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFromFolowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutToFollowingInput = {
    create?: XOR<UserCreateWithoutToFollowingInput, UserUncheckedCreateWithoutToFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutToFollowingInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFromFolowingNestedInput = {
    create?: XOR<UserCreateWithoutFromFolowingInput, UserUncheckedCreateWithoutFromFolowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutFromFolowingInput
    upsert?: UserUpsertWithoutFromFolowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFromFolowingInput, UserUncheckedUpdateWithoutFromFolowingInput>
  }

  export type UserUpdateOneRequiredWithoutToFollowingNestedInput = {
    create?: XOR<UserCreateWithoutToFollowingInput, UserUncheckedCreateWithoutToFollowingInput>
    connectOrCreate?: UserCreateOrConnectWithoutToFollowingInput
    upsert?: UserUpsertWithoutToFollowingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutToFollowingInput, UserUncheckedUpdateWithoutToFollowingInput>
  }

  export type UserCreateNestedOneWithoutPostInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    connect?: UserWhereUniqueInput
  }

  export type ReplyCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutPostInput>, Enumerable<ReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutPostInput>
    createMany?: ReplyCreateManyPostInputEnvelope
    connect?: Enumerable<ReplyWhereUniqueInput>
  }

  export type PostOnHashtagCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutPostInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutPostInput>
    createMany?: PostOnHashtagCreateManyPostInputEnvelope
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
  }

  export type ReplyUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutPostInput>, Enumerable<ReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutPostInput>
    createMany?: ReplyCreateManyPostInputEnvelope
    connect?: Enumerable<ReplyWhereUniqueInput>
  }

  export type PostOnHashtagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutPostInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutPostInput>
    createMany?: PostOnHashtagCreateManyPostInputEnvelope
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutPostNestedInput = {
    create?: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostInput
    upsert?: UserUpsertWithoutPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
  }

  export type ReplyUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutPostInput>, Enumerable<ReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReplyUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReplyCreateManyPostInputEnvelope
    set?: Enumerable<ReplyWhereUniqueInput>
    disconnect?: Enumerable<ReplyWhereUniqueInput>
    delete?: Enumerable<ReplyWhereUniqueInput>
    connect?: Enumerable<ReplyWhereUniqueInput>
    update?: Enumerable<ReplyUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReplyUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReplyScalarWhereInput>
  }

  export type PostOnHashtagUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutPostInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<PostOnHashtagUpsertWithWhereUniqueWithoutPostInput>
    createMany?: PostOnHashtagCreateManyPostInputEnvelope
    set?: Enumerable<PostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<PostOnHashtagWhereUniqueInput>
    delete?: Enumerable<PostOnHashtagWhereUniqueInput>
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
    update?: Enumerable<PostOnHashtagUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<PostOnHashtagUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<PostOnHashtagScalarWhereInput>
  }

  export type ReplyUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<ReplyCreateWithoutPostInput>, Enumerable<ReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<ReplyCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<ReplyUpsertWithWhereUniqueWithoutPostInput>
    createMany?: ReplyCreateManyPostInputEnvelope
    set?: Enumerable<ReplyWhereUniqueInput>
    disconnect?: Enumerable<ReplyWhereUniqueInput>
    delete?: Enumerable<ReplyWhereUniqueInput>
    connect?: Enumerable<ReplyWhereUniqueInput>
    update?: Enumerable<ReplyUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<ReplyUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<ReplyScalarWhereInput>
  }

  export type PostOnHashtagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutPostInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<PostOnHashtagUpsertWithWhereUniqueWithoutPostInput>
    createMany?: PostOnHashtagCreateManyPostInputEnvelope
    set?: Enumerable<PostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<PostOnHashtagWhereUniqueInput>
    delete?: Enumerable<PostOnHashtagWhereUniqueInput>
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
    update?: Enumerable<PostOnHashtagUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<PostOnHashtagUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<PostOnHashtagScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFromDirectMessageInput = {
    create?: XOR<UserCreateWithoutFromDirectMessageInput, UserUncheckedCreateWithoutFromDirectMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutFromDirectMessageInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutToDirectMessageInput = {
    create?: XOR<UserCreateWithoutToDirectMessageInput, UserUncheckedCreateWithoutToDirectMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutToDirectMessageInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFromDirectMessageNestedInput = {
    create?: XOR<UserCreateWithoutFromDirectMessageInput, UserUncheckedCreateWithoutFromDirectMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutFromDirectMessageInput
    upsert?: UserUpsertWithoutFromDirectMessageInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFromDirectMessageInput, UserUncheckedUpdateWithoutFromDirectMessageInput>
  }

  export type UserUpdateOneRequiredWithoutToDirectMessageNestedInput = {
    create?: XOR<UserCreateWithoutToDirectMessageInput, UserUncheckedCreateWithoutToDirectMessageInput>
    connectOrCreate?: UserCreateOrConnectWithoutToDirectMessageInput
    upsert?: UserUpsertWithoutToDirectMessageInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutToDirectMessageInput, UserUncheckedUpdateWithoutToDirectMessageInput>
  }

  export type PostOnHashtagCreateNestedManyWithoutHashtagInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutHashtagInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutHashtagInput>
    createMany?: PostOnHashtagCreateManyHashtagInputEnvelope
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
  }

  export type PostOnHashtagUncheckedCreateNestedManyWithoutHashtagInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutHashtagInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutHashtagInput>
    createMany?: PostOnHashtagCreateManyHashtagInputEnvelope
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
  }

  export type PostOnHashtagUpdateManyWithoutHashtagNestedInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutHashtagInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutHashtagInput>
    upsert?: Enumerable<PostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput>
    createMany?: PostOnHashtagCreateManyHashtagInputEnvelope
    set?: Enumerable<PostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<PostOnHashtagWhereUniqueInput>
    delete?: Enumerable<PostOnHashtagWhereUniqueInput>
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
    update?: Enumerable<PostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput>
    updateMany?: Enumerable<PostOnHashtagUpdateManyWithWhereWithoutHashtagInput>
    deleteMany?: Enumerable<PostOnHashtagScalarWhereInput>
  }

  export type PostOnHashtagUncheckedUpdateManyWithoutHashtagNestedInput = {
    create?: XOR<Enumerable<PostOnHashtagCreateWithoutHashtagInput>, Enumerable<PostOnHashtagUncheckedCreateWithoutHashtagInput>>
    connectOrCreate?: Enumerable<PostOnHashtagCreateOrConnectWithoutHashtagInput>
    upsert?: Enumerable<PostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput>
    createMany?: PostOnHashtagCreateManyHashtagInputEnvelope
    set?: Enumerable<PostOnHashtagWhereUniqueInput>
    disconnect?: Enumerable<PostOnHashtagWhereUniqueInput>
    delete?: Enumerable<PostOnHashtagWhereUniqueInput>
    connect?: Enumerable<PostOnHashtagWhereUniqueInput>
    update?: Enumerable<PostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput>
    updateMany?: Enumerable<PostOnHashtagUpdateManyWithWhereWithoutHashtagInput>
    deleteMany?: Enumerable<PostOnHashtagScalarWhereInput>
  }

  export type PostCreateNestedOneWithoutReplyInput = {
    create?: XOR<PostCreateWithoutReplyInput, PostUncheckedCreateWithoutReplyInput>
    connectOrCreate?: PostCreateOrConnectWithoutReplyInput
    connect?: PostWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReplyInput = {
    create?: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplyInput
    connect?: UserWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<PostCreateWithoutReplyInput, PostUncheckedCreateWithoutReplyInput>
    connectOrCreate?: PostCreateOrConnectWithoutReplyInput
    upsert?: PostUpsertWithoutReplyInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutReplyInput, PostUncheckedUpdateWithoutReplyInput>
  }

  export type UserUpdateOneRequiredWithoutReplyNestedInput = {
    create?: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
    connectOrCreate?: UserCreateOrConnectWithoutReplyInput
    upsert?: UserUpsertWithoutReplyInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutReplyInput, UserUncheckedUpdateWithoutReplyInput>
  }

  export type PostCreateNestedOneWithoutPostOnHashtagInput = {
    create?: XOR<PostCreateWithoutPostOnHashtagInput, PostUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostOnHashtagInput
    connect?: PostWhereUniqueInput
  }

  export type HashtagCreateNestedOneWithoutPostOnHashtagInput = {
    create?: XOR<HashtagCreateWithoutPostOnHashtagInput, HashtagUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: HashtagCreateOrConnectWithoutPostOnHashtagInput
    connect?: HashtagWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutPostOnHashtagNestedInput = {
    create?: XOR<PostCreateWithoutPostOnHashtagInput, PostUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostOnHashtagInput
    upsert?: PostUpsertWithoutPostOnHashtagInput
    connect?: PostWhereUniqueInput
    update?: XOR<PostUpdateWithoutPostOnHashtagInput, PostUncheckedUpdateWithoutPostOnHashtagInput>
  }

  export type HashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput = {
    create?: XOR<HashtagCreateWithoutPostOnHashtagInput, HashtagUncheckedCreateWithoutPostOnHashtagInput>
    connectOrCreate?: HashtagCreateOrConnectWithoutPostOnHashtagInput
    upsert?: HashtagUpsertWithoutPostOnHashtagInput
    connect?: HashtagWhereUniqueInput
    update?: XOR<HashtagUpdateWithoutPostOnHashtagInput, HashtagUncheckedUpdateWithoutPostOnHashtagInput>
  }

  export type WashingMachineCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<WashingMachineCreateWithoutBranchInput>, Enumerable<WashingMachineUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<WashingMachineCreateOrConnectWithoutBranchInput>
    createMany?: WashingMachineCreateManyBranchInputEnvelope
    connect?: Enumerable<WashingMachineWhereUniqueInput>
  }

  export type WashingUseHistoryCreateNestedManyWithoutUseAtBranchInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtBranchInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtBranchInput>
    createMany?: WashingUseHistoryCreateManyUseAtBranchInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineUncheckedCreateNestedManyWithoutBranchInput = {
    create?: XOR<Enumerable<WashingMachineCreateWithoutBranchInput>, Enumerable<WashingMachineUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<WashingMachineCreateOrConnectWithoutBranchInput>
    createMany?: WashingMachineCreateManyBranchInputEnvelope
    connect?: Enumerable<WashingMachineWhereUniqueInput>
  }

  export type WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtBranchInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtBranchInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtBranchInput>
    createMany?: WashingUseHistoryCreateManyUseAtBranchInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<WashingMachineCreateWithoutBranchInput>, Enumerable<WashingMachineUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<WashingMachineCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<WashingMachineUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: WashingMachineCreateManyBranchInputEnvelope
    set?: Enumerable<WashingMachineWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineWhereUniqueInput>
    delete?: Enumerable<WashingMachineWhereUniqueInput>
    connect?: Enumerable<WashingMachineWhereUniqueInput>
    update?: Enumerable<WashingMachineUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<WashingMachineUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<WashingMachineScalarWhereInput>
  }

  export type WashingUseHistoryUpdateManyWithoutUseAtBranchNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtBranchInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtBranchInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtBranchInput>
    createMany?: WashingUseHistoryCreateManyUseAtBranchInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtBranchInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseAtBranchInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingMachineUncheckedUpdateManyWithoutBranchNestedInput = {
    create?: XOR<Enumerable<WashingMachineCreateWithoutBranchInput>, Enumerable<WashingMachineUncheckedCreateWithoutBranchInput>>
    connectOrCreate?: Enumerable<WashingMachineCreateOrConnectWithoutBranchInput>
    upsert?: Enumerable<WashingMachineUpsertWithWhereUniqueWithoutBranchInput>
    createMany?: WashingMachineCreateManyBranchInputEnvelope
    set?: Enumerable<WashingMachineWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineWhereUniqueInput>
    delete?: Enumerable<WashingMachineWhereUniqueInput>
    connect?: Enumerable<WashingMachineWhereUniqueInput>
    update?: Enumerable<WashingMachineUpdateWithWhereUniqueWithoutBranchInput>
    updateMany?: Enumerable<WashingMachineUpdateManyWithWhereWithoutBranchInput>
    deleteMany?: Enumerable<WashingMachineScalarWhereInput>
  }

  export type WashingUseHistoryUncheckedUpdateManyWithoutUseAtBranchNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtBranchInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtBranchInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtBranchInput>
    createMany?: WashingUseHistoryCreateManyUseAtBranchInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtBranchInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseAtBranchInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingBranchCreateNestedOneWithoutWashingMachineInput = {
    create?: XOR<WashingBranchCreateWithoutWashingMachineInput, WashingBranchUncheckedCreateWithoutWashingMachineInput>
    connectOrCreate?: WashingBranchCreateOrConnectWithoutWashingMachineInput
    connect?: WashingBranchWhereUniqueInput
  }

  export type WashingMachineMaintenanceCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<WashingMachineMaintenanceCreateWithoutMachineInput>, Enumerable<WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineMaintenanceCreateOrConnectWithoutMachineInput>
    createMany?: WashingMachineMaintenanceCreateManyMachineInputEnvelope
    connect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
  }

  export type WashingUseHistoryCreateNestedManyWithoutUseAtMachineInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtMachineInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtMachineInput>
    createMany?: WashingUseHistoryCreateManyUseAtMachineInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineOnProgramCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutMachineInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutMachineInput>
    createMany?: WashingMachineOnProgramCreateManyMachineInputEnvelope
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
  }

  export type WashingMachineMaintenanceUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<WashingMachineMaintenanceCreateWithoutMachineInput>, Enumerable<WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineMaintenanceCreateOrConnectWithoutMachineInput>
    createMany?: WashingMachineMaintenanceCreateManyMachineInputEnvelope
    connect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
  }

  export type WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtMachineInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtMachineInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtMachineInput>
    createMany?: WashingUseHistoryCreateManyUseAtMachineInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineOnProgramUncheckedCreateNestedManyWithoutMachineInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutMachineInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutMachineInput>
    createMany?: WashingMachineOnProgramCreateManyMachineInputEnvelope
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
  }

  export type WashingBranchUpdateOneRequiredWithoutWashingMachineNestedInput = {
    create?: XOR<WashingBranchCreateWithoutWashingMachineInput, WashingBranchUncheckedCreateWithoutWashingMachineInput>
    connectOrCreate?: WashingBranchCreateOrConnectWithoutWashingMachineInput
    upsert?: WashingBranchUpsertWithoutWashingMachineInput
    connect?: WashingBranchWhereUniqueInput
    update?: XOR<WashingBranchUpdateWithoutWashingMachineInput, WashingBranchUncheckedUpdateWithoutWashingMachineInput>
  }

  export type WashingMachineMaintenanceUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<WashingMachineMaintenanceCreateWithoutMachineInput>, Enumerable<WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineMaintenanceCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<WashingMachineMaintenanceUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: WashingMachineMaintenanceCreateManyMachineInputEnvelope
    set?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    delete?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    connect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    update?: Enumerable<WashingMachineMaintenanceUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<WashingMachineMaintenanceUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<WashingMachineMaintenanceScalarWhereInput>
  }

  export type WashingUseHistoryUpdateManyWithoutUseAtMachineNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtMachineInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtMachineInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtMachineInput>
    createMany?: WashingUseHistoryCreateManyUseAtMachineInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtMachineInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseAtMachineInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingMachineOnProgramUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutMachineInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<WashingMachineOnProgramUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: WashingMachineOnProgramCreateManyMachineInputEnvelope
    set?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    delete?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    update?: Enumerable<WashingMachineOnProgramUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<WashingMachineOnProgramUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<WashingMachineOnProgramScalarWhereInput>
  }

  export type WashingMachineMaintenanceUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<WashingMachineMaintenanceCreateWithoutMachineInput>, Enumerable<WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineMaintenanceCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<WashingMachineMaintenanceUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: WashingMachineMaintenanceCreateManyMachineInputEnvelope
    set?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    delete?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    connect?: Enumerable<WashingMachineMaintenanceWhereUniqueInput>
    update?: Enumerable<WashingMachineMaintenanceUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<WashingMachineMaintenanceUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<WashingMachineMaintenanceScalarWhereInput>
  }

  export type WashingUseHistoryUncheckedUpdateManyWithoutUseAtMachineNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseAtMachineInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseAtMachineInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtMachineInput>
    createMany?: WashingUseHistoryCreateManyUseAtMachineInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtMachineInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseAtMachineInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingMachineOnProgramUncheckedUpdateManyWithoutMachineNestedInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutMachineInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutMachineInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutMachineInput>
    upsert?: Enumerable<WashingMachineOnProgramUpsertWithWhereUniqueWithoutMachineInput>
    createMany?: WashingMachineOnProgramCreateManyMachineInputEnvelope
    set?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    delete?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    update?: Enumerable<WashingMachineOnProgramUpdateWithWhereUniqueWithoutMachineInput>
    updateMany?: Enumerable<WashingMachineOnProgramUpdateManyWithWhereWithoutMachineInput>
    deleteMany?: Enumerable<WashingMachineOnProgramScalarWhereInput>
  }

  export type WashingMachineCreateNestedOneWithoutWashingMachineMaintenanceInput = {
    create?: XOR<WashingMachineCreateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedCreateWithoutWashingMachineMaintenanceInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingMachineMaintenanceInput
    connect?: WashingMachineWhereUniqueInput
  }

  export type WashingMachineUpdateOneRequiredWithoutWashingMachineMaintenanceNestedInput = {
    create?: XOR<WashingMachineCreateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedCreateWithoutWashingMachineMaintenanceInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingMachineMaintenanceInput
    upsert?: WashingMachineUpsertWithoutWashingMachineMaintenanceInput
    connect?: WashingMachineWhereUniqueInput
    update?: XOR<WashingMachineUpdateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedUpdateWithoutWashingMachineMaintenanceInput>
  }

  export type WashingUseHistoryCreateNestedManyWithoutUseProgramInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseProgramInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseProgramInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseProgramInput>
    createMany?: WashingUseHistoryCreateManyUseProgramInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineOnProgramCreateNestedManyWithoutProgramInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutProgramInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutProgramInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutProgramInput>
    createMany?: WashingMachineOnProgramCreateManyProgramInputEnvelope
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
  }

  export type WashingUseHistoryUncheckedCreateNestedManyWithoutUseProgramInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseProgramInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseProgramInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseProgramInput>
    createMany?: WashingUseHistoryCreateManyUseProgramInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingMachineOnProgramUncheckedCreateNestedManyWithoutProgramInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutProgramInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutProgramInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutProgramInput>
    createMany?: WashingMachineOnProgramCreateManyProgramInputEnvelope
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
  }

  export type WashingUseHistoryUpdateManyWithoutUseProgramNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseProgramInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseProgramInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseProgramInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseProgramInput>
    createMany?: WashingUseHistoryCreateManyUseProgramInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseProgramInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseProgramInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingMachineOnProgramUpdateManyWithoutProgramNestedInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutProgramInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutProgramInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutProgramInput>
    upsert?: Enumerable<WashingMachineOnProgramUpsertWithWhereUniqueWithoutProgramInput>
    createMany?: WashingMachineOnProgramCreateManyProgramInputEnvelope
    set?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    delete?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    update?: Enumerable<WashingMachineOnProgramUpdateWithWhereUniqueWithoutProgramInput>
    updateMany?: Enumerable<WashingMachineOnProgramUpdateManyWithWhereWithoutProgramInput>
    deleteMany?: Enumerable<WashingMachineOnProgramScalarWhereInput>
  }

  export type WashingUseHistoryUncheckedUpdateManyWithoutUseProgramNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUseProgramInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUseProgramInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUseProgramInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUseProgramInput>
    createMany?: WashingUseHistoryCreateManyUseProgramInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUseProgramInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUseProgramInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingMachineOnProgramUncheckedUpdateManyWithoutProgramNestedInput = {
    create?: XOR<Enumerable<WashingMachineOnProgramCreateWithoutProgramInput>, Enumerable<WashingMachineOnProgramUncheckedCreateWithoutProgramInput>>
    connectOrCreate?: Enumerable<WashingMachineOnProgramCreateOrConnectWithoutProgramInput>
    upsert?: Enumerable<WashingMachineOnProgramUpsertWithWhereUniqueWithoutProgramInput>
    createMany?: WashingMachineOnProgramCreateManyProgramInputEnvelope
    set?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    disconnect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    delete?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    connect?: Enumerable<WashingMachineOnProgramWhereUniqueInput>
    update?: Enumerable<WashingMachineOnProgramUpdateWithWhereUniqueWithoutProgramInput>
    updateMany?: Enumerable<WashingMachineOnProgramUpdateManyWithWhereWithoutProgramInput>
    deleteMany?: Enumerable<WashingMachineOnProgramScalarWhereInput>
  }

  export type WashingMachineCreateNestedOneWithoutWashingMachineOnProgramInput = {
    create?: XOR<WashingMachineCreateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedCreateWithoutWashingMachineOnProgramInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingMachineOnProgramInput
    connect?: WashingMachineWhereUniqueInput
  }

  export type WashingMachineProgramCreateNestedOneWithoutWashingMachineOnProgramInput = {
    create?: XOR<WashingMachineProgramCreateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedCreateWithoutWashingMachineOnProgramInput>
    connectOrCreate?: WashingMachineProgramCreateOrConnectWithoutWashingMachineOnProgramInput
    connect?: WashingMachineProgramWhereUniqueInput
  }

  export type WashingMachineUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput = {
    create?: XOR<WashingMachineCreateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedCreateWithoutWashingMachineOnProgramInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingMachineOnProgramInput
    upsert?: WashingMachineUpsertWithoutWashingMachineOnProgramInput
    connect?: WashingMachineWhereUniqueInput
    update?: XOR<WashingMachineUpdateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedUpdateWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineProgramUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput = {
    create?: XOR<WashingMachineProgramCreateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedCreateWithoutWashingMachineOnProgramInput>
    connectOrCreate?: WashingMachineProgramCreateOrConnectWithoutWashingMachineOnProgramInput
    upsert?: WashingMachineProgramUpsertWithoutWashingMachineOnProgramInput
    connect?: WashingMachineProgramWhereUniqueInput
    update?: XOR<WashingMachineProgramUpdateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedUpdateWithoutWashingMachineOnProgramInput>
  }

  export type WashingTopUpCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WashingTopUpCreateWithoutUserInput>, Enumerable<WashingTopUpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingTopUpCreateOrConnectWithoutUserInput>
    createMany?: WashingTopUpCreateManyUserInputEnvelope
    connect?: Enumerable<WashingTopUpWhereUniqueInput>
  }

  export type WashingUseHistoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUserInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUserInput>
    createMany?: WashingUseHistoryCreateManyUserInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingTopUpUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WashingTopUpCreateWithoutUserInput>, Enumerable<WashingTopUpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingTopUpCreateOrConnectWithoutUserInput>
    createMany?: WashingTopUpCreateManyUserInputEnvelope
    connect?: Enumerable<WashingTopUpWhereUniqueInput>
  }

  export type WashingUseHistoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUserInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUserInput>
    createMany?: WashingUseHistoryCreateManyUserInputEnvelope
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
  }

  export type WashingTopUpUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WashingTopUpCreateWithoutUserInput>, Enumerable<WashingTopUpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingTopUpCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WashingTopUpUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WashingTopUpCreateManyUserInputEnvelope
    set?: Enumerable<WashingTopUpWhereUniqueInput>
    disconnect?: Enumerable<WashingTopUpWhereUniqueInput>
    delete?: Enumerable<WashingTopUpWhereUniqueInput>
    connect?: Enumerable<WashingTopUpWhereUniqueInput>
    update?: Enumerable<WashingTopUpUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WashingTopUpUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WashingTopUpScalarWhereInput>
  }

  export type WashingUseHistoryUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUserInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WashingUseHistoryCreateManyUserInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingTopUpUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WashingTopUpCreateWithoutUserInput>, Enumerable<WashingTopUpUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingTopUpCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WashingTopUpUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WashingTopUpCreateManyUserInputEnvelope
    set?: Enumerable<WashingTopUpWhereUniqueInput>
    disconnect?: Enumerable<WashingTopUpWhereUniqueInput>
    delete?: Enumerable<WashingTopUpWhereUniqueInput>
    connect?: Enumerable<WashingTopUpWhereUniqueInput>
    update?: Enumerable<WashingTopUpUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WashingTopUpUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WashingTopUpScalarWhereInput>
  }

  export type WashingUseHistoryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WashingUseHistoryCreateWithoutUserInput>, Enumerable<WashingUseHistoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WashingUseHistoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WashingUseHistoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WashingUseHistoryCreateManyUserInputEnvelope
    set?: Enumerable<WashingUseHistoryWhereUniqueInput>
    disconnect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    delete?: Enumerable<WashingUseHistoryWhereUniqueInput>
    connect?: Enumerable<WashingUseHistoryWhereUniqueInput>
    update?: Enumerable<WashingUseHistoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WashingUseHistoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WashingUseHistoryScalarWhereInput>
  }

  export type WashingUserCreateNestedOneWithoutWashingTopUpInput = {
    create?: XOR<WashingUserCreateWithoutWashingTopUpInput, WashingUserUncheckedCreateWithoutWashingTopUpInput>
    connectOrCreate?: WashingUserCreateOrConnectWithoutWashingTopUpInput
    connect?: WashingUserWhereUniqueInput
  }

  export type WashingUserUpdateOneRequiredWithoutWashingTopUpNestedInput = {
    create?: XOR<WashingUserCreateWithoutWashingTopUpInput, WashingUserUncheckedCreateWithoutWashingTopUpInput>
    connectOrCreate?: WashingUserCreateOrConnectWithoutWashingTopUpInput
    upsert?: WashingUserUpsertWithoutWashingTopUpInput
    connect?: WashingUserWhereUniqueInput
    update?: XOR<WashingUserUpdateWithoutWashingTopUpInput, WashingUserUncheckedUpdateWithoutWashingTopUpInput>
  }

  export type WashingUserCreateNestedOneWithoutWashingUseHistoryInput = {
    create?: XOR<WashingUserCreateWithoutWashingUseHistoryInput, WashingUserUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingUserCreateOrConnectWithoutWashingUseHistoryInput
    connect?: WashingUserWhereUniqueInput
  }

  export type WashingBranchCreateNestedOneWithoutWashingUseHistoryInput = {
    create?: XOR<WashingBranchCreateWithoutWashingUseHistoryInput, WashingBranchUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingBranchCreateOrConnectWithoutWashingUseHistoryInput
    connect?: WashingBranchWhereUniqueInput
  }

  export type WashingMachineCreateNestedOneWithoutWashingUseHistoryInput = {
    create?: XOR<WashingMachineCreateWithoutWashingUseHistoryInput, WashingMachineUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingUseHistoryInput
    connect?: WashingMachineWhereUniqueInput
  }

  export type WashingMachineProgramCreateNestedOneWithoutWashingUseHistoryInput = {
    create?: XOR<WashingMachineProgramCreateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingMachineProgramCreateOrConnectWithoutWashingUseHistoryInput
    connect?: WashingMachineProgramWhereUniqueInput
  }

  export type WashingUserUpdateOneRequiredWithoutWashingUseHistoryNestedInput = {
    create?: XOR<WashingUserCreateWithoutWashingUseHistoryInput, WashingUserUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingUserCreateOrConnectWithoutWashingUseHistoryInput
    upsert?: WashingUserUpsertWithoutWashingUseHistoryInput
    connect?: WashingUserWhereUniqueInput
    update?: XOR<WashingUserUpdateWithoutWashingUseHistoryInput, WashingUserUncheckedUpdateWithoutWashingUseHistoryInput>
  }

  export type WashingBranchUpdateOneRequiredWithoutWashingUseHistoryNestedInput = {
    create?: XOR<WashingBranchCreateWithoutWashingUseHistoryInput, WashingBranchUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingBranchCreateOrConnectWithoutWashingUseHistoryInput
    upsert?: WashingBranchUpsertWithoutWashingUseHistoryInput
    connect?: WashingBranchWhereUniqueInput
    update?: XOR<WashingBranchUpdateWithoutWashingUseHistoryInput, WashingBranchUncheckedUpdateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineUpdateOneRequiredWithoutWashingUseHistoryNestedInput = {
    create?: XOR<WashingMachineCreateWithoutWashingUseHistoryInput, WashingMachineUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingMachineCreateOrConnectWithoutWashingUseHistoryInput
    upsert?: WashingMachineUpsertWithoutWashingUseHistoryInput
    connect?: WashingMachineWhereUniqueInput
    update?: XOR<WashingMachineUpdateWithoutWashingUseHistoryInput, WashingMachineUncheckedUpdateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineProgramUpdateOneRequiredWithoutWashingUseHistoryNestedInput = {
    create?: XOR<WashingMachineProgramCreateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedCreateWithoutWashingUseHistoryInput>
    connectOrCreate?: WashingMachineProgramCreateOrConnectWithoutWashingUseHistoryInput
    upsert?: WashingMachineProgramUpsertWithoutWashingUseHistoryInput
    connect?: WashingMachineProgramWhereUniqueInput
    update?: XOR<WashingMachineProgramUpdateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedUpdateWithoutWashingUseHistoryInput>
  }

  export type ChanelOnUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutUserInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutUserInput>
    createMany?: ChanelOnUserCreateManyUserInputEnvelope
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
  }

  export type YTAdminCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutAdminUserInput>, Enumerable<YTAdminUncheckedCreateWithoutAdminUserInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutAdminUserInput>
    createMany?: YTAdminCreateManyAdminUserInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTCommentCreateNestedManyWithoutCommentFromUserInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutCommentFromUserInput>, Enumerable<YTCommentUncheckedCreateWithoutCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutCommentFromUserInput>
    createMany?: YTCommentCreateManyCommentFromUserInputEnvelope
    connect?: Enumerable<YTCommentWhereUniqueInput>
  }

  export type YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutSubCommentFromUserInput>, Enumerable<YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutSubCommentFromUserInput>
    createMany?: YTSubCommentCreateManySubCommentFromUserInputEnvelope
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
  }

  export type YTSubscribeCreateNestedManyWithoutSubscribeUserInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutSubscribeUserInput>, Enumerable<YTSubscribeUncheckedCreateWithoutSubscribeUserInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutSubscribeUserInput>
    createMany?: YTSubscribeCreateManySubscribeUserInputEnvelope
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
  }

  export type ChanelOnUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutUserInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutUserInput>
    createMany?: ChanelOnUserCreateManyUserInputEnvelope
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
  }

  export type YTAdminUncheckedCreateNestedManyWithoutAdminUserInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutAdminUserInput>, Enumerable<YTAdminUncheckedCreateWithoutAdminUserInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutAdminUserInput>
    createMany?: YTAdminCreateManyAdminUserInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutCommentFromUserInput>, Enumerable<YTCommentUncheckedCreateWithoutCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutCommentFromUserInput>
    createMany?: YTCommentCreateManyCommentFromUserInputEnvelope
    connect?: Enumerable<YTCommentWhereUniqueInput>
  }

  export type YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutSubCommentFromUserInput>, Enumerable<YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutSubCommentFromUserInput>
    createMany?: YTSubCommentCreateManySubCommentFromUserInputEnvelope
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
  }

  export type YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutSubscribeUserInput>, Enumerable<YTSubscribeUncheckedCreateWithoutSubscribeUserInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutSubscribeUserInput>
    createMany?: YTSubscribeCreateManySubscribeUserInputEnvelope
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
  }

  export type ChanelOnUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutUserInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChanelOnUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChanelOnUserCreateManyUserInputEnvelope
    set?: Enumerable<ChanelOnUserWhereUniqueInput>
    disconnect?: Enumerable<ChanelOnUserWhereUniqueInput>
    delete?: Enumerable<ChanelOnUserWhereUniqueInput>
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
    update?: Enumerable<ChanelOnUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChanelOnUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChanelOnUserScalarWhereInput>
  }

  export type YTAdminUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutAdminUserInput>, Enumerable<YTAdminUncheckedCreateWithoutAdminUserInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutAdminUserInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutAdminUserInput>
    createMany?: YTAdminCreateManyAdminUserInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutAdminUserInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutAdminUserInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTCommentUpdateManyWithoutCommentFromUserNestedInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutCommentFromUserInput>, Enumerable<YTCommentUncheckedCreateWithoutCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutCommentFromUserInput>
    upsert?: Enumerable<YTCommentUpsertWithWhereUniqueWithoutCommentFromUserInput>
    createMany?: YTCommentCreateManyCommentFromUserInputEnvelope
    set?: Enumerable<YTCommentWhereUniqueInput>
    disconnect?: Enumerable<YTCommentWhereUniqueInput>
    delete?: Enumerable<YTCommentWhereUniqueInput>
    connect?: Enumerable<YTCommentWhereUniqueInput>
    update?: Enumerable<YTCommentUpdateWithWhereUniqueWithoutCommentFromUserInput>
    updateMany?: Enumerable<YTCommentUpdateManyWithWhereWithoutCommentFromUserInput>
    deleteMany?: Enumerable<YTCommentScalarWhereInput>
  }

  export type YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutSubCommentFromUserInput>, Enumerable<YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutSubCommentFromUserInput>
    upsert?: Enumerable<YTSubCommentUpsertWithWhereUniqueWithoutSubCommentFromUserInput>
    createMany?: YTSubCommentCreateManySubCommentFromUserInputEnvelope
    set?: Enumerable<YTSubCommentWhereUniqueInput>
    disconnect?: Enumerable<YTSubCommentWhereUniqueInput>
    delete?: Enumerable<YTSubCommentWhereUniqueInput>
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
    update?: Enumerable<YTSubCommentUpdateWithWhereUniqueWithoutSubCommentFromUserInput>
    updateMany?: Enumerable<YTSubCommentUpdateManyWithWhereWithoutSubCommentFromUserInput>
    deleteMany?: Enumerable<YTSubCommentScalarWhereInput>
  }

  export type YTSubscribeUpdateManyWithoutSubscribeUserNestedInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutSubscribeUserInput>, Enumerable<YTSubscribeUncheckedCreateWithoutSubscribeUserInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutSubscribeUserInput>
    upsert?: Enumerable<YTSubscribeUpsertWithWhereUniqueWithoutSubscribeUserInput>
    createMany?: YTSubscribeCreateManySubscribeUserInputEnvelope
    set?: Enumerable<YTSubscribeWhereUniqueInput>
    disconnect?: Enumerable<YTSubscribeWhereUniqueInput>
    delete?: Enumerable<YTSubscribeWhereUniqueInput>
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
    update?: Enumerable<YTSubscribeUpdateWithWhereUniqueWithoutSubscribeUserInput>
    updateMany?: Enumerable<YTSubscribeUpdateManyWithWhereWithoutSubscribeUserInput>
    deleteMany?: Enumerable<YTSubscribeScalarWhereInput>
  }

  export type ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutUserInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ChanelOnUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ChanelOnUserCreateManyUserInputEnvelope
    set?: Enumerable<ChanelOnUserWhereUniqueInput>
    disconnect?: Enumerable<ChanelOnUserWhereUniqueInput>
    delete?: Enumerable<ChanelOnUserWhereUniqueInput>
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
    update?: Enumerable<ChanelOnUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ChanelOnUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ChanelOnUserScalarWhereInput>
  }

  export type YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutAdminUserInput>, Enumerable<YTAdminUncheckedCreateWithoutAdminUserInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutAdminUserInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutAdminUserInput>
    createMany?: YTAdminCreateManyAdminUserInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutAdminUserInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutAdminUserInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutCommentFromUserInput>, Enumerable<YTCommentUncheckedCreateWithoutCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutCommentFromUserInput>
    upsert?: Enumerable<YTCommentUpsertWithWhereUniqueWithoutCommentFromUserInput>
    createMany?: YTCommentCreateManyCommentFromUserInputEnvelope
    set?: Enumerable<YTCommentWhereUniqueInput>
    disconnect?: Enumerable<YTCommentWhereUniqueInput>
    delete?: Enumerable<YTCommentWhereUniqueInput>
    connect?: Enumerable<YTCommentWhereUniqueInput>
    update?: Enumerable<YTCommentUpdateWithWhereUniqueWithoutCommentFromUserInput>
    updateMany?: Enumerable<YTCommentUpdateManyWithWhereWithoutCommentFromUserInput>
    deleteMany?: Enumerable<YTCommentScalarWhereInput>
  }

  export type YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutSubCommentFromUserInput>, Enumerable<YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutSubCommentFromUserInput>
    upsert?: Enumerable<YTSubCommentUpsertWithWhereUniqueWithoutSubCommentFromUserInput>
    createMany?: YTSubCommentCreateManySubCommentFromUserInputEnvelope
    set?: Enumerable<YTSubCommentWhereUniqueInput>
    disconnect?: Enumerable<YTSubCommentWhereUniqueInput>
    delete?: Enumerable<YTSubCommentWhereUniqueInput>
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
    update?: Enumerable<YTSubCommentUpdateWithWhereUniqueWithoutSubCommentFromUserInput>
    updateMany?: Enumerable<YTSubCommentUpdateManyWithWhereWithoutSubCommentFromUserInput>
    deleteMany?: Enumerable<YTSubCommentScalarWhereInput>
  }

  export type YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutSubscribeUserInput>, Enumerable<YTSubscribeUncheckedCreateWithoutSubscribeUserInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutSubscribeUserInput>
    upsert?: Enumerable<YTSubscribeUpsertWithWhereUniqueWithoutSubscribeUserInput>
    createMany?: YTSubscribeCreateManySubscribeUserInputEnvelope
    set?: Enumerable<YTSubscribeWhereUniqueInput>
    disconnect?: Enumerable<YTSubscribeWhereUniqueInput>
    delete?: Enumerable<YTSubscribeWhereUniqueInput>
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
    update?: Enumerable<YTSubscribeUpdateWithWhereUniqueWithoutSubscribeUserInput>
    updateMany?: Enumerable<YTSubscribeUpdateManyWithWhereWithoutSubscribeUserInput>
    deleteMany?: Enumerable<YTSubscribeScalarWhereInput>
  }

  export type ChanelOnUserCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutChanelInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutChanelInput>
    createMany?: ChanelOnUserCreateManyChanelInputEnvelope
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
  }

  export type YTAdminCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutChanelInput>, Enumerable<YTAdminUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutChanelInput>
    createMany?: YTAdminCreateManyChanelInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTVideoCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTVideoCreateWithoutChanelInput>, Enumerable<YTVideoUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTVideoCreateOrConnectWithoutChanelInput>
    createMany?: YTVideoCreateManyChanelInputEnvelope
    connect?: Enumerable<YTVideoWhereUniqueInput>
  }

  export type YTSubscribeCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutChanelInput>, Enumerable<YTSubscribeUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutChanelInput>
    createMany?: YTSubscribeCreateManyChanelInputEnvelope
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
  }

  export type ChanelOnUserUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutChanelInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutChanelInput>
    createMany?: ChanelOnUserCreateManyChanelInputEnvelope
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
  }

  export type YTAdminUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutChanelInput>, Enumerable<YTAdminUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutChanelInput>
    createMany?: YTAdminCreateManyChanelInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTVideoUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTVideoCreateWithoutChanelInput>, Enumerable<YTVideoUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTVideoCreateOrConnectWithoutChanelInput>
    createMany?: YTVideoCreateManyChanelInputEnvelope
    connect?: Enumerable<YTVideoWhereUniqueInput>
  }

  export type YTSubscribeUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutChanelInput>, Enumerable<YTSubscribeUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutChanelInput>
    createMany?: YTSubscribeCreateManyChanelInputEnvelope
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
  }

  export type ChanelOnUserUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutChanelInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<ChanelOnUserUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: ChanelOnUserCreateManyChanelInputEnvelope
    set?: Enumerable<ChanelOnUserWhereUniqueInput>
    disconnect?: Enumerable<ChanelOnUserWhereUniqueInput>
    delete?: Enumerable<ChanelOnUserWhereUniqueInput>
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
    update?: Enumerable<ChanelOnUserUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<ChanelOnUserUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<ChanelOnUserScalarWhereInput>
  }

  export type YTAdminUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutChanelInput>, Enumerable<YTAdminUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTAdminCreateManyChanelInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTVideoUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTVideoCreateWithoutChanelInput>, Enumerable<YTVideoUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTVideoCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTVideoUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTVideoCreateManyChanelInputEnvelope
    set?: Enumerable<YTVideoWhereUniqueInput>
    disconnect?: Enumerable<YTVideoWhereUniqueInput>
    delete?: Enumerable<YTVideoWhereUniqueInput>
    connect?: Enumerable<YTVideoWhereUniqueInput>
    update?: Enumerable<YTVideoUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTVideoUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTVideoScalarWhereInput>
  }

  export type YTSubscribeUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutChanelInput>, Enumerable<YTSubscribeUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTSubscribeUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTSubscribeCreateManyChanelInputEnvelope
    set?: Enumerable<YTSubscribeWhereUniqueInput>
    disconnect?: Enumerable<YTSubscribeWhereUniqueInput>
    delete?: Enumerable<YTSubscribeWhereUniqueInput>
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
    update?: Enumerable<YTSubscribeUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTSubscribeUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTSubscribeScalarWhereInput>
  }

  export type ChanelOnUserUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<ChanelOnUserCreateWithoutChanelInput>, Enumerable<ChanelOnUserUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<ChanelOnUserCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<ChanelOnUserUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: ChanelOnUserCreateManyChanelInputEnvelope
    set?: Enumerable<ChanelOnUserWhereUniqueInput>
    disconnect?: Enumerable<ChanelOnUserWhereUniqueInput>
    delete?: Enumerable<ChanelOnUserWhereUniqueInput>
    connect?: Enumerable<ChanelOnUserWhereUniqueInput>
    update?: Enumerable<ChanelOnUserUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<ChanelOnUserUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<ChanelOnUserScalarWhereInput>
  }

  export type YTAdminUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutChanelInput>, Enumerable<YTAdminUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTAdminCreateManyChanelInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTVideoUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTVideoCreateWithoutChanelInput>, Enumerable<YTVideoUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTVideoCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTVideoUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTVideoCreateManyChanelInputEnvelope
    set?: Enumerable<YTVideoWhereUniqueInput>
    disconnect?: Enumerable<YTVideoWhereUniqueInput>
    delete?: Enumerable<YTVideoWhereUniqueInput>
    connect?: Enumerable<YTVideoWhereUniqueInput>
    update?: Enumerable<YTVideoUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTVideoUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTVideoScalarWhereInput>
  }

  export type YTSubscribeUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YTSubscribeCreateWithoutChanelInput>, Enumerable<YTSubscribeUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YTSubscribeCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YTSubscribeUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YTSubscribeCreateManyChanelInputEnvelope
    set?: Enumerable<YTSubscribeWhereUniqueInput>
    disconnect?: Enumerable<YTSubscribeWhereUniqueInput>
    delete?: Enumerable<YTSubscribeWhereUniqueInput>
    connect?: Enumerable<YTSubscribeWhereUniqueInput>
    update?: Enumerable<YTSubscribeUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YTSubscribeUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YTSubscribeScalarWhereInput>
  }

  export type YTUserCreateNestedOneWithoutChanelOnUserInput = {
    create?: XOR<YTUserCreateWithoutChanelOnUserInput, YTUserUncheckedCreateWithoutChanelOnUserInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutChanelOnUserInput
    connect?: YTUserWhereUniqueInput
  }

  export type YTChanelCreateNestedOneWithoutChanelOnUserInput = {
    create?: XOR<YTChanelCreateWithoutChanelOnUserInput, YTChanelUncheckedCreateWithoutChanelOnUserInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutChanelOnUserInput
    connect?: YTChanelWhereUniqueInput
  }

  export type YTUserUpdateOneRequiredWithoutChanelOnUserNestedInput = {
    create?: XOR<YTUserCreateWithoutChanelOnUserInput, YTUserUncheckedCreateWithoutChanelOnUserInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutChanelOnUserInput
    upsert?: YTUserUpsertWithoutChanelOnUserInput
    connect?: YTUserWhereUniqueInput
    update?: XOR<YTUserUpdateWithoutChanelOnUserInput, YTUserUncheckedUpdateWithoutChanelOnUserInput>
  }

  export type YTChanelUpdateOneRequiredWithoutChanelOnUserNestedInput = {
    create?: XOR<YTChanelCreateWithoutChanelOnUserInput, YTChanelUncheckedCreateWithoutChanelOnUserInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutChanelOnUserInput
    upsert?: YTChanelUpsertWithoutChanelOnUserInput
    connect?: YTChanelWhereUniqueInput
    update?: XOR<YTChanelUpdateWithoutChanelOnUserInput, YTChanelUncheckedUpdateWithoutChanelOnUserInput>
  }

  export type YTChanelCreateNestedOneWithoutYTAdminInput = {
    create?: XOR<YTChanelCreateWithoutYTAdminInput, YTChanelUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTAdminInput
    connect?: YTChanelWhereUniqueInput
  }

  export type YTUserCreateNestedOneWithoutYTAdminInput = {
    create?: XOR<YTUserCreateWithoutYTAdminInput, YTUserUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTAdminInput
    connect?: YTUserWhereUniqueInput
  }

  export type YTRoleCreateNestedOneWithoutYTAdminInput = {
    create?: XOR<YTRoleCreateWithoutYTAdminInput, YTRoleUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTRoleCreateOrConnectWithoutYTAdminInput
    connect?: YTRoleWhereUniqueInput
  }

  export type YTChanelUpdateOneRequiredWithoutYTAdminNestedInput = {
    create?: XOR<YTChanelCreateWithoutYTAdminInput, YTChanelUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTAdminInput
    upsert?: YTChanelUpsertWithoutYTAdminInput
    connect?: YTChanelWhereUniqueInput
    update?: XOR<YTChanelUpdateWithoutYTAdminInput, YTChanelUncheckedUpdateWithoutYTAdminInput>
  }

  export type YTUserUpdateOneRequiredWithoutYTAdminNestedInput = {
    create?: XOR<YTUserCreateWithoutYTAdminInput, YTUserUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTAdminInput
    upsert?: YTUserUpsertWithoutYTAdminInput
    connect?: YTUserWhereUniqueInput
    update?: XOR<YTUserUpdateWithoutYTAdminInput, YTUserUncheckedUpdateWithoutYTAdminInput>
  }

  export type YTRoleUpdateOneRequiredWithoutYTAdminNestedInput = {
    create?: XOR<YTRoleCreateWithoutYTAdminInput, YTRoleUncheckedCreateWithoutYTAdminInput>
    connectOrCreate?: YTRoleCreateOrConnectWithoutYTAdminInput
    upsert?: YTRoleUpsertWithoutYTAdminInput
    connect?: YTRoleWhereUniqueInput
    update?: XOR<YTRoleUpdateWithoutYTAdminInput, YTRoleUncheckedUpdateWithoutYTAdminInput>
  }

  export type YTAdminCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutRoleInput>, Enumerable<YTAdminUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutRoleInput>
    createMany?: YTAdminCreateManyRoleInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTRolePermissionCreateNestedManyWithoutRoldidInput = {
    create?: XOR<Enumerable<YTRolePermissionCreateWithoutRoldidInput>, Enumerable<YTRolePermissionUncheckedCreateWithoutRoldidInput>>
    connectOrCreate?: Enumerable<YTRolePermissionCreateOrConnectWithoutRoldidInput>
    createMany?: YTRolePermissionCreateManyRoldidInputEnvelope
    connect?: Enumerable<YTRolePermissionWhereUniqueInput>
  }

  export type YTAdminUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutRoleInput>, Enumerable<YTAdminUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutRoleInput>
    createMany?: YTAdminCreateManyRoleInputEnvelope
    connect?: Enumerable<YTAdminWhereUniqueInput>
  }

  export type YTRolePermissionUncheckedCreateNestedManyWithoutRoldidInput = {
    create?: XOR<Enumerable<YTRolePermissionCreateWithoutRoldidInput>, Enumerable<YTRolePermissionUncheckedCreateWithoutRoldidInput>>
    connectOrCreate?: Enumerable<YTRolePermissionCreateOrConnectWithoutRoldidInput>
    createMany?: YTRolePermissionCreateManyRoldidInputEnvelope
    connect?: Enumerable<YTRolePermissionWhereUniqueInput>
  }

  export type YTAdminUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutRoleInput>, Enumerable<YTAdminUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: YTAdminCreateManyRoleInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTRolePermissionUpdateManyWithoutRoldidNestedInput = {
    create?: XOR<Enumerable<YTRolePermissionCreateWithoutRoldidInput>, Enumerable<YTRolePermissionUncheckedCreateWithoutRoldidInput>>
    connectOrCreate?: Enumerable<YTRolePermissionCreateOrConnectWithoutRoldidInput>
    upsert?: Enumerable<YTRolePermissionUpsertWithWhereUniqueWithoutRoldidInput>
    createMany?: YTRolePermissionCreateManyRoldidInputEnvelope
    set?: Enumerable<YTRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<YTRolePermissionWhereUniqueInput>
    delete?: Enumerable<YTRolePermissionWhereUniqueInput>
    connect?: Enumerable<YTRolePermissionWhereUniqueInput>
    update?: Enumerable<YTRolePermissionUpdateWithWhereUniqueWithoutRoldidInput>
    updateMany?: Enumerable<YTRolePermissionUpdateManyWithWhereWithoutRoldidInput>
    deleteMany?: Enumerable<YTRolePermissionScalarWhereInput>
  }

  export type YTAdminUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<YTAdminCreateWithoutRoleInput>, Enumerable<YTAdminUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<YTAdminCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<YTAdminUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: YTAdminCreateManyRoleInputEnvelope
    set?: Enumerable<YTAdminWhereUniqueInput>
    disconnect?: Enumerable<YTAdminWhereUniqueInput>
    delete?: Enumerable<YTAdminWhereUniqueInput>
    connect?: Enumerable<YTAdminWhereUniqueInput>
    update?: Enumerable<YTAdminUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<YTAdminUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<YTAdminScalarWhereInput>
  }

  export type YTRolePermissionUncheckedUpdateManyWithoutRoldidNestedInput = {
    create?: XOR<Enumerable<YTRolePermissionCreateWithoutRoldidInput>, Enumerable<YTRolePermissionUncheckedCreateWithoutRoldidInput>>
    connectOrCreate?: Enumerable<YTRolePermissionCreateOrConnectWithoutRoldidInput>
    upsert?: Enumerable<YTRolePermissionUpsertWithWhereUniqueWithoutRoldidInput>
    createMany?: YTRolePermissionCreateManyRoldidInputEnvelope
    set?: Enumerable<YTRolePermissionWhereUniqueInput>
    disconnect?: Enumerable<YTRolePermissionWhereUniqueInput>
    delete?: Enumerable<YTRolePermissionWhereUniqueInput>
    connect?: Enumerable<YTRolePermissionWhereUniqueInput>
    update?: Enumerable<YTRolePermissionUpdateWithWhereUniqueWithoutRoldidInput>
    updateMany?: Enumerable<YTRolePermissionUpdateManyWithWhereWithoutRoldidInput>
    deleteMany?: Enumerable<YTRolePermissionScalarWhereInput>
  }

  export type YTRoleCreateNestedOneWithoutYTRolePermissionInput = {
    create?: XOR<YTRoleCreateWithoutYTRolePermissionInput, YTRoleUncheckedCreateWithoutYTRolePermissionInput>
    connectOrCreate?: YTRoleCreateOrConnectWithoutYTRolePermissionInput
    connect?: YTRoleWhereUniqueInput
  }

  export type YTRoleUpdateOneRequiredWithoutYTRolePermissionNestedInput = {
    create?: XOR<YTRoleCreateWithoutYTRolePermissionInput, YTRoleUncheckedCreateWithoutYTRolePermissionInput>
    connectOrCreate?: YTRoleCreateOrConnectWithoutYTRolePermissionInput
    upsert?: YTRoleUpsertWithoutYTRolePermissionInput
    connect?: YTRoleWhereUniqueInput
    update?: XOR<YTRoleUpdateWithoutYTRolePermissionInput, YTRoleUncheckedUpdateWithoutYTRolePermissionInput>
  }

  export type YTChanelCreateNestedOneWithoutYTSubscribeInput = {
    create?: XOR<YTChanelCreateWithoutYTSubscribeInput, YTChanelUncheckedCreateWithoutYTSubscribeInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTSubscribeInput
    connect?: YTChanelWhereUniqueInput
  }

  export type YTUserCreateNestedOneWithoutYTSubscribeInput = {
    create?: XOR<YTUserCreateWithoutYTSubscribeInput, YTUserUncheckedCreateWithoutYTSubscribeInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTSubscribeInput
    connect?: YTUserWhereUniqueInput
  }

  export type YTChanelUpdateOneRequiredWithoutYTSubscribeNestedInput = {
    create?: XOR<YTChanelCreateWithoutYTSubscribeInput, YTChanelUncheckedCreateWithoutYTSubscribeInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTSubscribeInput
    upsert?: YTChanelUpsertWithoutYTSubscribeInput
    connect?: YTChanelWhereUniqueInput
    update?: XOR<YTChanelUpdateWithoutYTSubscribeInput, YTChanelUncheckedUpdateWithoutYTSubscribeInput>
  }

  export type YTUserUpdateOneRequiredWithoutYTSubscribeNestedInput = {
    create?: XOR<YTUserCreateWithoutYTSubscribeInput, YTUserUncheckedCreateWithoutYTSubscribeInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTSubscribeInput
    upsert?: YTUserUpsertWithoutYTSubscribeInput
    connect?: YTUserWhereUniqueInput
    update?: XOR<YTUserUpdateWithoutYTSubscribeInput, YTUserUncheckedUpdateWithoutYTSubscribeInput>
  }

  export type YTChanelCreateNestedOneWithoutYTVideoInput = {
    create?: XOR<YTChanelCreateWithoutYTVideoInput, YTChanelUncheckedCreateWithoutYTVideoInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTVideoInput
    connect?: YTChanelWhereUniqueInput
  }

  export type YTCommentCreateNestedManyWithoutVideoInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutVideoInput>, Enumerable<YTCommentUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutVideoInput>
    createMany?: YTCommentCreateManyVideoInputEnvelope
    connect?: Enumerable<YTCommentWhereUniqueInput>
  }

  export type YTCommentUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutVideoInput>, Enumerable<YTCommentUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutVideoInput>
    createMany?: YTCommentCreateManyVideoInputEnvelope
    connect?: Enumerable<YTCommentWhereUniqueInput>
  }

  export type YTChanelUpdateOneRequiredWithoutYTVideoNestedInput = {
    create?: XOR<YTChanelCreateWithoutYTVideoInput, YTChanelUncheckedCreateWithoutYTVideoInput>
    connectOrCreate?: YTChanelCreateOrConnectWithoutYTVideoInput
    upsert?: YTChanelUpsertWithoutYTVideoInput
    connect?: YTChanelWhereUniqueInput
    update?: XOR<YTChanelUpdateWithoutYTVideoInput, YTChanelUncheckedUpdateWithoutYTVideoInput>
  }

  export type YTCommentUpdateManyWithoutVideoNestedInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutVideoInput>, Enumerable<YTCommentUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutVideoInput>
    upsert?: Enumerable<YTCommentUpsertWithWhereUniqueWithoutVideoInput>
    createMany?: YTCommentCreateManyVideoInputEnvelope
    set?: Enumerable<YTCommentWhereUniqueInput>
    disconnect?: Enumerable<YTCommentWhereUniqueInput>
    delete?: Enumerable<YTCommentWhereUniqueInput>
    connect?: Enumerable<YTCommentWhereUniqueInput>
    update?: Enumerable<YTCommentUpdateWithWhereUniqueWithoutVideoInput>
    updateMany?: Enumerable<YTCommentUpdateManyWithWhereWithoutVideoInput>
    deleteMany?: Enumerable<YTCommentScalarWhereInput>
  }

  export type YTCommentUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<Enumerable<YTCommentCreateWithoutVideoInput>, Enumerable<YTCommentUncheckedCreateWithoutVideoInput>>
    connectOrCreate?: Enumerable<YTCommentCreateOrConnectWithoutVideoInput>
    upsert?: Enumerable<YTCommentUpsertWithWhereUniqueWithoutVideoInput>
    createMany?: YTCommentCreateManyVideoInputEnvelope
    set?: Enumerable<YTCommentWhereUniqueInput>
    disconnect?: Enumerable<YTCommentWhereUniqueInput>
    delete?: Enumerable<YTCommentWhereUniqueInput>
    connect?: Enumerable<YTCommentWhereUniqueInput>
    update?: Enumerable<YTCommentUpdateWithWhereUniqueWithoutVideoInput>
    updateMany?: Enumerable<YTCommentUpdateManyWithWhereWithoutVideoInput>
    deleteMany?: Enumerable<YTCommentScalarWhereInput>
  }

  export type YTVideoCreateNestedOneWithoutYTCommentInput = {
    create?: XOR<YTVideoCreateWithoutYTCommentInput, YTVideoUncheckedCreateWithoutYTCommentInput>
    connectOrCreate?: YTVideoCreateOrConnectWithoutYTCommentInput
    connect?: YTVideoWhereUniqueInput
  }

  export type YTUserCreateNestedOneWithoutYTCommentInput = {
    create?: XOR<YTUserCreateWithoutYTCommentInput, YTUserUncheckedCreateWithoutYTCommentInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTCommentInput
    connect?: YTUserWhereUniqueInput
  }

  export type YTSubCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutCommentInput>, Enumerable<YTSubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutCommentInput>
    createMany?: YTSubCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
  }

  export type YTSubCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutCommentInput>, Enumerable<YTSubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutCommentInput>
    createMany?: YTSubCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
  }

  export type YTVideoUpdateOneRequiredWithoutYTCommentNestedInput = {
    create?: XOR<YTVideoCreateWithoutYTCommentInput, YTVideoUncheckedCreateWithoutYTCommentInput>
    connectOrCreate?: YTVideoCreateOrConnectWithoutYTCommentInput
    upsert?: YTVideoUpsertWithoutYTCommentInput
    connect?: YTVideoWhereUniqueInput
    update?: XOR<YTVideoUpdateWithoutYTCommentInput, YTVideoUncheckedUpdateWithoutYTCommentInput>
  }

  export type YTUserUpdateOneRequiredWithoutYTCommentNestedInput = {
    create?: XOR<YTUserCreateWithoutYTCommentInput, YTUserUncheckedCreateWithoutYTCommentInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTCommentInput
    upsert?: YTUserUpsertWithoutYTCommentInput
    connect?: YTUserWhereUniqueInput
    update?: XOR<YTUserUpdateWithoutYTCommentInput, YTUserUncheckedUpdateWithoutYTCommentInput>
  }

  export type YTSubCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutCommentInput>, Enumerable<YTSubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<YTSubCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: YTSubCommentCreateManyCommentInputEnvelope
    set?: Enumerable<YTSubCommentWhereUniqueInput>
    disconnect?: Enumerable<YTSubCommentWhereUniqueInput>
    delete?: Enumerable<YTSubCommentWhereUniqueInput>
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
    update?: Enumerable<YTSubCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<YTSubCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<YTSubCommentScalarWhereInput>
  }

  export type YTSubCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<YTSubCommentCreateWithoutCommentInput>, Enumerable<YTSubCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YTSubCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<YTSubCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: YTSubCommentCreateManyCommentInputEnvelope
    set?: Enumerable<YTSubCommentWhereUniqueInput>
    disconnect?: Enumerable<YTSubCommentWhereUniqueInput>
    delete?: Enumerable<YTSubCommentWhereUniqueInput>
    connect?: Enumerable<YTSubCommentWhereUniqueInput>
    update?: Enumerable<YTSubCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<YTSubCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<YTSubCommentScalarWhereInput>
  }

  export type YTCommentCreateNestedOneWithoutYTSubCommentInput = {
    create?: XOR<YTCommentCreateWithoutYTSubCommentInput, YTCommentUncheckedCreateWithoutYTSubCommentInput>
    connectOrCreate?: YTCommentCreateOrConnectWithoutYTSubCommentInput
    connect?: YTCommentWhereUniqueInput
  }

  export type YTUserCreateNestedOneWithoutYTSubCommentInput = {
    create?: XOR<YTUserCreateWithoutYTSubCommentInput, YTUserUncheckedCreateWithoutYTSubCommentInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTSubCommentInput
    connect?: YTUserWhereUniqueInput
  }

  export type YTCommentUpdateOneRequiredWithoutYTSubCommentNestedInput = {
    create?: XOR<YTCommentCreateWithoutYTSubCommentInput, YTCommentUncheckedCreateWithoutYTSubCommentInput>
    connectOrCreate?: YTCommentCreateOrConnectWithoutYTSubCommentInput
    upsert?: YTCommentUpsertWithoutYTSubCommentInput
    connect?: YTCommentWhereUniqueInput
    update?: XOR<YTCommentUpdateWithoutYTSubCommentInput, YTCommentUncheckedUpdateWithoutYTSubCommentInput>
  }

  export type YTUserUpdateOneRequiredWithoutYTSubCommentNestedInput = {
    create?: XOR<YTUserCreateWithoutYTSubCommentInput, YTUserUncheckedCreateWithoutYTSubCommentInput>
    connectOrCreate?: YTUserCreateOrConnectWithoutYTSubCommentInput
    upsert?: YTUserUpsertWithoutYTSubCommentInput
    connect?: YTUserWhereUniqueInput
    update?: XOR<YTUserUpdateWithoutYTSubCommentInput, YTUserUncheckedUpdateWithoutYTSubCommentInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BinKitchenMenuCreateWithoutCategoryInput = {
    name: string
    image: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemCreateNestedManyWithoutMenuInput
  }

  export type BinKitchenMenuUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    image: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput
  }

  export type BinKitchenMenuCreateOrConnectWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    create: XOR<BinKitchenMenuCreateWithoutCategoryInput, BinKitchenMenuUncheckedCreateWithoutCategoryInput>
  }

  export type BinKitchenMenuCreateManyCategoryInputEnvelope = {
    data: Enumerable<BinKitchenMenuCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    update: XOR<BinKitchenMenuUpdateWithoutCategoryInput, BinKitchenMenuUncheckedUpdateWithoutCategoryInput>
    create: XOR<BinKitchenMenuCreateWithoutCategoryInput, BinKitchenMenuUncheckedCreateWithoutCategoryInput>
  }

  export type BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    data: XOR<BinKitchenMenuUpdateWithoutCategoryInput, BinKitchenMenuUncheckedUpdateWithoutCategoryInput>
  }

  export type BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput = {
    where: BinKitchenMenuScalarWhereInput
    data: XOR<BinKitchenMenuUpdateManyMutationInput, BinKitchenMenuUncheckedUpdateManyWithoutBinKitchenMenuInput>
  }

  export type BinKitchenMenuScalarWhereInput = {
    AND?: Enumerable<BinKitchenMenuScalarWhereInput>
    OR?: Enumerable<BinKitchenMenuScalarWhereInput>
    NOT?: Enumerable<BinKitchenMenuScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    categoryName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenCategoryCreateWithoutBinKitchenMenuInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUncheckedCreateWithoutBinKitchenMenuInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryCreateOrConnectWithoutBinKitchenMenuInput = {
    where: BinKitchenCategoryWhereUniqueInput
    create: XOR<BinKitchenCategoryCreateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedCreateWithoutBinKitchenMenuInput>
  }

  export type BinKitchenOrderItemCreateWithoutMenuInput = {
    order?: BinKitchenOrderCreateNestedOneWithoutBinKitchenOrderItemInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateWithoutMenuInput = {
    id?: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemCreateOrConnectWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    create: XOR<BinKitchenOrderItemCreateWithoutMenuInput, BinKitchenOrderItemUncheckedCreateWithoutMenuInput>
  }

  export type BinKitchenOrderItemCreateManyMenuInputEnvelope = {
    data: Enumerable<BinKitchenOrderItemCreateManyMenuInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenCategoryUpsertWithoutBinKitchenMenuInput = {
    update: XOR<BinKitchenCategoryUpdateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedUpdateWithoutBinKitchenMenuInput>
    create: XOR<BinKitchenCategoryCreateWithoutBinKitchenMenuInput, BinKitchenCategoryUncheckedCreateWithoutBinKitchenMenuInput>
  }

  export type BinKitchenCategoryUpdateWithoutBinKitchenMenuInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryUncheckedUpdateWithoutBinKitchenMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    update: XOR<BinKitchenOrderItemUpdateWithoutMenuInput, BinKitchenOrderItemUncheckedUpdateWithoutMenuInput>
    create: XOR<BinKitchenOrderItemCreateWithoutMenuInput, BinKitchenOrderItemUncheckedCreateWithoutMenuInput>
  }

  export type BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    data: XOR<BinKitchenOrderItemUpdateWithoutMenuInput, BinKitchenOrderItemUncheckedUpdateWithoutMenuInput>
  }

  export type BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput = {
    where: BinKitchenOrderItemScalarWhereInput
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenOrderItemScalarWhereInput = {
    AND?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    OR?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    NOT?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    id?: IntFilter | number
    menuId?: IntFilter | number
    orderId?: IntNullableFilter | number | null
    quantity?: IntFilter | number
    totalPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenOrderItemCreateWithoutOrderInput = {
    menu: BinKitchenMenuCreateNestedOneWithoutBinKitchenOrderItemInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    menuId: number
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemCreateOrConnectWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    create: XOR<BinKitchenOrderItemCreateWithoutOrderInput, BinKitchenOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type BinKitchenOrderItemCreateManyOrderInputEnvelope = {
    data: Enumerable<BinKitchenOrderItemCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    update: XOR<BinKitchenOrderItemUpdateWithoutOrderInput, BinKitchenOrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<BinKitchenOrderItemCreateWithoutOrderInput, BinKitchenOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    data: XOR<BinKitchenOrderItemUpdateWithoutOrderInput, BinKitchenOrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: BinKitchenOrderItemScalarWhereInput
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenMenuCreateWithoutBinKitchenOrderItemInput = {
    name: string
    image: string
    price: number
    category?: BinKitchenCategoryCreateNestedOneWithoutBinKitchenMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUncheckedCreateWithoutBinKitchenOrderItemInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuCreateOrConnectWithoutBinKitchenOrderItemInput = {
    where: BinKitchenMenuWhereUniqueInput
    create: XOR<BinKitchenMenuCreateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedCreateWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenOrderCreateWithoutBinKitchenOrderItemInput = {
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUncheckedCreateWithoutBinKitchenOrderItemInput = {
    id?: number
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderCreateOrConnectWithoutBinKitchenOrderItemInput = {
    where: BinKitchenOrderWhereUniqueInput
    create: XOR<BinKitchenOrderCreateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedCreateWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenMenuUpsertWithoutBinKitchenOrderItemInput = {
    update: XOR<BinKitchenMenuUpdateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedUpdateWithoutBinKitchenOrderItemInput>
    create: XOR<BinKitchenMenuCreateWithoutBinKitchenOrderItemInput, BinKitchenMenuUncheckedCreateWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenMenuUpdateWithoutBinKitchenOrderItemInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    category?: BinKitchenCategoryUpdateOneWithoutBinKitchenMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateWithoutBinKitchenOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUpsertWithoutBinKitchenOrderItemInput = {
    update: XOR<BinKitchenOrderUpdateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedUpdateWithoutBinKitchenOrderItemInput>
    create: XOR<BinKitchenOrderCreateWithoutBinKitchenOrderItemInput, BinKitchenOrderUncheckedCreateWithoutBinKitchenOrderItemInput>
  }

  export type BinKitchenOrderUpdateWithoutBinKitchenOrderItemInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUncheckedUpdateWithoutBinKitchenOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsCreateWithoutFromInput = {
    to: FBUserCreateNestedOneWithoutToFriendsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUncheckedCreateWithoutFromInput = {
    id?: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsCreateOrConnectWithoutFromInput = {
    where: FriendsWhereUniqueInput
    create: XOR<FriendsCreateWithoutFromInput, FriendsUncheckedCreateWithoutFromInput>
  }

  export type FriendsCreateManyFromInputEnvelope = {
    data: Enumerable<FriendsCreateManyFromInput>
    skipDuplicates?: boolean
  }

  export type FriendsCreateWithoutToInput = {
    from: FBUserCreateNestedOneWithoutFromFriendsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUncheckedCreateWithoutToInput = {
    id?: number
    fromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsCreateOrConnectWithoutToInput = {
    where: FriendsWhereUniqueInput
    create: XOR<FriendsCreateWithoutToInput, FriendsUncheckedCreateWithoutToInput>
  }

  export type FriendsCreateManyToInputEnvelope = {
    data: Enumerable<FriendsCreateManyToInput>
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutFromUserIdInput = {
    post: FBPostCreateNestedOneWithoutCommentInput
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutFromUserIdInput = {
    id?: number
    postId: number
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutFromUserIdInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutFromUserIdInput, CommentUncheckedCreateWithoutFromUserIdInput>
  }

  export type CommentCreateManyFromUserIdInputEnvelope = {
    data: Enumerable<CommentCreateManyFromUserIdInput>
    skipDuplicates?: boolean
  }

  export type SubCommentCreateWithoutFromUserIdInput = {
    comment: CommentCreateNestedOneWithoutSubCommentInput
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUncheckedCreateWithoutFromUserIdInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentCreateOrConnectWithoutFromUserIdInput = {
    where: SubCommentWhereUniqueInput
    create: XOR<SubCommentCreateWithoutFromUserIdInput, SubCommentUncheckedCreateWithoutFromUserIdInput>
  }

  export type SubCommentCreateManyFromUserIdInputEnvelope = {
    data: Enumerable<SubCommentCreateManyFromUserIdInput>
    skipDuplicates?: boolean
  }

  export type GroupOnUserCreateWithoutUserInput = {
    group: GroupCreateNestedOneWithoutGroupOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUncheckedCreateWithoutUserInput = {
    id?: number
    groupId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserCreateOrConnectWithoutUserInput = {
    where: GroupOnUserWhereUniqueInput
    create: XOR<GroupOnUserCreateWithoutUserInput, GroupOnUserUncheckedCreateWithoutUserInput>
  }

  export type GroupOnUserCreateManyUserInputEnvelope = {
    data: Enumerable<GroupOnUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutFromUserIdInput = {
    post: FBPostCreateNestedOneWithoutLikeInput
    likeType: LikeTypeCreateNestedOneWithoutLikeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUncheckedCreateWithoutFromUserIdInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutFromUserIdInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutFromUserIdInput, LikeUncheckedCreateWithoutFromUserIdInput>
  }

  export type LikeCreateManyFromUserIdInputEnvelope = {
    data: Enumerable<LikeCreateManyFromUserIdInput>
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutFromUserIdInput = {
    post: FBPostCreateNestedOneWithoutShareInput
    shareStatus: ShareStatusCreateNestedOneWithoutShareInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUncheckedCreateWithoutFromUserIdInput = {
    id?: number
    postId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareCreateOrConnectWithoutFromUserIdInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutFromUserIdInput, ShareUncheckedCreateWithoutFromUserIdInput>
  }

  export type ShareCreateManyFromUserIdInputEnvelope = {
    data: Enumerable<ShareCreateManyFromUserIdInput>
    skipDuplicates?: boolean
  }

  export type FBDirectMsgCreateWithoutFromInput = {
    to: FBUserCreateNestedOneWithoutToDirectMsgInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgUncheckedCreateWithoutFromInput = {
    id?: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgCreateOrConnectWithoutFromInput = {
    where: FBDirectMsgWhereUniqueInput
    create: XOR<FBDirectMsgCreateWithoutFromInput, FBDirectMsgUncheckedCreateWithoutFromInput>
  }

  export type FBDirectMsgCreateManyFromInputEnvelope = {
    data: Enumerable<FBDirectMsgCreateManyFromInput>
    skipDuplicates?: boolean
  }

  export type FBDirectMsgCreateWithoutToInput = {
    from: FBUserCreateNestedOneWithoutFromDirectMsgInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgUncheckedCreateWithoutToInput = {
    id?: number
    fromUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgCreateOrConnectWithoutToInput = {
    where: FBDirectMsgWhereUniqueInput
    create: XOR<FBDirectMsgCreateWithoutToInput, FBDirectMsgUncheckedCreateWithoutToInput>
  }

  export type FBDirectMsgCreateManyToInputEnvelope = {
    data: Enumerable<FBDirectMsgCreateManyToInput>
    skipDuplicates?: boolean
  }

  export type FBPostCreateWithoutPostByUserInput = {
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutPostByUserInput = {
    id?: number
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutPostByUserInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutPostByUserInput, FBPostUncheckedCreateWithoutPostByUserInput>
  }

  export type FBPostCreateManyPostByUserInputEnvelope = {
    data: Enumerable<FBPostCreateManyPostByUserInput>
    skipDuplicates?: boolean
  }

  export type FBPostCreateWithoutPostInUserInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutPostInUserInput = {
    id?: number
    postByUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutPostInUserInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutPostInUserInput, FBPostUncheckedCreateWithoutPostInUserInput>
  }

  export type FBPostCreateManyPostInUserInputEnvelope = {
    data: Enumerable<FBPostCreateManyPostInUserInput>
    skipDuplicates?: boolean
  }

  export type FriendsUpsertWithWhereUniqueWithoutFromInput = {
    where: FriendsWhereUniqueInput
    update: XOR<FriendsUpdateWithoutFromInput, FriendsUncheckedUpdateWithoutFromInput>
    create: XOR<FriendsCreateWithoutFromInput, FriendsUncheckedCreateWithoutFromInput>
  }

  export type FriendsUpdateWithWhereUniqueWithoutFromInput = {
    where: FriendsWhereUniqueInput
    data: XOR<FriendsUpdateWithoutFromInput, FriendsUncheckedUpdateWithoutFromInput>
  }

  export type FriendsUpdateManyWithWhereWithoutFromInput = {
    where: FriendsScalarWhereInput
    data: XOR<FriendsUpdateManyMutationInput, FriendsUncheckedUpdateManyWithoutFromFriendsInput>
  }

  export type FriendsScalarWhereInput = {
    AND?: Enumerable<FriendsScalarWhereInput>
    OR?: Enumerable<FriendsScalarWhereInput>
    NOT?: Enumerable<FriendsScalarWhereInput>
    id?: IntFilter | number
    fromUserId?: IntFilter | number
    toUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FriendsUpsertWithWhereUniqueWithoutToInput = {
    where: FriendsWhereUniqueInput
    update: XOR<FriendsUpdateWithoutToInput, FriendsUncheckedUpdateWithoutToInput>
    create: XOR<FriendsCreateWithoutToInput, FriendsUncheckedCreateWithoutToInput>
  }

  export type FriendsUpdateWithWhereUniqueWithoutToInput = {
    where: FriendsWhereUniqueInput
    data: XOR<FriendsUpdateWithoutToInput, FriendsUncheckedUpdateWithoutToInput>
  }

  export type FriendsUpdateManyWithWhereWithoutToInput = {
    where: FriendsScalarWhereInput
    data: XOR<FriendsUpdateManyMutationInput, FriendsUncheckedUpdateManyWithoutToFriendsInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutFromUserIdInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutFromUserIdInput, CommentUncheckedUpdateWithoutFromUserIdInput>
    create: XOR<CommentCreateWithoutFromUserIdInput, CommentUncheckedCreateWithoutFromUserIdInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutFromUserIdInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutFromUserIdInput, CommentUncheckedUpdateWithoutFromUserIdInput>
  }

  export type CommentUpdateManyWithWhereWithoutFromUserIdInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    commentDetail?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type SubCommentUpsertWithWhereUniqueWithoutFromUserIdInput = {
    where: SubCommentWhereUniqueInput
    update: XOR<SubCommentUpdateWithoutFromUserIdInput, SubCommentUncheckedUpdateWithoutFromUserIdInput>
    create: XOR<SubCommentCreateWithoutFromUserIdInput, SubCommentUncheckedCreateWithoutFromUserIdInput>
  }

  export type SubCommentUpdateWithWhereUniqueWithoutFromUserIdInput = {
    where: SubCommentWhereUniqueInput
    data: XOR<SubCommentUpdateWithoutFromUserIdInput, SubCommentUncheckedUpdateWithoutFromUserIdInput>
  }

  export type SubCommentUpdateManyWithWhereWithoutFromUserIdInput = {
    where: SubCommentScalarWhereInput
    data: XOR<SubCommentUpdateManyMutationInput, SubCommentUncheckedUpdateManyWithoutSubCommentInput>
  }

  export type SubCommentScalarWhereInput = {
    AND?: Enumerable<SubCommentScalarWhereInput>
    OR?: Enumerable<SubCommentScalarWhereInput>
    NOT?: Enumerable<SubCommentScalarWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    subCommentDetail?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type GroupOnUserUpsertWithWhereUniqueWithoutUserInput = {
    where: GroupOnUserWhereUniqueInput
    update: XOR<GroupOnUserUpdateWithoutUserInput, GroupOnUserUncheckedUpdateWithoutUserInput>
    create: XOR<GroupOnUserCreateWithoutUserInput, GroupOnUserUncheckedCreateWithoutUserInput>
  }

  export type GroupOnUserUpdateWithWhereUniqueWithoutUserInput = {
    where: GroupOnUserWhereUniqueInput
    data: XOR<GroupOnUserUpdateWithoutUserInput, GroupOnUserUncheckedUpdateWithoutUserInput>
  }

  export type GroupOnUserUpdateManyWithWhereWithoutUserInput = {
    where: GroupOnUserScalarWhereInput
    data: XOR<GroupOnUserUpdateManyMutationInput, GroupOnUserUncheckedUpdateManyWithoutGroupOnUserInput>
  }

  export type GroupOnUserScalarWhereInput = {
    AND?: Enumerable<GroupOnUserScalarWhereInput>
    OR?: Enumerable<GroupOnUserScalarWhereInput>
    NOT?: Enumerable<GroupOnUserScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    groupId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LikeUpsertWithWhereUniqueWithoutFromUserIdInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutFromUserIdInput, LikeUncheckedUpdateWithoutFromUserIdInput>
    create: XOR<LikeCreateWithoutFromUserIdInput, LikeUncheckedCreateWithoutFromUserIdInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutFromUserIdInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutFromUserIdInput, LikeUncheckedUpdateWithoutFromUserIdInput>
  }

  export type LikeUpdateManyWithWhereWithoutFromUserIdInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutLikeInput>
  }

  export type LikeScalarWhereInput = {
    AND?: Enumerable<LikeScalarWhereInput>
    OR?: Enumerable<LikeScalarWhereInput>
    NOT?: Enumerable<LikeScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ShareUpsertWithWhereUniqueWithoutFromUserIdInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutFromUserIdInput, ShareUncheckedUpdateWithoutFromUserIdInput>
    create: XOR<ShareCreateWithoutFromUserIdInput, ShareUncheckedCreateWithoutFromUserIdInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutFromUserIdInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutFromUserIdInput, ShareUncheckedUpdateWithoutFromUserIdInput>
  }

  export type ShareUpdateManyWithWhereWithoutFromUserIdInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareScalarWhereInput = {
    AND?: Enumerable<ShareScalarWhereInput>
    OR?: Enumerable<ShareScalarWhereInput>
    NOT?: Enumerable<ShareScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    userId?: IntFilter | number
    shareStatusId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBDirectMsgUpsertWithWhereUniqueWithoutFromInput = {
    where: FBDirectMsgWhereUniqueInput
    update: XOR<FBDirectMsgUpdateWithoutFromInput, FBDirectMsgUncheckedUpdateWithoutFromInput>
    create: XOR<FBDirectMsgCreateWithoutFromInput, FBDirectMsgUncheckedCreateWithoutFromInput>
  }

  export type FBDirectMsgUpdateWithWhereUniqueWithoutFromInput = {
    where: FBDirectMsgWhereUniqueInput
    data: XOR<FBDirectMsgUpdateWithoutFromInput, FBDirectMsgUncheckedUpdateWithoutFromInput>
  }

  export type FBDirectMsgUpdateManyWithWhereWithoutFromInput = {
    where: FBDirectMsgScalarWhereInput
    data: XOR<FBDirectMsgUpdateManyMutationInput, FBDirectMsgUncheckedUpdateManyWithoutFromDirectMsgInput>
  }

  export type FBDirectMsgScalarWhereInput = {
    AND?: Enumerable<FBDirectMsgScalarWhereInput>
    OR?: Enumerable<FBDirectMsgScalarWhereInput>
    NOT?: Enumerable<FBDirectMsgScalarWhereInput>
    id?: IntFilter | number
    fromUserId?: IntFilter | number
    toUserId?: IntFilter | number
    msgDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBDirectMsgUpsertWithWhereUniqueWithoutToInput = {
    where: FBDirectMsgWhereUniqueInput
    update: XOR<FBDirectMsgUpdateWithoutToInput, FBDirectMsgUncheckedUpdateWithoutToInput>
    create: XOR<FBDirectMsgCreateWithoutToInput, FBDirectMsgUncheckedCreateWithoutToInput>
  }

  export type FBDirectMsgUpdateWithWhereUniqueWithoutToInput = {
    where: FBDirectMsgWhereUniqueInput
    data: XOR<FBDirectMsgUpdateWithoutToInput, FBDirectMsgUncheckedUpdateWithoutToInput>
  }

  export type FBDirectMsgUpdateManyWithWhereWithoutToInput = {
    where: FBDirectMsgScalarWhereInput
    data: XOR<FBDirectMsgUpdateManyMutationInput, FBDirectMsgUncheckedUpdateManyWithoutToDirectMsgInput>
  }

  export type FBPostUpsertWithWhereUniqueWithoutPostByUserInput = {
    where: FBPostWhereUniqueInput
    update: XOR<FBPostUpdateWithoutPostByUserInput, FBPostUncheckedUpdateWithoutPostByUserInput>
    create: XOR<FBPostCreateWithoutPostByUserInput, FBPostUncheckedCreateWithoutPostByUserInput>
  }

  export type FBPostUpdateWithWhereUniqueWithoutPostByUserInput = {
    where: FBPostWhereUniqueInput
    data: XOR<FBPostUpdateWithoutPostByUserInput, FBPostUncheckedUpdateWithoutPostByUserInput>
  }

  export type FBPostUpdateManyWithWhereWithoutPostByUserInput = {
    where: FBPostScalarWhereInput
    data: XOR<FBPostUpdateManyMutationInput, FBPostUncheckedUpdateManyWithoutPostByUserInput>
  }

  export type FBPostScalarWhereInput = {
    AND?: Enumerable<FBPostScalarWhereInput>
    OR?: Enumerable<FBPostScalarWhereInput>
    NOT?: Enumerable<FBPostScalarWhereInput>
    id?: IntFilter | number
    postByUserId?: IntNullableFilter | number | null
    postInUserId?: IntNullableFilter | number | null
    postDetail?: StringNullableFilter | string | null
    image?: StringNullableFilter | string | null
    groupId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBPostUpsertWithWhereUniqueWithoutPostInUserInput = {
    where: FBPostWhereUniqueInput
    update: XOR<FBPostUpdateWithoutPostInUserInput, FBPostUncheckedUpdateWithoutPostInUserInput>
    create: XOR<FBPostCreateWithoutPostInUserInput, FBPostUncheckedCreateWithoutPostInUserInput>
  }

  export type FBPostUpdateWithWhereUniqueWithoutPostInUserInput = {
    where: FBPostWhereUniqueInput
    data: XOR<FBPostUpdateWithoutPostInUserInput, FBPostUncheckedUpdateWithoutPostInUserInput>
  }

  export type FBPostUpdateManyWithWhereWithoutPostInUserInput = {
    where: FBPostScalarWhereInput
    data: XOR<FBPostUpdateManyMutationInput, FBPostUncheckedUpdateManyWithoutPostInUserInput>
  }

  export type FBUserCreateWithoutFromFriendsInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutFromFriendsInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutFromFriendsInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutFromFriendsInput, FBUserUncheckedCreateWithoutFromFriendsInput>
  }

  export type FBUserCreateWithoutToFriendsInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutToFriendsInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutToFriendsInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutToFriendsInput, FBUserUncheckedCreateWithoutToFriendsInput>
  }

  export type FBUserUpsertWithoutFromFriendsInput = {
    update: XOR<FBUserUpdateWithoutFromFriendsInput, FBUserUncheckedUpdateWithoutFromFriendsInput>
    create: XOR<FBUserCreateWithoutFromFriendsInput, FBUserUncheckedCreateWithoutFromFriendsInput>
  }

  export type FBUserUpdateWithoutFromFriendsInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutFromFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUpsertWithoutToFriendsInput = {
    update: XOR<FBUserUpdateWithoutToFriendsInput, FBUserUncheckedUpdateWithoutToFriendsInput>
    create: XOR<FBUserCreateWithoutToFriendsInput, FBUserUncheckedCreateWithoutToFriendsInput>
  }

  export type FBUserUpdateWithoutToFriendsInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutToFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserCreateWithoutPostByUserInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutPostByUserInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutPostByUserInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutPostByUserInput, FBUserUncheckedCreateWithoutPostByUserInput>
  }

  export type FBUserCreateWithoutPostInUserInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
  }

  export type FBUserUncheckedCreateWithoutPostInUserInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
  }

  export type FBUserCreateOrConnectWithoutPostInUserInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutPostInUserInput, FBUserUncheckedCreateWithoutPostInUserInput>
  }

  export type GroupCreateWithoutFBPostInput = {
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutFBPostInput = {
    id?: number
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutFBPostInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutFBPostInput, GroupUncheckedCreateWithoutFBPostInput>
  }

  export type CommentCreateWithoutPostInput = {
    commentDetail: string
    fromUserId: FBUserCreateNestedOneWithoutCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: number
    commentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: Enumerable<CommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type LikeCreateWithoutPostInput = {
    fromUserId: FBUserCreateNestedOneWithoutLikeInput
    likeType: LikeTypeCreateNestedOneWithoutLikeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUncheckedCreateWithoutPostInput = {
    id?: number
    userId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutPostInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeCreateManyPostInputEnvelope = {
    data: Enumerable<LikeCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type ShareCreateWithoutPostInput = {
    fromUserId: FBUserCreateNestedOneWithoutShareInput
    shareStatus: ShareStatusCreateNestedOneWithoutShareInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUncheckedCreateWithoutPostInput = {
    id?: number
    userId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareCreateOrConnectWithoutPostInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
  }

  export type ShareCreateManyPostInputEnvelope = {
    data: Enumerable<ShareCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type FBPostOnHashtagCreateWithoutPostInput = {
    hashtag: FBHashtagCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUncheckedCreateWithoutPostInput = {
    id?: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagCreateOrConnectWithoutPostInput = {
    where: FBPostOnHashtagWhereUniqueInput
    create: XOR<FBPostOnHashtagCreateWithoutPostInput, FBPostOnHashtagUncheckedCreateWithoutPostInput>
  }

  export type FBPostOnHashtagCreateManyPostInputEnvelope = {
    data: Enumerable<FBPostOnHashtagCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type FBUserUpsertWithoutPostByUserInput = {
    update: XOR<FBUserUpdateWithoutPostByUserInput, FBUserUncheckedUpdateWithoutPostByUserInput>
    create: XOR<FBUserCreateWithoutPostByUserInput, FBUserUncheckedCreateWithoutPostByUserInput>
  }

  export type FBUserUpdateWithoutPostByUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutPostByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUpsertWithoutPostInUserInput = {
    update: XOR<FBUserUpdateWithoutPostInUserInput, FBUserUncheckedUpdateWithoutPostInUserInput>
    create: XOR<FBUserCreateWithoutPostInUserInput, FBUserUncheckedCreateWithoutPostInUserInput>
  }

  export type FBUserUpdateWithoutPostInUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutPostInUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
  }

  export type GroupUpsertWithoutFBPostInput = {
    update: XOR<GroupUpdateWithoutFBPostInput, GroupUncheckedUpdateWithoutFBPostInput>
    create: XOR<GroupCreateWithoutFBPostInput, GroupUncheckedCreateWithoutFBPostInput>
  }

  export type GroupUpdateWithoutFBPostInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupOnUser?: GroupOnUserUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutFBPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type LikeUpsertWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
    create: XOR<LikeCreateWithoutPostInput, LikeUncheckedCreateWithoutPostInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutPostInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutPostInput, LikeUncheckedUpdateWithoutPostInput>
  }

  export type LikeUpdateManyWithWhereWithoutPostInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutLikeInput>
  }

  export type ShareUpsertWithWhereUniqueWithoutPostInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutPostInput, ShareUncheckedUpdateWithoutPostInput>
    create: XOR<ShareCreateWithoutPostInput, ShareUncheckedCreateWithoutPostInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutPostInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutPostInput, ShareUncheckedUpdateWithoutPostInput>
  }

  export type ShareUpdateManyWithWhereWithoutPostInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareInput>
  }

  export type FBPostOnHashtagUpsertWithWhereUniqueWithoutPostInput = {
    where: FBPostOnHashtagWhereUniqueInput
    update: XOR<FBPostOnHashtagUpdateWithoutPostInput, FBPostOnHashtagUncheckedUpdateWithoutPostInput>
    create: XOR<FBPostOnHashtagCreateWithoutPostInput, FBPostOnHashtagUncheckedCreateWithoutPostInput>
  }

  export type FBPostOnHashtagUpdateWithWhereUniqueWithoutPostInput = {
    where: FBPostOnHashtagWhereUniqueInput
    data: XOR<FBPostOnHashtagUpdateWithoutPostInput, FBPostOnHashtagUncheckedUpdateWithoutPostInput>
  }

  export type FBPostOnHashtagUpdateManyWithWhereWithoutPostInput = {
    where: FBPostOnHashtagScalarWhereInput
    data: XOR<FBPostOnHashtagUpdateManyMutationInput, FBPostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput>
  }

  export type FBPostOnHashtagScalarWhereInput = {
    AND?: Enumerable<FBPostOnHashtagScalarWhereInput>
    OR?: Enumerable<FBPostOnHashtagScalarWhereInput>
    NOT?: Enumerable<FBPostOnHashtagScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    hashtagId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FBPostCreateWithoutCommentInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutCommentInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutCommentInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutCommentInput, FBPostUncheckedCreateWithoutCommentInput>
  }

  export type FBUserCreateWithoutCommentInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutCommentInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutCommentInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutCommentInput, FBUserUncheckedCreateWithoutCommentInput>
  }

  export type SubCommentCreateWithoutCommentInput = {
    subCommentDetail: string
    fromUserId: FBUserCreateNestedOneWithoutSubCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUncheckedCreateWithoutCommentInput = {
    id?: number
    subCommentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentCreateOrConnectWithoutCommentInput = {
    where: SubCommentWhereUniqueInput
    create: XOR<SubCommentCreateWithoutCommentInput, SubCommentUncheckedCreateWithoutCommentInput>
  }

  export type SubCommentCreateManyCommentInputEnvelope = {
    data: Enumerable<SubCommentCreateManyCommentInput>
    skipDuplicates?: boolean
  }

  export type FBPostUpsertWithoutCommentInput = {
    update: XOR<FBPostUpdateWithoutCommentInput, FBPostUncheckedUpdateWithoutCommentInput>
    create: XOR<FBPostCreateWithoutCommentInput, FBPostUncheckedCreateWithoutCommentInput>
  }

  export type FBPostUpdateWithoutCommentInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBUserUpsertWithoutCommentInput = {
    update: XOR<FBUserUpdateWithoutCommentInput, FBUserUncheckedUpdateWithoutCommentInput>
    create: XOR<FBUserCreateWithoutCommentInput, FBUserUncheckedCreateWithoutCommentInput>
  }

  export type FBUserUpdateWithoutCommentInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type SubCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: SubCommentWhereUniqueInput
    update: XOR<SubCommentUpdateWithoutCommentInput, SubCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<SubCommentCreateWithoutCommentInput, SubCommentUncheckedCreateWithoutCommentInput>
  }

  export type SubCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: SubCommentWhereUniqueInput
    data: XOR<SubCommentUpdateWithoutCommentInput, SubCommentUncheckedUpdateWithoutCommentInput>
  }

  export type SubCommentUpdateManyWithWhereWithoutCommentInput = {
    where: SubCommentScalarWhereInput
    data: XOR<SubCommentUpdateManyMutationInput, SubCommentUncheckedUpdateManyWithoutSubCommentInput>
  }

  export type CommentCreateWithoutSubCommentInput = {
    post: FBPostCreateNestedOneWithoutCommentInput
    commentDetail: string
    fromUserId: FBUserCreateNestedOneWithoutCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUncheckedCreateWithoutSubCommentInput = {
    id?: number
    postId: number
    commentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutSubCommentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutSubCommentInput, CommentUncheckedCreateWithoutSubCommentInput>
  }

  export type FBUserCreateWithoutSubCommentInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutSubCommentInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutSubCommentInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutSubCommentInput, FBUserUncheckedCreateWithoutSubCommentInput>
  }

  export type CommentUpsertWithoutSubCommentInput = {
    update: XOR<CommentUpdateWithoutSubCommentInput, CommentUncheckedUpdateWithoutSubCommentInput>
    create: XOR<CommentCreateWithoutSubCommentInput, CommentUncheckedCreateWithoutSubCommentInput>
  }

  export type CommentUpdateWithoutSubCommentInput = {
    post?: FBPostUpdateOneRequiredWithoutCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    fromUserId?: FBUserUpdateOneRequiredWithoutCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateWithoutSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBUserUpsertWithoutSubCommentInput = {
    update: XOR<FBUserUpdateWithoutSubCommentInput, FBUserUncheckedUpdateWithoutSubCommentInput>
    create: XOR<FBUserCreateWithoutSubCommentInput, FBUserUncheckedCreateWithoutSubCommentInput>
  }

  export type FBUserUpdateWithoutSubCommentInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBPostCreateWithoutLikeInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutLikeInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutLikeInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutLikeInput, FBPostUncheckedCreateWithoutLikeInput>
  }

  export type FBUserCreateWithoutLikeInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutLikeInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutLikeInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutLikeInput, FBUserUncheckedCreateWithoutLikeInput>
  }

  export type LikeTypeCreateWithoutLikeInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeTypeUncheckedCreateWithoutLikeInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeTypeCreateOrConnectWithoutLikeInput = {
    where: LikeTypeWhereUniqueInput
    create: XOR<LikeTypeCreateWithoutLikeInput, LikeTypeUncheckedCreateWithoutLikeInput>
  }

  export type FBPostUpsertWithoutLikeInput = {
    update: XOR<FBPostUpdateWithoutLikeInput, FBPostUncheckedUpdateWithoutLikeInput>
    create: XOR<FBPostCreateWithoutLikeInput, FBPostUncheckedCreateWithoutLikeInput>
  }

  export type FBPostUpdateWithoutLikeInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBUserUpsertWithoutLikeInput = {
    update: XOR<FBUserUpdateWithoutLikeInput, FBUserUncheckedUpdateWithoutLikeInput>
    create: XOR<FBUserCreateWithoutLikeInput, FBUserUncheckedCreateWithoutLikeInput>
  }

  export type FBUserUpdateWithoutLikeInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type LikeTypeUpsertWithoutLikeInput = {
    update: XOR<LikeTypeUpdateWithoutLikeInput, LikeTypeUncheckedUpdateWithoutLikeInput>
    create: XOR<LikeTypeCreateWithoutLikeInput, LikeTypeUncheckedCreateWithoutLikeInput>
  }

  export type LikeTypeUpdateWithoutLikeInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeTypeUncheckedUpdateWithoutLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostCreateWithoutShareInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutShareInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutShareInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutShareInput, FBPostUncheckedCreateWithoutShareInput>
  }

  export type FBUserCreateWithoutShareInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutShareInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutShareInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutShareInput, FBUserUncheckedCreateWithoutShareInput>
  }

  export type ShareStatusCreateWithoutShareInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareStatusUncheckedCreateWithoutShareInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareStatusCreateOrConnectWithoutShareInput = {
    where: ShareStatusWhereUniqueInput
    create: XOR<ShareStatusCreateWithoutShareInput, ShareStatusUncheckedCreateWithoutShareInput>
  }

  export type FBPostUpsertWithoutShareInput = {
    update: XOR<FBPostUpdateWithoutShareInput, FBPostUncheckedUpdateWithoutShareInput>
    create: XOR<FBPostCreateWithoutShareInput, FBPostUncheckedCreateWithoutShareInput>
  }

  export type FBPostUpdateWithoutShareInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBUserUpsertWithoutShareInput = {
    update: XOR<FBUserUpdateWithoutShareInput, FBUserUncheckedUpdateWithoutShareInput>
    create: XOR<FBUserCreateWithoutShareInput, FBUserUncheckedCreateWithoutShareInput>
  }

  export type FBUserUpdateWithoutShareInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type ShareStatusUpsertWithoutShareInput = {
    update: XOR<ShareStatusUpdateWithoutShareInput, ShareStatusUncheckedUpdateWithoutShareInput>
    create: XOR<ShareStatusCreateWithoutShareInput, ShareStatusUncheckedCreateWithoutShareInput>
  }

  export type ShareStatusUpdateWithoutShareInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareStatusUncheckedUpdateWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserCreateWithoutGroupInput = {
    user: FBUserCreateNestedOneWithoutGroupOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUncheckedCreateWithoutGroupInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserCreateOrConnectWithoutGroupInput = {
    where: GroupOnUserWhereUniqueInput
    create: XOR<GroupOnUserCreateWithoutGroupInput, GroupOnUserUncheckedCreateWithoutGroupInput>
  }

  export type GroupOnUserCreateManyGroupInputEnvelope = {
    data: Enumerable<GroupOnUserCreateManyGroupInput>
    skipDuplicates?: boolean
  }

  export type FBPostCreateWithoutGroupInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutGroupInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
    PostOnHashtag?: FBPostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutGroupInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutGroupInput, FBPostUncheckedCreateWithoutGroupInput>
  }

  export type FBPostCreateManyGroupInputEnvelope = {
    data: Enumerable<FBPostCreateManyGroupInput>
    skipDuplicates?: boolean
  }

  export type GroupOnUserUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupOnUserWhereUniqueInput
    update: XOR<GroupOnUserUpdateWithoutGroupInput, GroupOnUserUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupOnUserCreateWithoutGroupInput, GroupOnUserUncheckedCreateWithoutGroupInput>
  }

  export type GroupOnUserUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupOnUserWhereUniqueInput
    data: XOR<GroupOnUserUpdateWithoutGroupInput, GroupOnUserUncheckedUpdateWithoutGroupInput>
  }

  export type GroupOnUserUpdateManyWithWhereWithoutGroupInput = {
    where: GroupOnUserScalarWhereInput
    data: XOR<GroupOnUserUpdateManyMutationInput, GroupOnUserUncheckedUpdateManyWithoutGroupOnUserInput>
  }

  export type FBPostUpsertWithWhereUniqueWithoutGroupInput = {
    where: FBPostWhereUniqueInput
    update: XOR<FBPostUpdateWithoutGroupInput, FBPostUncheckedUpdateWithoutGroupInput>
    create: XOR<FBPostCreateWithoutGroupInput, FBPostUncheckedCreateWithoutGroupInput>
  }

  export type FBPostUpdateWithWhereUniqueWithoutGroupInput = {
    where: FBPostWhereUniqueInput
    data: XOR<FBPostUpdateWithoutGroupInput, FBPostUncheckedUpdateWithoutGroupInput>
  }

  export type FBPostUpdateManyWithWhereWithoutGroupInput = {
    where: FBPostScalarWhereInput
    data: XOR<FBPostUpdateManyMutationInput, FBPostUncheckedUpdateManyWithoutFBPostInput>
  }

  export type FBUserCreateWithoutGroupOnUserInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutGroupOnUserInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutGroupOnUserInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutGroupOnUserInput, FBUserUncheckedCreateWithoutGroupOnUserInput>
  }

  export type GroupCreateWithoutGroupOnUserInput = {
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    FBPost?: FBPostCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutGroupOnUserInput = {
    id?: number
    groupName: string
    groupImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    FBPost?: FBPostUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutGroupOnUserInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutGroupOnUserInput, GroupUncheckedCreateWithoutGroupOnUserInput>
  }

  export type FBUserUpsertWithoutGroupOnUserInput = {
    update: XOR<FBUserUpdateWithoutGroupOnUserInput, FBUserUncheckedUpdateWithoutGroupOnUserInput>
    create: XOR<FBUserCreateWithoutGroupOnUserInput, FBUserUncheckedCreateWithoutGroupOnUserInput>
  }

  export type FBUserUpdateWithoutGroupOnUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutGroupOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type GroupUpsertWithoutGroupOnUserInput = {
    update: XOR<GroupUpdateWithoutGroupOnUserInput, GroupUncheckedUpdateWithoutGroupOnUserInput>
    create: XOR<GroupCreateWithoutGroupOnUserInput, GroupUncheckedCreateWithoutGroupOnUserInput>
  }

  export type GroupUpdateWithoutGroupOnUserInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FBPost?: FBPostUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutGroupOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    FBPost?: FBPostUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type LikeCreateWithoutLikeTypeInput = {
    post: FBPostCreateNestedOneWithoutLikeInput
    fromUserId: FBUserCreateNestedOneWithoutLikeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUncheckedCreateWithoutLikeTypeInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateOrConnectWithoutLikeTypeInput = {
    where: LikeWhereUniqueInput
    create: XOR<LikeCreateWithoutLikeTypeInput, LikeUncheckedCreateWithoutLikeTypeInput>
  }

  export type LikeCreateManyLikeTypeInputEnvelope = {
    data: Enumerable<LikeCreateManyLikeTypeInput>
    skipDuplicates?: boolean
  }

  export type LikeUpsertWithWhereUniqueWithoutLikeTypeInput = {
    where: LikeWhereUniqueInput
    update: XOR<LikeUpdateWithoutLikeTypeInput, LikeUncheckedUpdateWithoutLikeTypeInput>
    create: XOR<LikeCreateWithoutLikeTypeInput, LikeUncheckedCreateWithoutLikeTypeInput>
  }

  export type LikeUpdateWithWhereUniqueWithoutLikeTypeInput = {
    where: LikeWhereUniqueInput
    data: XOR<LikeUpdateWithoutLikeTypeInput, LikeUncheckedUpdateWithoutLikeTypeInput>
  }

  export type LikeUpdateManyWithWhereWithoutLikeTypeInput = {
    where: LikeScalarWhereInput
    data: XOR<LikeUpdateManyMutationInput, LikeUncheckedUpdateManyWithoutLikeInput>
  }

  export type ShareCreateWithoutShareStatusInput = {
    post: FBPostCreateNestedOneWithoutShareInput
    fromUserId: FBUserCreateNestedOneWithoutShareInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUncheckedCreateWithoutShareStatusInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareCreateOrConnectWithoutShareStatusInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutShareStatusInput, ShareUncheckedCreateWithoutShareStatusInput>
  }

  export type ShareCreateManyShareStatusInputEnvelope = {
    data: Enumerable<ShareCreateManyShareStatusInput>
    skipDuplicates?: boolean
  }

  export type ShareUpsertWithWhereUniqueWithoutShareStatusInput = {
    where: ShareWhereUniqueInput
    update: XOR<ShareUpdateWithoutShareStatusInput, ShareUncheckedUpdateWithoutShareStatusInput>
    create: XOR<ShareCreateWithoutShareStatusInput, ShareUncheckedCreateWithoutShareStatusInput>
  }

  export type ShareUpdateWithWhereUniqueWithoutShareStatusInput = {
    where: ShareWhereUniqueInput
    data: XOR<ShareUpdateWithoutShareStatusInput, ShareUncheckedUpdateWithoutShareStatusInput>
  }

  export type ShareUpdateManyWithWhereWithoutShareStatusInput = {
    where: ShareScalarWhereInput
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyWithoutShareInput>
  }

  export type FBUserCreateWithoutFromDirectMsgInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    toDirectMsg?: FBDirectMsgCreateNestedManyWithoutToInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutFromDirectMsgInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    toDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutToInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutFromDirectMsgInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutFromDirectMsgInput, FBUserUncheckedCreateWithoutFromDirectMsgInput>
  }

  export type FBUserCreateWithoutToDirectMsgInput = {
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsCreateNestedManyWithoutFromInput
    toFriends?: FriendsCreateNestedManyWithoutToInput
    Comment?: CommentCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserCreateNestedManyWithoutUserInput
    Like?: LikeCreateNestedManyWithoutFromUserIdInput
    Share?: ShareCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgCreateNestedManyWithoutFromInput
    postByUser?: FBPostCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserUncheckedCreateWithoutToDirectMsgInput = {
    id?: number
    name: string
    profileImage: string
    coverImage: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFriends?: FriendsUncheckedCreateNestedManyWithoutFromInput
    toFriends?: FriendsUncheckedCreateNestedManyWithoutToInput
    Comment?: CommentUncheckedCreateNestedManyWithoutFromUserIdInput
    SubComment?: SubCommentUncheckedCreateNestedManyWithoutFromUserIdInput
    GroupOnUser?: GroupOnUserUncheckedCreateNestedManyWithoutUserInput
    Like?: LikeUncheckedCreateNestedManyWithoutFromUserIdInput
    Share?: ShareUncheckedCreateNestedManyWithoutFromUserIdInput
    fromDirectMsg?: FBDirectMsgUncheckedCreateNestedManyWithoutFromInput
    postByUser?: FBPostUncheckedCreateNestedManyWithoutPostByUserInput
    postInUser?: FBPostUncheckedCreateNestedManyWithoutPostInUserInput
  }

  export type FBUserCreateOrConnectWithoutToDirectMsgInput = {
    where: FBUserWhereUniqueInput
    create: XOR<FBUserCreateWithoutToDirectMsgInput, FBUserUncheckedCreateWithoutToDirectMsgInput>
  }

  export type FBUserUpsertWithoutFromDirectMsgInput = {
    update: XOR<FBUserUpdateWithoutFromDirectMsgInput, FBUserUncheckedUpdateWithoutFromDirectMsgInput>
    create: XOR<FBUserCreateWithoutFromDirectMsgInput, FBUserUncheckedCreateWithoutFromDirectMsgInput>
  }

  export type FBUserUpdateWithoutFromDirectMsgInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    toDirectMsg?: FBDirectMsgUpdateManyWithoutToNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutFromDirectMsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    toDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutToNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUpsertWithoutToDirectMsgInput = {
    update: XOR<FBUserUpdateWithoutToDirectMsgInput, FBUserUncheckedUpdateWithoutToDirectMsgInput>
    create: XOR<FBUserCreateWithoutToDirectMsgInput, FBUserUncheckedCreateWithoutToDirectMsgInput>
  }

  export type FBUserUpdateWithoutToDirectMsgInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUpdateManyWithoutToNestedInput
    Comment?: CommentUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUpdateManyWithoutUserNestedInput
    Like?: LikeUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUpdateManyWithoutFromNestedInput
    postByUser?: FBPostUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUpdateManyWithoutPostInUserNestedInput
  }

  export type FBUserUncheckedUpdateWithoutToDirectMsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFriends?: FriendsUncheckedUpdateManyWithoutFromNestedInput
    toFriends?: FriendsUncheckedUpdateManyWithoutToNestedInput
    Comment?: CommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    SubComment?: SubCommentUncheckedUpdateManyWithoutFromUserIdNestedInput
    GroupOnUser?: GroupOnUserUncheckedUpdateManyWithoutUserNestedInput
    Like?: LikeUncheckedUpdateManyWithoutFromUserIdNestedInput
    Share?: ShareUncheckedUpdateManyWithoutFromUserIdNestedInput
    fromDirectMsg?: FBDirectMsgUncheckedUpdateManyWithoutFromNestedInput
    postByUser?: FBPostUncheckedUpdateManyWithoutPostByUserNestedInput
    postInUser?: FBPostUncheckedUpdateManyWithoutPostInUserNestedInput
  }

  export type FBPostOnHashtagCreateWithoutHashtagInput = {
    post: FBPostCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUncheckedCreateWithoutHashtagInput = {
    id?: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagCreateOrConnectWithoutHashtagInput = {
    where: FBPostOnHashtagWhereUniqueInput
    create: XOR<FBPostOnHashtagCreateWithoutHashtagInput, FBPostOnHashtagUncheckedCreateWithoutHashtagInput>
  }

  export type FBPostOnHashtagCreateManyHashtagInputEnvelope = {
    data: Enumerable<FBPostOnHashtagCreateManyHashtagInput>
    skipDuplicates?: boolean
  }

  export type FBPostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput = {
    where: FBPostOnHashtagWhereUniqueInput
    update: XOR<FBPostOnHashtagUpdateWithoutHashtagInput, FBPostOnHashtagUncheckedUpdateWithoutHashtagInput>
    create: XOR<FBPostOnHashtagCreateWithoutHashtagInput, FBPostOnHashtagUncheckedCreateWithoutHashtagInput>
  }

  export type FBPostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput = {
    where: FBPostOnHashtagWhereUniqueInput
    data: XOR<FBPostOnHashtagUpdateWithoutHashtagInput, FBPostOnHashtagUncheckedUpdateWithoutHashtagInput>
  }

  export type FBPostOnHashtagUpdateManyWithWhereWithoutHashtagInput = {
    where: FBPostOnHashtagScalarWhereInput
    data: XOR<FBPostOnHashtagUpdateManyMutationInput, FBPostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput>
  }

  export type FBPostCreateWithoutPostOnHashtagInput = {
    postByUser?: FBUserCreateNestedOneWithoutPostByUserInput
    postInUser?: FBUserCreateNestedOneWithoutPostInUserInput
    postDetail?: string | null
    image?: string | null
    group?: GroupCreateNestedOneWithoutFBPostInput
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentCreateNestedManyWithoutPostInput
    Like?: LikeCreateNestedManyWithoutPostInput
    Share?: ShareCreateNestedManyWithoutPostInput
  }

  export type FBPostUncheckedCreateWithoutPostOnHashtagInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Comment?: CommentUncheckedCreateNestedManyWithoutPostInput
    Like?: LikeUncheckedCreateNestedManyWithoutPostInput
    Share?: ShareUncheckedCreateNestedManyWithoutPostInput
  }

  export type FBPostCreateOrConnectWithoutPostOnHashtagInput = {
    where: FBPostWhereUniqueInput
    create: XOR<FBPostCreateWithoutPostOnHashtagInput, FBPostUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type FBHashtagCreateWithoutPostOnHashtagInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBHashtagUncheckedCreateWithoutPostOnHashtagInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBHashtagCreateOrConnectWithoutPostOnHashtagInput = {
    where: FBHashtagWhereUniqueInput
    create: XOR<FBHashtagCreateWithoutPostOnHashtagInput, FBHashtagUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type FBPostUpsertWithoutPostOnHashtagInput = {
    update: XOR<FBPostUpdateWithoutPostOnHashtagInput, FBPostUncheckedUpdateWithoutPostOnHashtagInput>
    create: XOR<FBPostCreateWithoutPostOnHashtagInput, FBPostUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type FBPostUpdateWithoutPostOnHashtagInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBHashtagUpsertWithoutPostOnHashtagInput = {
    update: XOR<FBHashtagUpdateWithoutPostOnHashtagInput, FBHashtagUncheckedUpdateWithoutPostOnHashtagInput>
    create: XOR<FBHashtagCreateWithoutPostOnHashtagInput, FBHashtagUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type FBHashtagUpdateWithoutPostOnHashtagInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBHashtagUncheckedUpdateWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCreateWithoutUniversityInput = {
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUncheckedCreateWithoutUniversityInput = {
    id?: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorUncheckedCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryUncheckedCreateNestedManyWithoutBookInput
  }

  export type LibraryBookCreateOrConnectWithoutUniversityInput = {
    where: LibraryBookWhereUniqueInput
    create: XOR<LibraryBookCreateWithoutUniversityInput, LibraryBookUncheckedCreateWithoutUniversityInput>
  }

  export type LibraryBookCreateManyUniversityInputEnvelope = {
    data: Enumerable<LibraryBookCreateManyUniversityInput>
    skipDuplicates?: boolean
  }

  export type LibraryBookCopyCreateWithoutAtUniversityInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutAtUniversityInput = {
    id?: number
    bookId: number
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutAtUniversityInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutAtUniversityInput, LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>
  }

  export type LibraryBookCopyCreateManyAtUniversityInputEnvelope = {
    data: Enumerable<LibraryBookCopyCreateManyAtUniversityInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentRequestCreateWithoutFromUniversityInput = {
    student: LibraryStudentCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    toUniversity: LibraryUniversityCreateNestedOneWithoutToUniversityInput
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateOrConnectWithoutFromUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    create: XOR<LibraryStudentRequestCreateWithoutFromUniversityInput, LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>
  }

  export type LibraryStudentRequestCreateManyFromUniversityInputEnvelope = {
    data: Enumerable<LibraryStudentRequestCreateManyFromUniversityInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentRequestCreateWithoutToUniversityInput = {
    student: LibraryStudentCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    fromUniversity: LibraryUniversityCreateNestedOneWithoutFromUniversityInput
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUncheckedCreateWithoutToUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateOrConnectWithoutToUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    create: XOR<LibraryStudentRequestCreateWithoutToUniversityInput, LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>
  }

  export type LibraryStudentRequestCreateManyToUniversityInputEnvelope = {
    data: Enumerable<LibraryStudentRequestCreateManyToUniversityInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput = {
    stident: LibraryStudentCreateNestedOneWithoutLibraryStudentBorrowingInput
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryStudentBorrowingInput
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateOrConnectWithoutBorrowFromUniversityInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    create: XOR<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput, LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>
  }

  export type LibraryStudentBorrowingCreateManyBorrowFromUniversityInputEnvelope = {
    data: Enumerable<LibraryStudentBorrowingCreateManyBorrowFromUniversityInput>
    skipDuplicates?: boolean
  }

  export type LibraryBookUpsertWithWhereUniqueWithoutUniversityInput = {
    where: LibraryBookWhereUniqueInput
    update: XOR<LibraryBookUpdateWithoutUniversityInput, LibraryBookUncheckedUpdateWithoutUniversityInput>
    create: XOR<LibraryBookCreateWithoutUniversityInput, LibraryBookUncheckedCreateWithoutUniversityInput>
  }

  export type LibraryBookUpdateWithWhereUniqueWithoutUniversityInput = {
    where: LibraryBookWhereUniqueInput
    data: XOR<LibraryBookUpdateWithoutUniversityInput, LibraryBookUncheckedUpdateWithoutUniversityInput>
  }

  export type LibraryBookUpdateManyWithWhereWithoutUniversityInput = {
    where: LibraryBookScalarWhereInput
    data: XOR<LibraryBookUpdateManyMutationInput, LibraryBookUncheckedUpdateManyWithoutLibraryBookInput>
  }

  export type LibraryBookScalarWhereInput = {
    AND?: Enumerable<LibraryBookScalarWhereInput>
    OR?: Enumerable<LibraryBookScalarWhereInput>
    NOT?: Enumerable<LibraryBookScalarWhereInput>
    id?: IntFilter | number
    universityId?: IntFilter | number
    name?: StringFilter | string
    isbn?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryBookCopyUpsertWithWhereUniqueWithoutAtUniversityInput = {
    where: LibraryBookCopyWhereUniqueInput
    update: XOR<LibraryBookCopyUpdateWithoutAtUniversityInput, LibraryBookCopyUncheckedUpdateWithoutAtUniversityInput>
    create: XOR<LibraryBookCopyCreateWithoutAtUniversityInput, LibraryBookCopyUncheckedCreateWithoutAtUniversityInput>
  }

  export type LibraryBookCopyUpdateWithWhereUniqueWithoutAtUniversityInput = {
    where: LibraryBookCopyWhereUniqueInput
    data: XOR<LibraryBookCopyUpdateWithoutAtUniversityInput, LibraryBookCopyUncheckedUpdateWithoutAtUniversityInput>
  }

  export type LibraryBookCopyUpdateManyWithWhereWithoutAtUniversityInput = {
    where: LibraryBookCopyScalarWhereInput
    data: XOR<LibraryBookCopyUpdateManyMutationInput, LibraryBookCopyUncheckedUpdateManyWithoutLibraryBookCopyInput>
  }

  export type LibraryBookCopyScalarWhereInput = {
    AND?: Enumerable<LibraryBookCopyScalarWhereInput>
    OR?: Enumerable<LibraryBookCopyScalarWhereInput>
    NOT?: Enumerable<LibraryBookCopyScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    atUniversityId?: IntNullableFilter | number | null
    currentBorrowBytudentId?: IntNullableFilter | number | null
    status?: StringFilter | string
    isbn?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryStudentRequestUpsertWithWhereUniqueWithoutFromUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    update: XOR<LibraryStudentRequestUpdateWithoutFromUniversityInput, LibraryStudentRequestUncheckedUpdateWithoutFromUniversityInput>
    create: XOR<LibraryStudentRequestCreateWithoutFromUniversityInput, LibraryStudentRequestUncheckedCreateWithoutFromUniversityInput>
  }

  export type LibraryStudentRequestUpdateWithWhereUniqueWithoutFromUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    data: XOR<LibraryStudentRequestUpdateWithoutFromUniversityInput, LibraryStudentRequestUncheckedUpdateWithoutFromUniversityInput>
  }

  export type LibraryStudentRequestUpdateManyWithWhereWithoutFromUniversityInput = {
    where: LibraryStudentRequestScalarWhereInput
    data: XOR<LibraryStudentRequestUpdateManyMutationInput, LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityInput>
  }

  export type LibraryStudentRequestScalarWhereInput = {
    AND?: Enumerable<LibraryStudentRequestScalarWhereInput>
    OR?: Enumerable<LibraryStudentRequestScalarWhereInput>
    NOT?: Enumerable<LibraryStudentRequestScalarWhereInput>
    id?: IntFilter | number
    studentId?: IntFilter | number
    bookCopyId?: IntFilter | number
    fromUniversityId?: IntFilter | number
    toUniversityId?: IntFilter | number
    status?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryStudentRequestUpsertWithWhereUniqueWithoutToUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    update: XOR<LibraryStudentRequestUpdateWithoutToUniversityInput, LibraryStudentRequestUncheckedUpdateWithoutToUniversityInput>
    create: XOR<LibraryStudentRequestCreateWithoutToUniversityInput, LibraryStudentRequestUncheckedCreateWithoutToUniversityInput>
  }

  export type LibraryStudentRequestUpdateWithWhereUniqueWithoutToUniversityInput = {
    where: LibraryStudentRequestWhereUniqueInput
    data: XOR<LibraryStudentRequestUpdateWithoutToUniversityInput, LibraryStudentRequestUncheckedUpdateWithoutToUniversityInput>
  }

  export type LibraryStudentRequestUpdateManyWithWhereWithoutToUniversityInput = {
    where: LibraryStudentRequestScalarWhereInput
    data: XOR<LibraryStudentRequestUpdateManyMutationInput, LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityInput>
  }

  export type LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBorrowFromUniversityInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    update: XOR<LibraryStudentBorrowingUpdateWithoutBorrowFromUniversityInput, LibraryStudentBorrowingUncheckedUpdateWithoutBorrowFromUniversityInput>
    create: XOR<LibraryStudentBorrowingCreateWithoutBorrowFromUniversityInput, LibraryStudentBorrowingUncheckedCreateWithoutBorrowFromUniversityInput>
  }

  export type LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBorrowFromUniversityInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    data: XOR<LibraryStudentBorrowingUpdateWithoutBorrowFromUniversityInput, LibraryStudentBorrowingUncheckedUpdateWithoutBorrowFromUniversityInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithWhereWithoutBorrowFromUniversityInput = {
    where: LibraryStudentBorrowingScalarWhereInput
    data: XOR<LibraryStudentBorrowingUpdateManyMutationInput, LibraryStudentBorrowingUncheckedUpdateManyWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryStudentBorrowingScalarWhereInput = {
    AND?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
    OR?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
    NOT?: Enumerable<LibraryStudentBorrowingScalarWhereInput>
    id?: IntFilter | number
    studentId?: IntFilter | number
    bookCopyId?: IntFilter | number
    borrowingDate?: DateTimeFilter | Date | string
    targetReturnDate?: DateTimeFilter | Date | string
    actualReturnDate?: DateTimeNullableFilter | Date | string | null
    borrowFromUniversityId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutCurrentBorrowByStudentInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput, LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>
  }

  export type LibraryBookCopyCreateManyCurrentBorrowByStudentInputEnvelope = {
    data: Enumerable<LibraryBookCopyCreateManyCurrentBorrowByStudentInput>
    skipDuplicates?: boolean
  }

  export type LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput = {
    copy: LibraryBookCopyCreateNestedOneWithoutHistoryOfBookCopyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput = {
    id?: number
    copyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyCreateOrConnectWithoutOnceBorrowByStudentInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    create: XOR<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput, LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>
  }

  export type LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInputEnvelope = {
    data: Enumerable<LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentRequestCreateWithoutStudentInput = {
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    fromUniversity: LibraryUniversityCreateNestedOneWithoutFromUniversityInput
    toUniversity: LibraryUniversityCreateNestedOneWithoutToUniversityInput
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUncheckedCreateWithoutStudentInput = {
    id?: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateOrConnectWithoutStudentInput = {
    where: LibraryStudentRequestWhereUniqueInput
    create: XOR<LibraryStudentRequestCreateWithoutStudentInput, LibraryStudentRequestUncheckedCreateWithoutStudentInput>
  }

  export type LibraryStudentRequestCreateManyStudentInputEnvelope = {
    data: Enumerable<LibraryStudentRequestCreateManyStudentInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentBorrowingCreateWithoutStidentInput = {
    bookCopy: LibraryBookCopyCreateNestedOneWithoutLibraryStudentBorrowingInput
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversity: LibraryUniversityCreateNestedOneWithoutLibraryStudentBorrowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUncheckedCreateWithoutStidentInput = {
    id?: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateOrConnectWithoutStidentInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    create: XOR<LibraryStudentBorrowingCreateWithoutStidentInput, LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>
  }

  export type LibraryStudentBorrowingCreateManyStidentInputEnvelope = {
    data: Enumerable<LibraryStudentBorrowingCreateManyStidentInput>
    skipDuplicates?: boolean
  }

  export type LibraryBookCopyUpsertWithWhereUniqueWithoutCurrentBorrowByStudentInput = {
    where: LibraryBookCopyWhereUniqueInput
    update: XOR<LibraryBookCopyUpdateWithoutCurrentBorrowByStudentInput, LibraryBookCopyUncheckedUpdateWithoutCurrentBorrowByStudentInput>
    create: XOR<LibraryBookCopyCreateWithoutCurrentBorrowByStudentInput, LibraryBookCopyUncheckedCreateWithoutCurrentBorrowByStudentInput>
  }

  export type LibraryBookCopyUpdateWithWhereUniqueWithoutCurrentBorrowByStudentInput = {
    where: LibraryBookCopyWhereUniqueInput
    data: XOR<LibraryBookCopyUpdateWithoutCurrentBorrowByStudentInput, LibraryBookCopyUncheckedUpdateWithoutCurrentBorrowByStudentInput>
  }

  export type LibraryBookCopyUpdateManyWithWhereWithoutCurrentBorrowByStudentInput = {
    where: LibraryBookCopyScalarWhereInput
    data: XOR<LibraryBookCopyUpdateManyMutationInput, LibraryBookCopyUncheckedUpdateManyWithoutLibraryBookCopyInput>
  }

  export type LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutOnceBorrowByStudentInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    update: XOR<LibraryHistoryOfBookCopyUpdateWithoutOnceBorrowByStudentInput, LibraryHistoryOfBookCopyUncheckedUpdateWithoutOnceBorrowByStudentInput>
    create: XOR<LibraryHistoryOfBookCopyCreateWithoutOnceBorrowByStudentInput, LibraryHistoryOfBookCopyUncheckedCreateWithoutOnceBorrowByStudentInput>
  }

  export type LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutOnceBorrowByStudentInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    data: XOR<LibraryHistoryOfBookCopyUpdateWithoutOnceBorrowByStudentInput, LibraryHistoryOfBookCopyUncheckedUpdateWithoutOnceBorrowByStudentInput>
  }

  export type LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutOnceBorrowByStudentInput = {
    where: LibraryHistoryOfBookCopyScalarWhereInput
    data: XOR<LibraryHistoryOfBookCopyUpdateManyMutationInput, LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutHistoryOfBookCopyInput>
  }

  export type LibraryHistoryOfBookCopyScalarWhereInput = {
    AND?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
    OR?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
    NOT?: Enumerable<LibraryHistoryOfBookCopyScalarWhereInput>
    id?: IntFilter | number
    copyId?: IntFilter | number
    oncetBorrowBytudentId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryStudentRequestUpsertWithWhereUniqueWithoutStudentInput = {
    where: LibraryStudentRequestWhereUniqueInput
    update: XOR<LibraryStudentRequestUpdateWithoutStudentInput, LibraryStudentRequestUncheckedUpdateWithoutStudentInput>
    create: XOR<LibraryStudentRequestCreateWithoutStudentInput, LibraryStudentRequestUncheckedCreateWithoutStudentInput>
  }

  export type LibraryStudentRequestUpdateWithWhereUniqueWithoutStudentInput = {
    where: LibraryStudentRequestWhereUniqueInput
    data: XOR<LibraryStudentRequestUpdateWithoutStudentInput, LibraryStudentRequestUncheckedUpdateWithoutStudentInput>
  }

  export type LibraryStudentRequestUpdateManyWithWhereWithoutStudentInput = {
    where: LibraryStudentRequestScalarWhereInput
    data: XOR<LibraryStudentRequestUpdateManyMutationInput, LibraryStudentRequestUncheckedUpdateManyWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryStudentBorrowingUpsertWithWhereUniqueWithoutStidentInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    update: XOR<LibraryStudentBorrowingUpdateWithoutStidentInput, LibraryStudentBorrowingUncheckedUpdateWithoutStidentInput>
    create: XOR<LibraryStudentBorrowingCreateWithoutStidentInput, LibraryStudentBorrowingUncheckedCreateWithoutStidentInput>
  }

  export type LibraryStudentBorrowingUpdateWithWhereUniqueWithoutStidentInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    data: XOR<LibraryStudentBorrowingUpdateWithoutStidentInput, LibraryStudentBorrowingUncheckedUpdateWithoutStidentInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithWhereWithoutStidentInput = {
    where: LibraryStudentBorrowingScalarWhereInput
    data: XOR<LibraryStudentBorrowingUpdateManyMutationInput, LibraryStudentBorrowingUncheckedUpdateManyWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryUniversityCreateWithoutLibraryBookInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUncheckedCreateWithoutLibraryBookInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityCreateOrConnectWithoutLibraryBookInput = {
    where: LibraryUniversityWhereUniqueInput
    create: XOR<LibraryUniversityCreateWithoutLibraryBookInput, LibraryUniversityUncheckedCreateWithoutLibraryBookInput>
  }

  export type LibraryBookCopyCreateWithoutBookInput = {
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutBookInput = {
    id?: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutBookInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutBookInput, LibraryBookCopyUncheckedCreateWithoutBookInput>
  }

  export type LibraryBookCopyCreateManyBookInputEnvelope = {
    data: Enumerable<LibraryBookCopyCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type BookOnAuthorCreateWithoutBookInput = {
    author: LibraryAuthorCreateNestedOneWithoutBookOnAuthorInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUncheckedCreateWithoutBookInput = {
    id?: number
    authorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorCreateOrConnectWithoutBookInput = {
    where: BookOnAuthorWhereUniqueInput
    create: XOR<BookOnAuthorCreateWithoutBookInput, BookOnAuthorUncheckedCreateWithoutBookInput>
  }

  export type BookOnAuthorCreateManyBookInputEnvelope = {
    data: Enumerable<BookOnAuthorCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type BookOnCategoryCreateWithoutBookInput = {
    category: LibraryCategoryCreateNestedOneWithoutBookOnCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUncheckedCreateWithoutBookInput = {
    id?: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryCreateOrConnectWithoutBookInput = {
    where: BookOnCategoryWhereUniqueInput
    create: XOR<BookOnCategoryCreateWithoutBookInput, BookOnCategoryUncheckedCreateWithoutBookInput>
  }

  export type BookOnCategoryCreateManyBookInputEnvelope = {
    data: Enumerable<BookOnCategoryCreateManyBookInput>
    skipDuplicates?: boolean
  }

  export type LibraryUniversityUpsertWithoutLibraryBookInput = {
    update: XOR<LibraryUniversityUpdateWithoutLibraryBookInput, LibraryUniversityUncheckedUpdateWithoutLibraryBookInput>
    create: XOR<LibraryUniversityCreateWithoutLibraryBookInput, LibraryUniversityUncheckedCreateWithoutLibraryBookInput>
  }

  export type LibraryUniversityUpdateWithoutLibraryBookInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateWithoutLibraryBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryBookCopyUpsertWithWhereUniqueWithoutBookInput = {
    where: LibraryBookCopyWhereUniqueInput
    update: XOR<LibraryBookCopyUpdateWithoutBookInput, LibraryBookCopyUncheckedUpdateWithoutBookInput>
    create: XOR<LibraryBookCopyCreateWithoutBookInput, LibraryBookCopyUncheckedCreateWithoutBookInput>
  }

  export type LibraryBookCopyUpdateWithWhereUniqueWithoutBookInput = {
    where: LibraryBookCopyWhereUniqueInput
    data: XOR<LibraryBookCopyUpdateWithoutBookInput, LibraryBookCopyUncheckedUpdateWithoutBookInput>
  }

  export type LibraryBookCopyUpdateManyWithWhereWithoutBookInput = {
    where: LibraryBookCopyScalarWhereInput
    data: XOR<LibraryBookCopyUpdateManyMutationInput, LibraryBookCopyUncheckedUpdateManyWithoutLibraryBookCopyInput>
  }

  export type BookOnAuthorUpsertWithWhereUniqueWithoutBookInput = {
    where: BookOnAuthorWhereUniqueInput
    update: XOR<BookOnAuthorUpdateWithoutBookInput, BookOnAuthorUncheckedUpdateWithoutBookInput>
    create: XOR<BookOnAuthorCreateWithoutBookInput, BookOnAuthorUncheckedCreateWithoutBookInput>
  }

  export type BookOnAuthorUpdateWithWhereUniqueWithoutBookInput = {
    where: BookOnAuthorWhereUniqueInput
    data: XOR<BookOnAuthorUpdateWithoutBookInput, BookOnAuthorUncheckedUpdateWithoutBookInput>
  }

  export type BookOnAuthorUpdateManyWithWhereWithoutBookInput = {
    where: BookOnAuthorScalarWhereInput
    data: XOR<BookOnAuthorUpdateManyMutationInput, BookOnAuthorUncheckedUpdateManyWithoutBookOnAuthorInput>
  }

  export type BookOnAuthorScalarWhereInput = {
    AND?: Enumerable<BookOnAuthorScalarWhereInput>
    OR?: Enumerable<BookOnAuthorScalarWhereInput>
    NOT?: Enumerable<BookOnAuthorScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    authorId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BookOnCategoryUpsertWithWhereUniqueWithoutBookInput = {
    where: BookOnCategoryWhereUniqueInput
    update: XOR<BookOnCategoryUpdateWithoutBookInput, BookOnCategoryUncheckedUpdateWithoutBookInput>
    create: XOR<BookOnCategoryCreateWithoutBookInput, BookOnCategoryUncheckedCreateWithoutBookInput>
  }

  export type BookOnCategoryUpdateWithWhereUniqueWithoutBookInput = {
    where: BookOnCategoryWhereUniqueInput
    data: XOR<BookOnCategoryUpdateWithoutBookInput, BookOnCategoryUncheckedUpdateWithoutBookInput>
  }

  export type BookOnCategoryUpdateManyWithWhereWithoutBookInput = {
    where: BookOnCategoryScalarWhereInput
    data: XOR<BookOnCategoryUpdateManyMutationInput, BookOnCategoryUncheckedUpdateManyWithoutBookOnCategoryInput>
  }

  export type BookOnCategoryScalarWhereInput = {
    AND?: Enumerable<BookOnCategoryScalarWhereInput>
    OR?: Enumerable<BookOnCategoryScalarWhereInput>
    NOT?: Enumerable<BookOnCategoryScalarWhereInput>
    id?: IntFilter | number
    bookId?: IntFilter | number
    categoryId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LibraryBookCreateWithoutLibraryBookCopyInput = {
    university: LibraryUniversityCreateNestedOneWithoutLibraryBookInput
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnAuthor?: BookOnAuthorCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUncheckedCreateWithoutLibraryBookCopyInput = {
    id?: number
    universityId: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    bookOnAuthor?: BookOnAuthorUncheckedCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryUncheckedCreateNestedManyWithoutBookInput
  }

  export type LibraryBookCreateOrConnectWithoutLibraryBookCopyInput = {
    where: LibraryBookWhereUniqueInput
    create: XOR<LibraryBookCreateWithoutLibraryBookCopyInput, LibraryBookUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryUniversityCreateWithoutLibraryBookCopyInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookCreateNestedManyWithoutUniversityInput
    fromUniversity?: LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUncheckedCreateWithoutLibraryBookCopyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookUncheckedCreateNestedManyWithoutUniversityInput
    fromUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityCreateOrConnectWithoutLibraryBookCopyInput = {
    where: LibraryUniversityWhereUniqueInput
    create: XOR<LibraryUniversityCreateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryStudentCreateWithoutLibraryBookCopyInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentUncheckedCreateWithoutLibraryBookCopyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentCreateOrConnectWithoutLibraryBookCopyInput = {
    where: LibraryStudentWhereUniqueInput
    create: XOR<LibraryStudentCreateWithoutLibraryBookCopyInput, LibraryStudentUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryHistoryOfBookCopyCreateWithoutCopyInput = {
    onceBorrowByStudent?: LibraryStudentCreateNestedOneWithoutHistoryOfBookCopyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput = {
    id?: number
    oncetBorrowBytudentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyCreateOrConnectWithoutCopyInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    create: XOR<LibraryHistoryOfBookCopyCreateWithoutCopyInput, LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>
  }

  export type LibraryHistoryOfBookCopyCreateManyCopyInputEnvelope = {
    data: Enumerable<LibraryHistoryOfBookCopyCreateManyCopyInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentRequestCreateWithoutBookCopyInput = {
    student: LibraryStudentCreateNestedOneWithoutLibraryHistoryOfStudentBorrowingInput
    fromUniversity: LibraryUniversityCreateNestedOneWithoutFromUniversityInput
    toUniversity: LibraryUniversityCreateNestedOneWithoutToUniversityInput
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestUncheckedCreateWithoutBookCopyInput = {
    id?: number
    studentId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateOrConnectWithoutBookCopyInput = {
    where: LibraryStudentRequestWhereUniqueInput
    create: XOR<LibraryStudentRequestCreateWithoutBookCopyInput, LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>
  }

  export type LibraryStudentRequestCreateManyBookCopyInputEnvelope = {
    data: Enumerable<LibraryStudentRequestCreateManyBookCopyInput>
    skipDuplicates?: boolean
  }

  export type LibraryStudentBorrowingCreateWithoutBookCopyInput = {
    stident: LibraryStudentCreateNestedOneWithoutLibraryStudentBorrowingInput
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversity: LibraryUniversityCreateNestedOneWithoutLibraryStudentBorrowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput = {
    id?: number
    studentId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateOrConnectWithoutBookCopyInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    create: XOR<LibraryStudentBorrowingCreateWithoutBookCopyInput, LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>
  }

  export type LibraryStudentBorrowingCreateManyBookCopyInputEnvelope = {
    data: Enumerable<LibraryStudentBorrowingCreateManyBookCopyInput>
    skipDuplicates?: boolean
  }

  export type LibraryBookUpsertWithoutLibraryBookCopyInput = {
    update: XOR<LibraryBookUpdateWithoutLibraryBookCopyInput, LibraryBookUncheckedUpdateWithoutLibraryBookCopyInput>
    create: XOR<LibraryBookCreateWithoutLibraryBookCopyInput, LibraryBookUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryBookUpdateWithoutLibraryBookCopyInput = {
    university?: LibraryUniversityUpdateOneRequiredWithoutLibraryBookNestedInput
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnAuthor?: BookOnAuthorUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateWithoutLibraryBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookOnAuthor?: BookOnAuthorUncheckedUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUncheckedUpdateManyWithoutBookNestedInput
  }

  export type LibraryUniversityUpsertWithoutLibraryBookCopyInput = {
    update: XOR<LibraryUniversityUpdateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedUpdateWithoutLibraryBookCopyInput>
    create: XOR<LibraryUniversityCreateWithoutLibraryBookCopyInput, LibraryUniversityUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryUniversityUpdateWithoutLibraryBookCopyInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUpdateManyWithoutUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateWithoutLibraryBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryStudentUpsertWithoutLibraryBookCopyInput = {
    update: XOR<LibraryStudentUpdateWithoutLibraryBookCopyInput, LibraryStudentUncheckedUpdateWithoutLibraryBookCopyInput>
    create: XOR<LibraryStudentCreateWithoutLibraryBookCopyInput, LibraryStudentUncheckedCreateWithoutLibraryBookCopyInput>
  }

  export type LibraryStudentUpdateWithoutLibraryBookCopyInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutStidentNestedInput
  }

  export type LibraryStudentUncheckedUpdateWithoutLibraryBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutStidentNestedInput
  }

  export type LibraryHistoryOfBookCopyUpsertWithWhereUniqueWithoutCopyInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    update: XOR<LibraryHistoryOfBookCopyUpdateWithoutCopyInput, LibraryHistoryOfBookCopyUncheckedUpdateWithoutCopyInput>
    create: XOR<LibraryHistoryOfBookCopyCreateWithoutCopyInput, LibraryHistoryOfBookCopyUncheckedCreateWithoutCopyInput>
  }

  export type LibraryHistoryOfBookCopyUpdateWithWhereUniqueWithoutCopyInput = {
    where: LibraryHistoryOfBookCopyWhereUniqueInput
    data: XOR<LibraryHistoryOfBookCopyUpdateWithoutCopyInput, LibraryHistoryOfBookCopyUncheckedUpdateWithoutCopyInput>
  }

  export type LibraryHistoryOfBookCopyUpdateManyWithWhereWithoutCopyInput = {
    where: LibraryHistoryOfBookCopyScalarWhereInput
    data: XOR<LibraryHistoryOfBookCopyUpdateManyMutationInput, LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutHistoryOfBookCopyInput>
  }

  export type LibraryStudentRequestUpsertWithWhereUniqueWithoutBookCopyInput = {
    where: LibraryStudentRequestWhereUniqueInput
    update: XOR<LibraryStudentRequestUpdateWithoutBookCopyInput, LibraryStudentRequestUncheckedUpdateWithoutBookCopyInput>
    create: XOR<LibraryStudentRequestCreateWithoutBookCopyInput, LibraryStudentRequestUncheckedCreateWithoutBookCopyInput>
  }

  export type LibraryStudentRequestUpdateWithWhereUniqueWithoutBookCopyInput = {
    where: LibraryStudentRequestWhereUniqueInput
    data: XOR<LibraryStudentRequestUpdateWithoutBookCopyInput, LibraryStudentRequestUncheckedUpdateWithoutBookCopyInput>
  }

  export type LibraryStudentRequestUpdateManyWithWhereWithoutBookCopyInput = {
    where: LibraryStudentRequestScalarWhereInput
    data: XOR<LibraryStudentRequestUpdateManyMutationInput, LibraryStudentRequestUncheckedUpdateManyWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryStudentBorrowingUpsertWithWhereUniqueWithoutBookCopyInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    update: XOR<LibraryStudentBorrowingUpdateWithoutBookCopyInput, LibraryStudentBorrowingUncheckedUpdateWithoutBookCopyInput>
    create: XOR<LibraryStudentBorrowingCreateWithoutBookCopyInput, LibraryStudentBorrowingUncheckedCreateWithoutBookCopyInput>
  }

  export type LibraryStudentBorrowingUpdateWithWhereUniqueWithoutBookCopyInput = {
    where: LibraryStudentBorrowingWhereUniqueInput
    data: XOR<LibraryStudentBorrowingUpdateWithoutBookCopyInput, LibraryStudentBorrowingUncheckedUpdateWithoutBookCopyInput>
  }

  export type LibraryStudentBorrowingUpdateManyWithWhereWithoutBookCopyInput = {
    where: LibraryStudentBorrowingScalarWhereInput
    data: XOR<LibraryStudentBorrowingUpdateManyMutationInput, LibraryStudentBorrowingUncheckedUpdateManyWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryBookCopyCreateWithoutHistoryOfBookCopyInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutHistoryOfBookCopyInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutHistoryOfBookCopyInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedCreateWithoutHistoryOfBookCopyInput>
  }

  export type LibraryStudentCreateWithoutHistoryOfBookCopyInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutCurrentBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentUncheckedCreateWithoutHistoryOfBookCopyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutCurrentBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentCreateOrConnectWithoutHistoryOfBookCopyInput = {
    where: LibraryStudentWhereUniqueInput
    create: XOR<LibraryStudentCreateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedCreateWithoutHistoryOfBookCopyInput>
  }

  export type LibraryBookCopyUpsertWithoutHistoryOfBookCopyInput = {
    update: XOR<LibraryBookCopyUpdateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedUpdateWithoutHistoryOfBookCopyInput>
    create: XOR<LibraryBookCopyCreateWithoutHistoryOfBookCopyInput, LibraryBookCopyUncheckedCreateWithoutHistoryOfBookCopyInput>
  }

  export type LibraryBookCopyUpdateWithoutHistoryOfBookCopyInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutHistoryOfBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryStudentUpsertWithoutHistoryOfBookCopyInput = {
    update: XOR<LibraryStudentUpdateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedUpdateWithoutHistoryOfBookCopyInput>
    create: XOR<LibraryStudentCreateWithoutHistoryOfBookCopyInput, LibraryStudentUncheckedCreateWithoutHistoryOfBookCopyInput>
  }

  export type LibraryStudentUpdateWithoutHistoryOfBookCopyInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutCurrentBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutStidentNestedInput
  }

  export type LibraryStudentUncheckedUpdateWithoutHistoryOfBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutCurrentBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutStidentNestedInput
  }

  export type BookOnCategoryCreateWithoutCategoryInput = {
    book: LibraryBookCreateNestedOneWithoutBookOnCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUncheckedCreateWithoutCategoryInput = {
    id?: number
    bookId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryCreateOrConnectWithoutCategoryInput = {
    where: BookOnCategoryWhereUniqueInput
    create: XOR<BookOnCategoryCreateWithoutCategoryInput, BookOnCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BookOnCategoryCreateManyCategoryInputEnvelope = {
    data: Enumerable<BookOnCategoryCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type BookOnCategoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BookOnCategoryWhereUniqueInput
    update: XOR<BookOnCategoryUpdateWithoutCategoryInput, BookOnCategoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<BookOnCategoryCreateWithoutCategoryInput, BookOnCategoryUncheckedCreateWithoutCategoryInput>
  }

  export type BookOnCategoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BookOnCategoryWhereUniqueInput
    data: XOR<BookOnCategoryUpdateWithoutCategoryInput, BookOnCategoryUncheckedUpdateWithoutCategoryInput>
  }

  export type BookOnCategoryUpdateManyWithWhereWithoutCategoryInput = {
    where: BookOnCategoryScalarWhereInput
    data: XOR<BookOnCategoryUpdateManyMutationInput, BookOnCategoryUncheckedUpdateManyWithoutBookOnCategoryInput>
  }

  export type BookOnAuthorCreateWithoutAuthorInput = {
    book: LibraryBookCreateNestedOneWithoutBookOnAuthorInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUncheckedCreateWithoutAuthorInput = {
    id?: number
    bookId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorCreateOrConnectWithoutAuthorInput = {
    where: BookOnAuthorWhereUniqueInput
    create: XOR<BookOnAuthorCreateWithoutAuthorInput, BookOnAuthorUncheckedCreateWithoutAuthorInput>
  }

  export type BookOnAuthorCreateManyAuthorInputEnvelope = {
    data: Enumerable<BookOnAuthorCreateManyAuthorInput>
    skipDuplicates?: boolean
  }

  export type BookOnAuthorUpsertWithWhereUniqueWithoutAuthorInput = {
    where: BookOnAuthorWhereUniqueInput
    update: XOR<BookOnAuthorUpdateWithoutAuthorInput, BookOnAuthorUncheckedUpdateWithoutAuthorInput>
    create: XOR<BookOnAuthorCreateWithoutAuthorInput, BookOnAuthorUncheckedCreateWithoutAuthorInput>
  }

  export type BookOnAuthorUpdateWithWhereUniqueWithoutAuthorInput = {
    where: BookOnAuthorWhereUniqueInput
    data: XOR<BookOnAuthorUpdateWithoutAuthorInput, BookOnAuthorUncheckedUpdateWithoutAuthorInput>
  }

  export type BookOnAuthorUpdateManyWithWhereWithoutAuthorInput = {
    where: BookOnAuthorScalarWhereInput
    data: XOR<BookOnAuthorUpdateManyMutationInput, BookOnAuthorUncheckedUpdateManyWithoutBookOnAuthorInput>
  }

  export type LibraryBookCreateWithoutBookOnAuthorInput = {
    university: LibraryUniversityCreateNestedOneWithoutLibraryBookInput
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUncheckedCreateWithoutBookOnAuthorInput = {
    id?: number
    universityId: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutBookInput
    bookOnCategory?: BookOnCategoryUncheckedCreateNestedManyWithoutBookInput
  }

  export type LibraryBookCreateOrConnectWithoutBookOnAuthorInput = {
    where: LibraryBookWhereUniqueInput
    create: XOR<LibraryBookCreateWithoutBookOnAuthorInput, LibraryBookUncheckedCreateWithoutBookOnAuthorInput>
  }

  export type LibraryAuthorCreateWithoutBookOnAuthorInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryAuthorUncheckedCreateWithoutBookOnAuthorInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryAuthorCreateOrConnectWithoutBookOnAuthorInput = {
    where: LibraryAuthorWhereUniqueInput
    create: XOR<LibraryAuthorCreateWithoutBookOnAuthorInput, LibraryAuthorUncheckedCreateWithoutBookOnAuthorInput>
  }

  export type LibraryBookUpsertWithoutBookOnAuthorInput = {
    update: XOR<LibraryBookUpdateWithoutBookOnAuthorInput, LibraryBookUncheckedUpdateWithoutBookOnAuthorInput>
    create: XOR<LibraryBookCreateWithoutBookOnAuthorInput, LibraryBookUncheckedCreateWithoutBookOnAuthorInput>
  }

  export type LibraryBookUpdateWithoutBookOnAuthorInput = {
    university?: LibraryUniversityUpdateOneRequiredWithoutLibraryBookNestedInput
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateWithoutBookOnAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUncheckedUpdateManyWithoutBookNestedInput
  }

  export type LibraryAuthorUpsertWithoutBookOnAuthorInput = {
    update: XOR<LibraryAuthorUpdateWithoutBookOnAuthorInput, LibraryAuthorUncheckedUpdateWithoutBookOnAuthorInput>
    create: XOR<LibraryAuthorCreateWithoutBookOnAuthorInput, LibraryAuthorUncheckedCreateWithoutBookOnAuthorInput>
  }

  export type LibraryAuthorUpdateWithoutBookOnAuthorInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryAuthorUncheckedUpdateWithoutBookOnAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCreateWithoutBookOnCategoryInput = {
    university: LibraryUniversityCreateNestedOneWithoutLibraryBookInput
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorCreateNestedManyWithoutBookInput
  }

  export type LibraryBookUncheckedCreateWithoutBookOnCategoryInput = {
    id?: number
    universityId: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutBookInput
    bookOnAuthor?: BookOnAuthorUncheckedCreateNestedManyWithoutBookInput
  }

  export type LibraryBookCreateOrConnectWithoutBookOnCategoryInput = {
    where: LibraryBookWhereUniqueInput
    create: XOR<LibraryBookCreateWithoutBookOnCategoryInput, LibraryBookUncheckedCreateWithoutBookOnCategoryInput>
  }

  export type LibraryCategoryCreateWithoutBookOnCategoryInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCategoryUncheckedCreateWithoutBookOnCategoryInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryCategoryCreateOrConnectWithoutBookOnCategoryInput = {
    where: LibraryCategoryWhereUniqueInput
    create: XOR<LibraryCategoryCreateWithoutBookOnCategoryInput, LibraryCategoryUncheckedCreateWithoutBookOnCategoryInput>
  }

  export type LibraryBookUpsertWithoutBookOnCategoryInput = {
    update: XOR<LibraryBookUpdateWithoutBookOnCategoryInput, LibraryBookUncheckedUpdateWithoutBookOnCategoryInput>
    create: XOR<LibraryBookCreateWithoutBookOnCategoryInput, LibraryBookUncheckedCreateWithoutBookOnCategoryInput>
  }

  export type LibraryBookUpdateWithoutBookOnCategoryInput = {
    university?: LibraryUniversityUpdateOneRequiredWithoutLibraryBookNestedInput
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateWithoutBookOnCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    universityId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUncheckedUpdateManyWithoutBookNestedInput
  }

  export type LibraryCategoryUpsertWithoutBookOnCategoryInput = {
    update: XOR<LibraryCategoryUpdateWithoutBookOnCategoryInput, LibraryCategoryUncheckedUpdateWithoutBookOnCategoryInput>
    create: XOR<LibraryCategoryCreateWithoutBookOnCategoryInput, LibraryCategoryUncheckedCreateWithoutBookOnCategoryInput>
  }

  export type LibraryCategoryUpdateWithoutBookOnCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryCategoryUncheckedUpdateWithoutBookOnCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentCreateWithoutLibraryHistoryOfStudentBorrowingInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutStidentInput
  }

  export type LibraryStudentCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput = {
    where: LibraryStudentWhereUniqueInput
    create: XOR<LibraryStudentCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryBookCopyCreateWithoutLibraryHistoryOfStudentBorrowingInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutLibraryHistoryOfStudentBorrowingInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryUniversityCreateWithoutFromUniversityInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutAtUniversityInput
    toUniversity?: LibraryStudentRequestCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUncheckedCreateWithoutFromUniversityInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookUncheckedCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput
    toUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityCreateOrConnectWithoutFromUniversityInput = {
    where: LibraryUniversityWhereUniqueInput
    create: XOR<LibraryUniversityCreateWithoutFromUniversityInput, LibraryUniversityUncheckedCreateWithoutFromUniversityInput>
  }

  export type LibraryUniversityCreateWithoutToUniversityInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityUncheckedCreateWithoutToUniversityInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookUncheckedCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedCreateNestedManyWithoutBorrowFromUniversityInput
  }

  export type LibraryUniversityCreateOrConnectWithoutToUniversityInput = {
    where: LibraryUniversityWhereUniqueInput
    create: XOR<LibraryUniversityCreateWithoutToUniversityInput, LibraryUniversityUncheckedCreateWithoutToUniversityInput>
  }

  export type LibraryStudentUpsertWithoutLibraryHistoryOfStudentBorrowingInput = {
    update: XOR<LibraryStudentUpdateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput>
    create: XOR<LibraryStudentCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryStudentUpdateWithoutLibraryHistoryOfStudentBorrowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutStidentNestedInput
  }

  export type LibraryStudentUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutStidentNestedInput
  }

  export type LibraryBookCopyUpsertWithoutLibraryHistoryOfStudentBorrowingInput = {
    update: XOR<LibraryBookCopyUpdateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput>
    create: XOR<LibraryBookCopyCreateWithoutLibraryHistoryOfStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryHistoryOfStudentBorrowingInput>
  }

  export type LibraryBookCopyUpdateWithoutLibraryHistoryOfStudentBorrowingInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutLibraryHistoryOfStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryUniversityUpsertWithoutFromUniversityInput = {
    update: XOR<LibraryUniversityUpdateWithoutFromUniversityInput, LibraryUniversityUncheckedUpdateWithoutFromUniversityInput>
    create: XOR<LibraryUniversityCreateWithoutFromUniversityInput, LibraryUniversityUncheckedCreateWithoutFromUniversityInput>
  }

  export type LibraryUniversityUpdateWithoutFromUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput
    toUniversity?: LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateWithoutFromUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput
    toUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUpsertWithoutToUniversityInput = {
    update: XOR<LibraryUniversityUpdateWithoutToUniversityInput, LibraryUniversityUncheckedUpdateWithoutToUniversityInput>
    create: XOR<LibraryUniversityCreateWithoutToUniversityInput, LibraryUniversityUncheckedCreateWithoutToUniversityInput>
  }

  export type LibraryUniversityUpdateWithoutToUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateWithoutToUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBorrowFromUniversityNestedInput
  }

  export type LibraryStudentCreateWithoutLibraryStudentBorrowingInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutStudentInput
  }

  export type LibraryStudentUncheckedCreateWithoutLibraryStudentBorrowingInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutCurrentBorrowByStudentInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutOnceBorrowByStudentInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutStudentInput
  }

  export type LibraryStudentCreateOrConnectWithoutLibraryStudentBorrowingInput = {
    where: LibraryStudentWhereUniqueInput
    create: XOR<LibraryStudentCreateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryBookCopyCreateWithoutLibraryStudentBorrowingInput = {
    book: LibraryBookCreateNestedOneWithoutLibraryBookCopyInput
    atUniversity?: LibraryUniversityCreateNestedOneWithoutLibraryBookCopyInput
    currentBorrowByStudent?: LibraryStudentCreateNestedOneWithoutLibraryBookCopyInput
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyUncheckedCreateWithoutLibraryStudentBorrowingInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedCreateNestedManyWithoutCopyInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedCreateNestedManyWithoutBookCopyInput
  }

  export type LibraryBookCopyCreateOrConnectWithoutLibraryStudentBorrowingInput = {
    where: LibraryBookCopyWhereUniqueInput
    create: XOR<LibraryBookCopyCreateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryUniversityCreateWithoutLibraryStudentBorrowingInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestCreateNestedManyWithoutToUniversityInput
  }

  export type LibraryUniversityUncheckedCreateWithoutLibraryStudentBorrowingInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    libraryBook?: LibraryBookUncheckedCreateNestedManyWithoutUniversityInput
    libraryBookCopy?: LibraryBookCopyUncheckedCreateNestedManyWithoutAtUniversityInput
    fromUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutFromUniversityInput
    toUniversity?: LibraryStudentRequestUncheckedCreateNestedManyWithoutToUniversityInput
  }

  export type LibraryUniversityCreateOrConnectWithoutLibraryStudentBorrowingInput = {
    where: LibraryUniversityWhereUniqueInput
    create: XOR<LibraryUniversityCreateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryStudentUpsertWithoutLibraryStudentBorrowingInput = {
    update: XOR<LibraryStudentUpdateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedUpdateWithoutLibraryStudentBorrowingInput>
    create: XOR<LibraryStudentCreateWithoutLibraryStudentBorrowingInput, LibraryStudentUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryStudentUpdateWithoutLibraryStudentBorrowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutStudentNestedInput
  }

  export type LibraryStudentUncheckedUpdateWithoutLibraryStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutCurrentBorrowByStudentNestedInput
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutOnceBorrowByStudentNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type LibraryBookCopyUpsertWithoutLibraryStudentBorrowingInput = {
    update: XOR<LibraryBookCopyUpdateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedUpdateWithoutLibraryStudentBorrowingInput>
    create: XOR<LibraryBookCopyCreateWithoutLibraryStudentBorrowingInput, LibraryBookCopyUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryBookCopyUpdateWithoutLibraryStudentBorrowingInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutLibraryStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryUniversityUpsertWithoutLibraryStudentBorrowingInput = {
    update: XOR<LibraryUniversityUpdateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedUpdateWithoutLibraryStudentBorrowingInput>
    create: XOR<LibraryUniversityCreateWithoutLibraryStudentBorrowingInput, LibraryUniversityUncheckedCreateWithoutLibraryStudentBorrowingInput>
  }

  export type LibraryUniversityUpdateWithoutLibraryStudentBorrowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUpdateManyWithoutToUniversityNestedInput
  }

  export type LibraryUniversityUncheckedUpdateWithoutLibraryStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBook?: LibraryBookUncheckedUpdateManyWithoutUniversityNestedInput
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutAtUniversityNestedInput
    fromUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityNestedInput
    toUniversity?: LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityNestedInput
  }

  export type MeetingUserBookedCreateWithoutUserInput = {
    meetingRoom: MeetingRoomCreateNestedOneWithoutMeetingUserBookedInput
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedUncheckedCreateWithoutUserInput = {
    id?: number
    meetingRoomId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersUncheckedCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedCreateOrConnectWithoutUserInput = {
    where: MeetingUserBookedWhereUniqueInput
    create: XOR<MeetingUserBookedCreateWithoutUserInput, MeetingUserBookedUncheckedCreateWithoutUserInput>
  }

  export type MeetingUserBookedCreateManyUserInputEnvelope = {
    data: Enumerable<MeetingUserBookedCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MeetingUserAvailableCreateWithoutUserInput = {
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableUncheckedCreateWithoutUserInput = {
    id?: number
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableCreateOrConnectWithoutUserInput = {
    where: MeetingUserAvailableWhereUniqueInput
    create: XOR<MeetingUserAvailableCreateWithoutUserInput, MeetingUserAvailableUncheckedCreateWithoutUserInput>
  }

  export type MeetingUserAvailableCreateManyUserInputEnvelope = {
    data: Enumerable<MeetingUserAvailableCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type MeetingRoomBookedCreateWithoutByUserIdInput = {
    meetingRoom: MeetingRoomCreateNestedOneWithoutMeetingRoomBookedInput
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedUncheckedCreateWithoutByUserIdInput = {
    id?: number
    meetingRoomId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedCreateOrConnectWithoutByUserIdInput = {
    where: MeetingRoomBookedWhereUniqueInput
    create: XOR<MeetingRoomBookedCreateWithoutByUserIdInput, MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>
  }

  export type MeetingRoomBookedCreateManyByUserIdInputEnvelope = {
    data: Enumerable<MeetingRoomBookedCreateManyByUserIdInput>
    skipDuplicates?: boolean
  }

  export type MeetingUserBookedUpsertWithWhereUniqueWithoutUserInput = {
    where: MeetingUserBookedWhereUniqueInput
    update: XOR<MeetingUserBookedUpdateWithoutUserInput, MeetingUserBookedUncheckedUpdateWithoutUserInput>
    create: XOR<MeetingUserBookedCreateWithoutUserInput, MeetingUserBookedUncheckedCreateWithoutUserInput>
  }

  export type MeetingUserBookedUpdateWithWhereUniqueWithoutUserInput = {
    where: MeetingUserBookedWhereUniqueInput
    data: XOR<MeetingUserBookedUpdateWithoutUserInput, MeetingUserBookedUncheckedUpdateWithoutUserInput>
  }

  export type MeetingUserBookedUpdateManyWithWhereWithoutUserInput = {
    where: MeetingUserBookedScalarWhereInput
    data: XOR<MeetingUserBookedUpdateManyMutationInput, MeetingUserBookedUncheckedUpdateManyWithoutMeetingUserBookedInput>
  }

  export type MeetingUserBookedScalarWhereInput = {
    AND?: Enumerable<MeetingUserBookedScalarWhereInput>
    OR?: Enumerable<MeetingUserBookedScalarWhereInput>
    NOT?: Enumerable<MeetingUserBookedScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    meetingRoomId?: IntFilter | number
    meetingDetail?: StringNullableFilter | string | null
    bookingStart?: DateTimeFilter | Date | string
    bookingEnd?: DateTimeFilter | Date | string
    nameOfBooker?: StringFilter | string
    tel?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingUserAvailableUpsertWithWhereUniqueWithoutUserInput = {
    where: MeetingUserAvailableWhereUniqueInput
    update: XOR<MeetingUserAvailableUpdateWithoutUserInput, MeetingUserAvailableUncheckedUpdateWithoutUserInput>
    create: XOR<MeetingUserAvailableCreateWithoutUserInput, MeetingUserAvailableUncheckedCreateWithoutUserInput>
  }

  export type MeetingUserAvailableUpdateWithWhereUniqueWithoutUserInput = {
    where: MeetingUserAvailableWhereUniqueInput
    data: XOR<MeetingUserAvailableUpdateWithoutUserInput, MeetingUserAvailableUncheckedUpdateWithoutUserInput>
  }

  export type MeetingUserAvailableUpdateManyWithWhereWithoutUserInput = {
    where: MeetingUserAvailableScalarWhereInput
    data: XOR<MeetingUserAvailableUpdateManyMutationInput, MeetingUserAvailableUncheckedUpdateManyWithoutMeetingUserAvailableInput>
  }

  export type MeetingUserAvailableScalarWhereInput = {
    AND?: Enumerable<MeetingUserAvailableScalarWhereInput>
    OR?: Enumerable<MeetingUserAvailableScalarWhereInput>
    NOT?: Enumerable<MeetingUserAvailableScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    availableStart?: DateTimeFilter | Date | string
    availableEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingRoomBookedUpsertWithWhereUniqueWithoutByUserIdInput = {
    where: MeetingRoomBookedWhereUniqueInput
    update: XOR<MeetingRoomBookedUpdateWithoutByUserIdInput, MeetingRoomBookedUncheckedUpdateWithoutByUserIdInput>
    create: XOR<MeetingRoomBookedCreateWithoutByUserIdInput, MeetingRoomBookedUncheckedCreateWithoutByUserIdInput>
  }

  export type MeetingRoomBookedUpdateWithWhereUniqueWithoutByUserIdInput = {
    where: MeetingRoomBookedWhereUniqueInput
    data: XOR<MeetingRoomBookedUpdateWithoutByUserIdInput, MeetingRoomBookedUncheckedUpdateWithoutByUserIdInput>
  }

  export type MeetingRoomBookedUpdateManyWithWhereWithoutByUserIdInput = {
    where: MeetingRoomBookedScalarWhereInput
    data: XOR<MeetingRoomBookedUpdateManyMutationInput, MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomBookedInput>
  }

  export type MeetingRoomBookedScalarWhereInput = {
    AND?: Enumerable<MeetingRoomBookedScalarWhereInput>
    OR?: Enumerable<MeetingRoomBookedScalarWhereInput>
    NOT?: Enumerable<MeetingRoomBookedScalarWhereInput>
    id?: IntFilter | number
    meetingRoomId?: IntFilter | number
    userId?: IntFilter | number
    bookingStart?: DateTimeFilter | Date | string
    bookingEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingUserCreateWithoutMeetingUserBookedInput = {
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserAvailable?: MeetingUserAvailableCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserUncheckedCreateWithoutMeetingUserBookedInput = {
    id?: number
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserAvailable?: MeetingUserAvailableUncheckedCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserCreateOrConnectWithoutMeetingUserBookedInput = {
    where: MeetingUserWhereUniqueInput
    create: XOR<MeetingUserCreateWithoutMeetingUserBookedInput, MeetingUserUncheckedCreateWithoutMeetingUserBookedInput>
  }

  export type MeetingRoomCreateWithoutMeetingUserBookedInput = {
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingRoomBooked?: MeetingRoomBookedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomUncheckedCreateWithoutMeetingUserBookedInput = {
    id?: number
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingRoomBooked?: MeetingRoomBookedUncheckedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomCreateOrConnectWithoutMeetingUserBookedInput = {
    where: MeetingRoomWhereUniqueInput
    create: XOR<MeetingRoomCreateWithoutMeetingUserBookedInput, MeetingRoomUncheckedCreateWithoutMeetingUserBookedInput>
  }

  export type MeetingMembersCreateWithoutBookingInput = {
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersUncheckedCreateWithoutBookingInput = {
    id?: number
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersCreateOrConnectWithoutBookingInput = {
    where: MeetingMembersWhereUniqueInput
    create: XOR<MeetingMembersCreateWithoutBookingInput, MeetingMembersUncheckedCreateWithoutBookingInput>
  }

  export type MeetingMembersCreateManyBookingInputEnvelope = {
    data: Enumerable<MeetingMembersCreateManyBookingInput>
    skipDuplicates?: boolean
  }

  export type MeetingUserUpsertWithoutMeetingUserBookedInput = {
    update: XOR<MeetingUserUpdateWithoutMeetingUserBookedInput, MeetingUserUncheckedUpdateWithoutMeetingUserBookedInput>
    create: XOR<MeetingUserCreateWithoutMeetingUserBookedInput, MeetingUserUncheckedCreateWithoutMeetingUserBookedInput>
  }

  export type MeetingUserUpdateWithoutMeetingUserBookedInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserAvailable?: MeetingUserAvailableUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingUserUncheckedUpdateWithoutMeetingUserBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserAvailable?: MeetingUserAvailableUncheckedUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingRoomUpsertWithoutMeetingUserBookedInput = {
    update: XOR<MeetingRoomUpdateWithoutMeetingUserBookedInput, MeetingRoomUncheckedUpdateWithoutMeetingUserBookedInput>
    create: XOR<MeetingRoomCreateWithoutMeetingUserBookedInput, MeetingRoomUncheckedCreateWithoutMeetingUserBookedInput>
  }

  export type MeetingRoomUpdateWithoutMeetingUserBookedInput = {
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingRoomBooked?: MeetingRoomBookedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingRoomUncheckedUpdateWithoutMeetingUserBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingRoomBooked?: MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingMembersUpsertWithWhereUniqueWithoutBookingInput = {
    where: MeetingMembersWhereUniqueInput
    update: XOR<MeetingMembersUpdateWithoutBookingInput, MeetingMembersUncheckedUpdateWithoutBookingInput>
    create: XOR<MeetingMembersCreateWithoutBookingInput, MeetingMembersUncheckedCreateWithoutBookingInput>
  }

  export type MeetingMembersUpdateWithWhereUniqueWithoutBookingInput = {
    where: MeetingMembersWhereUniqueInput
    data: XOR<MeetingMembersUpdateWithoutBookingInput, MeetingMembersUncheckedUpdateWithoutBookingInput>
  }

  export type MeetingMembersUpdateManyWithWhereWithoutBookingInput = {
    where: MeetingMembersScalarWhereInput
    data: XOR<MeetingMembersUpdateManyMutationInput, MeetingMembersUncheckedUpdateManyWithoutMeetingMembersInput>
  }

  export type MeetingMembersScalarWhereInput = {
    AND?: Enumerable<MeetingMembersScalarWhereInput>
    OR?: Enumerable<MeetingMembersScalarWhereInput>
    NOT?: Enumerable<MeetingMembersScalarWhereInput>
    id?: IntFilter | number
    bookedId?: IntFilter | number
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    tel?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MeetingUserBookedCreateWithoutMeetingMembersInput = {
    user: MeetingUserCreateNestedOneWithoutMeetingUserBookedInput
    meetingRoom: MeetingRoomCreateNestedOneWithoutMeetingUserBookedInput
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserBookedUncheckedCreateWithoutMeetingMembersInput = {
    id?: number
    userId: number
    meetingRoomId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserBookedCreateOrConnectWithoutMeetingMembersInput = {
    where: MeetingUserBookedWhereUniqueInput
    create: XOR<MeetingUserBookedCreateWithoutMeetingMembersInput, MeetingUserBookedUncheckedCreateWithoutMeetingMembersInput>
  }

  export type MeetingUserBookedUpsertWithoutMeetingMembersInput = {
    update: XOR<MeetingUserBookedUpdateWithoutMeetingMembersInput, MeetingUserBookedUncheckedUpdateWithoutMeetingMembersInput>
    create: XOR<MeetingUserBookedCreateWithoutMeetingMembersInput, MeetingUserBookedUncheckedCreateWithoutMeetingMembersInput>
  }

  export type MeetingUserBookedUpdateWithoutMeetingMembersInput = {
    user?: MeetingUserUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingRoom?: MeetingRoomUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserBookedUncheckedUpdateWithoutMeetingMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserCreateWithoutMeetingUserAvailableInput = {
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserUncheckedCreateWithoutMeetingUserAvailableInput = {
    id?: number
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedCreateNestedManyWithoutUserInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedCreateNestedManyWithoutByUserIdInput
  }

  export type MeetingUserCreateOrConnectWithoutMeetingUserAvailableInput = {
    where: MeetingUserWhereUniqueInput
    create: XOR<MeetingUserCreateWithoutMeetingUserAvailableInput, MeetingUserUncheckedCreateWithoutMeetingUserAvailableInput>
  }

  export type MeetingUserUpsertWithoutMeetingUserAvailableInput = {
    update: XOR<MeetingUserUpdateWithoutMeetingUserAvailableInput, MeetingUserUncheckedUpdateWithoutMeetingUserAvailableInput>
    create: XOR<MeetingUserCreateWithoutMeetingUserAvailableInput, MeetingUserUncheckedCreateWithoutMeetingUserAvailableInput>
  }

  export type MeetingUserUpdateWithoutMeetingUserAvailableInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingUserUncheckedUpdateWithoutMeetingUserAvailableInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedUpdateManyWithoutUserNestedInput
    MeetingRoomBooked?: MeetingRoomBookedUncheckedUpdateManyWithoutByUserIdNestedInput
  }

  export type MeetingUserBookedCreateWithoutMeetingRoomInput = {
    user: MeetingUserCreateNestedOneWithoutMeetingUserBookedInput
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput = {
    id?: number
    userId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingMembers?: MeetingMembersUncheckedCreateNestedManyWithoutBookingInput
  }

  export type MeetingUserBookedCreateOrConnectWithoutMeetingRoomInput = {
    where: MeetingUserBookedWhereUniqueInput
    create: XOR<MeetingUserBookedCreateWithoutMeetingRoomInput, MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>
  }

  export type MeetingUserBookedCreateManyMeetingRoomInputEnvelope = {
    data: Enumerable<MeetingUserBookedCreateManyMeetingRoomInput>
    skipDuplicates?: boolean
  }

  export type MeetingRoomBookedCreateWithoutMeetingRoomInput = {
    byUserId: MeetingUserCreateNestedOneWithoutMeetingRoomBookedInput
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput = {
    id?: number
    userId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedCreateOrConnectWithoutMeetingRoomInput = {
    where: MeetingRoomBookedWhereUniqueInput
    create: XOR<MeetingRoomBookedCreateWithoutMeetingRoomInput, MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>
  }

  export type MeetingRoomBookedCreateManyMeetingRoomInputEnvelope = {
    data: Enumerable<MeetingRoomBookedCreateManyMeetingRoomInput>
    skipDuplicates?: boolean
  }

  export type MeetingUserBookedUpsertWithWhereUniqueWithoutMeetingRoomInput = {
    where: MeetingUserBookedWhereUniqueInput
    update: XOR<MeetingUserBookedUpdateWithoutMeetingRoomInput, MeetingUserBookedUncheckedUpdateWithoutMeetingRoomInput>
    create: XOR<MeetingUserBookedCreateWithoutMeetingRoomInput, MeetingUserBookedUncheckedCreateWithoutMeetingRoomInput>
  }

  export type MeetingUserBookedUpdateWithWhereUniqueWithoutMeetingRoomInput = {
    where: MeetingUserBookedWhereUniqueInput
    data: XOR<MeetingUserBookedUpdateWithoutMeetingRoomInput, MeetingUserBookedUncheckedUpdateWithoutMeetingRoomInput>
  }

  export type MeetingUserBookedUpdateManyWithWhereWithoutMeetingRoomInput = {
    where: MeetingUserBookedScalarWhereInput
    data: XOR<MeetingUserBookedUpdateManyMutationInput, MeetingUserBookedUncheckedUpdateManyWithoutMeetingUserBookedInput>
  }

  export type MeetingRoomBookedUpsertWithWhereUniqueWithoutMeetingRoomInput = {
    where: MeetingRoomBookedWhereUniqueInput
    update: XOR<MeetingRoomBookedUpdateWithoutMeetingRoomInput, MeetingRoomBookedUncheckedUpdateWithoutMeetingRoomInput>
    create: XOR<MeetingRoomBookedCreateWithoutMeetingRoomInput, MeetingRoomBookedUncheckedCreateWithoutMeetingRoomInput>
  }

  export type MeetingRoomBookedUpdateWithWhereUniqueWithoutMeetingRoomInput = {
    where: MeetingRoomBookedWhereUniqueInput
    data: XOR<MeetingRoomBookedUpdateWithoutMeetingRoomInput, MeetingRoomBookedUncheckedUpdateWithoutMeetingRoomInput>
  }

  export type MeetingRoomBookedUpdateManyWithWhereWithoutMeetingRoomInput = {
    where: MeetingRoomBookedScalarWhereInput
    data: XOR<MeetingRoomBookedUpdateManyMutationInput, MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomBookedInput>
  }

  export type MeetingRoomCreateWithoutMeetingRoomBookedInput = {
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomUncheckedCreateWithoutMeetingRoomBookedInput = {
    id?: number
    name: string
    floor: number
    building: string
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedCreateNestedManyWithoutMeetingRoomInput
  }

  export type MeetingRoomCreateOrConnectWithoutMeetingRoomBookedInput = {
    where: MeetingRoomWhereUniqueInput
    create: XOR<MeetingRoomCreateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedCreateWithoutMeetingRoomBookedInput>
  }

  export type MeetingUserCreateWithoutMeetingRoomBookedInput = {
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedCreateNestedManyWithoutUserInput
    MeetingUserAvailable?: MeetingUserAvailableCreateNestedManyWithoutUserInput
  }

  export type MeetingUserUncheckedCreateWithoutMeetingRoomBookedInput = {
    id?: number
    name: string
    profileImage?: string | null
    postion?: string | null
    bio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedCreateNestedManyWithoutUserInput
    MeetingUserAvailable?: MeetingUserAvailableUncheckedCreateNestedManyWithoutUserInput
  }

  export type MeetingUserCreateOrConnectWithoutMeetingRoomBookedInput = {
    where: MeetingUserWhereUniqueInput
    create: XOR<MeetingUserCreateWithoutMeetingRoomBookedInput, MeetingUserUncheckedCreateWithoutMeetingRoomBookedInput>
  }

  export type MeetingRoomUpsertWithoutMeetingRoomBookedInput = {
    update: XOR<MeetingRoomUpdateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedUpdateWithoutMeetingRoomBookedInput>
    create: XOR<MeetingRoomCreateWithoutMeetingRoomBookedInput, MeetingRoomUncheckedCreateWithoutMeetingRoomBookedInput>
  }

  export type MeetingRoomUpdateWithoutMeetingRoomBookedInput = {
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingRoomUncheckedUpdateWithoutMeetingRoomBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    floor?: IntFieldUpdateOperationsInput | number
    building?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedUpdateManyWithoutMeetingRoomNestedInput
  }

  export type MeetingUserUpsertWithoutMeetingRoomBookedInput = {
    update: XOR<MeetingUserUpdateWithoutMeetingRoomBookedInput, MeetingUserUncheckedUpdateWithoutMeetingRoomBookedInput>
    create: XOR<MeetingUserCreateWithoutMeetingRoomBookedInput, MeetingUserUncheckedCreateWithoutMeetingRoomBookedInput>
  }

  export type MeetingUserUpdateWithoutMeetingRoomBookedInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUpdateManyWithoutUserNestedInput
    MeetingUserAvailable?: MeetingUserAvailableUpdateManyWithoutUserNestedInput
  }

  export type MeetingUserUncheckedUpdateWithoutMeetingRoomBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: NullableStringFieldUpdateOperationsInput | string | null
    postion?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingUserBooked?: MeetingUserBookedUncheckedUpdateManyWithoutUserNestedInput
    MeetingUserAvailable?: MeetingUserAvailableUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TriviaQuizCreateWithoutCategoryInput = {
    quizName: string
    answer: TriviaChoiceCreateNestedOneWithoutTriviaQuizAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutCategoryInput = {
    id?: number
    quizName: string
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutCategoryInput, TriviaQuizUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaQuizCreateManyCategoryInputEnvelope = {
    data: Enumerable<TriviaQuizCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TriviaRoundCreateWithoutCategoryInput = {
    name?: string | null
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUncheckedCreateWithoutCategoryInput = {
    id?: number
    name?: string | null
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundCreateOrConnectWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    create: XOR<TriviaRoundCreateWithoutCategoryInput, TriviaRoundUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaRoundCreateManyCategoryInputEnvelope = {
    data: Enumerable<TriviaRoundCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    update: XOR<TriviaQuizUpdateWithoutCategoryInput, TriviaQuizUncheckedUpdateWithoutCategoryInput>
    create: XOR<TriviaQuizCreateWithoutCategoryInput, TriviaQuizUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    data: XOR<TriviaQuizUpdateWithoutCategoryInput, TriviaQuizUncheckedUpdateWithoutCategoryInput>
  }

  export type TriviaQuizUpdateManyWithWhereWithoutCategoryInput = {
    where: TriviaQuizScalarWhereInput
    data: XOR<TriviaQuizUpdateManyMutationInput, TriviaQuizUncheckedUpdateManyWithoutTriviaQuizInput>
  }

  export type TriviaQuizScalarWhereInput = {
    AND?: Enumerable<TriviaQuizScalarWhereInput>
    OR?: Enumerable<TriviaQuizScalarWhereInput>
    NOT?: Enumerable<TriviaQuizScalarWhereInput>
    id?: IntFilter | number
    quizName?: StringFilter | string
    categoryId?: IntFilter | number
    triviaAnswerChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    update: XOR<TriviaRoundUpdateWithoutCategoryInput, TriviaRoundUncheckedUpdateWithoutCategoryInput>
    create: XOR<TriviaRoundCreateWithoutCategoryInput, TriviaRoundUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    data: XOR<TriviaRoundUpdateWithoutCategoryInput, TriviaRoundUncheckedUpdateWithoutCategoryInput>
  }

  export type TriviaRoundUpdateManyWithWhereWithoutCategoryInput = {
    where: TriviaRoundScalarWhereInput
    data: XOR<TriviaRoundUpdateManyMutationInput, TriviaRoundUncheckedUpdateManyWithoutTriviaRoundInput>
  }

  export type TriviaRoundScalarWhereInput = {
    AND?: Enumerable<TriviaRoundScalarWhereInput>
    OR?: Enumerable<TriviaRoundScalarWhereInput>
    NOT?: Enumerable<TriviaRoundScalarWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    score?: IntFilter | number
    categoryId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaCategoryCreateWithoutTriviaQuizInput = {
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRound?: TriviaRoundCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUncheckedCreateWithoutTriviaQuizInput = {
    id?: number
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRound?: TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryCreateOrConnectWithoutTriviaQuizInput = {
    where: TriviaCategoryWhereUniqueInput
    create: XOR<TriviaCategoryCreateWithoutTriviaQuizInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizInput>
  }

  export type TriviaChoiceCreateWithoutTriviaQuizAnswerInput = {
    choiceName: string
    quiz?: TriviaQuizCreateNestedOneWithoutTriviaChoiceInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceUncheckedCreateWithoutTriviaQuizAnswerInput = {
    id?: number
    choiceName: string
    quizId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceCreateOrConnectWithoutTriviaQuizAnswerInput = {
    where: TriviaChoiceWhereUniqueInput
    create: XOR<TriviaChoiceCreateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedCreateWithoutTriviaQuizAnswerInput>
  }

  export type TriviaRoundQuizCreateWithoutQuizInput = {
    round: TriviaRoundCreateNestedOneWithoutTriviaRoundQuizInput
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizUncheckedCreateWithoutQuizInput = {
    id?: number
    roundId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizCreateOrConnectWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutQuizInput, TriviaRoundQuizUncheckedCreateWithoutQuizInput>
  }

  export type TriviaRoundQuizCreateManyQuizInputEnvelope = {
    data: Enumerable<TriviaRoundQuizCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type TriviaChoiceCreateWithoutQuizInput = {
    choiceName: string
    triviaQuizAnswer?: TriviaQuizCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceUncheckedCreateWithoutQuizInput = {
    id?: number
    choiceName: string
    triviaQuizAnswer?: TriviaQuizUncheckedCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizChoiceInput
  }

  export type TriviaChoiceCreateOrConnectWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    create: XOR<TriviaChoiceCreateWithoutQuizInput, TriviaChoiceUncheckedCreateWithoutQuizInput>
  }

  export type TriviaChoiceCreateManyQuizInputEnvelope = {
    data: Enumerable<TriviaChoiceCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type TriviaCategoryUpsertWithoutTriviaQuizInput = {
    update: XOR<TriviaCategoryUpdateWithoutTriviaQuizInput, TriviaCategoryUncheckedUpdateWithoutTriviaQuizInput>
    create: XOR<TriviaCategoryCreateWithoutTriviaQuizInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizInput>
  }

  export type TriviaCategoryUpdateWithoutTriviaQuizInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRound?: TriviaRoundUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryUncheckedUpdateWithoutTriviaQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRound?: TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaChoiceUpsertWithoutTriviaQuizAnswerInput = {
    update: XOR<TriviaChoiceUpdateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedUpdateWithoutTriviaQuizAnswerInput>
    create: XOR<TriviaChoiceCreateWithoutTriviaQuizAnswerInput, TriviaChoiceUncheckedCreateWithoutTriviaQuizAnswerInput>
  }

  export type TriviaChoiceUpdateWithoutTriviaQuizAnswerInput = {
    choiceName?: StringFieldUpdateOperationsInput | string
    quiz?: TriviaQuizUpdateOneWithoutTriviaChoiceNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateWithoutTriviaQuizAnswerInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    update: XOR<TriviaRoundQuizUpdateWithoutQuizInput, TriviaRoundQuizUncheckedUpdateWithoutQuizInput>
    create: XOR<TriviaRoundQuizCreateWithoutQuizInput, TriviaRoundQuizUncheckedCreateWithoutQuizInput>
  }

  export type TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    data: XOR<TriviaRoundQuizUpdateWithoutQuizInput, TriviaRoundQuizUncheckedUpdateWithoutQuizInput>
  }

  export type TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput = {
    where: TriviaRoundQuizScalarWhereInput
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyWithoutTriviaRoundQuizInput>
  }

  export type TriviaRoundQuizScalarWhereInput = {
    AND?: Enumerable<TriviaRoundQuizScalarWhereInput>
    OR?: Enumerable<TriviaRoundQuizScalarWhereInput>
    NOT?: Enumerable<TriviaRoundQuizScalarWhereInput>
    id?: IntFilter | number
    roundId?: IntFilter | number
    quizId?: IntFilter | number
    playerChooseChoice?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    update: XOR<TriviaChoiceUpdateWithoutQuizInput, TriviaChoiceUncheckedUpdateWithoutQuizInput>
    create: XOR<TriviaChoiceCreateWithoutQuizInput, TriviaChoiceUncheckedCreateWithoutQuizInput>
  }

  export type TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    data: XOR<TriviaChoiceUpdateWithoutQuizInput, TriviaChoiceUncheckedUpdateWithoutQuizInput>
  }

  export type TriviaChoiceUpdateManyWithWhereWithoutQuizInput = {
    where: TriviaChoiceScalarWhereInput
    data: XOR<TriviaChoiceUpdateManyMutationInput, TriviaChoiceUncheckedUpdateManyWithoutTriviaChoiceInput>
  }

  export type TriviaChoiceScalarWhereInput = {
    AND?: Enumerable<TriviaChoiceScalarWhereInput>
    OR?: Enumerable<TriviaChoiceScalarWhereInput>
    NOT?: Enumerable<TriviaChoiceScalarWhereInput>
    id?: IntFilter | number
    choiceName?: StringFilter | string
    quizId?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaQuizCreateWithoutTriviaChoiceInput = {
    quizName: string
    category: TriviaCategoryCreateNestedOneWithoutTriviaQuizInput
    answer: TriviaChoiceCreateNestedOneWithoutTriviaQuizAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutTriviaChoiceInput = {
    id?: number
    quizName: string
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutTriviaChoiceInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutTriviaChoiceInput, TriviaQuizUncheckedCreateWithoutTriviaChoiceInput>
  }

  export type TriviaQuizCreateWithoutAnswerInput = {
    quizName: string
    category: TriviaCategoryCreateNestedOneWithoutTriviaQuizInput
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutAnswerInput = {
    id?: number
    quizName: string
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
    TriviaChoice?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutAnswerInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
  }

  export type TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput = {
    roundQuiz: TriviaRoundQuizCreateNestedOneWithoutTriviaRoundQuizChoiceInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput = {
    id?: number
    roundQuizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizChoiceInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    create: XOR<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput, TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInputEnvelope = {
    data: Enumerable<TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInput>
    skipDuplicates?: boolean
  }

  export type TriviaQuizUpsertWithoutTriviaChoiceInput = {
    update: XOR<TriviaQuizUpdateWithoutTriviaChoiceInput, TriviaQuizUncheckedUpdateWithoutTriviaChoiceInput>
    create: XOR<TriviaQuizCreateWithoutTriviaChoiceInput, TriviaQuizUncheckedCreateWithoutTriviaChoiceInput>
  }

  export type TriviaQuizUpdateWithoutTriviaChoiceInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaQuizNestedInput
    answer?: TriviaChoiceUpdateOneRequiredWithoutTriviaQuizAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutTriviaChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUpsertWithoutAnswerInput = {
    update: XOR<TriviaQuizUpdateWithoutAnswerInput, TriviaQuizUncheckedUpdateWithoutAnswerInput>
    create: XOR<TriviaQuizCreateWithoutAnswerInput, TriviaQuizUncheckedCreateWithoutAnswerInput>
  }

  export type TriviaQuizUpdateWithoutAnswerInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaQuizNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutAnswerInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizChoiceInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    update: XOR<TriviaRoundQuizChoiceUpdateWithoutRoundQuizChoiceInput, TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizChoiceInput>
    create: XOR<TriviaRoundQuizChoiceCreateWithoutRoundQuizChoiceInput, TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizChoiceInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    data: XOR<TriviaRoundQuizChoiceUpdateWithoutRoundQuizChoiceInput, TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizChoiceInput = {
    where: TriviaRoundQuizChoiceScalarWhereInput
    data: XOR<TriviaRoundQuizChoiceUpdateManyMutationInput, TriviaRoundQuizChoiceUncheckedUpdateManyWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizChoiceScalarWhereInput = {
    AND?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
    OR?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
    NOT?: Enumerable<TriviaRoundQuizChoiceScalarWhereInput>
    id?: IntFilter | number
    roundQuizId?: IntFilter | number
    quizChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaCategoryCreateWithoutTriviaRoundInput = {
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaQuiz?: TriviaQuizCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUncheckedCreateWithoutTriviaRoundInput = {
    id?: number
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaQuiz?: TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryCreateOrConnectWithoutTriviaRoundInput = {
    where: TriviaCategoryWhereUniqueInput
    create: XOR<TriviaCategoryCreateWithoutTriviaRoundInput, TriviaCategoryUncheckedCreateWithoutTriviaRoundInput>
  }

  export type TriviaRoundQuizCreateWithoutRoundInput = {
    quiz: TriviaQuizCreateNestedOneWithoutTriviaRoundQuizInput
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizUncheckedCreateWithoutRoundInput = {
    id?: number
    quizId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedCreateNestedManyWithoutRoundQuizInput
  }

  export type TriviaRoundQuizCreateOrConnectWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutRoundInput, TriviaRoundQuizUncheckedCreateWithoutRoundInput>
  }

  export type TriviaRoundQuizCreateManyRoundInputEnvelope = {
    data: Enumerable<TriviaRoundQuizCreateManyRoundInput>
    skipDuplicates?: boolean
  }

  export type TriviaCategoryUpsertWithoutTriviaRoundInput = {
    update: XOR<TriviaCategoryUpdateWithoutTriviaRoundInput, TriviaCategoryUncheckedUpdateWithoutTriviaRoundInput>
    create: XOR<TriviaCategoryCreateWithoutTriviaRoundInput, TriviaCategoryUncheckedCreateWithoutTriviaRoundInput>
  }

  export type TriviaCategoryUpdateWithoutTriviaRoundInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaQuiz?: TriviaQuizUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryUncheckedUpdateWithoutTriviaRoundInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaQuiz?: TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    update: XOR<TriviaRoundQuizUpdateWithoutRoundInput, TriviaRoundQuizUncheckedUpdateWithoutRoundInput>
    create: XOR<TriviaRoundQuizCreateWithoutRoundInput, TriviaRoundQuizUncheckedCreateWithoutRoundInput>
  }

  export type TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    data: XOR<TriviaRoundQuizUpdateWithoutRoundInput, TriviaRoundQuizUncheckedUpdateWithoutRoundInput>
  }

  export type TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput = {
    where: TriviaRoundQuizScalarWhereInput
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyWithoutTriviaRoundQuizInput>
  }

  export type TriviaRoundCreateWithoutTriviaRoundQuizInput = {
    name?: string | null
    score: number
    category: TriviaCategoryCreateNestedOneWithoutTriviaRoundInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundUncheckedCreateWithoutTriviaRoundQuizInput = {
    id?: number
    name?: string | null
    score: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundCreateOrConnectWithoutTriviaRoundQuizInput = {
    where: TriviaRoundWhereUniqueInput
    create: XOR<TriviaRoundCreateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedCreateWithoutTriviaRoundQuizInput>
  }

  export type TriviaQuizCreateWithoutTriviaRoundQuizInput = {
    quizName: string
    category: TriviaCategoryCreateNestedOneWithoutTriviaQuizInput
    answer: TriviaChoiceCreateNestedOneWithoutTriviaQuizAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
    TriviaChoice?: TriviaChoiceCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutTriviaRoundQuizInput = {
    id?: number
    quizName: string
    categoryId: number
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    TriviaChoice?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutTriviaRoundQuizInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedCreateWithoutTriviaRoundQuizInput>
  }

  export type TriviaRoundQuizChoiceCreateWithoutRoundQuizInput = {
    roundQuizChoice: TriviaChoiceCreateNestedOneWithoutTriviaRoundQuizChoiceInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput = {
    id?: number
    quizChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceCreateOrConnectWithoutRoundQuizInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    create: XOR<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput, TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>
  }

  export type TriviaRoundQuizChoiceCreateManyRoundQuizInputEnvelope = {
    data: Enumerable<TriviaRoundQuizChoiceCreateManyRoundQuizInput>
    skipDuplicates?: boolean
  }

  export type TriviaRoundUpsertWithoutTriviaRoundQuizInput = {
    update: XOR<TriviaRoundUpdateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedUpdateWithoutTriviaRoundQuizInput>
    create: XOR<TriviaRoundCreateWithoutTriviaRoundQuizInput, TriviaRoundUncheckedCreateWithoutTriviaRoundQuizInput>
  }

  export type TriviaRoundUpdateWithoutTriviaRoundQuizInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaRoundNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundUncheckedUpdateWithoutTriviaRoundQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizUpsertWithoutTriviaRoundQuizInput = {
    update: XOR<TriviaQuizUpdateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedUpdateWithoutTriviaRoundQuizInput>
    create: XOR<TriviaQuizCreateWithoutTriviaRoundQuizInput, TriviaQuizUncheckedCreateWithoutTriviaRoundQuizInput>
  }

  export type TriviaQuizUpdateWithoutTriviaRoundQuizInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneRequiredWithoutTriviaQuizNestedInput
    answer?: TriviaChoiceUpdateOneRequiredWithoutTriviaQuizAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    TriviaChoice?: TriviaChoiceUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutTriviaRoundQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    TriviaChoice?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaRoundQuizChoiceUpsertWithWhereUniqueWithoutRoundQuizInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    update: XOR<TriviaRoundQuizChoiceUpdateWithoutRoundQuizInput, TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizInput>
    create: XOR<TriviaRoundQuizChoiceCreateWithoutRoundQuizInput, TriviaRoundQuizChoiceUncheckedCreateWithoutRoundQuizInput>
  }

  export type TriviaRoundQuizChoiceUpdateWithWhereUniqueWithoutRoundQuizInput = {
    where: TriviaRoundQuizChoiceWhereUniqueInput
    data: XOR<TriviaRoundQuizChoiceUpdateWithoutRoundQuizInput, TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizInput>
  }

  export type TriviaRoundQuizChoiceUpdateManyWithWhereWithoutRoundQuizInput = {
    where: TriviaRoundQuizChoiceScalarWhereInput
    data: XOR<TriviaRoundQuizChoiceUpdateManyMutationInput, TriviaRoundQuizChoiceUncheckedUpdateManyWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizCreateWithoutTriviaRoundQuizChoiceInput = {
    round: TriviaRoundCreateNestedOneWithoutTriviaRoundQuizInput
    quiz: TriviaQuizCreateNestedOneWithoutTriviaRoundQuizInput
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUncheckedCreateWithoutTriviaRoundQuizChoiceInput = {
    id?: number
    roundId: number
    quizId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizCreateOrConnectWithoutTriviaRoundQuizChoiceInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaChoiceCreateWithoutTriviaRoundQuizChoiceInput = {
    choiceName: string
    quiz?: TriviaQuizCreateNestedOneWithoutTriviaChoiceInput
    triviaQuizAnswer?: TriviaQuizCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceUncheckedCreateWithoutTriviaRoundQuizChoiceInput = {
    id?: number
    choiceName: string
    quizId?: number | null
    triviaQuizAnswer?: TriviaQuizUncheckedCreateNestedOneWithoutAnswerInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceCreateOrConnectWithoutTriviaRoundQuizChoiceInput = {
    where: TriviaChoiceWhereUniqueInput
    create: XOR<TriviaChoiceCreateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizUpsertWithoutTriviaRoundQuizChoiceInput = {
    update: XOR<TriviaRoundQuizUpdateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedUpdateWithoutTriviaRoundQuizChoiceInput>
    create: XOR<TriviaRoundQuizCreateWithoutTriviaRoundQuizChoiceInput, TriviaRoundQuizUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaRoundQuizUpdateWithoutTriviaRoundQuizChoiceInput = {
    round?: TriviaRoundUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    quiz?: TriviaQuizUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutTriviaRoundQuizChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUpsertWithoutTriviaRoundQuizChoiceInput = {
    update: XOR<TriviaChoiceUpdateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedUpdateWithoutTriviaRoundQuizChoiceInput>
    create: XOR<TriviaChoiceCreateWithoutTriviaRoundQuizChoiceInput, TriviaChoiceUncheckedCreateWithoutTriviaRoundQuizChoiceInput>
  }

  export type TriviaChoiceUpdateWithoutTriviaRoundQuizChoiceInput = {
    choiceName?: StringFieldUpdateOperationsInput | string
    quiz?: TriviaQuizUpdateOneWithoutTriviaChoiceNestedInput
    triviaQuizAnswer?: TriviaQuizUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUncheckedUpdateWithoutTriviaRoundQuizChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    quizId?: NullableIntFieldUpdateOperationsInput | number | null
    triviaQuizAnswer?: TriviaQuizUncheckedUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingCreateWithoutFromInput = {
    to: UserCreateNestedOneWithoutToFollowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUncheckedCreateWithoutFromInput = {
    id?: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingCreateOrConnectWithoutFromInput = {
    where: FollowingWhereUniqueInput
    create: XOR<FollowingCreateWithoutFromInput, FollowingUncheckedCreateWithoutFromInput>
  }

  export type FollowingCreateManyFromInputEnvelope = {
    data: Enumerable<FollowingCreateManyFromInput>
    skipDuplicates?: boolean
  }

  export type FollowingCreateWithoutToInput = {
    from: UserCreateNestedOneWithoutFromFolowingInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUncheckedCreateWithoutToInput = {
    id?: number
    fromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingCreateOrConnectWithoutToInput = {
    where: FollowingWhereUniqueInput
    create: XOR<FollowingCreateWithoutToInput, FollowingUncheckedCreateWithoutToInput>
  }

  export type FollowingCreateManyToInputEnvelope = {
    data: Enumerable<FollowingCreateManyToInput>
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutUserInput = {
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutPostInput
    postOnHashtag?: PostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutPostInput
    postOnHashtag?: PostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: Enumerable<PostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type DirectMsgCreateWithoutFromInput = {
    to: UserCreateNestedOneWithoutToDirectMessageInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgUncheckedCreateWithoutFromInput = {
    id?: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgCreateOrConnectWithoutFromInput = {
    where: DirectMsgWhereUniqueInput
    create: XOR<DirectMsgCreateWithoutFromInput, DirectMsgUncheckedCreateWithoutFromInput>
  }

  export type DirectMsgCreateManyFromInputEnvelope = {
    data: Enumerable<DirectMsgCreateManyFromInput>
    skipDuplicates?: boolean
  }

  export type DirectMsgCreateWithoutToInput = {
    from: UserCreateNestedOneWithoutFromDirectMessageInput
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgUncheckedCreateWithoutToInput = {
    id?: number
    fromUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgCreateOrConnectWithoutToInput = {
    where: DirectMsgWhereUniqueInput
    create: XOR<DirectMsgCreateWithoutToInput, DirectMsgUncheckedCreateWithoutToInput>
  }

  export type DirectMsgCreateManyToInputEnvelope = {
    data: Enumerable<DirectMsgCreateManyToInput>
    skipDuplicates?: boolean
  }

  export type ReplyCreateWithoutReplyUserInput = {
    post: PostCreateNestedOneWithoutReplyInput
    reply: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUncheckedCreateWithoutReplyUserInput = {
    id?: number
    postId: number
    reply: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutReplyUserInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutReplyUserInput, ReplyUncheckedCreateWithoutReplyUserInput>
  }

  export type ReplyCreateManyReplyUserInputEnvelope = {
    data: Enumerable<ReplyCreateManyReplyUserInput>
    skipDuplicates?: boolean
  }

  export type FollowingUpsertWithWhereUniqueWithoutFromInput = {
    where: FollowingWhereUniqueInput
    update: XOR<FollowingUpdateWithoutFromInput, FollowingUncheckedUpdateWithoutFromInput>
    create: XOR<FollowingCreateWithoutFromInput, FollowingUncheckedCreateWithoutFromInput>
  }

  export type FollowingUpdateWithWhereUniqueWithoutFromInput = {
    where: FollowingWhereUniqueInput
    data: XOR<FollowingUpdateWithoutFromInput, FollowingUncheckedUpdateWithoutFromInput>
  }

  export type FollowingUpdateManyWithWhereWithoutFromInput = {
    where: FollowingScalarWhereInput
    data: XOR<FollowingUpdateManyMutationInput, FollowingUncheckedUpdateManyWithoutFromFolowingInput>
  }

  export type FollowingScalarWhereInput = {
    AND?: Enumerable<FollowingScalarWhereInput>
    OR?: Enumerable<FollowingScalarWhereInput>
    NOT?: Enumerable<FollowingScalarWhereInput>
    id?: IntFilter | number
    fromUserId?: IntFilter | number
    toUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FollowingUpsertWithWhereUniqueWithoutToInput = {
    where: FollowingWhereUniqueInput
    update: XOR<FollowingUpdateWithoutToInput, FollowingUncheckedUpdateWithoutToInput>
    create: XOR<FollowingCreateWithoutToInput, FollowingUncheckedCreateWithoutToInput>
  }

  export type FollowingUpdateWithWhereUniqueWithoutToInput = {
    where: FollowingWhereUniqueInput
    data: XOR<FollowingUpdateWithoutToInput, FollowingUncheckedUpdateWithoutToInput>
  }

  export type FollowingUpdateManyWithWhereWithoutToInput = {
    where: FollowingScalarWhereInput
    data: XOR<FollowingUpdateManyMutationInput, FollowingUncheckedUpdateManyWithoutToFollowingInput>
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutPostInput>
  }

  export type PostScalarWhereInput = {
    AND?: Enumerable<PostScalarWhereInput>
    OR?: Enumerable<PostScalarWhereInput>
    NOT?: Enumerable<PostScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    postDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DirectMsgUpsertWithWhereUniqueWithoutFromInput = {
    where: DirectMsgWhereUniqueInput
    update: XOR<DirectMsgUpdateWithoutFromInput, DirectMsgUncheckedUpdateWithoutFromInput>
    create: XOR<DirectMsgCreateWithoutFromInput, DirectMsgUncheckedCreateWithoutFromInput>
  }

  export type DirectMsgUpdateWithWhereUniqueWithoutFromInput = {
    where: DirectMsgWhereUniqueInput
    data: XOR<DirectMsgUpdateWithoutFromInput, DirectMsgUncheckedUpdateWithoutFromInput>
  }

  export type DirectMsgUpdateManyWithWhereWithoutFromInput = {
    where: DirectMsgScalarWhereInput
    data: XOR<DirectMsgUpdateManyMutationInput, DirectMsgUncheckedUpdateManyWithoutFromDirectMessageInput>
  }

  export type DirectMsgScalarWhereInput = {
    AND?: Enumerable<DirectMsgScalarWhereInput>
    OR?: Enumerable<DirectMsgScalarWhereInput>
    NOT?: Enumerable<DirectMsgScalarWhereInput>
    id?: IntFilter | number
    fromUserId?: IntFilter | number
    toUserId?: IntFilter | number
    msgDetail?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type DirectMsgUpsertWithWhereUniqueWithoutToInput = {
    where: DirectMsgWhereUniqueInput
    update: XOR<DirectMsgUpdateWithoutToInput, DirectMsgUncheckedUpdateWithoutToInput>
    create: XOR<DirectMsgCreateWithoutToInput, DirectMsgUncheckedCreateWithoutToInput>
  }

  export type DirectMsgUpdateWithWhereUniqueWithoutToInput = {
    where: DirectMsgWhereUniqueInput
    data: XOR<DirectMsgUpdateWithoutToInput, DirectMsgUncheckedUpdateWithoutToInput>
  }

  export type DirectMsgUpdateManyWithWhereWithoutToInput = {
    where: DirectMsgScalarWhereInput
    data: XOR<DirectMsgUpdateManyMutationInput, DirectMsgUncheckedUpdateManyWithoutToDirectMessageInput>
  }

  export type ReplyUpsertWithWhereUniqueWithoutReplyUserInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutReplyUserInput, ReplyUncheckedUpdateWithoutReplyUserInput>
    create: XOR<ReplyCreateWithoutReplyUserInput, ReplyUncheckedCreateWithoutReplyUserInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutReplyUserInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutReplyUserInput, ReplyUncheckedUpdateWithoutReplyUserInput>
  }

  export type ReplyUpdateManyWithWhereWithoutReplyUserInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutReplyInput>
  }

  export type ReplyScalarWhereInput = {
    AND?: Enumerable<ReplyScalarWhereInput>
    OR?: Enumerable<ReplyScalarWhereInput>
    NOT?: Enumerable<ReplyScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    reply?: StringFilter | string
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutFromFolowingInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    post?: PostCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateWithoutFromFolowingInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserCreateOrConnectWithoutFromFolowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFromFolowingInput, UserUncheckedCreateWithoutFromFolowingInput>
  }

  export type UserCreateWithoutToFollowingInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    post?: PostCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateWithoutToFollowingInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserCreateOrConnectWithoutToFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutToFollowingInput, UserUncheckedCreateWithoutToFollowingInput>
  }

  export type UserUpsertWithoutFromFolowingInput = {
    update: XOR<UserUpdateWithoutFromFolowingInput, UserUncheckedUpdateWithoutFromFolowingInput>
    create: XOR<UserCreateWithoutFromFolowingInput, UserUncheckedCreateWithoutFromFolowingInput>
  }

  export type UserUpdateWithoutFromFolowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFromFolowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUpsertWithoutToFollowingInput = {
    update: XOR<UserUpdateWithoutToFollowingInput, UserUncheckedUpdateWithoutToFollowingInput>
    create: XOR<UserCreateWithoutToFollowingInput, UserUncheckedCreateWithoutToFollowingInput>
  }

  export type UserUpdateWithoutToFollowingInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateWithoutToFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type UserCreateWithoutPostInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateWithoutPostInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserCreateOrConnectWithoutPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type ReplyCreateWithoutPostInput = {
    reply: string
    replyUser: UserCreateNestedOneWithoutReplyInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUncheckedCreateWithoutPostInput = {
    id?: number
    reply: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateOrConnectWithoutPostInput = {
    where: ReplyWhereUniqueInput
    create: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput>
  }

  export type ReplyCreateManyPostInputEnvelope = {
    data: Enumerable<ReplyCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type PostOnHashtagCreateWithoutPostInput = {
    hashtag: HashtagCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUncheckedCreateWithoutPostInput = {
    id?: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagCreateOrConnectWithoutPostInput = {
    where: PostOnHashtagWhereUniqueInput
    create: XOR<PostOnHashtagCreateWithoutPostInput, PostOnHashtagUncheckedCreateWithoutPostInput>
  }

  export type PostOnHashtagCreateManyPostInputEnvelope = {
    data: Enumerable<PostOnHashtagCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostInput = {
    update: XOR<UserUpdateWithoutPostInput, UserUncheckedUpdateWithoutPostInput>
    create: XOR<UserCreateWithoutPostInput, UserUncheckedCreateWithoutPostInput>
  }

  export type UserUpdateWithoutPostInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type ReplyUpsertWithWhereUniqueWithoutPostInput = {
    where: ReplyWhereUniqueInput
    update: XOR<ReplyUpdateWithoutPostInput, ReplyUncheckedUpdateWithoutPostInput>
    create: XOR<ReplyCreateWithoutPostInput, ReplyUncheckedCreateWithoutPostInput>
  }

  export type ReplyUpdateWithWhereUniqueWithoutPostInput = {
    where: ReplyWhereUniqueInput
    data: XOR<ReplyUpdateWithoutPostInput, ReplyUncheckedUpdateWithoutPostInput>
  }

  export type ReplyUpdateManyWithWhereWithoutPostInput = {
    where: ReplyScalarWhereInput
    data: XOR<ReplyUpdateManyMutationInput, ReplyUncheckedUpdateManyWithoutReplyInput>
  }

  export type PostOnHashtagUpsertWithWhereUniqueWithoutPostInput = {
    where: PostOnHashtagWhereUniqueInput
    update: XOR<PostOnHashtagUpdateWithoutPostInput, PostOnHashtagUncheckedUpdateWithoutPostInput>
    create: XOR<PostOnHashtagCreateWithoutPostInput, PostOnHashtagUncheckedCreateWithoutPostInput>
  }

  export type PostOnHashtagUpdateWithWhereUniqueWithoutPostInput = {
    where: PostOnHashtagWhereUniqueInput
    data: XOR<PostOnHashtagUpdateWithoutPostInput, PostOnHashtagUncheckedUpdateWithoutPostInput>
  }

  export type PostOnHashtagUpdateManyWithWhereWithoutPostInput = {
    where: PostOnHashtagScalarWhereInput
    data: XOR<PostOnHashtagUpdateManyMutationInput, PostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput>
  }

  export type PostOnHashtagScalarWhereInput = {
    AND?: Enumerable<PostOnHashtagScalarWhereInput>
    OR?: Enumerable<PostOnHashtagScalarWhereInput>
    NOT?: Enumerable<PostOnHashtagScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    hashtagId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutFromDirectMessageInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    post?: PostCreateNestedManyWithoutUserInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateWithoutFromDirectMessageInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserCreateOrConnectWithoutFromDirectMessageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFromDirectMessageInput, UserUncheckedCreateWithoutFromDirectMessageInput>
  }

  export type UserCreateWithoutToDirectMessageInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    post?: PostCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    Reply?: ReplyCreateNestedManyWithoutReplyUserInput
  }

  export type UserUncheckedCreateWithoutToDirectMessageInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    Reply?: ReplyUncheckedCreateNestedManyWithoutReplyUserInput
  }

  export type UserCreateOrConnectWithoutToDirectMessageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutToDirectMessageInput, UserUncheckedCreateWithoutToDirectMessageInput>
  }

  export type UserUpsertWithoutFromDirectMessageInput = {
    update: XOR<UserUpdateWithoutFromDirectMessageInput, UserUncheckedUpdateWithoutFromDirectMessageInput>
    create: XOR<UserCreateWithoutFromDirectMessageInput, UserUncheckedCreateWithoutFromDirectMessageInput>
  }

  export type UserUpdateWithoutFromDirectMessageInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFromDirectMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUpsertWithoutToDirectMessageInput = {
    update: XOR<UserUpdateWithoutToDirectMessageInput, UserUncheckedUpdateWithoutToDirectMessageInput>
    create: XOR<UserCreateWithoutToDirectMessageInput, UserUncheckedCreateWithoutToDirectMessageInput>
  }

  export type UserUpdateWithoutToDirectMessageInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    Reply?: ReplyUpdateManyWithoutReplyUserNestedInput
  }

  export type UserUncheckedUpdateWithoutToDirectMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    Reply?: ReplyUncheckedUpdateManyWithoutReplyUserNestedInput
  }

  export type PostOnHashtagCreateWithoutHashtagInput = {
    post: PostCreateNestedOneWithoutPostOnHashtagInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUncheckedCreateWithoutHashtagInput = {
    id?: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagCreateOrConnectWithoutHashtagInput = {
    where: PostOnHashtagWhereUniqueInput
    create: XOR<PostOnHashtagCreateWithoutHashtagInput, PostOnHashtagUncheckedCreateWithoutHashtagInput>
  }

  export type PostOnHashtagCreateManyHashtagInputEnvelope = {
    data: Enumerable<PostOnHashtagCreateManyHashtagInput>
    skipDuplicates?: boolean
  }

  export type PostOnHashtagUpsertWithWhereUniqueWithoutHashtagInput = {
    where: PostOnHashtagWhereUniqueInput
    update: XOR<PostOnHashtagUpdateWithoutHashtagInput, PostOnHashtagUncheckedUpdateWithoutHashtagInput>
    create: XOR<PostOnHashtagCreateWithoutHashtagInput, PostOnHashtagUncheckedCreateWithoutHashtagInput>
  }

  export type PostOnHashtagUpdateWithWhereUniqueWithoutHashtagInput = {
    where: PostOnHashtagWhereUniqueInput
    data: XOR<PostOnHashtagUpdateWithoutHashtagInput, PostOnHashtagUncheckedUpdateWithoutHashtagInput>
  }

  export type PostOnHashtagUpdateManyWithWhereWithoutHashtagInput = {
    where: PostOnHashtagScalarWhereInput
    data: XOR<PostOnHashtagUpdateManyMutationInput, PostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput>
  }

  export type PostCreateWithoutReplyInput = {
    user: UserCreateNestedOneWithoutPostInput
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postOnHashtag?: PostOnHashtagCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutReplyInput = {
    id?: number
    userId: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postOnHashtag?: PostOnHashtagUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutReplyInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutReplyInput, PostUncheckedCreateWithoutReplyInput>
  }

  export type UserCreateWithoutReplyInput = {
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingCreateNestedManyWithoutFromInput
    toFollowing?: FollowingCreateNestedManyWithoutToInput
    post?: PostCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgCreateNestedManyWithoutToInput
  }

  export type UserUncheckedCreateWithoutReplyInput = {
    id?: number
    name: string
    profileImage: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fromFolowing?: FollowingUncheckedCreateNestedManyWithoutFromInput
    toFollowing?: FollowingUncheckedCreateNestedManyWithoutToInput
    post?: PostUncheckedCreateNestedManyWithoutUserInput
    fromDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutFromInput
    toDirectMessage?: DirectMsgUncheckedCreateNestedManyWithoutToInput
  }

  export type UserCreateOrConnectWithoutReplyInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
  }

  export type PostUpsertWithoutReplyInput = {
    update: XOR<PostUpdateWithoutReplyInput, PostUncheckedUpdateWithoutReplyInput>
    create: XOR<PostCreateWithoutReplyInput, PostUncheckedCreateWithoutReplyInput>
  }

  export type PostUpdateWithoutReplyInput = {
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postOnHashtag?: PostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postOnHashtag?: PostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserUpsertWithoutReplyInput = {
    update: XOR<UserUpdateWithoutReplyInput, UserUncheckedUpdateWithoutReplyInput>
    create: XOR<UserCreateWithoutReplyInput, UserUncheckedCreateWithoutReplyInput>
  }

  export type UserUpdateWithoutReplyInput = {
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUpdateManyWithoutToNestedInput
    post?: PostUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUpdateManyWithoutToNestedInput
  }

  export type UserUncheckedUpdateWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fromFolowing?: FollowingUncheckedUpdateManyWithoutFromNestedInput
    toFollowing?: FollowingUncheckedUpdateManyWithoutToNestedInput
    post?: PostUncheckedUpdateManyWithoutUserNestedInput
    fromDirectMessage?: DirectMsgUncheckedUpdateManyWithoutFromNestedInput
    toDirectMessage?: DirectMsgUncheckedUpdateManyWithoutToNestedInput
  }

  export type PostCreateWithoutPostOnHashtagInput = {
    user: UserCreateNestedOneWithoutPostInput
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPostOnHashtagInput = {
    id?: number
    userId: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reply?: ReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutPostOnHashtagInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPostOnHashtagInput, PostUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type HashtagCreateWithoutPostOnHashtagInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HashtagUncheckedCreateWithoutPostOnHashtagInput = {
    id?: number
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HashtagCreateOrConnectWithoutPostOnHashtagInput = {
    where: HashtagWhereUniqueInput
    create: XOR<HashtagCreateWithoutPostOnHashtagInput, HashtagUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type PostUpsertWithoutPostOnHashtagInput = {
    update: XOR<PostUpdateWithoutPostOnHashtagInput, PostUncheckedUpdateWithoutPostOnHashtagInput>
    create: XOR<PostCreateWithoutPostOnHashtagInput, PostUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type PostUpdateWithoutPostOnHashtagInput = {
    user?: UserUpdateOneRequiredWithoutPostNestedInput
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type HashtagUpsertWithoutPostOnHashtagInput = {
    update: XOR<HashtagUpdateWithoutPostOnHashtagInput, HashtagUncheckedUpdateWithoutPostOnHashtagInput>
    create: XOR<HashtagCreateWithoutPostOnHashtagInput, HashtagUncheckedCreateWithoutPostOnHashtagInput>
  }

  export type HashtagUpdateWithoutPostOnHashtagInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HashtagUncheckedUpdateWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineCreateWithoutBranchInput = {
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineUncheckedCreateWithoutBranchInput = {
    id?: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineCreateOrConnectWithoutBranchInput = {
    where: WashingMachineWhereUniqueInput
    create: XOR<WashingMachineCreateWithoutBranchInput, WashingMachineUncheckedCreateWithoutBranchInput>
  }

  export type WashingMachineCreateManyBranchInputEnvelope = {
    data: Enumerable<WashingMachineCreateManyBranchInput>
    skipDuplicates?: boolean
  }

  export type WashingUseHistoryCreateWithoutUseAtBranchInput = {
    user: WashingUserCreateNestedOneWithoutWashingUseHistoryInput
    useAtMachine: WashingMachineCreateNestedOneWithoutWashingUseHistoryInput
    useProgram: WashingMachineProgramCreateNestedOneWithoutWashingUseHistoryInput
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput = {
    id?: number
    userId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateOrConnectWithoutUseAtBranchInput = {
    where: WashingUseHistoryWhereUniqueInput
    create: XOR<WashingUseHistoryCreateWithoutUseAtBranchInput, WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>
  }

  export type WashingUseHistoryCreateManyUseAtBranchInputEnvelope = {
    data: Enumerable<WashingUseHistoryCreateManyUseAtBranchInput>
    skipDuplicates?: boolean
  }

  export type WashingMachineUpsertWithWhereUniqueWithoutBranchInput = {
    where: WashingMachineWhereUniqueInput
    update: XOR<WashingMachineUpdateWithoutBranchInput, WashingMachineUncheckedUpdateWithoutBranchInput>
    create: XOR<WashingMachineCreateWithoutBranchInput, WashingMachineUncheckedCreateWithoutBranchInput>
  }

  export type WashingMachineUpdateWithWhereUniqueWithoutBranchInput = {
    where: WashingMachineWhereUniqueInput
    data: XOR<WashingMachineUpdateWithoutBranchInput, WashingMachineUncheckedUpdateWithoutBranchInput>
  }

  export type WashingMachineUpdateManyWithWhereWithoutBranchInput = {
    where: WashingMachineScalarWhereInput
    data: XOR<WashingMachineUpdateManyMutationInput, WashingMachineUncheckedUpdateManyWithoutWashingMachineInput>
  }

  export type WashingMachineScalarWhereInput = {
    AND?: Enumerable<WashingMachineScalarWhereInput>
    OR?: Enumerable<WashingMachineScalarWhereInput>
    NOT?: Enumerable<WashingMachineScalarWhereInput>
    id?: IntFilter | number
    branchId?: IntFilter | number
    brand?: StringFilter | string
    weight?: IntFilter | number
    type?: StringFilter | string
    productionYear?: DateTimeFilter | Date | string
    warrantyEnd?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtBranchInput = {
    where: WashingUseHistoryWhereUniqueInput
    update: XOR<WashingUseHistoryUpdateWithoutUseAtBranchInput, WashingUseHistoryUncheckedUpdateWithoutUseAtBranchInput>
    create: XOR<WashingUseHistoryCreateWithoutUseAtBranchInput, WashingUseHistoryUncheckedCreateWithoutUseAtBranchInput>
  }

  export type WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtBranchInput = {
    where: WashingUseHistoryWhereUniqueInput
    data: XOR<WashingUseHistoryUpdateWithoutUseAtBranchInput, WashingUseHistoryUncheckedUpdateWithoutUseAtBranchInput>
  }

  export type WashingUseHistoryUpdateManyWithWhereWithoutUseAtBranchInput = {
    where: WashingUseHistoryScalarWhereInput
    data: XOR<WashingUseHistoryUpdateManyMutationInput, WashingUseHistoryUncheckedUpdateManyWithoutWashingUseHistoryInput>
  }

  export type WashingUseHistoryScalarWhereInput = {
    AND?: Enumerable<WashingUseHistoryScalarWhereInput>
    OR?: Enumerable<WashingUseHistoryScalarWhereInput>
    NOT?: Enumerable<WashingUseHistoryScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    branchId?: IntFilter | number
    machineId?: IntFilter | number
    programId?: IntFilter | number
    price?: IntFilter | number
    startTime?: DateTimeFilter | Date | string
    endTime?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingBranchCreateWithoutWashingMachineInput = {
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtBranchInput
  }

  export type WashingBranchUncheckedCreateWithoutWashingMachineInput = {
    id?: number
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtBranchInput
  }

  export type WashingBranchCreateOrConnectWithoutWashingMachineInput = {
    where: WashingBranchWhereUniqueInput
    create: XOR<WashingBranchCreateWithoutWashingMachineInput, WashingBranchUncheckedCreateWithoutWashingMachineInput>
  }

  export type WashingMachineMaintenanceCreateWithoutMachineInput = {
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceUncheckedCreateWithoutMachineInput = {
    id?: number
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceCreateOrConnectWithoutMachineInput = {
    where: WashingMachineMaintenanceWhereUniqueInput
    create: XOR<WashingMachineMaintenanceCreateWithoutMachineInput, WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>
  }

  export type WashingMachineMaintenanceCreateManyMachineInputEnvelope = {
    data: Enumerable<WashingMachineMaintenanceCreateManyMachineInput>
    skipDuplicates?: boolean
  }

  export type WashingUseHistoryCreateWithoutUseAtMachineInput = {
    user: WashingUserCreateNestedOneWithoutWashingUseHistoryInput
    useAtBranch: WashingBranchCreateNestedOneWithoutWashingUseHistoryInput
    useProgram: WashingMachineProgramCreateNestedOneWithoutWashingUseHistoryInput
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput = {
    id?: number
    userId: number
    branchId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateOrConnectWithoutUseAtMachineInput = {
    where: WashingUseHistoryWhereUniqueInput
    create: XOR<WashingUseHistoryCreateWithoutUseAtMachineInput, WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>
  }

  export type WashingUseHistoryCreateManyUseAtMachineInputEnvelope = {
    data: Enumerable<WashingUseHistoryCreateManyUseAtMachineInput>
    skipDuplicates?: boolean
  }

  export type WashingMachineOnProgramCreateWithoutMachineInput = {
    program: WashingMachineProgramCreateNestedOneWithoutWashingMachineOnProgramInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramUncheckedCreateWithoutMachineInput = {
    id?: number
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramCreateOrConnectWithoutMachineInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    create: XOR<WashingMachineOnProgramCreateWithoutMachineInput, WashingMachineOnProgramUncheckedCreateWithoutMachineInput>
  }

  export type WashingMachineOnProgramCreateManyMachineInputEnvelope = {
    data: Enumerable<WashingMachineOnProgramCreateManyMachineInput>
    skipDuplicates?: boolean
  }

  export type WashingBranchUpsertWithoutWashingMachineInput = {
    update: XOR<WashingBranchUpdateWithoutWashingMachineInput, WashingBranchUncheckedUpdateWithoutWashingMachineInput>
    create: XOR<WashingBranchCreateWithoutWashingMachineInput, WashingBranchUncheckedCreateWithoutWashingMachineInput>
  }

  export type WashingBranchUpdateWithoutWashingMachineInput = {
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtBranchNestedInput
  }

  export type WashingBranchUncheckedUpdateWithoutWashingMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtBranchNestedInput
  }

  export type WashingMachineMaintenanceUpsertWithWhereUniqueWithoutMachineInput = {
    where: WashingMachineMaintenanceWhereUniqueInput
    update: XOR<WashingMachineMaintenanceUpdateWithoutMachineInput, WashingMachineMaintenanceUncheckedUpdateWithoutMachineInput>
    create: XOR<WashingMachineMaintenanceCreateWithoutMachineInput, WashingMachineMaintenanceUncheckedCreateWithoutMachineInput>
  }

  export type WashingMachineMaintenanceUpdateWithWhereUniqueWithoutMachineInput = {
    where: WashingMachineMaintenanceWhereUniqueInput
    data: XOR<WashingMachineMaintenanceUpdateWithoutMachineInput, WashingMachineMaintenanceUncheckedUpdateWithoutMachineInput>
  }

  export type WashingMachineMaintenanceUpdateManyWithWhereWithoutMachineInput = {
    where: WashingMachineMaintenanceScalarWhereInput
    data: XOR<WashingMachineMaintenanceUpdateManyMutationInput, WashingMachineMaintenanceUncheckedUpdateManyWithoutWashingMachineMaintenanceInput>
  }

  export type WashingMachineMaintenanceScalarWhereInput = {
    AND?: Enumerable<WashingMachineMaintenanceScalarWhereInput>
    OR?: Enumerable<WashingMachineMaintenanceScalarWhereInput>
    NOT?: Enumerable<WashingMachineMaintenanceScalarWhereInput>
    id?: IntFilter | number
    machineId?: IntFilter | number
    symptom?: StringFilter | string
    failureLevel?: IntFilter | number
    mechanicName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingUseHistoryUpsertWithWhereUniqueWithoutUseAtMachineInput = {
    where: WashingUseHistoryWhereUniqueInput
    update: XOR<WashingUseHistoryUpdateWithoutUseAtMachineInput, WashingUseHistoryUncheckedUpdateWithoutUseAtMachineInput>
    create: XOR<WashingUseHistoryCreateWithoutUseAtMachineInput, WashingUseHistoryUncheckedCreateWithoutUseAtMachineInput>
  }

  export type WashingUseHistoryUpdateWithWhereUniqueWithoutUseAtMachineInput = {
    where: WashingUseHistoryWhereUniqueInput
    data: XOR<WashingUseHistoryUpdateWithoutUseAtMachineInput, WashingUseHistoryUncheckedUpdateWithoutUseAtMachineInput>
  }

  export type WashingUseHistoryUpdateManyWithWhereWithoutUseAtMachineInput = {
    where: WashingUseHistoryScalarWhereInput
    data: XOR<WashingUseHistoryUpdateManyMutationInput, WashingUseHistoryUncheckedUpdateManyWithoutWashingUseHistoryInput>
  }

  export type WashingMachineOnProgramUpsertWithWhereUniqueWithoutMachineInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    update: XOR<WashingMachineOnProgramUpdateWithoutMachineInput, WashingMachineOnProgramUncheckedUpdateWithoutMachineInput>
    create: XOR<WashingMachineOnProgramCreateWithoutMachineInput, WashingMachineOnProgramUncheckedCreateWithoutMachineInput>
  }

  export type WashingMachineOnProgramUpdateWithWhereUniqueWithoutMachineInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    data: XOR<WashingMachineOnProgramUpdateWithoutMachineInput, WashingMachineOnProgramUncheckedUpdateWithoutMachineInput>
  }

  export type WashingMachineOnProgramUpdateManyWithWhereWithoutMachineInput = {
    where: WashingMachineOnProgramScalarWhereInput
    data: XOR<WashingMachineOnProgramUpdateManyMutationInput, WashingMachineOnProgramUncheckedUpdateManyWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineOnProgramScalarWhereInput = {
    AND?: Enumerable<WashingMachineOnProgramScalarWhereInput>
    OR?: Enumerable<WashingMachineOnProgramScalarWhereInput>
    NOT?: Enumerable<WashingMachineOnProgramScalarWhereInput>
    id?: IntFilter | number
    machineId?: IntFilter | number
    programId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingMachineCreateWithoutWashingMachineMaintenanceInput = {
    branch: WashingBranchCreateNestedOneWithoutWashingMachineInput
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineUncheckedCreateWithoutWashingMachineMaintenanceInput = {
    id?: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineCreateOrConnectWithoutWashingMachineMaintenanceInput = {
    where: WashingMachineWhereUniqueInput
    create: XOR<WashingMachineCreateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedCreateWithoutWashingMachineMaintenanceInput>
  }

  export type WashingMachineUpsertWithoutWashingMachineMaintenanceInput = {
    update: XOR<WashingMachineUpdateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedUpdateWithoutWashingMachineMaintenanceInput>
    create: XOR<WashingMachineCreateWithoutWashingMachineMaintenanceInput, WashingMachineUncheckedCreateWithoutWashingMachineMaintenanceInput>
  }

  export type WashingMachineUpdateWithoutWashingMachineMaintenanceInput = {
    branch?: WashingBranchUpdateOneRequiredWithoutWashingMachineNestedInput
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateWithoutWashingMachineMaintenanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type WashingUseHistoryCreateWithoutUseProgramInput = {
    user: WashingUserCreateNestedOneWithoutWashingUseHistoryInput
    useAtBranch: WashingBranchCreateNestedOneWithoutWashingUseHistoryInput
    useAtMachine: WashingMachineCreateNestedOneWithoutWashingUseHistoryInput
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUncheckedCreateWithoutUseProgramInput = {
    id?: number
    userId: number
    branchId: number
    machineId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateOrConnectWithoutUseProgramInput = {
    where: WashingUseHistoryWhereUniqueInput
    create: XOR<WashingUseHistoryCreateWithoutUseProgramInput, WashingUseHistoryUncheckedCreateWithoutUseProgramInput>
  }

  export type WashingUseHistoryCreateManyUseProgramInputEnvelope = {
    data: Enumerable<WashingUseHistoryCreateManyUseProgramInput>
    skipDuplicates?: boolean
  }

  export type WashingMachineOnProgramCreateWithoutProgramInput = {
    machine: WashingMachineCreateNestedOneWithoutWashingMachineOnProgramInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramUncheckedCreateWithoutProgramInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramCreateOrConnectWithoutProgramInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    create: XOR<WashingMachineOnProgramCreateWithoutProgramInput, WashingMachineOnProgramUncheckedCreateWithoutProgramInput>
  }

  export type WashingMachineOnProgramCreateManyProgramInputEnvelope = {
    data: Enumerable<WashingMachineOnProgramCreateManyProgramInput>
    skipDuplicates?: boolean
  }

  export type WashingUseHistoryUpsertWithWhereUniqueWithoutUseProgramInput = {
    where: WashingUseHistoryWhereUniqueInput
    update: XOR<WashingUseHistoryUpdateWithoutUseProgramInput, WashingUseHistoryUncheckedUpdateWithoutUseProgramInput>
    create: XOR<WashingUseHistoryCreateWithoutUseProgramInput, WashingUseHistoryUncheckedCreateWithoutUseProgramInput>
  }

  export type WashingUseHistoryUpdateWithWhereUniqueWithoutUseProgramInput = {
    where: WashingUseHistoryWhereUniqueInput
    data: XOR<WashingUseHistoryUpdateWithoutUseProgramInput, WashingUseHistoryUncheckedUpdateWithoutUseProgramInput>
  }

  export type WashingUseHistoryUpdateManyWithWhereWithoutUseProgramInput = {
    where: WashingUseHistoryScalarWhereInput
    data: XOR<WashingUseHistoryUpdateManyMutationInput, WashingUseHistoryUncheckedUpdateManyWithoutWashingUseHistoryInput>
  }

  export type WashingMachineOnProgramUpsertWithWhereUniqueWithoutProgramInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    update: XOR<WashingMachineOnProgramUpdateWithoutProgramInput, WashingMachineOnProgramUncheckedUpdateWithoutProgramInput>
    create: XOR<WashingMachineOnProgramCreateWithoutProgramInput, WashingMachineOnProgramUncheckedCreateWithoutProgramInput>
  }

  export type WashingMachineOnProgramUpdateWithWhereUniqueWithoutProgramInput = {
    where: WashingMachineOnProgramWhereUniqueInput
    data: XOR<WashingMachineOnProgramUpdateWithoutProgramInput, WashingMachineOnProgramUncheckedUpdateWithoutProgramInput>
  }

  export type WashingMachineOnProgramUpdateManyWithWhereWithoutProgramInput = {
    where: WashingMachineOnProgramScalarWhereInput
    data: XOR<WashingMachineOnProgramUpdateManyMutationInput, WashingMachineOnProgramUncheckedUpdateManyWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineCreateWithoutWashingMachineOnProgramInput = {
    branch: WashingBranchCreateNestedOneWithoutWashingMachineInput
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseAtMachineInput
  }

  export type WashingMachineUncheckedCreateWithoutWashingMachineOnProgramInput = {
    id?: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedCreateNestedManyWithoutMachineInput
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseAtMachineInput
  }

  export type WashingMachineCreateOrConnectWithoutWashingMachineOnProgramInput = {
    where: WashingMachineWhereUniqueInput
    create: XOR<WashingMachineCreateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedCreateWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineProgramCreateWithoutWashingMachineOnProgramInput = {
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUseProgramInput
  }

  export type WashingMachineProgramUncheckedCreateWithoutWashingMachineOnProgramInput = {
    id?: number
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUseProgramInput
  }

  export type WashingMachineProgramCreateOrConnectWithoutWashingMachineOnProgramInput = {
    where: WashingMachineProgramWhereUniqueInput
    create: XOR<WashingMachineProgramCreateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedCreateWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineUpsertWithoutWashingMachineOnProgramInput = {
    update: XOR<WashingMachineUpdateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedUpdateWithoutWashingMachineOnProgramInput>
    create: XOR<WashingMachineCreateWithoutWashingMachineOnProgramInput, WashingMachineUncheckedCreateWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineUpdateWithoutWashingMachineOnProgramInput = {
    branch?: WashingBranchUpdateOneRequiredWithoutWashingMachineNestedInput
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateWithoutWashingMachineOnProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtMachineNestedInput
  }

  export type WashingMachineProgramUpsertWithoutWashingMachineOnProgramInput = {
    update: XOR<WashingMachineProgramUpdateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedUpdateWithoutWashingMachineOnProgramInput>
    create: XOR<WashingMachineProgramCreateWithoutWashingMachineOnProgramInput, WashingMachineProgramUncheckedCreateWithoutWashingMachineOnProgramInput>
  }

  export type WashingMachineProgramUpdateWithoutWashingMachineOnProgramInput = {
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseProgramNestedInput
  }

  export type WashingMachineProgramUncheckedUpdateWithoutWashingMachineOnProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseProgramNestedInput
  }

  export type WashingTopUpCreateWithoutUserInput = {
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpUncheckedCreateWithoutUserInput = {
    id?: number
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpCreateOrConnectWithoutUserInput = {
    where: WashingTopUpWhereUniqueInput
    create: XOR<WashingTopUpCreateWithoutUserInput, WashingTopUpUncheckedCreateWithoutUserInput>
  }

  export type WashingTopUpCreateManyUserInputEnvelope = {
    data: Enumerable<WashingTopUpCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WashingUseHistoryCreateWithoutUserInput = {
    useAtBranch: WashingBranchCreateNestedOneWithoutWashingUseHistoryInput
    useAtMachine: WashingMachineCreateNestedOneWithoutWashingUseHistoryInput
    useProgram: WashingMachineProgramCreateNestedOneWithoutWashingUseHistoryInput
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUncheckedCreateWithoutUserInput = {
    id?: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateOrConnectWithoutUserInput = {
    where: WashingUseHistoryWhereUniqueInput
    create: XOR<WashingUseHistoryCreateWithoutUserInput, WashingUseHistoryUncheckedCreateWithoutUserInput>
  }

  export type WashingUseHistoryCreateManyUserInputEnvelope = {
    data: Enumerable<WashingUseHistoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WashingTopUpUpsertWithWhereUniqueWithoutUserInput = {
    where: WashingTopUpWhereUniqueInput
    update: XOR<WashingTopUpUpdateWithoutUserInput, WashingTopUpUncheckedUpdateWithoutUserInput>
    create: XOR<WashingTopUpCreateWithoutUserInput, WashingTopUpUncheckedCreateWithoutUserInput>
  }

  export type WashingTopUpUpdateWithWhereUniqueWithoutUserInput = {
    where: WashingTopUpWhereUniqueInput
    data: XOR<WashingTopUpUpdateWithoutUserInput, WashingTopUpUncheckedUpdateWithoutUserInput>
  }

  export type WashingTopUpUpdateManyWithWhereWithoutUserInput = {
    where: WashingTopUpScalarWhereInput
    data: XOR<WashingTopUpUpdateManyMutationInput, WashingTopUpUncheckedUpdateManyWithoutWashingTopUpInput>
  }

  export type WashingTopUpScalarWhereInput = {
    AND?: Enumerable<WashingTopUpScalarWhereInput>
    OR?: Enumerable<WashingTopUpScalarWhereInput>
    NOT?: Enumerable<WashingTopUpScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    topUpAmount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type WashingUseHistoryUpsertWithWhereUniqueWithoutUserInput = {
    where: WashingUseHistoryWhereUniqueInput
    update: XOR<WashingUseHistoryUpdateWithoutUserInput, WashingUseHistoryUncheckedUpdateWithoutUserInput>
    create: XOR<WashingUseHistoryCreateWithoutUserInput, WashingUseHistoryUncheckedCreateWithoutUserInput>
  }

  export type WashingUseHistoryUpdateWithWhereUniqueWithoutUserInput = {
    where: WashingUseHistoryWhereUniqueInput
    data: XOR<WashingUseHistoryUpdateWithoutUserInput, WashingUseHistoryUncheckedUpdateWithoutUserInput>
  }

  export type WashingUseHistoryUpdateManyWithWhereWithoutUserInput = {
    where: WashingUseHistoryScalarWhereInput
    data: XOR<WashingUseHistoryUpdateManyMutationInput, WashingUseHistoryUncheckedUpdateManyWithoutWashingUseHistoryInput>
  }

  export type WashingUserCreateWithoutWashingTopUpInput = {
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryCreateNestedManyWithoutUserInput
  }

  export type WashingUserUncheckedCreateWithoutWashingTopUpInput = {
    id?: number
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedCreateNestedManyWithoutUserInput
  }

  export type WashingUserCreateOrConnectWithoutWashingTopUpInput = {
    where: WashingUserWhereUniqueInput
    create: XOR<WashingUserCreateWithoutWashingTopUpInput, WashingUserUncheckedCreateWithoutWashingTopUpInput>
  }

  export type WashingUserUpsertWithoutWashingTopUpInput = {
    update: XOR<WashingUserUpdateWithoutWashingTopUpInput, WashingUserUncheckedUpdateWithoutWashingTopUpInput>
    create: XOR<WashingUserCreateWithoutWashingTopUpInput, WashingUserUncheckedCreateWithoutWashingTopUpInput>
  }

  export type WashingUserUpdateWithoutWashingTopUpInput = {
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUserNestedInput
  }

  export type WashingUserUncheckedUpdateWithoutWashingTopUpInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WashingUserCreateWithoutWashingUseHistoryInput = {
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingTopUp?: WashingTopUpCreateNestedManyWithoutUserInput
  }

  export type WashingUserUncheckedCreateWithoutWashingUseHistoryInput = {
    id?: number
    userName: string
    tel: string
    remainCoupon: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingTopUp?: WashingTopUpUncheckedCreateNestedManyWithoutUserInput
  }

  export type WashingUserCreateOrConnectWithoutWashingUseHistoryInput = {
    where: WashingUserWhereUniqueInput
    create: XOR<WashingUserCreateWithoutWashingUseHistoryInput, WashingUserUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingBranchCreateWithoutWashingUseHistoryInput = {
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachine?: WashingMachineCreateNestedManyWithoutBranchInput
  }

  export type WashingBranchUncheckedCreateWithoutWashingUseHistoryInput = {
    id?: number
    branchName: string
    address: string
    tel: string
    area: number
    ownerName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachine?: WashingMachineUncheckedCreateNestedManyWithoutBranchInput
  }

  export type WashingBranchCreateOrConnectWithoutWashingUseHistoryInput = {
    where: WashingBranchWhereUniqueInput
    create: XOR<WashingBranchCreateWithoutWashingUseHistoryInput, WashingBranchUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineCreateWithoutWashingUseHistoryInput = {
    branch: WashingBranchCreateNestedOneWithoutWashingMachineInput
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceCreateNestedManyWithoutMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineUncheckedCreateWithoutWashingUseHistoryInput = {
    id?: number
    branchId: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedCreateNestedManyWithoutMachineInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutMachineInput
  }

  export type WashingMachineCreateOrConnectWithoutWashingUseHistoryInput = {
    where: WashingMachineWhereUniqueInput
    create: XOR<WashingMachineCreateWithoutWashingUseHistoryInput, WashingMachineUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineProgramCreateWithoutWashingUseHistoryInput = {
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineOnProgram?: WashingMachineOnProgramCreateNestedManyWithoutProgramInput
  }

  export type WashingMachineProgramUncheckedCreateWithoutWashingUseHistoryInput = {
    id?: number
    programName: string
    price: number
    time: number
    maxWeight: number
    createdAt?: Date | string
    updatedAt?: Date | string
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedCreateNestedManyWithoutProgramInput
  }

  export type WashingMachineProgramCreateOrConnectWithoutWashingUseHistoryInput = {
    where: WashingMachineProgramWhereUniqueInput
    create: XOR<WashingMachineProgramCreateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingUserUpsertWithoutWashingUseHistoryInput = {
    update: XOR<WashingUserUpdateWithoutWashingUseHistoryInput, WashingUserUncheckedUpdateWithoutWashingUseHistoryInput>
    create: XOR<WashingUserCreateWithoutWashingUseHistoryInput, WashingUserUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingUserUpdateWithoutWashingUseHistoryInput = {
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingTopUp?: WashingTopUpUpdateManyWithoutUserNestedInput
  }

  export type WashingUserUncheckedUpdateWithoutWashingUseHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    remainCoupon?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingTopUp?: WashingTopUpUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WashingBranchUpsertWithoutWashingUseHistoryInput = {
    update: XOR<WashingBranchUpdateWithoutWashingUseHistoryInput, WashingBranchUncheckedUpdateWithoutWashingUseHistoryInput>
    create: XOR<WashingBranchCreateWithoutWashingUseHistoryInput, WashingBranchUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingBranchUpdateWithoutWashingUseHistoryInput = {
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachine?: WashingMachineUpdateManyWithoutBranchNestedInput
  }

  export type WashingBranchUncheckedUpdateWithoutWashingUseHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchName?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    area?: IntFieldUpdateOperationsInput | number
    ownerName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachine?: WashingMachineUncheckedUpdateManyWithoutBranchNestedInput
  }

  export type WashingMachineUpsertWithoutWashingUseHistoryInput = {
    update: XOR<WashingMachineUpdateWithoutWashingUseHistoryInput, WashingMachineUncheckedUpdateWithoutWashingUseHistoryInput>
    create: XOR<WashingMachineCreateWithoutWashingUseHistoryInput, WashingMachineUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineUpdateWithoutWashingUseHistoryInput = {
    branch?: WashingBranchUpdateOneRequiredWithoutWashingMachineNestedInput
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUpdateManyWithoutMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateWithoutWashingUseHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedUpdateManyWithoutMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineProgramUpsertWithoutWashingUseHistoryInput = {
    update: XOR<WashingMachineProgramUpdateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedUpdateWithoutWashingUseHistoryInput>
    create: XOR<WashingMachineProgramCreateWithoutWashingUseHistoryInput, WashingMachineProgramUncheckedCreateWithoutWashingUseHistoryInput>
  }

  export type WashingMachineProgramUpdateWithoutWashingUseHistoryInput = {
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutProgramNestedInput
  }

  export type WashingMachineProgramUncheckedUpdateWithoutWashingUseHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    programName?: StringFieldUpdateOperationsInput | string
    price?: IntFieldUpdateOperationsInput | number
    time?: IntFieldUpdateOperationsInput | number
    maxWeight?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutProgramNestedInput
  }

  export type ChanelOnUserCreateWithoutUserInput = {
    chanel: YTChanelCreateNestedOneWithoutChanelOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUncheckedCreateWithoutUserInput = {
    id?: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserCreateOrConnectWithoutUserInput = {
    where: ChanelOnUserWhereUniqueInput
    create: XOR<ChanelOnUserCreateWithoutUserInput, ChanelOnUserUncheckedCreateWithoutUserInput>
  }

  export type ChanelOnUserCreateManyUserInputEnvelope = {
    data: Enumerable<ChanelOnUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type YTAdminCreateWithoutAdminUserInput = {
    chanel: YTChanelCreateNestedOneWithoutYTAdminInput
    role: YTRoleCreateNestedOneWithoutYTAdminInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUncheckedCreateWithoutAdminUserInput = {
    id?: number
    chanelId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminCreateOrConnectWithoutAdminUserInput = {
    where: YTAdminWhereUniqueInput
    create: XOR<YTAdminCreateWithoutAdminUserInput, YTAdminUncheckedCreateWithoutAdminUserInput>
  }

  export type YTAdminCreateManyAdminUserInputEnvelope = {
    data: Enumerable<YTAdminCreateManyAdminUserInput>
    skipDuplicates?: boolean
  }

  export type YTCommentCreateWithoutCommentFromUserInput = {
    video: YTVideoCreateNestedOneWithoutYTCommentInput
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentCreateNestedManyWithoutCommentInput
  }

  export type YTCommentUncheckedCreateWithoutCommentFromUserInput = {
    id?: number
    videoId: number
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YTCommentCreateOrConnectWithoutCommentFromUserInput = {
    where: YTCommentWhereUniqueInput
    create: XOR<YTCommentCreateWithoutCommentFromUserInput, YTCommentUncheckedCreateWithoutCommentFromUserInput>
  }

  export type YTCommentCreateManyCommentFromUserInputEnvelope = {
    data: Enumerable<YTCommentCreateManyCommentFromUserInput>
    skipDuplicates?: boolean
  }

  export type YTSubCommentCreateWithoutSubCommentFromUserInput = {
    comment: YTCommentCreateNestedOneWithoutYTSubCommentInput
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentCreateOrConnectWithoutSubCommentFromUserInput = {
    where: YTSubCommentWhereUniqueInput
    create: XOR<YTSubCommentCreateWithoutSubCommentFromUserInput, YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>
  }

  export type YTSubCommentCreateManySubCommentFromUserInputEnvelope = {
    data: Enumerable<YTSubCommentCreateManySubCommentFromUserInput>
    skipDuplicates?: boolean
  }

  export type YTSubscribeCreateWithoutSubscribeUserInput = {
    chanel: YTChanelCreateNestedOneWithoutYTSubscribeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeUncheckedCreateWithoutSubscribeUserInput = {
    id?: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeCreateOrConnectWithoutSubscribeUserInput = {
    where: YTSubscribeWhereUniqueInput
    create: XOR<YTSubscribeCreateWithoutSubscribeUserInput, YTSubscribeUncheckedCreateWithoutSubscribeUserInput>
  }

  export type YTSubscribeCreateManySubscribeUserInputEnvelope = {
    data: Enumerable<YTSubscribeCreateManySubscribeUserInput>
    skipDuplicates?: boolean
  }

  export type ChanelOnUserUpsertWithWhereUniqueWithoutUserInput = {
    where: ChanelOnUserWhereUniqueInput
    update: XOR<ChanelOnUserUpdateWithoutUserInput, ChanelOnUserUncheckedUpdateWithoutUserInput>
    create: XOR<ChanelOnUserCreateWithoutUserInput, ChanelOnUserUncheckedCreateWithoutUserInput>
  }

  export type ChanelOnUserUpdateWithWhereUniqueWithoutUserInput = {
    where: ChanelOnUserWhereUniqueInput
    data: XOR<ChanelOnUserUpdateWithoutUserInput, ChanelOnUserUncheckedUpdateWithoutUserInput>
  }

  export type ChanelOnUserUpdateManyWithWhereWithoutUserInput = {
    where: ChanelOnUserScalarWhereInput
    data: XOR<ChanelOnUserUpdateManyMutationInput, ChanelOnUserUncheckedUpdateManyWithoutChanelOnUserInput>
  }

  export type ChanelOnUserScalarWhereInput = {
    AND?: Enumerable<ChanelOnUserScalarWhereInput>
    OR?: Enumerable<ChanelOnUserScalarWhereInput>
    NOT?: Enumerable<ChanelOnUserScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    chanelId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTAdminUpsertWithWhereUniqueWithoutAdminUserInput = {
    where: YTAdminWhereUniqueInput
    update: XOR<YTAdminUpdateWithoutAdminUserInput, YTAdminUncheckedUpdateWithoutAdminUserInput>
    create: XOR<YTAdminCreateWithoutAdminUserInput, YTAdminUncheckedCreateWithoutAdminUserInput>
  }

  export type YTAdminUpdateWithWhereUniqueWithoutAdminUserInput = {
    where: YTAdminWhereUniqueInput
    data: XOR<YTAdminUpdateWithoutAdminUserInput, YTAdminUncheckedUpdateWithoutAdminUserInput>
  }

  export type YTAdminUpdateManyWithWhereWithoutAdminUserInput = {
    where: YTAdminScalarWhereInput
    data: XOR<YTAdminUpdateManyMutationInput, YTAdminUncheckedUpdateManyWithoutYTAdminInput>
  }

  export type YTAdminScalarWhereInput = {
    AND?: Enumerable<YTAdminScalarWhereInput>
    OR?: Enumerable<YTAdminScalarWhereInput>
    NOT?: Enumerable<YTAdminScalarWhereInput>
    id?: IntFilter | number
    chanelId?: IntFilter | number
    adminUserId?: IntFilter | number
    roleId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTCommentUpsertWithWhereUniqueWithoutCommentFromUserInput = {
    where: YTCommentWhereUniqueInput
    update: XOR<YTCommentUpdateWithoutCommentFromUserInput, YTCommentUncheckedUpdateWithoutCommentFromUserInput>
    create: XOR<YTCommentCreateWithoutCommentFromUserInput, YTCommentUncheckedCreateWithoutCommentFromUserInput>
  }

  export type YTCommentUpdateWithWhereUniqueWithoutCommentFromUserInput = {
    where: YTCommentWhereUniqueInput
    data: XOR<YTCommentUpdateWithoutCommentFromUserInput, YTCommentUncheckedUpdateWithoutCommentFromUserInput>
  }

  export type YTCommentUpdateManyWithWhereWithoutCommentFromUserInput = {
    where: YTCommentScalarWhereInput
    data: XOR<YTCommentUpdateManyMutationInput, YTCommentUncheckedUpdateManyWithoutYTCommentInput>
  }

  export type YTCommentScalarWhereInput = {
    AND?: Enumerable<YTCommentScalarWhereInput>
    OR?: Enumerable<YTCommentScalarWhereInput>
    NOT?: Enumerable<YTCommentScalarWhereInput>
    id?: IntFilter | number
    videoId?: IntFilter | number
    commentDetail?: StringFilter | string
    commentFromUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTSubCommentUpsertWithWhereUniqueWithoutSubCommentFromUserInput = {
    where: YTSubCommentWhereUniqueInput
    update: XOR<YTSubCommentUpdateWithoutSubCommentFromUserInput, YTSubCommentUncheckedUpdateWithoutSubCommentFromUserInput>
    create: XOR<YTSubCommentCreateWithoutSubCommentFromUserInput, YTSubCommentUncheckedCreateWithoutSubCommentFromUserInput>
  }

  export type YTSubCommentUpdateWithWhereUniqueWithoutSubCommentFromUserInput = {
    where: YTSubCommentWhereUniqueInput
    data: XOR<YTSubCommentUpdateWithoutSubCommentFromUserInput, YTSubCommentUncheckedUpdateWithoutSubCommentFromUserInput>
  }

  export type YTSubCommentUpdateManyWithWhereWithoutSubCommentFromUserInput = {
    where: YTSubCommentScalarWhereInput
    data: XOR<YTSubCommentUpdateManyMutationInput, YTSubCommentUncheckedUpdateManyWithoutYTSubCommentInput>
  }

  export type YTSubCommentScalarWhereInput = {
    AND?: Enumerable<YTSubCommentScalarWhereInput>
    OR?: Enumerable<YTSubCommentScalarWhereInput>
    NOT?: Enumerable<YTSubCommentScalarWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    subCommentDetail?: StringFilter | string
    subCommentFromUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTSubscribeUpsertWithWhereUniqueWithoutSubscribeUserInput = {
    where: YTSubscribeWhereUniqueInput
    update: XOR<YTSubscribeUpdateWithoutSubscribeUserInput, YTSubscribeUncheckedUpdateWithoutSubscribeUserInput>
    create: XOR<YTSubscribeCreateWithoutSubscribeUserInput, YTSubscribeUncheckedCreateWithoutSubscribeUserInput>
  }

  export type YTSubscribeUpdateWithWhereUniqueWithoutSubscribeUserInput = {
    where: YTSubscribeWhereUniqueInput
    data: XOR<YTSubscribeUpdateWithoutSubscribeUserInput, YTSubscribeUncheckedUpdateWithoutSubscribeUserInput>
  }

  export type YTSubscribeUpdateManyWithWhereWithoutSubscribeUserInput = {
    where: YTSubscribeScalarWhereInput
    data: XOR<YTSubscribeUpdateManyMutationInput, YTSubscribeUncheckedUpdateManyWithoutYTSubscribeInput>
  }

  export type YTSubscribeScalarWhereInput = {
    AND?: Enumerable<YTSubscribeScalarWhereInput>
    OR?: Enumerable<YTSubscribeScalarWhereInput>
    NOT?: Enumerable<YTSubscribeScalarWhereInput>
    id?: IntFilter | number
    chanelId?: IntFilter | number
    subscribeUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ChanelOnUserCreateWithoutChanelInput = {
    user: YTUserCreateNestedOneWithoutChanelOnUserInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUncheckedCreateWithoutChanelInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserCreateOrConnectWithoutChanelInput = {
    where: ChanelOnUserWhereUniqueInput
    create: XOR<ChanelOnUserCreateWithoutChanelInput, ChanelOnUserUncheckedCreateWithoutChanelInput>
  }

  export type ChanelOnUserCreateManyChanelInputEnvelope = {
    data: Enumerable<ChanelOnUserCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type YTAdminCreateWithoutChanelInput = {
    adminUser: YTUserCreateNestedOneWithoutYTAdminInput
    role: YTRoleCreateNestedOneWithoutYTAdminInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUncheckedCreateWithoutChanelInput = {
    id?: number
    adminUserId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminCreateOrConnectWithoutChanelInput = {
    where: YTAdminWhereUniqueInput
    create: XOR<YTAdminCreateWithoutChanelInput, YTAdminUncheckedCreateWithoutChanelInput>
  }

  export type YTAdminCreateManyChanelInputEnvelope = {
    data: Enumerable<YTAdminCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type YTVideoCreateWithoutChanelInput = {
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTComment?: YTCommentCreateNestedManyWithoutVideoInput
  }

  export type YTVideoUncheckedCreateWithoutChanelInput = {
    id?: number
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutVideoInput
  }

  export type YTVideoCreateOrConnectWithoutChanelInput = {
    where: YTVideoWhereUniqueInput
    create: XOR<YTVideoCreateWithoutChanelInput, YTVideoUncheckedCreateWithoutChanelInput>
  }

  export type YTVideoCreateManyChanelInputEnvelope = {
    data: Enumerable<YTVideoCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type YTSubscribeCreateWithoutChanelInput = {
    subscribeUser: YTUserCreateNestedOneWithoutYTSubscribeInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeUncheckedCreateWithoutChanelInput = {
    id?: number
    subscribeUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeCreateOrConnectWithoutChanelInput = {
    where: YTSubscribeWhereUniqueInput
    create: XOR<YTSubscribeCreateWithoutChanelInput, YTSubscribeUncheckedCreateWithoutChanelInput>
  }

  export type YTSubscribeCreateManyChanelInputEnvelope = {
    data: Enumerable<YTSubscribeCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type ChanelOnUserUpsertWithWhereUniqueWithoutChanelInput = {
    where: ChanelOnUserWhereUniqueInput
    update: XOR<ChanelOnUserUpdateWithoutChanelInput, ChanelOnUserUncheckedUpdateWithoutChanelInput>
    create: XOR<ChanelOnUserCreateWithoutChanelInput, ChanelOnUserUncheckedCreateWithoutChanelInput>
  }

  export type ChanelOnUserUpdateWithWhereUniqueWithoutChanelInput = {
    where: ChanelOnUserWhereUniqueInput
    data: XOR<ChanelOnUserUpdateWithoutChanelInput, ChanelOnUserUncheckedUpdateWithoutChanelInput>
  }

  export type ChanelOnUserUpdateManyWithWhereWithoutChanelInput = {
    where: ChanelOnUserScalarWhereInput
    data: XOR<ChanelOnUserUpdateManyMutationInput, ChanelOnUserUncheckedUpdateManyWithoutChanelOnUserInput>
  }

  export type YTAdminUpsertWithWhereUniqueWithoutChanelInput = {
    where: YTAdminWhereUniqueInput
    update: XOR<YTAdminUpdateWithoutChanelInput, YTAdminUncheckedUpdateWithoutChanelInput>
    create: XOR<YTAdminCreateWithoutChanelInput, YTAdminUncheckedCreateWithoutChanelInput>
  }

  export type YTAdminUpdateWithWhereUniqueWithoutChanelInput = {
    where: YTAdminWhereUniqueInput
    data: XOR<YTAdminUpdateWithoutChanelInput, YTAdminUncheckedUpdateWithoutChanelInput>
  }

  export type YTAdminUpdateManyWithWhereWithoutChanelInput = {
    where: YTAdminScalarWhereInput
    data: XOR<YTAdminUpdateManyMutationInput, YTAdminUncheckedUpdateManyWithoutYTAdminInput>
  }

  export type YTVideoUpsertWithWhereUniqueWithoutChanelInput = {
    where: YTVideoWhereUniqueInput
    update: XOR<YTVideoUpdateWithoutChanelInput, YTVideoUncheckedUpdateWithoutChanelInput>
    create: XOR<YTVideoCreateWithoutChanelInput, YTVideoUncheckedCreateWithoutChanelInput>
  }

  export type YTVideoUpdateWithWhereUniqueWithoutChanelInput = {
    where: YTVideoWhereUniqueInput
    data: XOR<YTVideoUpdateWithoutChanelInput, YTVideoUncheckedUpdateWithoutChanelInput>
  }

  export type YTVideoUpdateManyWithWhereWithoutChanelInput = {
    where: YTVideoScalarWhereInput
    data: XOR<YTVideoUpdateManyMutationInput, YTVideoUncheckedUpdateManyWithoutYTVideoInput>
  }

  export type YTVideoScalarWhereInput = {
    AND?: Enumerable<YTVideoScalarWhereInput>
    OR?: Enumerable<YTVideoScalarWhereInput>
    NOT?: Enumerable<YTVideoScalarWhereInput>
    id?: IntFilter | number
    chanelId?: IntFilter | number
    videoLink?: StringFilter | string
    description?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTSubscribeUpsertWithWhereUniqueWithoutChanelInput = {
    where: YTSubscribeWhereUniqueInput
    update: XOR<YTSubscribeUpdateWithoutChanelInput, YTSubscribeUncheckedUpdateWithoutChanelInput>
    create: XOR<YTSubscribeCreateWithoutChanelInput, YTSubscribeUncheckedCreateWithoutChanelInput>
  }

  export type YTSubscribeUpdateWithWhereUniqueWithoutChanelInput = {
    where: YTSubscribeWhereUniqueInput
    data: XOR<YTSubscribeUpdateWithoutChanelInput, YTSubscribeUncheckedUpdateWithoutChanelInput>
  }

  export type YTSubscribeUpdateManyWithWhereWithoutChanelInput = {
    where: YTSubscribeScalarWhereInput
    data: XOR<YTSubscribeUpdateManyMutationInput, YTSubscribeUncheckedUpdateManyWithoutYTSubscribeInput>
  }

  export type YTUserCreateWithoutChanelOnUserInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUncheckedCreateWithoutChanelOnUserInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserCreateOrConnectWithoutChanelOnUserInput = {
    where: YTUserWhereUniqueInput
    create: XOR<YTUserCreateWithoutChanelOnUserInput, YTUserUncheckedCreateWithoutChanelOnUserInput>
  }

  export type YTChanelCreateWithoutChanelOnUserInput = {
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUncheckedCreateWithoutChanelOnUserInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoUncheckedCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YTChanelCreateOrConnectWithoutChanelOnUserInput = {
    where: YTChanelWhereUniqueInput
    create: XOR<YTChanelCreateWithoutChanelOnUserInput, YTChanelUncheckedCreateWithoutChanelOnUserInput>
  }

  export type YTUserUpsertWithoutChanelOnUserInput = {
    update: XOR<YTUserUpdateWithoutChanelOnUserInput, YTUserUncheckedUpdateWithoutChanelOnUserInput>
    create: XOR<YTUserCreateWithoutChanelOnUserInput, YTUserUncheckedCreateWithoutChanelOnUserInput>
  }

  export type YTUserUpdateWithoutChanelOnUserInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserUncheckedUpdateWithoutChanelOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTChanelUpsertWithoutChanelOnUserInput = {
    update: XOR<YTChanelUpdateWithoutChanelOnUserInput, YTChanelUncheckedUpdateWithoutChanelOnUserInput>
    create: XOR<YTChanelCreateWithoutChanelOnUserInput, YTChanelUncheckedCreateWithoutChanelOnUserInput>
  }

  export type YTChanelUpdateWithoutChanelOnUserInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelUncheckedUpdateWithoutChanelOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUncheckedUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelCreateWithoutYTAdminInput = {
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUncheckedCreateWithoutYTAdminInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoUncheckedCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YTChanelCreateOrConnectWithoutYTAdminInput = {
    where: YTChanelWhereUniqueInput
    create: XOR<YTChanelCreateWithoutYTAdminInput, YTChanelUncheckedCreateWithoutYTAdminInput>
  }

  export type YTUserCreateWithoutYTAdminInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutUserInput
    YTComment?: YTCommentCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUncheckedCreateWithoutYTAdminInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutUserInput
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserCreateOrConnectWithoutYTAdminInput = {
    where: YTUserWhereUniqueInput
    create: XOR<YTUserCreateWithoutYTAdminInput, YTUserUncheckedCreateWithoutYTAdminInput>
  }

  export type YTRoleCreateWithoutYTAdminInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTRolePermission?: YTRolePermissionCreateNestedManyWithoutRoldidInput
  }

  export type YTRoleUncheckedCreateWithoutYTAdminInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTRolePermission?: YTRolePermissionUncheckedCreateNestedManyWithoutRoldidInput
  }

  export type YTRoleCreateOrConnectWithoutYTAdminInput = {
    where: YTRoleWhereUniqueInput
    create: XOR<YTRoleCreateWithoutYTAdminInput, YTRoleUncheckedCreateWithoutYTAdminInput>
  }

  export type YTChanelUpsertWithoutYTAdminInput = {
    update: XOR<YTChanelUpdateWithoutYTAdminInput, YTChanelUncheckedUpdateWithoutYTAdminInput>
    create: XOR<YTChanelCreateWithoutYTAdminInput, YTChanelUncheckedCreateWithoutYTAdminInput>
  }

  export type YTChanelUpdateWithoutYTAdminInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelUncheckedUpdateWithoutYTAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUncheckedUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type YTUserUpsertWithoutYTAdminInput = {
    update: XOR<YTUserUpdateWithoutYTAdminInput, YTUserUncheckedUpdateWithoutYTAdminInput>
    create: XOR<YTUserCreateWithoutYTAdminInput, YTUserUncheckedCreateWithoutYTAdminInput>
  }

  export type YTUserUpdateWithoutYTAdminInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutUserNestedInput
    YTComment?: YTCommentUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserUncheckedUpdateWithoutYTAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput
    YTComment?: YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTRoleUpsertWithoutYTAdminInput = {
    update: XOR<YTRoleUpdateWithoutYTAdminInput, YTRoleUncheckedUpdateWithoutYTAdminInput>
    create: XOR<YTRoleCreateWithoutYTAdminInput, YTRoleUncheckedCreateWithoutYTAdminInput>
  }

  export type YTRoleUpdateWithoutYTAdminInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTRolePermission?: YTRolePermissionUpdateManyWithoutRoldidNestedInput
  }

  export type YTRoleUncheckedUpdateWithoutYTAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTRolePermission?: YTRolePermissionUncheckedUpdateManyWithoutRoldidNestedInput
  }

  export type YTAdminCreateWithoutRoleInput = {
    chanel: YTChanelCreateNestedOneWithoutYTAdminInput
    adminUser: YTUserCreateNestedOneWithoutYTAdminInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUncheckedCreateWithoutRoleInput = {
    id?: number
    chanelId: number
    adminUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminCreateOrConnectWithoutRoleInput = {
    where: YTAdminWhereUniqueInput
    create: XOR<YTAdminCreateWithoutRoleInput, YTAdminUncheckedCreateWithoutRoleInput>
  }

  export type YTAdminCreateManyRoleInputEnvelope = {
    data: Enumerable<YTAdminCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type YTRolePermissionCreateWithoutRoldidInput = {
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionUncheckedCreateWithoutRoldidInput = {
    id?: number
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionCreateOrConnectWithoutRoldidInput = {
    where: YTRolePermissionWhereUniqueInput
    create: XOR<YTRolePermissionCreateWithoutRoldidInput, YTRolePermissionUncheckedCreateWithoutRoldidInput>
  }

  export type YTRolePermissionCreateManyRoldidInputEnvelope = {
    data: Enumerable<YTRolePermissionCreateManyRoldidInput>
    skipDuplicates?: boolean
  }

  export type YTAdminUpsertWithWhereUniqueWithoutRoleInput = {
    where: YTAdminWhereUniqueInput
    update: XOR<YTAdminUpdateWithoutRoleInput, YTAdminUncheckedUpdateWithoutRoleInput>
    create: XOR<YTAdminCreateWithoutRoleInput, YTAdminUncheckedCreateWithoutRoleInput>
  }

  export type YTAdminUpdateWithWhereUniqueWithoutRoleInput = {
    where: YTAdminWhereUniqueInput
    data: XOR<YTAdminUpdateWithoutRoleInput, YTAdminUncheckedUpdateWithoutRoleInput>
  }

  export type YTAdminUpdateManyWithWhereWithoutRoleInput = {
    where: YTAdminScalarWhereInput
    data: XOR<YTAdminUpdateManyMutationInput, YTAdminUncheckedUpdateManyWithoutYTAdminInput>
  }

  export type YTRolePermissionUpsertWithWhereUniqueWithoutRoldidInput = {
    where: YTRolePermissionWhereUniqueInput
    update: XOR<YTRolePermissionUpdateWithoutRoldidInput, YTRolePermissionUncheckedUpdateWithoutRoldidInput>
    create: XOR<YTRolePermissionCreateWithoutRoldidInput, YTRolePermissionUncheckedCreateWithoutRoldidInput>
  }

  export type YTRolePermissionUpdateWithWhereUniqueWithoutRoldidInput = {
    where: YTRolePermissionWhereUniqueInput
    data: XOR<YTRolePermissionUpdateWithoutRoldidInput, YTRolePermissionUncheckedUpdateWithoutRoldidInput>
  }

  export type YTRolePermissionUpdateManyWithWhereWithoutRoldidInput = {
    where: YTRolePermissionScalarWhereInput
    data: XOR<YTRolePermissionUpdateManyMutationInput, YTRolePermissionUncheckedUpdateManyWithoutYTRolePermissionInput>
  }

  export type YTRolePermissionScalarWhereInput = {
    AND?: Enumerable<YTRolePermissionScalarWhereInput>
    OR?: Enumerable<YTRolePermissionScalarWhereInput>
    NOT?: Enumerable<YTRolePermissionScalarWhereInput>
    id?: IntFilter | number
    roleId?: IntFilter | number
    permissionName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YTRoleCreateWithoutYTRolePermissionInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminCreateNestedManyWithoutRoleInput
  }

  export type YTRoleUncheckedCreateWithoutYTRolePermissionInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutRoleInput
  }

  export type YTRoleCreateOrConnectWithoutYTRolePermissionInput = {
    where: YTRoleWhereUniqueInput
    create: XOR<YTRoleCreateWithoutYTRolePermissionInput, YTRoleUncheckedCreateWithoutYTRolePermissionInput>
  }

  export type YTRoleUpsertWithoutYTRolePermissionInput = {
    update: XOR<YTRoleUpdateWithoutYTRolePermissionInput, YTRoleUncheckedUpdateWithoutYTRolePermissionInput>
    create: XOR<YTRoleCreateWithoutYTRolePermissionInput, YTRoleUncheckedCreateWithoutYTRolePermissionInput>
  }

  export type YTRoleUpdateWithoutYTRolePermissionInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUpdateManyWithoutRoleNestedInput
  }

  export type YTRoleUncheckedUpdateWithoutYTRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type YTChanelCreateWithoutYTSubscribeInput = {
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUncheckedCreateWithoutYTSubscribeInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutChanelInput
    YTVideo?: YTVideoUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YTChanelCreateOrConnectWithoutYTSubscribeInput = {
    where: YTChanelWhereUniqueInput
    create: XOR<YTChanelCreateWithoutYTSubscribeInput, YTChanelUncheckedCreateWithoutYTSubscribeInput>
  }

  export type YTUserCreateWithoutYTSubscribeInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput
  }

  export type YTUserUncheckedCreateWithoutYTSubscribeInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput
  }

  export type YTUserCreateOrConnectWithoutYTSubscribeInput = {
    where: YTUserWhereUniqueInput
    create: XOR<YTUserCreateWithoutYTSubscribeInput, YTUserUncheckedCreateWithoutYTSubscribeInput>
  }

  export type YTChanelUpsertWithoutYTSubscribeInput = {
    update: XOR<YTChanelUpdateWithoutYTSubscribeInput, YTChanelUncheckedUpdateWithoutYTSubscribeInput>
    create: XOR<YTChanelCreateWithoutYTSubscribeInput, YTChanelUncheckedCreateWithoutYTSubscribeInput>
  }

  export type YTChanelUpdateWithoutYTSubscribeInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelUncheckedUpdateWithoutYTSubscribeInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutChanelNestedInput
    YTVideo?: YTVideoUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type YTUserUpsertWithoutYTSubscribeInput = {
    update: XOR<YTUserUpdateWithoutYTSubscribeInput, YTUserUncheckedUpdateWithoutYTSubscribeInput>
    create: XOR<YTUserCreateWithoutYTSubscribeInput, YTUserUncheckedCreateWithoutYTSubscribeInput>
  }

  export type YTUserUpdateWithoutYTSubscribeInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput
  }

  export type YTUserUncheckedUpdateWithoutYTSubscribeInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput
  }

  export type YTChanelCreateWithoutYTVideoInput = {
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutChanelInput
  }

  export type YTChanelUncheckedCreateWithoutYTVideoInput = {
    id?: number
    chaneName: string
    image?: string | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutChanelInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutChanelInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YTChanelCreateOrConnectWithoutYTVideoInput = {
    where: YTChanelWhereUniqueInput
    create: XOR<YTChanelCreateWithoutYTVideoInput, YTChanelUncheckedCreateWithoutYTVideoInput>
  }

  export type YTCommentCreateWithoutVideoInput = {
    commentDetail: string
    commentFromUser: YTUserCreateNestedOneWithoutYTCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentCreateNestedManyWithoutCommentInput
  }

  export type YTCommentUncheckedCreateWithoutVideoInput = {
    id?: number
    commentDetail: string
    commentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YTCommentCreateOrConnectWithoutVideoInput = {
    where: YTCommentWhereUniqueInput
    create: XOR<YTCommentCreateWithoutVideoInput, YTCommentUncheckedCreateWithoutVideoInput>
  }

  export type YTCommentCreateManyVideoInputEnvelope = {
    data: Enumerable<YTCommentCreateManyVideoInput>
    skipDuplicates?: boolean
  }

  export type YTChanelUpsertWithoutYTVideoInput = {
    update: XOR<YTChanelUpdateWithoutYTVideoInput, YTChanelUncheckedUpdateWithoutYTVideoInput>
    create: XOR<YTChanelCreateWithoutYTVideoInput, YTChanelUncheckedCreateWithoutYTVideoInput>
  }

  export type YTChanelUpdateWithoutYTVideoInput = {
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutChanelNestedInput
  }

  export type YTChanelUncheckedUpdateWithoutYTVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    chaneName?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutChanelNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutChanelNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type YTCommentUpsertWithWhereUniqueWithoutVideoInput = {
    where: YTCommentWhereUniqueInput
    update: XOR<YTCommentUpdateWithoutVideoInput, YTCommentUncheckedUpdateWithoutVideoInput>
    create: XOR<YTCommentCreateWithoutVideoInput, YTCommentUncheckedCreateWithoutVideoInput>
  }

  export type YTCommentUpdateWithWhereUniqueWithoutVideoInput = {
    where: YTCommentWhereUniqueInput
    data: XOR<YTCommentUpdateWithoutVideoInput, YTCommentUncheckedUpdateWithoutVideoInput>
  }

  export type YTCommentUpdateManyWithWhereWithoutVideoInput = {
    where: YTCommentScalarWhereInput
    data: XOR<YTCommentUpdateManyMutationInput, YTCommentUncheckedUpdateManyWithoutYTCommentInput>
  }

  export type YTVideoCreateWithoutYTCommentInput = {
    chanel: YTChanelCreateNestedOneWithoutYTVideoInput
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTVideoUncheckedCreateWithoutYTCommentInput = {
    id?: number
    chanelId: number
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTVideoCreateOrConnectWithoutYTCommentInput = {
    where: YTVideoWhereUniqueInput
    create: XOR<YTVideoCreateWithoutYTCommentInput, YTVideoUncheckedCreateWithoutYTCommentInput>
  }

  export type YTUserCreateWithoutYTCommentInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminCreateNestedManyWithoutAdminUserInput
    YTSubComment?: YTSubCommentCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUncheckedCreateWithoutYTCommentInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutAdminUserInput
    YTSubComment?: YTSubCommentUncheckedCreateNestedManyWithoutSubCommentFromUserInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserCreateOrConnectWithoutYTCommentInput = {
    where: YTUserWhereUniqueInput
    create: XOR<YTUserCreateWithoutYTCommentInput, YTUserUncheckedCreateWithoutYTCommentInput>
  }

  export type YTSubCommentCreateWithoutCommentInput = {
    subCommentDetail: string
    subCommentFromUser: YTUserCreateNestedOneWithoutYTSubCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUncheckedCreateWithoutCommentInput = {
    id?: number
    subCommentDetail: string
    subCommentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentCreateOrConnectWithoutCommentInput = {
    where: YTSubCommentWhereUniqueInput
    create: XOR<YTSubCommentCreateWithoutCommentInput, YTSubCommentUncheckedCreateWithoutCommentInput>
  }

  export type YTSubCommentCreateManyCommentInputEnvelope = {
    data: Enumerable<YTSubCommentCreateManyCommentInput>
    skipDuplicates?: boolean
  }

  export type YTVideoUpsertWithoutYTCommentInput = {
    update: XOR<YTVideoUpdateWithoutYTCommentInput, YTVideoUncheckedUpdateWithoutYTCommentInput>
    create: XOR<YTVideoCreateWithoutYTCommentInput, YTVideoUncheckedCreateWithoutYTCommentInput>
  }

  export type YTVideoUpdateWithoutYTCommentInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTVideoNestedInput
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTVideoUncheckedUpdateWithoutYTCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTUserUpsertWithoutYTCommentInput = {
    update: XOR<YTUserUpdateWithoutYTCommentInput, YTUserUncheckedUpdateWithoutYTCommentInput>
    create: XOR<YTUserCreateWithoutYTCommentInput, YTUserUncheckedCreateWithoutYTCommentInput>
  }

  export type YTUserUpdateWithoutYTCommentInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutAdminUserNestedInput
    YTSubComment?: YTSubCommentUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserUncheckedUpdateWithoutYTCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutSubCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTSubCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: YTSubCommentWhereUniqueInput
    update: XOR<YTSubCommentUpdateWithoutCommentInput, YTSubCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<YTSubCommentCreateWithoutCommentInput, YTSubCommentUncheckedCreateWithoutCommentInput>
  }

  export type YTSubCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: YTSubCommentWhereUniqueInput
    data: XOR<YTSubCommentUpdateWithoutCommentInput, YTSubCommentUncheckedUpdateWithoutCommentInput>
  }

  export type YTSubCommentUpdateManyWithWhereWithoutCommentInput = {
    where: YTSubCommentScalarWhereInput
    data: XOR<YTSubCommentUpdateManyMutationInput, YTSubCommentUncheckedUpdateManyWithoutYTSubCommentInput>
  }

  export type YTCommentCreateWithoutYTSubCommentInput = {
    video: YTVideoCreateNestedOneWithoutYTCommentInput
    commentDetail: string
    commentFromUser: YTUserCreateNestedOneWithoutYTCommentInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTCommentUncheckedCreateWithoutYTSubCommentInput = {
    id?: number
    videoId: number
    commentDetail: string
    commentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTCommentCreateOrConnectWithoutYTSubCommentInput = {
    where: YTCommentWhereUniqueInput
    create: XOR<YTCommentCreateWithoutYTSubCommentInput, YTCommentUncheckedCreateWithoutYTSubCommentInput>
  }

  export type YTUserCreateWithoutYTSubCommentInput = {
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentCreateNestedManyWithoutCommentFromUserInput
    YTSubscribe?: YTSubscribeCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserUncheckedCreateWithoutYTSubCommentInput = {
    id?: number
    userName: string
    profileImage: string
    email: string
    bio: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ChanelOnUser?: ChanelOnUserUncheckedCreateNestedManyWithoutUserInput
    YTAdmin?: YTAdminUncheckedCreateNestedManyWithoutAdminUserInput
    YTComment?: YTCommentUncheckedCreateNestedManyWithoutCommentFromUserInput
    YTSubscribe?: YTSubscribeUncheckedCreateNestedManyWithoutSubscribeUserInput
  }

  export type YTUserCreateOrConnectWithoutYTSubCommentInput = {
    where: YTUserWhereUniqueInput
    create: XOR<YTUserCreateWithoutYTSubCommentInput, YTUserUncheckedCreateWithoutYTSubCommentInput>
  }

  export type YTCommentUpsertWithoutYTSubCommentInput = {
    update: XOR<YTCommentUpdateWithoutYTSubCommentInput, YTCommentUncheckedUpdateWithoutYTSubCommentInput>
    create: XOR<YTCommentCreateWithoutYTSubCommentInput, YTCommentUncheckedCreateWithoutYTSubCommentInput>
  }

  export type YTCommentUpdateWithoutYTSubCommentInput = {
    video?: YTVideoUpdateOneRequiredWithoutYTCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUser?: YTUserUpdateOneRequiredWithoutYTCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTCommentUncheckedUpdateWithoutYTSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTUserUpsertWithoutYTSubCommentInput = {
    update: XOR<YTUserUpdateWithoutYTSubCommentInput, YTUserUncheckedUpdateWithoutYTSubCommentInput>
    create: XOR<YTUserCreateWithoutYTSubCommentInput, YTUserUncheckedCreateWithoutYTSubCommentInput>
  }

  export type YTUserUpdateWithoutYTSubCommentInput = {
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUpdateManyWithoutCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUpdateManyWithoutSubscribeUserNestedInput
  }

  export type YTUserUncheckedUpdateWithoutYTSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userName?: StringFieldUpdateOperationsInput | string
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    bio?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ChanelOnUser?: ChanelOnUserUncheckedUpdateManyWithoutUserNestedInput
    YTAdmin?: YTAdminUncheckedUpdateManyWithoutAdminUserNestedInput
    YTComment?: YTCommentUncheckedUpdateManyWithoutCommentFromUserNestedInput
    YTSubscribe?: YTSubscribeUncheckedUpdateManyWithoutSubscribeUserNestedInput
  }

  export type BinKitchenMenuCreateManyCategoryInput = {
    id?: number
    name: string
    image: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUpdateManyWithoutMenuNestedInput
  }

  export type BinKitchenMenuUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BinKitchenOrderItem?: BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput
  }

  export type BinKitchenMenuUncheckedUpdateManyWithoutBinKitchenMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyMenuInput = {
    id?: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateWithoutMenuInput = {
    order?: BinKitchenOrderUpdateOneWithoutBinKitchenOrderItemNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutBinKitchenOrderItemInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyOrderInput = {
    id?: number
    menuId: number
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateWithoutOrderInput = {
    menu?: BinKitchenMenuUpdateOneRequiredWithoutBinKitchenOrderItemNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsCreateManyFromInput = {
    id?: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsCreateManyToInput = {
    id?: number
    fromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentCreateManyFromUserIdInput = {
    id?: number
    postId: number
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentCreateManyFromUserIdInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserCreateManyUserInput = {
    id?: number
    groupId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateManyFromUserIdInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareCreateManyFromUserIdInput = {
    id?: number
    postId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgCreateManyFromInput = {
    id?: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBDirectMsgCreateManyToInput = {
    id?: number
    fromUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostCreateManyPostByUserInput = {
    id?: number
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostCreateManyPostInUserInput = {
    id?: number
    postByUserId?: number | null
    postDetail?: string | null
    image?: string | null
    groupId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FriendsUpdateWithoutFromInput = {
    to?: FBUserUpdateOneRequiredWithoutToFriendsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateWithoutFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateManyWithoutFromFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUpdateWithoutToInput = {
    from?: FBUserUpdateOneRequiredWithoutFromFriendsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateWithoutToInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FriendsUncheckedUpdateManyWithoutToFriendsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUpdateWithoutFromUserIdInput = {
    post?: FBPostUpdateOneRequiredWithoutCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutFromUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUpdateWithoutFromUserIdInput = {
    comment?: CommentUpdateOneRequiredWithoutSubCommentNestedInput
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUncheckedUpdateWithoutFromUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUncheckedUpdateManyWithoutSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUpdateWithoutUserInput = {
    group?: GroupUpdateOneRequiredWithoutGroupOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUncheckedUpdateManyWithoutGroupOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutFromUserIdInput = {
    post?: FBPostUpdateOneRequiredWithoutLikeNestedInput
    likeType?: LikeTypeUpdateOneRequiredWithoutLikeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateWithoutFromUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateManyWithoutLikeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUpdateWithoutFromUserIdInput = {
    post?: FBPostUpdateOneRequiredWithoutShareNestedInput
    shareStatus?: ShareStatusUpdateOneRequiredWithoutShareNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateWithoutFromUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    shareStatusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateManyWithoutShareInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    shareStatusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUpdateWithoutFromInput = {
    to?: FBUserUpdateOneRequiredWithoutToDirectMsgNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateWithoutFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateManyWithoutFromDirectMsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUpdateWithoutToInput = {
    from?: FBUserUpdateOneRequiredWithoutFromDirectMsgNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateWithoutToInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBDirectMsgUncheckedUpdateManyWithoutToDirectMsgInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostUpdateWithoutPostByUserInput = {
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutPostByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateManyWithoutPostByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostUpdateWithoutPostInUserInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    group?: GroupUpdateOneWithoutFBPostNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutPostInUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateManyWithoutPostInUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyPostInput = {
    id?: number
    commentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeCreateManyPostInput = {
    id?: number
    userId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareCreateManyPostInput = {
    id?: number
    userId: number
    shareStatusId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagCreateManyPostInput = {
    id?: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CommentUpdateWithoutPostInput = {
    commentDetail?: StringFieldUpdateOperationsInput | string
    fromUserId?: FBUserUpdateOneRequiredWithoutCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    SubComment?: SubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type LikeUpdateWithoutPostInput = {
    fromUserId?: FBUserUpdateOneRequiredWithoutLikeNestedInput
    likeType?: LikeTypeUpdateOneRequiredWithoutLikeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUpdateWithoutPostInput = {
    fromUserId?: FBUserUpdateOneRequiredWithoutShareNestedInput
    shareStatus?: ShareStatusUpdateOneRequiredWithoutShareNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    shareStatusId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUpdateWithoutPostInput = {
    hashtag?: FBHashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentCreateManyCommentInput = {
    id?: number
    subCommentDetail: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubCommentUpdateWithoutCommentInput = {
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    fromUserId?: FBUserUpdateOneRequiredWithoutSubCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubCommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserCreateManyGroupInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostCreateManyGroupInput = {
    id?: number
    postByUserId?: number | null
    postInUserId?: number | null
    postDetail?: string | null
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOnUserUpdateWithoutGroupInput = {
    user?: FBUserUpdateOneRequiredWithoutGroupOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOnUserUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostUpdateWithoutGroupInput = {
    postByUser?: FBUserUpdateOneWithoutPostByUserNestedInput
    postInUser?: FBUserUpdateOneWithoutPostInUserNestedInput
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUpdateManyWithoutPostNestedInput
    Like?: LikeUpdateManyWithoutPostNestedInput
    Share?: ShareUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Comment?: CommentUncheckedUpdateManyWithoutPostNestedInput
    Like?: LikeUncheckedUpdateManyWithoutPostNestedInput
    Share?: ShareUncheckedUpdateManyWithoutPostNestedInput
    PostOnHashtag?: FBPostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FBPostUncheckedUpdateManyWithoutFBPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    postByUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postInUserId?: NullableIntFieldUpdateOperationsInput | number | null
    postDetail?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateManyLikeTypeInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LikeUpdateWithoutLikeTypeInput = {
    post?: FBPostUpdateOneRequiredWithoutLikeNestedInput
    fromUserId?: FBUserUpdateOneRequiredWithoutLikeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUncheckedUpdateWithoutLikeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareCreateManyShareStatusInput = {
    id?: number
    postId: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareUpdateWithoutShareStatusInput = {
    post?: FBPostUpdateOneRequiredWithoutShareNestedInput
    fromUserId?: FBUserUpdateOneRequiredWithoutShareNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUncheckedUpdateWithoutShareStatusInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagCreateManyHashtagInput = {
    id?: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FBPostOnHashtagUpdateWithoutHashtagInput = {
    post?: FBPostUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FBPostOnHashtagUncheckedUpdateWithoutHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCreateManyUniversityInput = {
    id?: number
    name: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookCopyCreateManyAtUniversityInput = {
    id?: number
    bookId: number
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateManyFromUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateManyToUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    fromUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateManyBorrowFromUniversityInput = {
    id?: number
    studentId: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookUpdateWithoutUniversityInput = {
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateWithoutUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    libraryBookCopy?: LibraryBookCopyUncheckedUpdateManyWithoutBookNestedInput
    bookOnAuthor?: BookOnAuthorUncheckedUpdateManyWithoutBookNestedInput
    bookOnCategory?: BookOnCategoryUncheckedUpdateManyWithoutBookNestedInput
  }

  export type LibraryBookUncheckedUpdateManyWithoutLibraryBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCopyUpdateWithoutAtUniversityInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutAtUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateManyWithoutLibraryBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUpdateWithoutFromUniversityInput = {
    student?: LibraryStudentUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    toUniversity?: LibraryUniversityUpdateOneRequiredWithoutToUniversityNestedInput
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateWithoutFromUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutFromUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUpdateWithoutToUniversityInput = {
    student?: LibraryStudentUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    fromUniversity?: LibraryUniversityUpdateOneRequiredWithoutFromUniversityNestedInput
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateWithoutToUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutToUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUpdateWithoutBorrowFromUniversityInput = {
    stident?: LibraryStudentUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateWithoutBorrowFromUniversityInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateManyWithoutLibraryStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCopyCreateManyCurrentBorrowByStudentInput = {
    id?: number
    bookId: number
    atUniversityId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyCreateManyOnceBorrowByStudentInput = {
    id?: number
    copyId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateManyStudentInput = {
    id?: number
    bookCopyId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateManyStidentInput = {
    id?: number
    bookCopyId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookCopyUpdateWithoutCurrentBorrowByStudentInput = {
    book?: LibraryBookUpdateOneRequiredWithoutLibraryBookCopyNestedInput
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutCurrentBorrowByStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryHistoryOfBookCopyUpdateWithoutOnceBorrowByStudentInput = {
    copy?: LibraryBookCopyUpdateOneRequiredWithoutHistoryOfBookCopyNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateWithoutOnceBorrowByStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    copyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutHistoryOfBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    copyId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUpdateWithoutStudentInput = {
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    fromUniversity?: LibraryUniversityUpdateOneRequiredWithoutFromUniversityNestedInput
    toUniversity?: LibraryUniversityUpdateOneRequiredWithoutToUniversityNestedInput
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateManyWithoutLibraryHistoryOfStudentBorrowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUpdateWithoutStidentInput = {
    bookCopy?: LibraryBookCopyUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversity?: LibraryUniversityUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateWithoutStidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookCopyId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversityId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryBookCopyCreateManyBookInput = {
    id?: number
    atUniversityId?: number | null
    currentBorrowBytudentId?: number | null
    status: string
    isbn: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorCreateManyBookInput = {
    id?: number
    authorId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryCreateManyBookInput = {
    id?: number
    categoryId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryBookCopyUpdateWithoutBookInput = {
    atUniversity?: LibraryUniversityUpdateOneWithoutLibraryBookCopyNestedInput
    currentBorrowByStudent?: LibraryStudentUpdateOneWithoutLibraryBookCopyNestedInput
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUpdateManyWithoutBookCopyNestedInput
  }

  export type LibraryBookCopyUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    atUniversityId?: NullableIntFieldUpdateOperationsInput | number | null
    currentBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    isbn?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historyOfBookCopy?: LibraryHistoryOfBookCopyUncheckedUpdateManyWithoutCopyNestedInput
    libraryHistoryOfStudentBorrowing?: LibraryStudentRequestUncheckedUpdateManyWithoutBookCopyNestedInput
    libraryStudentBorrowing?: LibraryStudentBorrowingUncheckedUpdateManyWithoutBookCopyNestedInput
  }

  export type BookOnAuthorUpdateWithoutBookInput = {
    author?: LibraryAuthorUpdateOneRequiredWithoutBookOnAuthorNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorUncheckedUpdateManyWithoutBookOnAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    authorId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUpdateWithoutBookInput = {
    category?: LibraryCategoryUpdateOneRequiredWithoutBookOnCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUncheckedUpdateWithoutBookInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUncheckedUpdateManyWithoutBookOnCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyCreateManyCopyInput = {
    id?: number
    oncetBorrowBytudentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentRequestCreateManyBookCopyInput = {
    id?: number
    studentId: number
    fromUniversityId: number
    toUniversityId: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryStudentBorrowingCreateManyBookCopyInput = {
    id?: number
    studentId: number
    borrowingDate: Date | string
    targetReturnDate: Date | string
    actualReturnDate?: Date | string | null
    borrowFromUniversityId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LibraryHistoryOfBookCopyUpdateWithoutCopyInput = {
    onceBorrowByStudent?: LibraryStudentUpdateOneWithoutHistoryOfBookCopyNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryHistoryOfBookCopyUncheckedUpdateWithoutCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    oncetBorrowBytudentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUpdateWithoutBookCopyInput = {
    student?: LibraryStudentUpdateOneRequiredWithoutLibraryHistoryOfStudentBorrowingNestedInput
    fromUniversity?: LibraryUniversityUpdateOneRequiredWithoutFromUniversityNestedInput
    toUniversity?: LibraryUniversityUpdateOneRequiredWithoutToUniversityNestedInput
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentRequestUncheckedUpdateWithoutBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    fromUniversityId?: IntFieldUpdateOperationsInput | number
    toUniversityId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUpdateWithoutBookCopyInput = {
    stident?: LibraryStudentUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversity?: LibraryUniversityUpdateOneRequiredWithoutLibraryStudentBorrowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LibraryStudentBorrowingUncheckedUpdateWithoutBookCopyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    borrowingDate?: DateTimeFieldUpdateOperationsInput | Date | string
    targetReturnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    actualReturnDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    borrowFromUniversityId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryCreateManyCategoryInput = {
    id?: number
    bookId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnCategoryUpdateWithoutCategoryInput = {
    book?: LibraryBookUpdateOneRequiredWithoutBookOnCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnCategoryUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorCreateManyAuthorInput = {
    id?: number
    bookId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookOnAuthorUpdateWithoutAuthorInput = {
    book?: LibraryBookUpdateOneRequiredWithoutBookOnAuthorNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookOnAuthorUncheckedUpdateWithoutAuthorInput = {
    id?: IntFieldUpdateOperationsInput | number
    bookId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserBookedCreateManyUserInput = {
    id?: number
    meetingRoomId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserAvailableCreateManyUserInput = {
    id?: number
    availableStart: Date | string
    availableEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedCreateManyByUserIdInput = {
    id?: number
    meetingRoomId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserBookedUpdateWithoutUserInput = {
    meetingRoom?: MeetingRoomUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUpdateManyWithoutBookingNestedInput
  }

  export type MeetingUserBookedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type MeetingUserBookedUncheckedUpdateManyWithoutMeetingUserBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableUpdateWithoutUserInput = {
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserAvailableUncheckedUpdateManyWithoutMeetingUserAvailableInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableStart?: DateTimeFieldUpdateOperationsInput | Date | string
    availableEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUpdateWithoutByUserIdInput = {
    meetingRoom?: MeetingRoomUpdateOneRequiredWithoutMeetingRoomBookedNestedInput
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUncheckedUpdateWithoutByUserIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUncheckedUpdateManyWithoutMeetingRoomBookedInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetingRoomId?: IntFieldUpdateOperationsInput | number
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersCreateManyBookingInput = {
    id?: number
    name?: string | null
    email?: string | null
    tel?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingMembersUpdateWithoutBookingInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersUncheckedUpdateWithoutBookingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingMembersUncheckedUpdateManyWithoutMeetingMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    tel?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingUserBookedCreateManyMeetingRoomInput = {
    id?: number
    userId: number
    meetingDetail?: string | null
    bookingStart: Date | string
    bookingEnd: Date | string
    nameOfBooker: string
    tel: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingRoomBookedCreateManyMeetingRoomInput = {
    id?: number
    userId: number
    bookingStart: Date | string
    bookingEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetingUserBookedUpdateWithoutMeetingRoomInput = {
    user?: MeetingUserUpdateOneRequiredWithoutMeetingUserBookedNestedInput
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUpdateManyWithoutBookingNestedInput
  }

  export type MeetingUserBookedUncheckedUpdateWithoutMeetingRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    meetingDetail?: NullableStringFieldUpdateOperationsInput | string | null
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    nameOfBooker?: StringFieldUpdateOperationsInput | string
    tel?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MeetingMembers?: MeetingMembersUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type MeetingRoomBookedUpdateWithoutMeetingRoomInput = {
    byUserId?: MeetingUserUpdateOneRequiredWithoutMeetingRoomBookedNestedInput
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetingRoomBookedUncheckedUpdateWithoutMeetingRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    bookingStart?: DateTimeFieldUpdateOperationsInput | Date | string
    bookingEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizCreateManyCategoryInput = {
    id?: number
    quizName: string
    triviaAnswerChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundCreateManyCategoryInput = {
    id?: number
    name?: string | null
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaQuizUpdateWithoutCategoryInput = {
    quizName?: StringFieldUpdateOperationsInput | string
    answer?: TriviaChoiceUpdateOneRequiredWithoutTriviaQuizAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
    TriviaChoice?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateManyWithoutTriviaQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizName?: StringFieldUpdateOperationsInput | string
    triviaAnswerChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundUpdateWithoutCategoryInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuiz?: TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateManyWithoutTriviaRoundInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateManyQuizInput = {
    id?: number
    roundId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceCreateManyQuizInput = {
    id?: number
    choiceName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateWithoutQuizInput = {
    round?: TriviaRoundUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutTriviaRoundQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUpdateWithoutQuizInput = {
    choiceName?: StringFieldUpdateOperationsInput | string
    triviaQuizAnswer?: TriviaQuizUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    triviaQuizAnswer?: TriviaQuizUncheckedUpdateOneWithoutAnswerNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateManyWithoutTriviaChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    choiceName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceCreateManyRoundQuizChoiceInput = {
    id?: number
    roundQuizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUpdateWithoutRoundQuizChoiceInput = {
    roundQuiz?: TriviaRoundQuizUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundQuizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateManyWithoutTriviaRoundQuizChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundQuizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateManyRoundInput = {
    id?: number
    quizId: number
    playerChooseChoice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateWithoutRoundInput = {
    quiz?: TriviaQuizUpdateOneRequiredWithoutTriviaRoundQuizNestedInput
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutRoundInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    playerChooseChoice?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    triviaRoundQuizChoice?: TriviaRoundQuizChoiceUncheckedUpdateManyWithoutRoundQuizNestedInput
  }

  export type TriviaRoundQuizChoiceCreateManyRoundQuizInput = {
    id?: number
    quizChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizChoiceUpdateWithoutRoundQuizInput = {
    roundQuizChoice?: TriviaChoiceUpdateOneRequiredWithoutTriviaRoundQuizChoiceNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizChoiceUncheckedUpdateWithoutRoundQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingCreateManyFromInput = {
    id?: number
    toUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingCreateManyToInput = {
    id?: number
    fromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostCreateManyUserInput = {
    id?: number
    postDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgCreateManyFromInput = {
    id?: number
    toUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DirectMsgCreateManyToInput = {
    id?: number
    fromUserId: number
    msgDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyCreateManyReplyUserInput = {
    id?: number
    postId: number
    reply: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FollowingUpdateWithoutFromInput = {
    to?: UserUpdateOneRequiredWithoutToFollowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateWithoutFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateManyWithoutFromFolowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUpdateWithoutToInput = {
    from?: UserUpdateOneRequiredWithoutFromFolowingNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateWithoutToInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FollowingUncheckedUpdateManyWithoutToFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostUpdateWithoutUserInput = {
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUpdateManyWithoutPostNestedInput
    postOnHashtag?: PostOnHashtagUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reply?: ReplyUncheckedUpdateManyWithoutPostNestedInput
    postOnHashtag?: PostOnHashtagUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    postDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUpdateWithoutFromInput = {
    to?: UserUpdateOneRequiredWithoutToDirectMessageNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateWithoutFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateManyWithoutFromDirectMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    toUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUpdateWithoutToInput = {
    from?: UserUpdateOneRequiredWithoutFromDirectMessageNestedInput
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateWithoutToInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DirectMsgUncheckedUpdateManyWithoutToDirectMessageInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    msgDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUpdateWithoutReplyUserInput = {
    post?: PostUpdateOneRequiredWithoutReplyNestedInput
    reply?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateWithoutReplyUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    reply?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateManyWithoutReplyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    reply?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyCreateManyPostInput = {
    id?: number
    reply: string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagCreateManyPostInput = {
    id?: number
    hashtagId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ReplyUpdateWithoutPostInput = {
    reply?: StringFieldUpdateOperationsInput | string
    replyUser?: UserUpdateOneRequiredWithoutReplyNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplyUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    reply?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUpdateWithoutPostInput = {
    hashtag?: HashtagUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUncheckedUpdateManyWithoutPostOnHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    hashtagId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagCreateManyHashtagInput = {
    id?: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PostOnHashtagUpdateWithoutHashtagInput = {
    post?: PostUpdateOneRequiredWithoutPostOnHashtagNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostOnHashtagUncheckedUpdateWithoutHashtagInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineCreateManyBranchInput = {
    id?: number
    brand: string
    weight: number
    type: string
    productionYear: Date | string
    warrantyEnd: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateManyUseAtBranchInput = {
    id?: number
    userId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineUpdateWithoutBranchInput = {
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateWithoutBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    WashingMachineMaintenance?: WashingMachineMaintenanceUncheckedUpdateManyWithoutMachineNestedInput
    WashingUseHistory?: WashingUseHistoryUncheckedUpdateManyWithoutUseAtMachineNestedInput
    WashingMachineOnProgram?: WashingMachineOnProgramUncheckedUpdateManyWithoutMachineNestedInput
  }

  export type WashingMachineUncheckedUpdateManyWithoutWashingMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    brand?: StringFieldUpdateOperationsInput | string
    weight?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    productionYear?: DateTimeFieldUpdateOperationsInput | Date | string
    warrantyEnd?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUpdateWithoutUseAtBranchInput = {
    user?: WashingUserUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtMachine?: WashingMachineUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useProgram?: WashingMachineProgramUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateWithoutUseAtBranchInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateManyWithoutWashingUseHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceCreateManyMachineInput = {
    id?: number
    symptom: string
    failureLevel: number
    mechanicName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateManyUseAtMachineInput = {
    id?: number
    userId: number
    branchId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramCreateManyMachineInput = {
    id?: number
    programId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineMaintenanceUpdateWithoutMachineInput = {
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineMaintenanceUncheckedUpdateManyWithoutWashingMachineMaintenanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    symptom?: StringFieldUpdateOperationsInput | string
    failureLevel?: IntFieldUpdateOperationsInput | number
    mechanicName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUpdateWithoutUseAtMachineInput = {
    user?: WashingUserUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtBranch?: WashingBranchUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useProgram?: WashingMachineProgramUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateWithoutUseAtMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUpdateWithoutMachineInput = {
    program?: WashingMachineProgramUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUncheckedUpdateWithoutMachineInput = {
    id?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUncheckedUpdateManyWithoutWashingMachineOnProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryCreateManyUseProgramInput = {
    id?: number
    userId: number
    branchId: number
    machineId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingMachineOnProgramCreateManyProgramInput = {
    id?: number
    machineId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryUpdateWithoutUseProgramInput = {
    user?: WashingUserUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtBranch?: WashingBranchUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtMachine?: WashingMachineUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateWithoutUseProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUpdateWithoutProgramInput = {
    machine?: WashingMachineUpdateOneRequiredWithoutWashingMachineOnProgramNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingMachineOnProgramUncheckedUpdateWithoutProgramInput = {
    id?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpCreateManyUserInput = {
    id?: number
    topUpAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingUseHistoryCreateManyUserInput = {
    id?: number
    branchId: number
    machineId: number
    programId: number
    price: number
    startTime: Date | string
    endTime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WashingTopUpUpdateWithoutUserInput = {
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingTopUpUncheckedUpdateManyWithoutWashingTopUpInput = {
    id?: IntFieldUpdateOperationsInput | number
    topUpAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUpdateWithoutUserInput = {
    useAtBranch?: WashingBranchUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useAtMachine?: WashingMachineUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    useProgram?: WashingMachineProgramUpdateOneRequiredWithoutWashingUseHistoryNestedInput
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WashingUseHistoryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    branchId?: IntFieldUpdateOperationsInput | number
    machineId?: IntFieldUpdateOperationsInput | number
    programId?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserCreateManyUserInput = {
    id?: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminCreateManyAdminUserInput = {
    id?: number
    chanelId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTCommentCreateManyCommentFromUserInput = {
    id?: number
    videoId: number
    commentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentCreateManySubCommentFromUserInput = {
    id?: number
    commentId: number
    subCommentDetail: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeCreateManySubscribeUserInput = {
    id?: number
    chanelId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUpdateWithoutUserInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutChanelOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserUncheckedUpdateManyWithoutChanelOnUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUpdateWithoutAdminUserInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTAdminNestedInput
    role?: YTRoleUpdateOneRequiredWithoutYTAdminNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateWithoutAdminUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateManyWithoutYTAdminInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTCommentUpdateWithoutCommentFromUserInput = {
    video?: YTVideoUpdateOneRequiredWithoutYTCommentNestedInput
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUpdateManyWithoutCommentNestedInput
  }

  export type YTCommentUncheckedUpdateWithoutCommentFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YTCommentUncheckedUpdateManyWithoutYTCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUpdateWithoutSubCommentFromUserInput = {
    comment?: YTCommentUpdateOneRequiredWithoutYTSubCommentNestedInput
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUncheckedUpdateWithoutSubCommentFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUncheckedUpdateManyWithoutYTSubCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUpdateWithoutSubscribeUserInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTSubscribeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUncheckedUpdateWithoutSubscribeUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUncheckedUpdateManyWithoutYTSubscribeInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserCreateManyChanelInput = {
    id?: number
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminCreateManyChanelInput = {
    id?: number
    adminUserId: number
    roleId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTVideoCreateManyChanelInput = {
    id?: number
    videoLink: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubscribeCreateManyChanelInput = {
    id?: number
    subscribeUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ChanelOnUserUpdateWithoutChanelInput = {
    user?: YTUserUpdateOneRequiredWithoutChanelOnUserNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChanelOnUserUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUpdateWithoutChanelInput = {
    adminUser?: YTUserUpdateOneRequiredWithoutYTAdminNestedInput
    role?: YTRoleUpdateOneRequiredWithoutYTAdminNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    adminUserId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTVideoUpdateWithoutChanelInput = {
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTComment?: YTCommentUpdateManyWithoutVideoNestedInput
  }

  export type YTVideoUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTComment?: YTCommentUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type YTVideoUncheckedUpdateManyWithoutYTVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoLink?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUpdateWithoutChanelInput = {
    subscribeUser?: YTUserUpdateOneRequiredWithoutYTSubscribeNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubscribeUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    subscribeUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminCreateManyRoleInput = {
    id?: number
    chanelId: number
    adminUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTRolePermissionCreateManyRoldidInput = {
    id?: number
    permissionName: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTAdminUpdateWithoutRoleInput = {
    chanel?: YTChanelUpdateOneRequiredWithoutYTAdminNestedInput
    adminUser?: YTUserUpdateOneRequiredWithoutYTAdminNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTAdminUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    adminUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionUpdateWithoutRoldidInput = {
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionUncheckedUpdateWithoutRoldidInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTRolePermissionUncheckedUpdateManyWithoutYTRolePermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    permissionName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTCommentCreateManyVideoInput = {
    id?: number
    commentDetail: string
    commentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTCommentUpdateWithoutVideoInput = {
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUser?: YTUserUpdateOneRequiredWithoutYTCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUpdateManyWithoutCommentNestedInput
  }

  export type YTCommentUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentDetail?: StringFieldUpdateOperationsInput | string
    commentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    YTSubComment?: YTSubCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YTSubCommentCreateManyCommentInput = {
    id?: number
    subCommentDetail: string
    subCommentFromUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YTSubCommentUpdateWithoutCommentInput = {
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    subCommentFromUser?: YTUserUpdateOneRequiredWithoutYTSubCommentNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YTSubCommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    subCommentDetail?: StringFieldUpdateOperationsInput | string
    subCommentFromUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}