
/**
 * Client
**/

import * as runtime from './runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model BinKitchenCategory
 * 
 */
export type BinKitchenCategory = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenMenu
 * 
 */
export type BinKitchenMenu = {
  id: number
  name: string
  image: string
  price: number
  categoryName: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenOrder
 * 
 */
export type BinKitchenOrder = {
  id: number
  status: string
  tableId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model BinKitchenOrderItem
 * 
 */
export type BinKitchenOrderItem = {
  id: number
  menuId: number
  orderId: number | null
  quantity: number
  totalPrice: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TodoList
 * 
 */
export type TodoList = {
  id: number
  task: string
  status: string
  note: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaCategory
 * 
 */
export type TriviaCategory = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaQuiz
 * 
 */
export type TriviaQuiz = {
  id: number
  quiz: string
  categoryName: string
  createdAt: Date
  updatedAt: Date
  answerId: number
}

/**
 * Model TriviaChoice
 * 
 */
export type TriviaChoice = {
  id: number
  choice: string
  quizId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaRound
 * 
 */
export type TriviaRound = {
  id: number
  round: string
  categoryId: number
  score: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TriviaRoundQuiz
 * 
 */
export type TriviaRoundQuiz = {
  id: number
  roundId: number
  quizId: number
  userChoiceId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterUser
 * 
 */
export type TwitterUser = {
  id: number
  image: string
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterUserRelation
 * 
 */
export type TwitterUserRelation = {
  id: number
  followerId: number
  followingId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterPost
 * 
 */
export type TwitterPost = {
  id: number
  message: string
  postByUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterHashTag
 * 
 */
export type TwitterHashTag = {
  id: number
  message: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterReply
 * 
 */
export type TwitterReply = {
  id: number
  message: string
  postId: number
  postByUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model TwitterDM
 * 
 */
export type TwitterDM = {
  id: number
  message: string
  directFromId: number
  directToId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeUser
 * 
 */
export type YoutubeUser = {
  id: number
  profileImage: string
  email: string
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeChanelPermission
 * 
 */
export type YoutubeChanelPermission = {
  id: number
  name: YoutubePermissionEnum
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeChanel
 * 
 */
export type YoutubeChanel = {
  id: number
  ChanelImage: string
  coverImage: string
  name: string
  description: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeChanelToUserPermission
 * 
 */
export type YoutubeChanelToUserPermission = {
  id: number
  chanelId: number
  UserId: number
  permissionId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeHashtag
 * 
 */
export type YoutubeHashtag = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubePost
 * 
 */
export type YoutubePost = {
  id: number
  video: string
  name: string
  description: string
  posterUserId: number
  chanelId: number
  isShared: boolean
  shareFromPostId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeComment
 * 
 */
export type YoutubeComment = {
  id: number
  message: string
  commentByUserId: number
  postId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeLikeType
 * 
 */
export type YoutubeLikeType = {
  id: number
  emoji: string
  name: YoutubeLikeTypeEnum
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeLikePost
 * 
 */
export type YoutubeLikePost = {
  id: number
  postId: number
  likeByUserId: number
  likeTypeId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeLikeComment
 * 
 */
export type YoutubeLikeComment = {
  id: number
  commentId: number
  likeByUserId: number
  likeTypeId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model YoutubeSubcriber
 * 
 */
export type YoutubeSubcriber = {
  id: number
  fromUserId: number
  toChanelId: number
  isSupported: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookUser
 * 
 */
export type FacebookUser = {
  id: number
  profileImage: string
  coverImage: string
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookGroup
 * 
 */
export type FacebookGroup = {
  id: number
  GroupImage: string
  coverImage: string
  name: string
  createrUserId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookPostDestination
 * 
 */
export type FacebookPostDestination = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookPostType
 * 
 */
export type FacebookPostType = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookLocation
 * 
 */
export type FacebookLocation = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookHashtag
 * 
 */
export type FacebookHashtag = {
  id: number
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookPost
 * 
 */
export type FacebookPost = {
  id: number
  message: string
  postTypeId: number
  posterUserId: number
  locationId: number
  destinationId: number
  destinationRelateId: number
  isShared: boolean
  shareFromPostId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookComment
 * 
 */
export type FacebookComment = {
  id: number
  message: string
  commentByUserId: number
  postId: number
  isReplied: boolean
  replyFromCommentId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookLikeType
 * 
 */
export type FacebookLikeType = {
  id: number
  emoji: string
  name: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookLikePost
 * 
 */
export type FacebookLikePost = {
  id: number
  postId: number
  posterUserId: number
  likeTypeId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookLikeComment
 * 
 */
export type FacebookLikeComment = {
  id: number
  commentId: number
  posterUserId: number
  likeTypeId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookFriendRequest
 * 
 */
export type FacebookFriendRequest = {
  id: number
  requestFromUserId: number
  requestToUserId: number
  isAccepted: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookUserRelation
 * 
 */
export type FacebookUserRelation = {
  id: number
  relationFromUserId: number
  relationToUserId: number
  isAccepted: boolean
  createdAt: Date
  updatedAt: Date
}

/**
 * Model FacebookMessenger
 * 
 */
export type FacebookMessenger = {
  id: number
  message: string
  messageFromUserId: number
  messageToUserId: number
  isRead: boolean
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const YoutubeLikeTypeEnum: {
  LIKE: 'LIKE',
  DISLIKE: 'DISLIKE'
};

export type YoutubeLikeTypeEnum = (typeof YoutubeLikeTypeEnum)[keyof typeof YoutubeLikeTypeEnum]


export const YoutubePermissionEnum: {
  OWNER: 'OWNER',
  EDITOR: 'EDITOR',
  ADMIN: 'ADMIN'
};

export type YoutubePermissionEnum = (typeof YoutubePermissionEnum)[keyof typeof YoutubePermissionEnum]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BinKitchenCategories
 * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BinKitchenCategories
   * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.binKitchenCategory`: Exposes CRUD operations for the **BinKitchenCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenCategories
    * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
    * ```
    */
  get binKitchenCategory(): Prisma.BinKitchenCategoryDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenMenu`: Exposes CRUD operations for the **BinKitchenMenu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenMenus
    * const binKitchenMenus = await prisma.binKitchenMenu.findMany()
    * ```
    */
  get binKitchenMenu(): Prisma.BinKitchenMenuDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenOrder`: Exposes CRUD operations for the **BinKitchenOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenOrders
    * const binKitchenOrders = await prisma.binKitchenOrder.findMany()
    * ```
    */
  get binKitchenOrder(): Prisma.BinKitchenOrderDelegate<GlobalReject>;

  /**
   * `prisma.binKitchenOrderItem`: Exposes CRUD operations for the **BinKitchenOrderItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BinKitchenOrderItems
    * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany()
    * ```
    */
  get binKitchenOrderItem(): Prisma.BinKitchenOrderItemDelegate<GlobalReject>;

  /**
   * `prisma.todoList`: Exposes CRUD operations for the **TodoList** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TodoLists
    * const todoLists = await prisma.todoList.findMany()
    * ```
    */
  get todoList(): Prisma.TodoListDelegate<GlobalReject>;

  /**
   * `prisma.triviaCategory`: Exposes CRUD operations for the **TriviaCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaCategories
    * const triviaCategories = await prisma.triviaCategory.findMany()
    * ```
    */
  get triviaCategory(): Prisma.TriviaCategoryDelegate<GlobalReject>;

  /**
   * `prisma.triviaQuiz`: Exposes CRUD operations for the **TriviaQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaQuizs
    * const triviaQuizs = await prisma.triviaQuiz.findMany()
    * ```
    */
  get triviaQuiz(): Prisma.TriviaQuizDelegate<GlobalReject>;

  /**
   * `prisma.triviaChoice`: Exposes CRUD operations for the **TriviaChoice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaChoices
    * const triviaChoices = await prisma.triviaChoice.findMany()
    * ```
    */
  get triviaChoice(): Prisma.TriviaChoiceDelegate<GlobalReject>;

  /**
   * `prisma.triviaRound`: Exposes CRUD operations for the **TriviaRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaRounds
    * const triviaRounds = await prisma.triviaRound.findMany()
    * ```
    */
  get triviaRound(): Prisma.TriviaRoundDelegate<GlobalReject>;

  /**
   * `prisma.triviaRoundQuiz`: Exposes CRUD operations for the **TriviaRoundQuiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TriviaRoundQuizs
    * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany()
    * ```
    */
  get triviaRoundQuiz(): Prisma.TriviaRoundQuizDelegate<GlobalReject>;

  /**
   * `prisma.twitterUser`: Exposes CRUD operations for the **TwitterUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterUsers
    * const twitterUsers = await prisma.twitterUser.findMany()
    * ```
    */
  get twitterUser(): Prisma.TwitterUserDelegate<GlobalReject>;

  /**
   * `prisma.twitterUserRelation`: Exposes CRUD operations for the **TwitterUserRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterUserRelations
    * const twitterUserRelations = await prisma.twitterUserRelation.findMany()
    * ```
    */
  get twitterUserRelation(): Prisma.TwitterUserRelationDelegate<GlobalReject>;

  /**
   * `prisma.twitterPost`: Exposes CRUD operations for the **TwitterPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterPosts
    * const twitterPosts = await prisma.twitterPost.findMany()
    * ```
    */
  get twitterPost(): Prisma.TwitterPostDelegate<GlobalReject>;

  /**
   * `prisma.twitterHashTag`: Exposes CRUD operations for the **TwitterHashTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterHashTags
    * const twitterHashTags = await prisma.twitterHashTag.findMany()
    * ```
    */
  get twitterHashTag(): Prisma.TwitterHashTagDelegate<GlobalReject>;

  /**
   * `prisma.twitterReply`: Exposes CRUD operations for the **TwitterReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterReplies
    * const twitterReplies = await prisma.twitterReply.findMany()
    * ```
    */
  get twitterReply(): Prisma.TwitterReplyDelegate<GlobalReject>;

  /**
   * `prisma.twitterDM`: Exposes CRUD operations for the **TwitterDM** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TwitterDMS
    * const twitterDMS = await prisma.twitterDM.findMany()
    * ```
    */
  get twitterDM(): Prisma.TwitterDMDelegate<GlobalReject>;

  /**
   * `prisma.youtubeUser`: Exposes CRUD operations for the **YoutubeUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeUsers
    * const youtubeUsers = await prisma.youtubeUser.findMany()
    * ```
    */
  get youtubeUser(): Prisma.YoutubeUserDelegate<GlobalReject>;

  /**
   * `prisma.youtubeChanelPermission`: Exposes CRUD operations for the **YoutubeChanelPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeChanelPermissions
    * const youtubeChanelPermissions = await prisma.youtubeChanelPermission.findMany()
    * ```
    */
  get youtubeChanelPermission(): Prisma.YoutubeChanelPermissionDelegate<GlobalReject>;

  /**
   * `prisma.youtubeChanel`: Exposes CRUD operations for the **YoutubeChanel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeChanels
    * const youtubeChanels = await prisma.youtubeChanel.findMany()
    * ```
    */
  get youtubeChanel(): Prisma.YoutubeChanelDelegate<GlobalReject>;

  /**
   * `prisma.youtubeChanelToUserPermission`: Exposes CRUD operations for the **YoutubeChanelToUserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeChanelToUserPermissions
    * const youtubeChanelToUserPermissions = await prisma.youtubeChanelToUserPermission.findMany()
    * ```
    */
  get youtubeChanelToUserPermission(): Prisma.YoutubeChanelToUserPermissionDelegate<GlobalReject>;

  /**
   * `prisma.youtubeHashtag`: Exposes CRUD operations for the **YoutubeHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeHashtags
    * const youtubeHashtags = await prisma.youtubeHashtag.findMany()
    * ```
    */
  get youtubeHashtag(): Prisma.YoutubeHashtagDelegate<GlobalReject>;

  /**
   * `prisma.youtubePost`: Exposes CRUD operations for the **YoutubePost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubePosts
    * const youtubePosts = await prisma.youtubePost.findMany()
    * ```
    */
  get youtubePost(): Prisma.YoutubePostDelegate<GlobalReject>;

  /**
   * `prisma.youtubeComment`: Exposes CRUD operations for the **YoutubeComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeComments
    * const youtubeComments = await prisma.youtubeComment.findMany()
    * ```
    */
  get youtubeComment(): Prisma.YoutubeCommentDelegate<GlobalReject>;

  /**
   * `prisma.youtubeLikeType`: Exposes CRUD operations for the **YoutubeLikeType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeLikeTypes
    * const youtubeLikeTypes = await prisma.youtubeLikeType.findMany()
    * ```
    */
  get youtubeLikeType(): Prisma.YoutubeLikeTypeDelegate<GlobalReject>;

  /**
   * `prisma.youtubeLikePost`: Exposes CRUD operations for the **YoutubeLikePost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeLikePosts
    * const youtubeLikePosts = await prisma.youtubeLikePost.findMany()
    * ```
    */
  get youtubeLikePost(): Prisma.YoutubeLikePostDelegate<GlobalReject>;

  /**
   * `prisma.youtubeLikeComment`: Exposes CRUD operations for the **YoutubeLikeComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeLikeComments
    * const youtubeLikeComments = await prisma.youtubeLikeComment.findMany()
    * ```
    */
  get youtubeLikeComment(): Prisma.YoutubeLikeCommentDelegate<GlobalReject>;

  /**
   * `prisma.youtubeSubcriber`: Exposes CRUD operations for the **YoutubeSubcriber** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YoutubeSubcribers
    * const youtubeSubcribers = await prisma.youtubeSubcriber.findMany()
    * ```
    */
  get youtubeSubcriber(): Prisma.YoutubeSubcriberDelegate<GlobalReject>;

  /**
   * `prisma.facebookUser`: Exposes CRUD operations for the **FacebookUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookUsers
    * const facebookUsers = await prisma.facebookUser.findMany()
    * ```
    */
  get facebookUser(): Prisma.FacebookUserDelegate<GlobalReject>;

  /**
   * `prisma.facebookGroup`: Exposes CRUD operations for the **FacebookGroup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookGroups
    * const facebookGroups = await prisma.facebookGroup.findMany()
    * ```
    */
  get facebookGroup(): Prisma.FacebookGroupDelegate<GlobalReject>;

  /**
   * `prisma.facebookPostDestination`: Exposes CRUD operations for the **FacebookPostDestination** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookPostDestinations
    * const facebookPostDestinations = await prisma.facebookPostDestination.findMany()
    * ```
    */
  get facebookPostDestination(): Prisma.FacebookPostDestinationDelegate<GlobalReject>;

  /**
   * `prisma.facebookPostType`: Exposes CRUD operations for the **FacebookPostType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookPostTypes
    * const facebookPostTypes = await prisma.facebookPostType.findMany()
    * ```
    */
  get facebookPostType(): Prisma.FacebookPostTypeDelegate<GlobalReject>;

  /**
   * `prisma.facebookLocation`: Exposes CRUD operations for the **FacebookLocation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookLocations
    * const facebookLocations = await prisma.facebookLocation.findMany()
    * ```
    */
  get facebookLocation(): Prisma.FacebookLocationDelegate<GlobalReject>;

  /**
   * `prisma.facebookHashtag`: Exposes CRUD operations for the **FacebookHashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookHashtags
    * const facebookHashtags = await prisma.facebookHashtag.findMany()
    * ```
    */
  get facebookHashtag(): Prisma.FacebookHashtagDelegate<GlobalReject>;

  /**
   * `prisma.facebookPost`: Exposes CRUD operations for the **FacebookPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookPosts
    * const facebookPosts = await prisma.facebookPost.findMany()
    * ```
    */
  get facebookPost(): Prisma.FacebookPostDelegate<GlobalReject>;

  /**
   * `prisma.facebookComment`: Exposes CRUD operations for the **FacebookComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookComments
    * const facebookComments = await prisma.facebookComment.findMany()
    * ```
    */
  get facebookComment(): Prisma.FacebookCommentDelegate<GlobalReject>;

  /**
   * `prisma.facebookLikeType`: Exposes CRUD operations for the **FacebookLikeType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookLikeTypes
    * const facebookLikeTypes = await prisma.facebookLikeType.findMany()
    * ```
    */
  get facebookLikeType(): Prisma.FacebookLikeTypeDelegate<GlobalReject>;

  /**
   * `prisma.facebookLikePost`: Exposes CRUD operations for the **FacebookLikePost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookLikePosts
    * const facebookLikePosts = await prisma.facebookLikePost.findMany()
    * ```
    */
  get facebookLikePost(): Prisma.FacebookLikePostDelegate<GlobalReject>;

  /**
   * `prisma.facebookLikeComment`: Exposes CRUD operations for the **FacebookLikeComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookLikeComments
    * const facebookLikeComments = await prisma.facebookLikeComment.findMany()
    * ```
    */
  get facebookLikeComment(): Prisma.FacebookLikeCommentDelegate<GlobalReject>;

  /**
   * `prisma.facebookFriendRequest`: Exposes CRUD operations for the **FacebookFriendRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookFriendRequests
    * const facebookFriendRequests = await prisma.facebookFriendRequest.findMany()
    * ```
    */
  get facebookFriendRequest(): Prisma.FacebookFriendRequestDelegate<GlobalReject>;

  /**
   * `prisma.facebookUserRelation`: Exposes CRUD operations for the **FacebookUserRelation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookUserRelations
    * const facebookUserRelations = await prisma.facebookUserRelation.findMany()
    * ```
    */
  get facebookUserRelation(): Prisma.FacebookUserRelationDelegate<GlobalReject>;

  /**
   * `prisma.facebookMessenger`: Exposes CRUD operations for the **FacebookMessenger** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FacebookMessengers
    * const facebookMessengers = await prisma.facebookMessenger.findMany()
    * ```
    */
  get facebookMessenger(): Prisma.FacebookMessengerDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.10.1
   * Query Engine version: aead147aa326ccb985dcfed5b065b4fdabd44b19
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BinKitchenCategory: 'BinKitchenCategory',
    BinKitchenMenu: 'BinKitchenMenu',
    BinKitchenOrder: 'BinKitchenOrder',
    BinKitchenOrderItem: 'BinKitchenOrderItem',
    TodoList: 'TodoList',
    TriviaCategory: 'TriviaCategory',
    TriviaQuiz: 'TriviaQuiz',
    TriviaChoice: 'TriviaChoice',
    TriviaRound: 'TriviaRound',
    TriviaRoundQuiz: 'TriviaRoundQuiz',
    TwitterUser: 'TwitterUser',
    TwitterUserRelation: 'TwitterUserRelation',
    TwitterPost: 'TwitterPost',
    TwitterHashTag: 'TwitterHashTag',
    TwitterReply: 'TwitterReply',
    TwitterDM: 'TwitterDM',
    YoutubeUser: 'YoutubeUser',
    YoutubeChanelPermission: 'YoutubeChanelPermission',
    YoutubeChanel: 'YoutubeChanel',
    YoutubeChanelToUserPermission: 'YoutubeChanelToUserPermission',
    YoutubeHashtag: 'YoutubeHashtag',
    YoutubePost: 'YoutubePost',
    YoutubeComment: 'YoutubeComment',
    YoutubeLikeType: 'YoutubeLikeType',
    YoutubeLikePost: 'YoutubeLikePost',
    YoutubeLikeComment: 'YoutubeLikeComment',
    YoutubeSubcriber: 'YoutubeSubcriber',
    FacebookUser: 'FacebookUser',
    FacebookGroup: 'FacebookGroup',
    FacebookPostDestination: 'FacebookPostDestination',
    FacebookPostType: 'FacebookPostType',
    FacebookLocation: 'FacebookLocation',
    FacebookHashtag: 'FacebookHashtag',
    FacebookPost: 'FacebookPost',
    FacebookComment: 'FacebookComment',
    FacebookLikeType: 'FacebookLikeType',
    FacebookLikePost: 'FacebookLikePost',
    FacebookLikeComment: 'FacebookLikeComment',
    FacebookFriendRequest: 'FacebookFriendRequest',
    FacebookUserRelation: 'FacebookUserRelation',
    FacebookMessenger: 'FacebookMessenger'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BinKitchenCategoryCountOutputType
   */


  export type BinKitchenCategoryCountOutputType = {
    menus: number
  }

  export type BinKitchenCategoryCountOutputTypeSelect = {
    menus?: boolean
  }

  export type BinKitchenCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenCategoryCountOutputTypeArgs)
    ? BinKitchenCategoryCountOutputType 
    : S extends { select: any } & (BinKitchenCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenCategoryCountOutputType ? BinKitchenCategoryCountOutputType[P] : never
  } 
      : BinKitchenCategoryCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenCategoryCountOutputType without action
   */
  export type BinKitchenCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategoryCountOutputType
     */
    select?: BinKitchenCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type BinKitchenMenuCountOutputType
   */


  export type BinKitchenMenuCountOutputType = {
    orderItems: number
  }

  export type BinKitchenMenuCountOutputTypeSelect = {
    orderItems?: boolean
  }

  export type BinKitchenMenuCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenMenuCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenMenuCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenMenuCountOutputTypeArgs)
    ? BinKitchenMenuCountOutputType 
    : S extends { select: any } & (BinKitchenMenuCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenMenuCountOutputType ? BinKitchenMenuCountOutputType[P] : never
  } 
      : BinKitchenMenuCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenMenuCountOutputType without action
   */
  export type BinKitchenMenuCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenuCountOutputType
     */
    select?: BinKitchenMenuCountOutputTypeSelect | null
  }



  /**
   * Count Type BinKitchenOrderCountOutputType
   */


  export type BinKitchenOrderCountOutputType = {
    orderItems: number
  }

  export type BinKitchenOrderCountOutputTypeSelect = {
    orderItems?: boolean
  }

  export type BinKitchenOrderCountOutputTypeGetPayload<S extends boolean | null | undefined | BinKitchenOrderCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrderCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderCountOutputTypeArgs)
    ? BinKitchenOrderCountOutputType 
    : S extends { select: any } & (BinKitchenOrderCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof BinKitchenOrderCountOutputType ? BinKitchenOrderCountOutputType[P] : never
  } 
      : BinKitchenOrderCountOutputType




  // Custom InputTypes

  /**
   * BinKitchenOrderCountOutputType without action
   */
  export type BinKitchenOrderCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderCountOutputType
     */
    select?: BinKitchenOrderCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaCategoryCountOutputType
   */


  export type TriviaCategoryCountOutputType = {
    triviaQuizes: number
    rounds: number
  }

  export type TriviaCategoryCountOutputTypeSelect = {
    triviaQuizes?: boolean
    rounds?: boolean
  }

  export type TriviaCategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaCategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaCategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaCategoryCountOutputTypeArgs)
    ? TriviaCategoryCountOutputType 
    : S extends { select: any } & (TriviaCategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaCategoryCountOutputType ? TriviaCategoryCountOutputType[P] : never
  } 
      : TriviaCategoryCountOutputType




  // Custom InputTypes

  /**
   * TriviaCategoryCountOutputType without action
   */
  export type TriviaCategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategoryCountOutputType
     */
    select?: TriviaCategoryCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaQuizCountOutputType
   */


  export type TriviaQuizCountOutputType = {
    choices: number
    roundQuizes: number
  }

  export type TriviaQuizCountOutputTypeSelect = {
    choices?: boolean
    roundQuizes?: boolean
  }

  export type TriviaQuizCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaQuizCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaQuizCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaQuizCountOutputTypeArgs)
    ? TriviaQuizCountOutputType 
    : S extends { select: any } & (TriviaQuizCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaQuizCountOutputType ? TriviaQuizCountOutputType[P] : never
  } 
      : TriviaQuizCountOutputType




  // Custom InputTypes

  /**
   * TriviaQuizCountOutputType without action
   */
  export type TriviaQuizCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuizCountOutputType
     */
    select?: TriviaQuizCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaChoiceCountOutputType
   */


  export type TriviaChoiceCountOutputType = {
    roundQuizes: number
  }

  export type TriviaChoiceCountOutputTypeSelect = {
    roundQuizes?: boolean
  }

  export type TriviaChoiceCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaChoiceCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaChoiceCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaChoiceCountOutputTypeArgs)
    ? TriviaChoiceCountOutputType 
    : S extends { select: any } & (TriviaChoiceCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaChoiceCountOutputType ? TriviaChoiceCountOutputType[P] : never
  } 
      : TriviaChoiceCountOutputType




  // Custom InputTypes

  /**
   * TriviaChoiceCountOutputType without action
   */
  export type TriviaChoiceCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoiceCountOutputType
     */
    select?: TriviaChoiceCountOutputTypeSelect | null
  }



  /**
   * Count Type TriviaRoundCountOutputType
   */


  export type TriviaRoundCountOutputType = {
    roundQuizes: number
  }

  export type TriviaRoundCountOutputTypeSelect = {
    roundQuizes?: boolean
  }

  export type TriviaRoundCountOutputTypeGetPayload<S extends boolean | null | undefined | TriviaRoundCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundCountOutputTypeArgs)
    ? TriviaRoundCountOutputType 
    : S extends { select: any } & (TriviaRoundCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TriviaRoundCountOutputType ? TriviaRoundCountOutputType[P] : never
  } 
      : TriviaRoundCountOutputType




  // Custom InputTypes

  /**
   * TriviaRoundCountOutputType without action
   */
  export type TriviaRoundCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundCountOutputType
     */
    select?: TriviaRoundCountOutputTypeSelect | null
  }



  /**
   * Count Type TwitterUserCountOutputType
   */


  export type TwitterUserCountOutputType = {
    follwers: number
    followings: number
    twitterPosts: number
    twitterReplies: number
    directFroms: number
    directToes: number
  }

  export type TwitterUserCountOutputTypeSelect = {
    follwers?: boolean
    followings?: boolean
    twitterPosts?: boolean
    twitterReplies?: boolean
    directFroms?: boolean
    directToes?: boolean
  }

  export type TwitterUserCountOutputTypeGetPayload<S extends boolean | null | undefined | TwitterUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TwitterUserCountOutputTypeArgs)
    ? TwitterUserCountOutputType 
    : S extends { select: any } & (TwitterUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TwitterUserCountOutputType ? TwitterUserCountOutputType[P] : never
  } 
      : TwitterUserCountOutputType




  // Custom InputTypes

  /**
   * TwitterUserCountOutputType without action
   */
  export type TwitterUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserCountOutputType
     */
    select?: TwitterUserCountOutputTypeSelect | null
  }



  /**
   * Count Type TwitterPostCountOutputType
   */


  export type TwitterPostCountOutputType = {
    twitterReplies: number
    hashTags: number
  }

  export type TwitterPostCountOutputTypeSelect = {
    twitterReplies?: boolean
    hashTags?: boolean
  }

  export type TwitterPostCountOutputTypeGetPayload<S extends boolean | null | undefined | TwitterPostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterPostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TwitterPostCountOutputTypeArgs)
    ? TwitterPostCountOutputType 
    : S extends { select: any } & (TwitterPostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TwitterPostCountOutputType ? TwitterPostCountOutputType[P] : never
  } 
      : TwitterPostCountOutputType




  // Custom InputTypes

  /**
   * TwitterPostCountOutputType without action
   */
  export type TwitterPostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TwitterPostCountOutputType
     */
    select?: TwitterPostCountOutputTypeSelect | null
  }



  /**
   * Count Type TwitterHashTagCountOutputType
   */


  export type TwitterHashTagCountOutputType = {
    posts: number
  }

  export type TwitterHashTagCountOutputTypeSelect = {
    posts?: boolean
  }

  export type TwitterHashTagCountOutputTypeGetPayload<S extends boolean | null | undefined | TwitterHashTagCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterHashTagCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (TwitterHashTagCountOutputTypeArgs)
    ? TwitterHashTagCountOutputType 
    : S extends { select: any } & (TwitterHashTagCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TwitterHashTagCountOutputType ? TwitterHashTagCountOutputType[P] : never
  } 
      : TwitterHashTagCountOutputType




  // Custom InputTypes

  /**
   * TwitterHashTagCountOutputType without action
   */
  export type TwitterHashTagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTagCountOutputType
     */
    select?: TwitterHashTagCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubeUserCountOutputType
   */


  export type YoutubeUserCountOutputType = {
    chanelToUserPermissions: number
    posts: number
    comments: number
    likePosts: number
    likeComments: number
    subcribers: number
  }

  export type YoutubeUserCountOutputTypeSelect = {
    chanelToUserPermissions?: boolean
    posts?: boolean
    comments?: boolean
    likePosts?: boolean
    likeComments?: boolean
    subcribers?: boolean
  }

  export type YoutubeUserCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubeUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeUserCountOutputTypeArgs)
    ? YoutubeUserCountOutputType 
    : S extends { select: any } & (YoutubeUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubeUserCountOutputType ? YoutubeUserCountOutputType[P] : never
  } 
      : YoutubeUserCountOutputType




  // Custom InputTypes

  /**
   * YoutubeUserCountOutputType without action
   */
  export type YoutubeUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUserCountOutputType
     */
    select?: YoutubeUserCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubeChanelPermissionCountOutputType
   */


  export type YoutubeChanelPermissionCountOutputType = {
    chanelToUserPermissions: number
  }

  export type YoutubeChanelPermissionCountOutputTypeSelect = {
    chanelToUserPermissions?: boolean
  }

  export type YoutubeChanelPermissionCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubeChanelPermissionCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeChanelPermissionCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeChanelPermissionCountOutputTypeArgs)
    ? YoutubeChanelPermissionCountOutputType 
    : S extends { select: any } & (YoutubeChanelPermissionCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubeChanelPermissionCountOutputType ? YoutubeChanelPermissionCountOutputType[P] : never
  } 
      : YoutubeChanelPermissionCountOutputType




  // Custom InputTypes

  /**
   * YoutubeChanelPermissionCountOutputType without action
   */
  export type YoutubeChanelPermissionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermissionCountOutputType
     */
    select?: YoutubeChanelPermissionCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubeChanelCountOutputType
   */


  export type YoutubeChanelCountOutputType = {
    chanelToUserPermissions: number
    posts: number
    subcribers: number
  }

  export type YoutubeChanelCountOutputTypeSelect = {
    chanelToUserPermissions?: boolean
    posts?: boolean
    subcribers?: boolean
  }

  export type YoutubeChanelCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubeChanelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeChanelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeChanelCountOutputTypeArgs)
    ? YoutubeChanelCountOutputType 
    : S extends { select: any } & (YoutubeChanelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubeChanelCountOutputType ? YoutubeChanelCountOutputType[P] : never
  } 
      : YoutubeChanelCountOutputType




  // Custom InputTypes

  /**
   * YoutubeChanelCountOutputType without action
   */
  export type YoutubeChanelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelCountOutputType
     */
    select?: YoutubeChanelCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubeHashtagCountOutputType
   */


  export type YoutubeHashtagCountOutputType = {
    posts: number
  }

  export type YoutubeHashtagCountOutputTypeSelect = {
    posts?: boolean
  }

  export type YoutubeHashtagCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubeHashtagCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeHashtagCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeHashtagCountOutputTypeArgs)
    ? YoutubeHashtagCountOutputType 
    : S extends { select: any } & (YoutubeHashtagCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubeHashtagCountOutputType ? YoutubeHashtagCountOutputType[P] : never
  } 
      : YoutubeHashtagCountOutputType




  // Custom InputTypes

  /**
   * YoutubeHashtagCountOutputType without action
   */
  export type YoutubeHashtagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtagCountOutputType
     */
    select?: YoutubeHashtagCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubePostCountOutputType
   */


  export type YoutubePostCountOutputType = {
    hashtags: number
    comments: number
    likePosts: number
    likeComments: number
  }

  export type YoutubePostCountOutputTypeSelect = {
    hashtags?: boolean
    comments?: boolean
    likePosts?: boolean
    likeComments?: boolean
  }

  export type YoutubePostCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubePostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubePostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubePostCountOutputTypeArgs)
    ? YoutubePostCountOutputType 
    : S extends { select: any } & (YoutubePostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubePostCountOutputType ? YoutubePostCountOutputType[P] : never
  } 
      : YoutubePostCountOutputType




  // Custom InputTypes

  /**
   * YoutubePostCountOutputType without action
   */
  export type YoutubePostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubePostCountOutputType
     */
    select?: YoutubePostCountOutputTypeSelect | null
  }



  /**
   * Count Type YoutubeLikeTypeCountOutputType
   */


  export type YoutubeLikeTypeCountOutputType = {
    likePosts: number
    likeComments: number
  }

  export type YoutubeLikeTypeCountOutputTypeSelect = {
    likePosts?: boolean
    likeComments?: boolean
  }

  export type YoutubeLikeTypeCountOutputTypeGetPayload<S extends boolean | null | undefined | YoutubeLikeTypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeLikeTypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeLikeTypeCountOutputTypeArgs)
    ? YoutubeLikeTypeCountOutputType 
    : S extends { select: any } & (YoutubeLikeTypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof YoutubeLikeTypeCountOutputType ? YoutubeLikeTypeCountOutputType[P] : never
  } 
      : YoutubeLikeTypeCountOutputType




  // Custom InputTypes

  /**
   * YoutubeLikeTypeCountOutputType without action
   */
  export type YoutubeLikeTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeTypeCountOutputType
     */
    select?: YoutubeLikeTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookUserCountOutputType
   */


  export type FacebookUserCountOutputType = {
    posts: number
    groupcreater: number
    groupMember: number
    comments: number
    likePosts: number
    likeComments: number
    friendRequestFroms: number
    friendRequestToes: number
    friendRelationFroms: number
    friendRelationToes: number
    messengeFroms: number
    messengeToes: number
  }

  export type FacebookUserCountOutputTypeSelect = {
    posts?: boolean
    groupcreater?: boolean
    groupMember?: boolean
    comments?: boolean
    likePosts?: boolean
    likeComments?: boolean
    friendRequestFroms?: boolean
    friendRequestToes?: boolean
    friendRelationFroms?: boolean
    friendRelationToes?: boolean
    messengeFroms?: boolean
    messengeToes?: boolean
  }

  export type FacebookUserCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookUserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookUserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookUserCountOutputTypeArgs)
    ? FacebookUserCountOutputType 
    : S extends { select: any } & (FacebookUserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookUserCountOutputType ? FacebookUserCountOutputType[P] : never
  } 
      : FacebookUserCountOutputType




  // Custom InputTypes

  /**
   * FacebookUserCountOutputType without action
   */
  export type FacebookUserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserCountOutputType
     */
    select?: FacebookUserCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookGroupCountOutputType
   */


  export type FacebookGroupCountOutputType = {
    memberUsers: number
  }

  export type FacebookGroupCountOutputTypeSelect = {
    memberUsers?: boolean
  }

  export type FacebookGroupCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookGroupCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookGroupCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookGroupCountOutputTypeArgs)
    ? FacebookGroupCountOutputType 
    : S extends { select: any } & (FacebookGroupCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookGroupCountOutputType ? FacebookGroupCountOutputType[P] : never
  } 
      : FacebookGroupCountOutputType




  // Custom InputTypes

  /**
   * FacebookGroupCountOutputType without action
   */
  export type FacebookGroupCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroupCountOutputType
     */
    select?: FacebookGroupCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookPostDestinationCountOutputType
   */


  export type FacebookPostDestinationCountOutputType = {
    posts: number
  }

  export type FacebookPostDestinationCountOutputTypeSelect = {
    posts?: boolean
  }

  export type FacebookPostDestinationCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookPostDestinationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPostDestinationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostDestinationCountOutputTypeArgs)
    ? FacebookPostDestinationCountOutputType 
    : S extends { select: any } & (FacebookPostDestinationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookPostDestinationCountOutputType ? FacebookPostDestinationCountOutputType[P] : never
  } 
      : FacebookPostDestinationCountOutputType




  // Custom InputTypes

  /**
   * FacebookPostDestinationCountOutputType without action
   */
  export type FacebookPostDestinationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestinationCountOutputType
     */
    select?: FacebookPostDestinationCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookPostTypeCountOutputType
   */


  export type FacebookPostTypeCountOutputType = {
    posts: number
  }

  export type FacebookPostTypeCountOutputTypeSelect = {
    posts?: boolean
  }

  export type FacebookPostTypeCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookPostTypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPostTypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostTypeCountOutputTypeArgs)
    ? FacebookPostTypeCountOutputType 
    : S extends { select: any } & (FacebookPostTypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookPostTypeCountOutputType ? FacebookPostTypeCountOutputType[P] : never
  } 
      : FacebookPostTypeCountOutputType




  // Custom InputTypes

  /**
   * FacebookPostTypeCountOutputType without action
   */
  export type FacebookPostTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostTypeCountOutputType
     */
    select?: FacebookPostTypeCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookLocationCountOutputType
   */


  export type FacebookLocationCountOutputType = {
    posts: number
  }

  export type FacebookLocationCountOutputTypeSelect = {
    posts?: boolean
  }

  export type FacebookLocationCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookLocationCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLocationCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLocationCountOutputTypeArgs)
    ? FacebookLocationCountOutputType 
    : S extends { select: any } & (FacebookLocationCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookLocationCountOutputType ? FacebookLocationCountOutputType[P] : never
  } 
      : FacebookLocationCountOutputType




  // Custom InputTypes

  /**
   * FacebookLocationCountOutputType without action
   */
  export type FacebookLocationCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocationCountOutputType
     */
    select?: FacebookLocationCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookHashtagCountOutputType
   */


  export type FacebookHashtagCountOutputType = {
    posts: number
  }

  export type FacebookHashtagCountOutputTypeSelect = {
    posts?: boolean
  }

  export type FacebookHashtagCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookHashtagCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookHashtagCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookHashtagCountOutputTypeArgs)
    ? FacebookHashtagCountOutputType 
    : S extends { select: any } & (FacebookHashtagCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookHashtagCountOutputType ? FacebookHashtagCountOutputType[P] : never
  } 
      : FacebookHashtagCountOutputType




  // Custom InputTypes

  /**
   * FacebookHashtagCountOutputType without action
   */
  export type FacebookHashtagCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtagCountOutputType
     */
    select?: FacebookHashtagCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookPostCountOutputType
   */


  export type FacebookPostCountOutputType = {
    hashtags: number
    comments: number
    likePosts: number
    likeComments: number
  }

  export type FacebookPostCountOutputTypeSelect = {
    hashtags?: boolean
    comments?: boolean
    likePosts?: boolean
    likeComments?: boolean
  }

  export type FacebookPostCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookPostCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPostCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostCountOutputTypeArgs)
    ? FacebookPostCountOutputType 
    : S extends { select: any } & (FacebookPostCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookPostCountOutputType ? FacebookPostCountOutputType[P] : never
  } 
      : FacebookPostCountOutputType




  // Custom InputTypes

  /**
   * FacebookPostCountOutputType without action
   */
  export type FacebookPostCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostCountOutputType
     */
    select?: FacebookPostCountOutputTypeSelect | null
  }



  /**
   * Count Type FacebookLikeTypeCountOutputType
   */


  export type FacebookLikeTypeCountOutputType = {
    likePosts: number
    likeComments: number
  }

  export type FacebookLikeTypeCountOutputTypeSelect = {
    likePosts?: boolean
    likeComments?: boolean
  }

  export type FacebookLikeTypeCountOutputTypeGetPayload<S extends boolean | null | undefined | FacebookLikeTypeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLikeTypeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLikeTypeCountOutputTypeArgs)
    ? FacebookLikeTypeCountOutputType 
    : S extends { select: any } & (FacebookLikeTypeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof FacebookLikeTypeCountOutputType ? FacebookLikeTypeCountOutputType[P] : never
  } 
      : FacebookLikeTypeCountOutputType




  // Custom InputTypes

  /**
   * FacebookLikeTypeCountOutputType without action
   */
  export type FacebookLikeTypeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeTypeCountOutputType
     */
    select?: FacebookLikeTypeCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model BinKitchenCategory
   */


  export type AggregateBinKitchenCategory = {
    _count: BinKitchenCategoryCountAggregateOutputType | null
    _avg: BinKitchenCategoryAvgAggregateOutputType | null
    _sum: BinKitchenCategorySumAggregateOutputType | null
    _min: BinKitchenCategoryMinAggregateOutputType | null
    _max: BinKitchenCategoryMaxAggregateOutputType | null
  }

  export type BinKitchenCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type BinKitchenCategorySumAggregateOutputType = {
    id: number | null
  }

  export type BinKitchenCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenCategoryAvgAggregateInputType = {
    id?: true
  }

  export type BinKitchenCategorySumAggregateInputType = {
    id?: true
  }

  export type BinKitchenCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenCategoryAggregateArgs = {
    /**
     * Filter which BinKitchenCategory to aggregate.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenCategories
    **/
    _count?: true | BinKitchenCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenCategoryMaxAggregateInputType
  }

  export type GetBinKitchenCategoryAggregateType<T extends BinKitchenCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenCategory[P]>
      : GetScalarType<T[P], AggregateBinKitchenCategory[P]>
  }




  export type BinKitchenCategoryGroupByArgs = {
    where?: BinKitchenCategoryWhereInput
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithAggregationInput>
    by: BinKitchenCategoryScalarFieldEnum[]
    having?: BinKitchenCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenCategoryCountAggregateInputType | true
    _avg?: BinKitchenCategoryAvgAggregateInputType
    _sum?: BinKitchenCategorySumAggregateInputType
    _min?: BinKitchenCategoryMinAggregateInputType
    _max?: BinKitchenCategoryMaxAggregateInputType
  }


  export type BinKitchenCategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenCategoryCountAggregateOutputType | null
    _avg: BinKitchenCategoryAvgAggregateOutputType | null
    _sum: BinKitchenCategorySumAggregateOutputType | null
    _min: BinKitchenCategoryMinAggregateOutputType | null
    _max: BinKitchenCategoryMaxAggregateOutputType | null
  }

  type GetBinKitchenCategoryGroupByPayload<T extends BinKitchenCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenCategoryGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenCategorySelect = {
    id?: boolean
    name?: boolean
    menus?: boolean | BinKitchenCategory$menusArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | BinKitchenCategoryCountOutputTypeArgs
  }


  export type BinKitchenCategoryInclude = {
    menus?: boolean | BinKitchenCategory$menusArgs
    _count?: boolean | BinKitchenCategoryCountOutputTypeArgs
  }

  export type BinKitchenCategoryGetPayload<S extends boolean | null | undefined | BinKitchenCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenCategory :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenCategoryArgs | BinKitchenCategoryFindManyArgs)
    ? BinKitchenCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'menus' ? Array < BinKitchenMenuGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenCategoryArgs | BinKitchenCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'menus' ? Array < BinKitchenMenuGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenCategory ? BinKitchenCategory[P] : never
  } 
      : BinKitchenCategory


  type BinKitchenCategoryCountArgs = 
    Omit<BinKitchenCategoryFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenCategoryCountAggregateInputType | true
    }

  export interface BinKitchenCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenCategory that matches the filter.
     * @param {BinKitchenCategoryFindUniqueArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenCategory'> extends True ? Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>> : Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | null, null>

    /**
     * Find one BinKitchenCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenCategoryFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Find the first BinKitchenCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindFirstArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenCategory'> extends True ? Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>> : Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindFirstOrThrowArgs} args - Arguments to find a BinKitchenCategory
     * @example
     * // Get one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindFirstOrThrowArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Find zero or more BinKitchenCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenCategories
     * const binKitchenCategories = await prisma.binKitchenCategory.findMany()
     * 
     * // Get first 10 BinKitchenCategories
     * const binKitchenCategories = await prisma.binKitchenCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenCategoryWithIdOnly = await prisma.binKitchenCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenCategoryFindManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenCategoryGetPayload<T>>>

    /**
     * Create a BinKitchenCategory.
     * @param {BinKitchenCategoryCreateArgs} args - Arguments to create a BinKitchenCategory.
     * @example
     * // Create one BinKitchenCategory
     * const BinKitchenCategory = await prisma.binKitchenCategory.create({
     *   data: {
     *     // ... data to create a BinKitchenCategory
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenCategoryCreateArgs>(
      args: SelectSubset<T, BinKitchenCategoryCreateArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Create many BinKitchenCategories.
     *     @param {BinKitchenCategoryCreateManyArgs} args - Arguments to create many BinKitchenCategories.
     *     @example
     *     // Create many BinKitchenCategories
     *     const binKitchenCategory = await prisma.binKitchenCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenCategoryCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenCategory.
     * @param {BinKitchenCategoryDeleteArgs} args - Arguments to delete one BinKitchenCategory.
     * @example
     * // Delete one BinKitchenCategory
     * const BinKitchenCategory = await prisma.binKitchenCategory.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenCategory
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenCategoryDeleteArgs>(
      args: SelectSubset<T, BinKitchenCategoryDeleteArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Update one BinKitchenCategory.
     * @param {BinKitchenCategoryUpdateArgs} args - Arguments to update one BinKitchenCategory.
     * @example
     * // Update one BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenCategoryUpdateArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpdateArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Delete zero or more BinKitchenCategories.
     * @param {BinKitchenCategoryDeleteManyArgs} args - Arguments to filter BinKitchenCategories to delete.
     * @example
     * // Delete a few BinKitchenCategories
     * const { count } = await prisma.binKitchenCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenCategoryDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenCategories
     * const binKitchenCategory = await prisma.binKitchenCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenCategoryUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenCategory.
     * @param {BinKitchenCategoryUpsertArgs} args - Arguments to update or create a BinKitchenCategory.
     * @example
     * // Update or create a BinKitchenCategory
     * const binKitchenCategory = await prisma.binKitchenCategory.upsert({
     *   create: {
     *     // ... data to create a BinKitchenCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenCategory we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenCategoryUpsertArgs>(
      args: SelectSubset<T, BinKitchenCategoryUpsertArgs>
    ): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T>>

    /**
     * Count the number of BinKitchenCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryCountArgs} args - Arguments to filter BinKitchenCategories to count.
     * @example
     * // Count the number of BinKitchenCategories
     * const count = await prisma.binKitchenCategory.count({
     *   where: {
     *     // ... the filter for the BinKitchenCategories we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenCategoryCountArgs>(
      args?: Subset<T, BinKitchenCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenCategoryAggregateArgs>(args: Subset<T, BinKitchenCategoryAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenCategoryAggregateType<T>>

    /**
     * Group by BinKitchenCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenCategoryGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    menus<T extends BinKitchenCategory$menusArgs= {}>(args?: Subset<T, BinKitchenCategory$menusArgs>): Prisma.PrismaPromise<Array<BinKitchenMenuGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenCategory base type for findUnique actions
   */
  export type BinKitchenCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }

  /**
   * BinKitchenCategory findUnique
   */
  export interface BinKitchenCategoryFindUniqueArgs extends BinKitchenCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenCategory findUniqueOrThrow
   */
  export type BinKitchenCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory base type for findFirst actions
   */
  export type BinKitchenCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenCategories.
     */
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }

  /**
   * BinKitchenCategory findFirst
   */
  export interface BinKitchenCategoryFindFirstArgs extends BinKitchenCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenCategory findFirstOrThrow
   */
  export type BinKitchenCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategory to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenCategories.
     */
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }


  /**
   * BinKitchenCategory findMany
   */
  export type BinKitchenCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter, which BinKitchenCategories to fetch.
     */
    where?: BinKitchenCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenCategories to fetch.
     */
    orderBy?: Enumerable<BinKitchenCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenCategories.
     */
    cursor?: BinKitchenCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenCategories.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenCategoryScalarFieldEnum>
  }


  /**
   * BinKitchenCategory create
   */
  export type BinKitchenCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The data needed to create a BinKitchenCategory.
     */
    data: XOR<BinKitchenCategoryCreateInput, BinKitchenCategoryUncheckedCreateInput>
  }


  /**
   * BinKitchenCategory createMany
   */
  export type BinKitchenCategoryCreateManyArgs = {
    /**
     * The data used to create many BinKitchenCategories.
     */
    data: Enumerable<BinKitchenCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenCategory update
   */
  export type BinKitchenCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The data needed to update a BinKitchenCategory.
     */
    data: XOR<BinKitchenCategoryUpdateInput, BinKitchenCategoryUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenCategory to update.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory updateMany
   */
  export type BinKitchenCategoryUpdateManyArgs = {
    /**
     * The data used to update BinKitchenCategories.
     */
    data: XOR<BinKitchenCategoryUpdateManyMutationInput, BinKitchenCategoryUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenCategories to update
     */
    where?: BinKitchenCategoryWhereInput
  }


  /**
   * BinKitchenCategory upsert
   */
  export type BinKitchenCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * The filter to search for the BinKitchenCategory to update in case it exists.
     */
    where: BinKitchenCategoryWhereUniqueInput
    /**
     * In case the BinKitchenCategory found by the `where` argument doesn't exist, create a new BinKitchenCategory with this data.
     */
    create: XOR<BinKitchenCategoryCreateInput, BinKitchenCategoryUncheckedCreateInput>
    /**
     * In case the BinKitchenCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenCategoryUpdateInput, BinKitchenCategoryUncheckedUpdateInput>
  }


  /**
   * BinKitchenCategory delete
   */
  export type BinKitchenCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
    /**
     * Filter which BinKitchenCategory to delete.
     */
    where: BinKitchenCategoryWhereUniqueInput
  }


  /**
   * BinKitchenCategory deleteMany
   */
  export type BinKitchenCategoryDeleteManyArgs = {
    /**
     * Filter which BinKitchenCategories to delete
     */
    where?: BinKitchenCategoryWhereInput
  }


  /**
   * BinKitchenCategory.menus
   */
  export type BinKitchenCategory$menusArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    where?: BinKitchenMenuWhereInput
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    cursor?: BinKitchenMenuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenCategory without action
   */
  export type BinKitchenCategoryArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenCategory
     */
    select?: BinKitchenCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenCategoryInclude | null
  }



  /**
   * Model BinKitchenMenu
   */


  export type AggregateBinKitchenMenu = {
    _count: BinKitchenMenuCountAggregateOutputType | null
    _avg: BinKitchenMenuAvgAggregateOutputType | null
    _sum: BinKitchenMenuSumAggregateOutputType | null
    _min: BinKitchenMenuMinAggregateOutputType | null
    _max: BinKitchenMenuMaxAggregateOutputType | null
  }

  export type BinKitchenMenuAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type BinKitchenMenuSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type BinKitchenMenuMinAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenMenuMaxAggregateOutputType = {
    id: number | null
    name: string | null
    image: string | null
    price: number | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenMenuCountAggregateOutputType = {
    id: number
    name: number
    image: number
    price: number
    categoryName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenMenuAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type BinKitchenMenuSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type BinKitchenMenuMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenMenuMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenMenuCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    price?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenMenuAggregateArgs = {
    /**
     * Filter which BinKitchenMenu to aggregate.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenMenus
    **/
    _count?: true | BinKitchenMenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenMenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenMenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenMenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenMenuMaxAggregateInputType
  }

  export type GetBinKitchenMenuAggregateType<T extends BinKitchenMenuAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenMenu[P]>
      : GetScalarType<T[P], AggregateBinKitchenMenu[P]>
  }




  export type BinKitchenMenuGroupByArgs = {
    where?: BinKitchenMenuWhereInput
    orderBy?: Enumerable<BinKitchenMenuOrderByWithAggregationInput>
    by: BinKitchenMenuScalarFieldEnum[]
    having?: BinKitchenMenuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenMenuCountAggregateInputType | true
    _avg?: BinKitchenMenuAvgAggregateInputType
    _sum?: BinKitchenMenuSumAggregateInputType
    _min?: BinKitchenMenuMinAggregateInputType
    _max?: BinKitchenMenuMaxAggregateInputType
  }


  export type BinKitchenMenuGroupByOutputType = {
    id: number
    name: string
    image: string
    price: number
    categoryName: string | null
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenMenuCountAggregateOutputType | null
    _avg: BinKitchenMenuAvgAggregateOutputType | null
    _sum: BinKitchenMenuSumAggregateOutputType | null
    _min: BinKitchenMenuMinAggregateOutputType | null
    _max: BinKitchenMenuMaxAggregateOutputType | null
  }

  type GetBinKitchenMenuGroupByPayload<T extends BinKitchenMenuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenMenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenMenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenMenuGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenMenuGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenMenuSelect = {
    id?: boolean
    name?: boolean
    image?: boolean
    price?: boolean
    category?: boolean | BinKitchenCategoryArgs
    categoryName?: boolean
    orderItems?: boolean | BinKitchenMenu$orderItemsArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | BinKitchenMenuCountOutputTypeArgs
  }


  export type BinKitchenMenuInclude = {
    category?: boolean | BinKitchenCategoryArgs
    orderItems?: boolean | BinKitchenMenu$orderItemsArgs
    _count?: boolean | BinKitchenMenuCountOutputTypeArgs
  }

  export type BinKitchenMenuGetPayload<S extends boolean | null | undefined | BinKitchenMenuArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenMenu :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenMenuArgs | BinKitchenMenuFindManyArgs)
    ? BinKitchenMenu  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? BinKitchenCategoryGetPayload<S['include'][P]> | null :
        P extends 'orderItems' ? Array < BinKitchenOrderItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenMenuCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenMenuArgs | BinKitchenMenuFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? BinKitchenCategoryGetPayload<S['select'][P]> | null :
        P extends 'orderItems' ? Array < BinKitchenOrderItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenMenuCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenMenu ? BinKitchenMenu[P] : never
  } 
      : BinKitchenMenu


  type BinKitchenMenuCountArgs = 
    Omit<BinKitchenMenuFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenMenuCountAggregateInputType | true
    }

  export interface BinKitchenMenuDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenMenu that matches the filter.
     * @param {BinKitchenMenuFindUniqueArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenMenuFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenMenuFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenMenu'> extends True ? Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>> : Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | null, null>

    /**
     * Find one BinKitchenMenu that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenMenuFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenMenuFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Find the first BinKitchenMenu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindFirstArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenMenuFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenMenuFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenMenu'> extends True ? Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>> : Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenMenu that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindFirstOrThrowArgs} args - Arguments to find a BinKitchenMenu
     * @example
     * // Get one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenMenuFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindFirstOrThrowArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Find zero or more BinKitchenMenus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenMenus
     * const binKitchenMenus = await prisma.binKitchenMenu.findMany()
     * 
     * // Get first 10 BinKitchenMenus
     * const binKitchenMenus = await prisma.binKitchenMenu.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenMenuWithIdOnly = await prisma.binKitchenMenu.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenMenuFindManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenMenuGetPayload<T>>>

    /**
     * Create a BinKitchenMenu.
     * @param {BinKitchenMenuCreateArgs} args - Arguments to create a BinKitchenMenu.
     * @example
     * // Create one BinKitchenMenu
     * const BinKitchenMenu = await prisma.binKitchenMenu.create({
     *   data: {
     *     // ... data to create a BinKitchenMenu
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenMenuCreateArgs>(
      args: SelectSubset<T, BinKitchenMenuCreateArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Create many BinKitchenMenus.
     *     @param {BinKitchenMenuCreateManyArgs} args - Arguments to create many BinKitchenMenus.
     *     @example
     *     // Create many BinKitchenMenus
     *     const binKitchenMenu = await prisma.binKitchenMenu.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenMenuCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenMenu.
     * @param {BinKitchenMenuDeleteArgs} args - Arguments to delete one BinKitchenMenu.
     * @example
     * // Delete one BinKitchenMenu
     * const BinKitchenMenu = await prisma.binKitchenMenu.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenMenu
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenMenuDeleteArgs>(
      args: SelectSubset<T, BinKitchenMenuDeleteArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Update one BinKitchenMenu.
     * @param {BinKitchenMenuUpdateArgs} args - Arguments to update one BinKitchenMenu.
     * @example
     * // Update one BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenMenuUpdateArgs>(
      args: SelectSubset<T, BinKitchenMenuUpdateArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Delete zero or more BinKitchenMenus.
     * @param {BinKitchenMenuDeleteManyArgs} args - Arguments to filter BinKitchenMenus to delete.
     * @example
     * // Delete a few BinKitchenMenus
     * const { count } = await prisma.binKitchenMenu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenMenuDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenMenuDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenMenus
     * const binKitchenMenu = await prisma.binKitchenMenu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenMenuUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenMenuUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenMenu.
     * @param {BinKitchenMenuUpsertArgs} args - Arguments to update or create a BinKitchenMenu.
     * @example
     * // Update or create a BinKitchenMenu
     * const binKitchenMenu = await prisma.binKitchenMenu.upsert({
     *   create: {
     *     // ... data to create a BinKitchenMenu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenMenu we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenMenuUpsertArgs>(
      args: SelectSubset<T, BinKitchenMenuUpsertArgs>
    ): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T>>

    /**
     * Count the number of BinKitchenMenus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuCountArgs} args - Arguments to filter BinKitchenMenus to count.
     * @example
     * // Count the number of BinKitchenMenus
     * const count = await prisma.binKitchenMenu.count({
     *   where: {
     *     // ... the filter for the BinKitchenMenus we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenMenuCountArgs>(
      args?: Subset<T, BinKitchenMenuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenMenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenMenuAggregateArgs>(args: Subset<T, BinKitchenMenuAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenMenuAggregateType<T>>

    /**
     * Group by BinKitchenMenu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenMenuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenMenuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenMenuGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenMenuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenMenuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenMenu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenMenuClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends BinKitchenCategoryArgs= {}>(args?: Subset<T, BinKitchenCategoryArgs>): Prisma__BinKitchenCategoryClient<BinKitchenCategoryGetPayload<T> | Null>;

    orderItems<T extends BinKitchenMenu$orderItemsArgs= {}>(args?: Subset<T, BinKitchenMenu$orderItemsArgs>): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenMenu base type for findUnique actions
   */
  export type BinKitchenMenuFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where: BinKitchenMenuWhereUniqueInput
  }

  /**
   * BinKitchenMenu findUnique
   */
  export interface BinKitchenMenuFindUniqueArgs extends BinKitchenMenuFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenMenu findUniqueOrThrow
   */
  export type BinKitchenMenuFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu base type for findFirst actions
   */
  export type BinKitchenMenuFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenMenus.
     */
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }

  /**
   * BinKitchenMenu findFirst
   */
  export interface BinKitchenMenuFindFirstArgs extends BinKitchenMenuFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenMenu findFirstOrThrow
   */
  export type BinKitchenMenuFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenu to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenMenus.
     */
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenMenu findMany
   */
  export type BinKitchenMenuFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter, which BinKitchenMenus to fetch.
     */
    where?: BinKitchenMenuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenMenus to fetch.
     */
    orderBy?: Enumerable<BinKitchenMenuOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenMenus.
     */
    cursor?: BinKitchenMenuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenMenus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenMenus.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenMenuScalarFieldEnum>
  }


  /**
   * BinKitchenMenu create
   */
  export type BinKitchenMenuCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The data needed to create a BinKitchenMenu.
     */
    data: XOR<BinKitchenMenuCreateInput, BinKitchenMenuUncheckedCreateInput>
  }


  /**
   * BinKitchenMenu createMany
   */
  export type BinKitchenMenuCreateManyArgs = {
    /**
     * The data used to create many BinKitchenMenus.
     */
    data: Enumerable<BinKitchenMenuCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenMenu update
   */
  export type BinKitchenMenuUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The data needed to update a BinKitchenMenu.
     */
    data: XOR<BinKitchenMenuUpdateInput, BinKitchenMenuUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenMenu to update.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu updateMany
   */
  export type BinKitchenMenuUpdateManyArgs = {
    /**
     * The data used to update BinKitchenMenus.
     */
    data: XOR<BinKitchenMenuUpdateManyMutationInput, BinKitchenMenuUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenMenus to update
     */
    where?: BinKitchenMenuWhereInput
  }


  /**
   * BinKitchenMenu upsert
   */
  export type BinKitchenMenuUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * The filter to search for the BinKitchenMenu to update in case it exists.
     */
    where: BinKitchenMenuWhereUniqueInput
    /**
     * In case the BinKitchenMenu found by the `where` argument doesn't exist, create a new BinKitchenMenu with this data.
     */
    create: XOR<BinKitchenMenuCreateInput, BinKitchenMenuUncheckedCreateInput>
    /**
     * In case the BinKitchenMenu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenMenuUpdateInput, BinKitchenMenuUncheckedUpdateInput>
  }


  /**
   * BinKitchenMenu delete
   */
  export type BinKitchenMenuDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
    /**
     * Filter which BinKitchenMenu to delete.
     */
    where: BinKitchenMenuWhereUniqueInput
  }


  /**
   * BinKitchenMenu deleteMany
   */
  export type BinKitchenMenuDeleteManyArgs = {
    /**
     * Filter which BinKitchenMenus to delete
     */
    where?: BinKitchenMenuWhereInput
  }


  /**
   * BinKitchenMenu.orderItems
   */
  export type BinKitchenMenu$orderItemsArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    cursor?: BinKitchenOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenMenu without action
   */
  export type BinKitchenMenuArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenMenu
     */
    select?: BinKitchenMenuSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenMenuInclude | null
  }



  /**
   * Model BinKitchenOrder
   */


  export type AggregateBinKitchenOrder = {
    _count: BinKitchenOrderCountAggregateOutputType | null
    _avg: BinKitchenOrderAvgAggregateOutputType | null
    _sum: BinKitchenOrderSumAggregateOutputType | null
    _min: BinKitchenOrderMinAggregateOutputType | null
    _max: BinKitchenOrderMaxAggregateOutputType | null
  }

  export type BinKitchenOrderAvgAggregateOutputType = {
    id: number | null
    tableId: number | null
  }

  export type BinKitchenOrderSumAggregateOutputType = {
    id: number | null
    tableId: number | null
  }

  export type BinKitchenOrderMinAggregateOutputType = {
    id: number | null
    status: string | null
    tableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderMaxAggregateOutputType = {
    id: number | null
    status: string | null
    tableId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderCountAggregateOutputType = {
    id: number
    status: number
    tableId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenOrderAvgAggregateInputType = {
    id?: true
    tableId?: true
  }

  export type BinKitchenOrderSumAggregateInputType = {
    id?: true
    tableId?: true
  }

  export type BinKitchenOrderMinAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderMaxAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderCountAggregateInputType = {
    id?: true
    status?: true
    tableId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenOrderAggregateArgs = {
    /**
     * Filter which BinKitchenOrder to aggregate.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenOrders
    **/
    _count?: true | BinKitchenOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenOrderMaxAggregateInputType
  }

  export type GetBinKitchenOrderAggregateType<T extends BinKitchenOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenOrder[P]>
      : GetScalarType<T[P], AggregateBinKitchenOrder[P]>
  }




  export type BinKitchenOrderGroupByArgs = {
    where?: BinKitchenOrderWhereInput
    orderBy?: Enumerable<BinKitchenOrderOrderByWithAggregationInput>
    by: BinKitchenOrderScalarFieldEnum[]
    having?: BinKitchenOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenOrderCountAggregateInputType | true
    _avg?: BinKitchenOrderAvgAggregateInputType
    _sum?: BinKitchenOrderSumAggregateInputType
    _min?: BinKitchenOrderMinAggregateInputType
    _max?: BinKitchenOrderMaxAggregateInputType
  }


  export type BinKitchenOrderGroupByOutputType = {
    id: number
    status: string
    tableId: number
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenOrderCountAggregateOutputType | null
    _avg: BinKitchenOrderAvgAggregateOutputType | null
    _sum: BinKitchenOrderSumAggregateOutputType | null
    _min: BinKitchenOrderMinAggregateOutputType | null
    _max: BinKitchenOrderMaxAggregateOutputType | null
  }

  type GetBinKitchenOrderGroupByPayload<T extends BinKitchenOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenOrderGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenOrderGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenOrderSelect = {
    id?: boolean
    status?: boolean
    tableId?: boolean
    orderItems?: boolean | BinKitchenOrder$orderItemsArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | BinKitchenOrderCountOutputTypeArgs
  }


  export type BinKitchenOrderInclude = {
    orderItems?: boolean | BinKitchenOrder$orderItemsArgs
    _count?: boolean | BinKitchenOrderCountOutputTypeArgs
  }

  export type BinKitchenOrderGetPayload<S extends boolean | null | undefined | BinKitchenOrderArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrder :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderArgs | BinKitchenOrderFindManyArgs)
    ? BinKitchenOrder  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'orderItems' ? Array < BinKitchenOrderItemGetPayload<S['include'][P]>>  :
        P extends '_count' ? BinKitchenOrderCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (BinKitchenOrderArgs | BinKitchenOrderFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'orderItems' ? Array < BinKitchenOrderItemGetPayload<S['select'][P]>>  :
        P extends '_count' ? BinKitchenOrderCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof BinKitchenOrder ? BinKitchenOrder[P] : never
  } 
      : BinKitchenOrder


  type BinKitchenOrderCountArgs = 
    Omit<BinKitchenOrderFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenOrderCountAggregateInputType | true
    }

  export interface BinKitchenOrderDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenOrder that matches the filter.
     * @param {BinKitchenOrderFindUniqueArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenOrderFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenOrderFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenOrder'> extends True ? Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>> : Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | null, null>

    /**
     * Find one BinKitchenOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenOrderFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenOrderFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Find the first BinKitchenOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindFirstArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenOrderFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenOrderFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenOrder'> extends True ? Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>> : Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenOrder that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindFirstOrThrowArgs} args - Arguments to find a BinKitchenOrder
     * @example
     * // Get one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenOrderFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindFirstOrThrowArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Find zero or more BinKitchenOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenOrders
     * const binKitchenOrders = await prisma.binKitchenOrder.findMany()
     * 
     * // Get first 10 BinKitchenOrders
     * const binKitchenOrders = await prisma.binKitchenOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenOrderWithIdOnly = await prisma.binKitchenOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenOrderFindManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenOrderGetPayload<T>>>

    /**
     * Create a BinKitchenOrder.
     * @param {BinKitchenOrderCreateArgs} args - Arguments to create a BinKitchenOrder.
     * @example
     * // Create one BinKitchenOrder
     * const BinKitchenOrder = await prisma.binKitchenOrder.create({
     *   data: {
     *     // ... data to create a BinKitchenOrder
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenOrderCreateArgs>(
      args: SelectSubset<T, BinKitchenOrderCreateArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Create many BinKitchenOrders.
     *     @param {BinKitchenOrderCreateManyArgs} args - Arguments to create many BinKitchenOrders.
     *     @example
     *     // Create many BinKitchenOrders
     *     const binKitchenOrder = await prisma.binKitchenOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenOrderCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenOrder.
     * @param {BinKitchenOrderDeleteArgs} args - Arguments to delete one BinKitchenOrder.
     * @example
     * // Delete one BinKitchenOrder
     * const BinKitchenOrder = await prisma.binKitchenOrder.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenOrder
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenOrderDeleteArgs>(
      args: SelectSubset<T, BinKitchenOrderDeleteArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Update one BinKitchenOrder.
     * @param {BinKitchenOrderUpdateArgs} args - Arguments to update one BinKitchenOrder.
     * @example
     * // Update one BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenOrderUpdateArgs>(
      args: SelectSubset<T, BinKitchenOrderUpdateArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Delete zero or more BinKitchenOrders.
     * @param {BinKitchenOrderDeleteManyArgs} args - Arguments to filter BinKitchenOrders to delete.
     * @example
     * // Delete a few BinKitchenOrders
     * const { count } = await prisma.binKitchenOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenOrderDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenOrders
     * const binKitchenOrder = await prisma.binKitchenOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenOrderUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenOrderUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenOrder.
     * @param {BinKitchenOrderUpsertArgs} args - Arguments to update or create a BinKitchenOrder.
     * @example
     * // Update or create a BinKitchenOrder
     * const binKitchenOrder = await prisma.binKitchenOrder.upsert({
     *   create: {
     *     // ... data to create a BinKitchenOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenOrder we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenOrderUpsertArgs>(
      args: SelectSubset<T, BinKitchenOrderUpsertArgs>
    ): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T>>

    /**
     * Count the number of BinKitchenOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderCountArgs} args - Arguments to filter BinKitchenOrders to count.
     * @example
     * // Count the number of BinKitchenOrders
     * const count = await prisma.binKitchenOrder.count({
     *   where: {
     *     // ... the filter for the BinKitchenOrders we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenOrderCountArgs>(
      args?: Subset<T, BinKitchenOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenOrderAggregateArgs>(args: Subset<T, BinKitchenOrderAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenOrderAggregateType<T>>

    /**
     * Group by BinKitchenOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenOrderGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenOrderClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    orderItems<T extends BinKitchenOrder$orderItemsArgs= {}>(args?: Subset<T, BinKitchenOrder$orderItemsArgs>): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenOrder base type for findUnique actions
   */
  export type BinKitchenOrderFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where: BinKitchenOrderWhereUniqueInput
  }

  /**
   * BinKitchenOrder findUnique
   */
  export interface BinKitchenOrderFindUniqueArgs extends BinKitchenOrderFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrder findUniqueOrThrow
   */
  export type BinKitchenOrderFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder base type for findFirst actions
   */
  export type BinKitchenOrderFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrders.
     */
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }

  /**
   * BinKitchenOrder findFirst
   */
  export interface BinKitchenOrderFindFirstArgs extends BinKitchenOrderFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrder findFirstOrThrow
   */
  export type BinKitchenOrderFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrder to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrders.
     */
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }


  /**
   * BinKitchenOrder findMany
   */
  export type BinKitchenOrderFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter, which BinKitchenOrders to fetch.
     */
    where?: BinKitchenOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrders to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenOrders.
     */
    cursor?: BinKitchenOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrders.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenOrderScalarFieldEnum>
  }


  /**
   * BinKitchenOrder create
   */
  export type BinKitchenOrderCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The data needed to create a BinKitchenOrder.
     */
    data: XOR<BinKitchenOrderCreateInput, BinKitchenOrderUncheckedCreateInput>
  }


  /**
   * BinKitchenOrder createMany
   */
  export type BinKitchenOrderCreateManyArgs = {
    /**
     * The data used to create many BinKitchenOrders.
     */
    data: Enumerable<BinKitchenOrderCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenOrder update
   */
  export type BinKitchenOrderUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The data needed to update a BinKitchenOrder.
     */
    data: XOR<BinKitchenOrderUpdateInput, BinKitchenOrderUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenOrder to update.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder updateMany
   */
  export type BinKitchenOrderUpdateManyArgs = {
    /**
     * The data used to update BinKitchenOrders.
     */
    data: XOR<BinKitchenOrderUpdateManyMutationInput, BinKitchenOrderUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenOrders to update
     */
    where?: BinKitchenOrderWhereInput
  }


  /**
   * BinKitchenOrder upsert
   */
  export type BinKitchenOrderUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * The filter to search for the BinKitchenOrder to update in case it exists.
     */
    where: BinKitchenOrderWhereUniqueInput
    /**
     * In case the BinKitchenOrder found by the `where` argument doesn't exist, create a new BinKitchenOrder with this data.
     */
    create: XOR<BinKitchenOrderCreateInput, BinKitchenOrderUncheckedCreateInput>
    /**
     * In case the BinKitchenOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenOrderUpdateInput, BinKitchenOrderUncheckedUpdateInput>
  }


  /**
   * BinKitchenOrder delete
   */
  export type BinKitchenOrderDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
    /**
     * Filter which BinKitchenOrder to delete.
     */
    where: BinKitchenOrderWhereUniqueInput
  }


  /**
   * BinKitchenOrder deleteMany
   */
  export type BinKitchenOrderDeleteManyArgs = {
    /**
     * Filter which BinKitchenOrders to delete
     */
    where?: BinKitchenOrderWhereInput
  }


  /**
   * BinKitchenOrder.orderItems
   */
  export type BinKitchenOrder$orderItemsArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    cursor?: BinKitchenOrderItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrder without action
   */
  export type BinKitchenOrderArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrder
     */
    select?: BinKitchenOrderSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderInclude | null
  }



  /**
   * Model BinKitchenOrderItem
   */


  export type AggregateBinKitchenOrderItem = {
    _count: BinKitchenOrderItemCountAggregateOutputType | null
    _avg: BinKitchenOrderItemAvgAggregateOutputType | null
    _sum: BinKitchenOrderItemSumAggregateOutputType | null
    _min: BinKitchenOrderItemMinAggregateOutputType | null
    _max: BinKitchenOrderItemMaxAggregateOutputType | null
  }

  export type BinKitchenOrderItemAvgAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type BinKitchenOrderItemSumAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
  }

  export type BinKitchenOrderItemMinAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderItemMaxAggregateOutputType = {
    id: number | null
    menuId: number | null
    orderId: number | null
    quantity: number | null
    totalPrice: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BinKitchenOrderItemCountAggregateOutputType = {
    id: number
    menuId: number
    orderId: number
    quantity: number
    totalPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BinKitchenOrderItemAvgAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
  }

  export type BinKitchenOrderItemSumAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
  }

  export type BinKitchenOrderItemMinAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderItemMaxAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BinKitchenOrderItemCountAggregateInputType = {
    id?: true
    menuId?: true
    orderId?: true
    quantity?: true
    totalPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BinKitchenOrderItemAggregateArgs = {
    /**
     * Filter which BinKitchenOrderItem to aggregate.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BinKitchenOrderItems
    **/
    _count?: true | BinKitchenOrderItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BinKitchenOrderItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BinKitchenOrderItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BinKitchenOrderItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BinKitchenOrderItemMaxAggregateInputType
  }

  export type GetBinKitchenOrderItemAggregateType<T extends BinKitchenOrderItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBinKitchenOrderItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBinKitchenOrderItem[P]>
      : GetScalarType<T[P], AggregateBinKitchenOrderItem[P]>
  }




  export type BinKitchenOrderItemGroupByArgs = {
    where?: BinKitchenOrderItemWhereInput
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithAggregationInput>
    by: BinKitchenOrderItemScalarFieldEnum[]
    having?: BinKitchenOrderItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BinKitchenOrderItemCountAggregateInputType | true
    _avg?: BinKitchenOrderItemAvgAggregateInputType
    _sum?: BinKitchenOrderItemSumAggregateInputType
    _min?: BinKitchenOrderItemMinAggregateInputType
    _max?: BinKitchenOrderItemMaxAggregateInputType
  }


  export type BinKitchenOrderItemGroupByOutputType = {
    id: number
    menuId: number
    orderId: number | null
    quantity: number
    totalPrice: number
    createdAt: Date
    updatedAt: Date
    _count: BinKitchenOrderItemCountAggregateOutputType | null
    _avg: BinKitchenOrderItemAvgAggregateOutputType | null
    _sum: BinKitchenOrderItemSumAggregateOutputType | null
    _min: BinKitchenOrderItemMinAggregateOutputType | null
    _max: BinKitchenOrderItemMaxAggregateOutputType | null
  }

  type GetBinKitchenOrderItemGroupByPayload<T extends BinKitchenOrderItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BinKitchenOrderItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BinKitchenOrderItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BinKitchenOrderItemGroupByOutputType[P]>
            : GetScalarType<T[P], BinKitchenOrderItemGroupByOutputType[P]>
        }
      >
    >


  export type BinKitchenOrderItemSelect = {
    id?: boolean
    menu?: boolean | BinKitchenMenuArgs
    menuId?: boolean
    order?: boolean | BinKitchenOrderArgs
    orderId?: boolean
    quantity?: boolean
    totalPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type BinKitchenOrderItemInclude = {
    menu?: boolean | BinKitchenMenuArgs
    order?: boolean | BinKitchenOrderArgs
  }

  export type BinKitchenOrderItemGetPayload<S extends boolean | null | undefined | BinKitchenOrderItemArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? BinKitchenOrderItem :
    S extends undefined ? never :
    S extends { include: any } & (BinKitchenOrderItemArgs | BinKitchenOrderItemFindManyArgs)
    ? BinKitchenOrderItem  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'menu' ? BinKitchenMenuGetPayload<S['include'][P]> :
        P extends 'order' ? BinKitchenOrderGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (BinKitchenOrderItemArgs | BinKitchenOrderItemFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'menu' ? BinKitchenMenuGetPayload<S['select'][P]> :
        P extends 'order' ? BinKitchenOrderGetPayload<S['select'][P]> | null :  P extends keyof BinKitchenOrderItem ? BinKitchenOrderItem[P] : never
  } 
      : BinKitchenOrderItem


  type BinKitchenOrderItemCountArgs = 
    Omit<BinKitchenOrderItemFindManyArgs, 'select' | 'include'> & {
      select?: BinKitchenOrderItemCountAggregateInputType | true
    }

  export interface BinKitchenOrderItemDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one BinKitchenOrderItem that matches the filter.
     * @param {BinKitchenOrderItemFindUniqueArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BinKitchenOrderItemFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BinKitchenOrderItemFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BinKitchenOrderItem'> extends True ? Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>> : Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T> | null, null>

    /**
     * Find one BinKitchenOrderItem that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BinKitchenOrderItemFindUniqueOrThrowArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BinKitchenOrderItemFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindUniqueOrThrowArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Find the first BinKitchenOrderItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindFirstArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BinKitchenOrderItemFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BinKitchenOrderItemFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BinKitchenOrderItem'> extends True ? Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>> : Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T> | null, null>

    /**
     * Find the first BinKitchenOrderItem that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindFirstOrThrowArgs} args - Arguments to find a BinKitchenOrderItem
     * @example
     * // Get one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BinKitchenOrderItemFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindFirstOrThrowArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Find zero or more BinKitchenOrderItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BinKitchenOrderItems
     * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany()
     * 
     * // Get first 10 BinKitchenOrderItems
     * const binKitchenOrderItems = await prisma.binKitchenOrderItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const binKitchenOrderItemWithIdOnly = await prisma.binKitchenOrderItem.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BinKitchenOrderItemFindManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemFindManyArgs>
    ): Prisma.PrismaPromise<Array<BinKitchenOrderItemGetPayload<T>>>

    /**
     * Create a BinKitchenOrderItem.
     * @param {BinKitchenOrderItemCreateArgs} args - Arguments to create a BinKitchenOrderItem.
     * @example
     * // Create one BinKitchenOrderItem
     * const BinKitchenOrderItem = await prisma.binKitchenOrderItem.create({
     *   data: {
     *     // ... data to create a BinKitchenOrderItem
     *   }
     * })
     * 
    **/
    create<T extends BinKitchenOrderItemCreateArgs>(
      args: SelectSubset<T, BinKitchenOrderItemCreateArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Create many BinKitchenOrderItems.
     *     @param {BinKitchenOrderItemCreateManyArgs} args - Arguments to create many BinKitchenOrderItems.
     *     @example
     *     // Create many BinKitchenOrderItems
     *     const binKitchenOrderItem = await prisma.binKitchenOrderItem.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BinKitchenOrderItemCreateManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BinKitchenOrderItem.
     * @param {BinKitchenOrderItemDeleteArgs} args - Arguments to delete one BinKitchenOrderItem.
     * @example
     * // Delete one BinKitchenOrderItem
     * const BinKitchenOrderItem = await prisma.binKitchenOrderItem.delete({
     *   where: {
     *     // ... filter to delete one BinKitchenOrderItem
     *   }
     * })
     * 
    **/
    delete<T extends BinKitchenOrderItemDeleteArgs>(
      args: SelectSubset<T, BinKitchenOrderItemDeleteArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Update one BinKitchenOrderItem.
     * @param {BinKitchenOrderItemUpdateArgs} args - Arguments to update one BinKitchenOrderItem.
     * @example
     * // Update one BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BinKitchenOrderItemUpdateArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpdateArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Delete zero or more BinKitchenOrderItems.
     * @param {BinKitchenOrderItemDeleteManyArgs} args - Arguments to filter BinKitchenOrderItems to delete.
     * @example
     * // Delete a few BinKitchenOrderItems
     * const { count } = await prisma.binKitchenOrderItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BinKitchenOrderItemDeleteManyArgs>(
      args?: SelectSubset<T, BinKitchenOrderItemDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BinKitchenOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BinKitchenOrderItems
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BinKitchenOrderItemUpdateManyArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BinKitchenOrderItem.
     * @param {BinKitchenOrderItemUpsertArgs} args - Arguments to update or create a BinKitchenOrderItem.
     * @example
     * // Update or create a BinKitchenOrderItem
     * const binKitchenOrderItem = await prisma.binKitchenOrderItem.upsert({
     *   create: {
     *     // ... data to create a BinKitchenOrderItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BinKitchenOrderItem we want to update
     *   }
     * })
    **/
    upsert<T extends BinKitchenOrderItemUpsertArgs>(
      args: SelectSubset<T, BinKitchenOrderItemUpsertArgs>
    ): Prisma__BinKitchenOrderItemClient<BinKitchenOrderItemGetPayload<T>>

    /**
     * Count the number of BinKitchenOrderItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemCountArgs} args - Arguments to filter BinKitchenOrderItems to count.
     * @example
     * // Count the number of BinKitchenOrderItems
     * const count = await prisma.binKitchenOrderItem.count({
     *   where: {
     *     // ... the filter for the BinKitchenOrderItems we want to count
     *   }
     * })
    **/
    count<T extends BinKitchenOrderItemCountArgs>(
      args?: Subset<T, BinKitchenOrderItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BinKitchenOrderItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BinKitchenOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BinKitchenOrderItemAggregateArgs>(args: Subset<T, BinKitchenOrderItemAggregateArgs>): Prisma.PrismaPromise<GetBinKitchenOrderItemAggregateType<T>>

    /**
     * Group by BinKitchenOrderItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BinKitchenOrderItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BinKitchenOrderItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BinKitchenOrderItemGroupByArgs['orderBy'] }
        : { orderBy?: BinKitchenOrderItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BinKitchenOrderItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBinKitchenOrderItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for BinKitchenOrderItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BinKitchenOrderItemClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    menu<T extends BinKitchenMenuArgs= {}>(args?: Subset<T, BinKitchenMenuArgs>): Prisma__BinKitchenMenuClient<BinKitchenMenuGetPayload<T> | Null>;

    order<T extends BinKitchenOrderArgs= {}>(args?: Subset<T, BinKitchenOrderArgs>): Prisma__BinKitchenOrderClient<BinKitchenOrderGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * BinKitchenOrderItem base type for findUnique actions
   */
  export type BinKitchenOrderItemFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }

  /**
   * BinKitchenOrderItem findUnique
   */
  export interface BinKitchenOrderItemFindUniqueArgs extends BinKitchenOrderItemFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrderItem findUniqueOrThrow
   */
  export type BinKitchenOrderItemFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem base type for findFirst actions
   */
  export type BinKitchenOrderItemFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrderItems.
     */
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }

  /**
   * BinKitchenOrderItem findFirst
   */
  export interface BinKitchenOrderItemFindFirstArgs extends BinKitchenOrderItemFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * BinKitchenOrderItem findFirstOrThrow
   */
  export type BinKitchenOrderItemFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItem to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BinKitchenOrderItems.
     */
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrderItem findMany
   */
  export type BinKitchenOrderItemFindManyArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter, which BinKitchenOrderItems to fetch.
     */
    where?: BinKitchenOrderItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BinKitchenOrderItems to fetch.
     */
    orderBy?: Enumerable<BinKitchenOrderItemOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BinKitchenOrderItems.
     */
    cursor?: BinKitchenOrderItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BinKitchenOrderItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BinKitchenOrderItems.
     */
    skip?: number
    distinct?: Enumerable<BinKitchenOrderItemScalarFieldEnum>
  }


  /**
   * BinKitchenOrderItem create
   */
  export type BinKitchenOrderItemCreateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The data needed to create a BinKitchenOrderItem.
     */
    data: XOR<BinKitchenOrderItemCreateInput, BinKitchenOrderItemUncheckedCreateInput>
  }


  /**
   * BinKitchenOrderItem createMany
   */
  export type BinKitchenOrderItemCreateManyArgs = {
    /**
     * The data used to create many BinKitchenOrderItems.
     */
    data: Enumerable<BinKitchenOrderItemCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BinKitchenOrderItem update
   */
  export type BinKitchenOrderItemUpdateArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The data needed to update a BinKitchenOrderItem.
     */
    data: XOR<BinKitchenOrderItemUpdateInput, BinKitchenOrderItemUncheckedUpdateInput>
    /**
     * Choose, which BinKitchenOrderItem to update.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem updateMany
   */
  export type BinKitchenOrderItemUpdateManyArgs = {
    /**
     * The data used to update BinKitchenOrderItems.
     */
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyInput>
    /**
     * Filter which BinKitchenOrderItems to update
     */
    where?: BinKitchenOrderItemWhereInput
  }


  /**
   * BinKitchenOrderItem upsert
   */
  export type BinKitchenOrderItemUpsertArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * The filter to search for the BinKitchenOrderItem to update in case it exists.
     */
    where: BinKitchenOrderItemWhereUniqueInput
    /**
     * In case the BinKitchenOrderItem found by the `where` argument doesn't exist, create a new BinKitchenOrderItem with this data.
     */
    create: XOR<BinKitchenOrderItemCreateInput, BinKitchenOrderItemUncheckedCreateInput>
    /**
     * In case the BinKitchenOrderItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BinKitchenOrderItemUpdateInput, BinKitchenOrderItemUncheckedUpdateInput>
  }


  /**
   * BinKitchenOrderItem delete
   */
  export type BinKitchenOrderItemDeleteArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
    /**
     * Filter which BinKitchenOrderItem to delete.
     */
    where: BinKitchenOrderItemWhereUniqueInput
  }


  /**
   * BinKitchenOrderItem deleteMany
   */
  export type BinKitchenOrderItemDeleteManyArgs = {
    /**
     * Filter which BinKitchenOrderItems to delete
     */
    where?: BinKitchenOrderItemWhereInput
  }


  /**
   * BinKitchenOrderItem without action
   */
  export type BinKitchenOrderItemArgs = {
    /**
     * Select specific fields to fetch from the BinKitchenOrderItem
     */
    select?: BinKitchenOrderItemSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BinKitchenOrderItemInclude | null
  }



  /**
   * Model TodoList
   */


  export type AggregateTodoList = {
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  export type TodoListAvgAggregateOutputType = {
    id: number | null
  }

  export type TodoListSumAggregateOutputType = {
    id: number | null
  }

  export type TodoListMinAggregateOutputType = {
    id: number | null
    task: string | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoListMaxAggregateOutputType = {
    id: number | null
    task: string | null
    status: string | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TodoListCountAggregateOutputType = {
    id: number
    task: number
    status: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TodoListAvgAggregateInputType = {
    id?: true
  }

  export type TodoListSumAggregateInputType = {
    id?: true
  }

  export type TodoListMinAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoListMaxAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TodoListCountAggregateInputType = {
    id?: true
    task?: true
    status?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TodoListAggregateArgs = {
    /**
     * Filter which TodoList to aggregate.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TodoLists
    **/
    _count?: true | TodoListCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TodoListAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TodoListSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TodoListMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TodoListMaxAggregateInputType
  }

  export type GetTodoListAggregateType<T extends TodoListAggregateArgs> = {
        [P in keyof T & keyof AggregateTodoList]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTodoList[P]>
      : GetScalarType<T[P], AggregateTodoList[P]>
  }




  export type TodoListGroupByArgs = {
    where?: TodoListWhereInput
    orderBy?: Enumerable<TodoListOrderByWithAggregationInput>
    by: TodoListScalarFieldEnum[]
    having?: TodoListScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TodoListCountAggregateInputType | true
    _avg?: TodoListAvgAggregateInputType
    _sum?: TodoListSumAggregateInputType
    _min?: TodoListMinAggregateInputType
    _max?: TodoListMaxAggregateInputType
  }


  export type TodoListGroupByOutputType = {
    id: number
    task: string
    status: string
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: TodoListCountAggregateOutputType | null
    _avg: TodoListAvgAggregateOutputType | null
    _sum: TodoListSumAggregateOutputType | null
    _min: TodoListMinAggregateOutputType | null
    _max: TodoListMaxAggregateOutputType | null
  }

  type GetTodoListGroupByPayload<T extends TodoListGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TodoListGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TodoListGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TodoListGroupByOutputType[P]>
            : GetScalarType<T[P], TodoListGroupByOutputType[P]>
        }
      >
    >


  export type TodoListSelect = {
    id?: boolean
    task?: boolean
    status?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TodoListGetPayload<S extends boolean | null | undefined | TodoListArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TodoList :
    S extends undefined ? never :
    S extends { include: any } & (TodoListArgs | TodoListFindManyArgs)
    ? TodoList 
    : S extends { select: any } & (TodoListArgs | TodoListFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof TodoList ? TodoList[P] : never
  } 
      : TodoList


  type TodoListCountArgs = 
    Omit<TodoListFindManyArgs, 'select' | 'include'> & {
      select?: TodoListCountAggregateInputType | true
    }

  export interface TodoListDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TodoList that matches the filter.
     * @param {TodoListFindUniqueArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TodoListFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TodoListFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find one TodoList that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TodoListFindUniqueOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TodoListFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindUniqueOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find the first TodoList that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TodoListFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TodoListFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TodoList'> extends True ? Prisma__TodoListClient<TodoListGetPayload<T>> : Prisma__TodoListClient<TodoListGetPayload<T> | null, null>

    /**
     * Find the first TodoList that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindFirstOrThrowArgs} args - Arguments to find a TodoList
     * @example
     * // Get one TodoList
     * const todoList = await prisma.todoList.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TodoListFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TodoListFindFirstOrThrowArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Find zero or more TodoLists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TodoLists
     * const todoLists = await prisma.todoList.findMany()
     * 
     * // Get first 10 TodoLists
     * const todoLists = await prisma.todoList.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const todoListWithIdOnly = await prisma.todoList.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TodoListFindManyArgs>(
      args?: SelectSubset<T, TodoListFindManyArgs>
    ): Prisma.PrismaPromise<Array<TodoListGetPayload<T>>>

    /**
     * Create a TodoList.
     * @param {TodoListCreateArgs} args - Arguments to create a TodoList.
     * @example
     * // Create one TodoList
     * const TodoList = await prisma.todoList.create({
     *   data: {
     *     // ... data to create a TodoList
     *   }
     * })
     * 
    **/
    create<T extends TodoListCreateArgs>(
      args: SelectSubset<T, TodoListCreateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Create many TodoLists.
     *     @param {TodoListCreateManyArgs} args - Arguments to create many TodoLists.
     *     @example
     *     // Create many TodoLists
     *     const todoList = await prisma.todoList.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TodoListCreateManyArgs>(
      args?: SelectSubset<T, TodoListCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TodoList.
     * @param {TodoListDeleteArgs} args - Arguments to delete one TodoList.
     * @example
     * // Delete one TodoList
     * const TodoList = await prisma.todoList.delete({
     *   where: {
     *     // ... filter to delete one TodoList
     *   }
     * })
     * 
    **/
    delete<T extends TodoListDeleteArgs>(
      args: SelectSubset<T, TodoListDeleteArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Update one TodoList.
     * @param {TodoListUpdateArgs} args - Arguments to update one TodoList.
     * @example
     * // Update one TodoList
     * const todoList = await prisma.todoList.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TodoListUpdateArgs>(
      args: SelectSubset<T, TodoListUpdateArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Delete zero or more TodoLists.
     * @param {TodoListDeleteManyArgs} args - Arguments to filter TodoLists to delete.
     * @example
     * // Delete a few TodoLists
     * const { count } = await prisma.todoList.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TodoListDeleteManyArgs>(
      args?: SelectSubset<T, TodoListDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TodoLists
     * const todoList = await prisma.todoList.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TodoListUpdateManyArgs>(
      args: SelectSubset<T, TodoListUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TodoList.
     * @param {TodoListUpsertArgs} args - Arguments to update or create a TodoList.
     * @example
     * // Update or create a TodoList
     * const todoList = await prisma.todoList.upsert({
     *   create: {
     *     // ... data to create a TodoList
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TodoList we want to update
     *   }
     * })
    **/
    upsert<T extends TodoListUpsertArgs>(
      args: SelectSubset<T, TodoListUpsertArgs>
    ): Prisma__TodoListClient<TodoListGetPayload<T>>

    /**
     * Count the number of TodoLists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListCountArgs} args - Arguments to filter TodoLists to count.
     * @example
     * // Count the number of TodoLists
     * const count = await prisma.todoList.count({
     *   where: {
     *     // ... the filter for the TodoLists we want to count
     *   }
     * })
    **/
    count<T extends TodoListCountArgs>(
      args?: Subset<T, TodoListCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TodoListCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TodoListAggregateArgs>(args: Subset<T, TodoListAggregateArgs>): Prisma.PrismaPromise<GetTodoListAggregateType<T>>

    /**
     * Group by TodoList.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TodoListGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TodoListGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TodoListGroupByArgs['orderBy'] }
        : { orderBy?: TodoListGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TodoListGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTodoListGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TodoList.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TodoListClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TodoList base type for findUnique actions
   */
  export type TodoListFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }

  /**
   * TodoList findUnique
   */
  export interface TodoListFindUniqueArgs extends TodoListFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findUniqueOrThrow
   */
  export type TodoListFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList base type for findFirst actions
   */
  export type TodoListFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }

  /**
   * TodoList findFirst
   */
  export interface TodoListFindFirstArgs extends TodoListFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TodoList findFirstOrThrow
   */
  export type TodoListFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoList to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TodoLists.
     */
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList findMany
   */
  export type TodoListFindManyArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter, which TodoLists to fetch.
     */
    where?: TodoListWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TodoLists to fetch.
     */
    orderBy?: Enumerable<TodoListOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TodoLists.
     */
    cursor?: TodoListWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TodoLists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TodoLists.
     */
    skip?: number
    distinct?: Enumerable<TodoListScalarFieldEnum>
  }


  /**
   * TodoList create
   */
  export type TodoListCreateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The data needed to create a TodoList.
     */
    data: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
  }


  /**
   * TodoList createMany
   */
  export type TodoListCreateManyArgs = {
    /**
     * The data used to create many TodoLists.
     */
    data: Enumerable<TodoListCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TodoList update
   */
  export type TodoListUpdateArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The data needed to update a TodoList.
     */
    data: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
    /**
     * Choose, which TodoList to update.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList updateMany
   */
  export type TodoListUpdateManyArgs = {
    /**
     * The data used to update TodoLists.
     */
    data: XOR<TodoListUpdateManyMutationInput, TodoListUncheckedUpdateManyInput>
    /**
     * Filter which TodoLists to update
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList upsert
   */
  export type TodoListUpsertArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * The filter to search for the TodoList to update in case it exists.
     */
    where: TodoListWhereUniqueInput
    /**
     * In case the TodoList found by the `where` argument doesn't exist, create a new TodoList with this data.
     */
    create: XOR<TodoListCreateInput, TodoListUncheckedCreateInput>
    /**
     * In case the TodoList was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TodoListUpdateInput, TodoListUncheckedUpdateInput>
  }


  /**
   * TodoList delete
   */
  export type TodoListDeleteArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
    /**
     * Filter which TodoList to delete.
     */
    where: TodoListWhereUniqueInput
  }


  /**
   * TodoList deleteMany
   */
  export type TodoListDeleteManyArgs = {
    /**
     * Filter which TodoLists to delete
     */
    where?: TodoListWhereInput
  }


  /**
   * TodoList without action
   */
  export type TodoListArgs = {
    /**
     * Select specific fields to fetch from the TodoList
     */
    select?: TodoListSelect | null
  }



  /**
   * Model TriviaCategory
   */


  export type AggregateTriviaCategory = {
    _count: TriviaCategoryCountAggregateOutputType | null
    _avg: TriviaCategoryAvgAggregateOutputType | null
    _sum: TriviaCategorySumAggregateOutputType | null
    _min: TriviaCategoryMinAggregateOutputType | null
    _max: TriviaCategoryMaxAggregateOutputType | null
  }

  export type TriviaCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type TriviaCategorySumAggregateOutputType = {
    id: number | null
  }

  export type TriviaCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaCategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaCategoryAvgAggregateInputType = {
    id?: true
  }

  export type TriviaCategorySumAggregateInputType = {
    id?: true
  }

  export type TriviaCategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaCategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaCategoryAggregateArgs = {
    /**
     * Filter which TriviaCategory to aggregate.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaCategories
    **/
    _count?: true | TriviaCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaCategoryMaxAggregateInputType
  }

  export type GetTriviaCategoryAggregateType<T extends TriviaCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaCategory[P]>
      : GetScalarType<T[P], AggregateTriviaCategory[P]>
  }




  export type TriviaCategoryGroupByArgs = {
    where?: TriviaCategoryWhereInput
    orderBy?: Enumerable<TriviaCategoryOrderByWithAggregationInput>
    by: TriviaCategoryScalarFieldEnum[]
    having?: TriviaCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaCategoryCountAggregateInputType | true
    _avg?: TriviaCategoryAvgAggregateInputType
    _sum?: TriviaCategorySumAggregateInputType
    _min?: TriviaCategoryMinAggregateInputType
    _max?: TriviaCategoryMaxAggregateInputType
  }


  export type TriviaCategoryGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TriviaCategoryCountAggregateOutputType | null
    _avg: TriviaCategoryAvgAggregateOutputType | null
    _sum: TriviaCategorySumAggregateOutputType | null
    _min: TriviaCategoryMinAggregateOutputType | null
    _max: TriviaCategoryMaxAggregateOutputType | null
  }

  type GetTriviaCategoryGroupByPayload<T extends TriviaCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaCategoryGroupByOutputType[P]>
        }
      >
    >


  export type TriviaCategorySelect = {
    id?: boolean
    name?: boolean
    triviaQuizes?: boolean | TriviaCategory$triviaQuizesArgs
    createdAt?: boolean
    updatedAt?: boolean
    rounds?: boolean | TriviaCategory$roundsArgs
    _count?: boolean | TriviaCategoryCountOutputTypeArgs
  }


  export type TriviaCategoryInclude = {
    triviaQuizes?: boolean | TriviaCategory$triviaQuizesArgs
    rounds?: boolean | TriviaCategory$roundsArgs
    _count?: boolean | TriviaCategoryCountOutputTypeArgs
  }

  export type TriviaCategoryGetPayload<S extends boolean | null | undefined | TriviaCategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaCategory :
    S extends undefined ? never :
    S extends { include: any } & (TriviaCategoryArgs | TriviaCategoryFindManyArgs)
    ? TriviaCategory  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'triviaQuizes' ? Array < TriviaQuizGetPayload<S['include'][P]>>  :
        P extends 'rounds' ? Array < TriviaRoundGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaCategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaCategoryArgs | TriviaCategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'triviaQuizes' ? Array < TriviaQuizGetPayload<S['select'][P]>>  :
        P extends 'rounds' ? Array < TriviaRoundGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaCategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaCategory ? TriviaCategory[P] : never
  } 
      : TriviaCategory


  type TriviaCategoryCountArgs = 
    Omit<TriviaCategoryFindManyArgs, 'select' | 'include'> & {
      select?: TriviaCategoryCountAggregateInputType | true
    }

  export interface TriviaCategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaCategory that matches the filter.
     * @param {TriviaCategoryFindUniqueArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaCategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaCategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaCategory'> extends True ? Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>> : Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | null, null>

    /**
     * Find one TriviaCategory that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaCategoryFindUniqueOrThrowArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaCategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaCategoryFindUniqueOrThrowArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Find the first TriviaCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindFirstArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaCategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaCategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaCategory'> extends True ? Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>> : Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | null, null>

    /**
     * Find the first TriviaCategory that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindFirstOrThrowArgs} args - Arguments to find a TriviaCategory
     * @example
     * // Get one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaCategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaCategoryFindFirstOrThrowArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Find zero or more TriviaCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaCategories
     * const triviaCategories = await prisma.triviaCategory.findMany()
     * 
     * // Get first 10 TriviaCategories
     * const triviaCategories = await prisma.triviaCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaCategoryWithIdOnly = await prisma.triviaCategory.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaCategoryFindManyArgs>(
      args?: SelectSubset<T, TriviaCategoryFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaCategoryGetPayload<T>>>

    /**
     * Create a TriviaCategory.
     * @param {TriviaCategoryCreateArgs} args - Arguments to create a TriviaCategory.
     * @example
     * // Create one TriviaCategory
     * const TriviaCategory = await prisma.triviaCategory.create({
     *   data: {
     *     // ... data to create a TriviaCategory
     *   }
     * })
     * 
    **/
    create<T extends TriviaCategoryCreateArgs>(
      args: SelectSubset<T, TriviaCategoryCreateArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Create many TriviaCategories.
     *     @param {TriviaCategoryCreateManyArgs} args - Arguments to create many TriviaCategories.
     *     @example
     *     // Create many TriviaCategories
     *     const triviaCategory = await prisma.triviaCategory.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaCategoryCreateManyArgs>(
      args?: SelectSubset<T, TriviaCategoryCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaCategory.
     * @param {TriviaCategoryDeleteArgs} args - Arguments to delete one TriviaCategory.
     * @example
     * // Delete one TriviaCategory
     * const TriviaCategory = await prisma.triviaCategory.delete({
     *   where: {
     *     // ... filter to delete one TriviaCategory
     *   }
     * })
     * 
    **/
    delete<T extends TriviaCategoryDeleteArgs>(
      args: SelectSubset<T, TriviaCategoryDeleteArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Update one TriviaCategory.
     * @param {TriviaCategoryUpdateArgs} args - Arguments to update one TriviaCategory.
     * @example
     * // Update one TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaCategoryUpdateArgs>(
      args: SelectSubset<T, TriviaCategoryUpdateArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Delete zero or more TriviaCategories.
     * @param {TriviaCategoryDeleteManyArgs} args - Arguments to filter TriviaCategories to delete.
     * @example
     * // Delete a few TriviaCategories
     * const { count } = await prisma.triviaCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaCategoryDeleteManyArgs>(
      args?: SelectSubset<T, TriviaCategoryDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaCategories
     * const triviaCategory = await prisma.triviaCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaCategoryUpdateManyArgs>(
      args: SelectSubset<T, TriviaCategoryUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaCategory.
     * @param {TriviaCategoryUpsertArgs} args - Arguments to update or create a TriviaCategory.
     * @example
     * // Update or create a TriviaCategory
     * const triviaCategory = await prisma.triviaCategory.upsert({
     *   create: {
     *     // ... data to create a TriviaCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaCategory we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaCategoryUpsertArgs>(
      args: SelectSubset<T, TriviaCategoryUpsertArgs>
    ): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T>>

    /**
     * Count the number of TriviaCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryCountArgs} args - Arguments to filter TriviaCategories to count.
     * @example
     * // Count the number of TriviaCategories
     * const count = await prisma.triviaCategory.count({
     *   where: {
     *     // ... the filter for the TriviaCategories we want to count
     *   }
     * })
    **/
    count<T extends TriviaCategoryCountArgs>(
      args?: Subset<T, TriviaCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaCategoryAggregateArgs>(args: Subset<T, TriviaCategoryAggregateArgs>): Prisma.PrismaPromise<GetTriviaCategoryAggregateType<T>>

    /**
     * Group by TriviaCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaCategoryGroupByArgs['orderBy'] }
        : { orderBy?: TriviaCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaCategoryClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    triviaQuizes<T extends TriviaCategory$triviaQuizesArgs= {}>(args?: Subset<T, TriviaCategory$triviaQuizesArgs>): Prisma.PrismaPromise<Array<TriviaQuizGetPayload<T>>| Null>;

    rounds<T extends TriviaCategory$roundsArgs= {}>(args?: Subset<T, TriviaCategory$roundsArgs>): Prisma.PrismaPromise<Array<TriviaRoundGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaCategory base type for findUnique actions
   */
  export type TriviaCategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where: TriviaCategoryWhereUniqueInput
  }

  /**
   * TriviaCategory findUnique
   */
  export interface TriviaCategoryFindUniqueArgs extends TriviaCategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaCategory findUniqueOrThrow
   */
  export type TriviaCategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory base type for findFirst actions
   */
  export type TriviaCategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaCategories.
     */
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }

  /**
   * TriviaCategory findFirst
   */
  export interface TriviaCategoryFindFirstArgs extends TriviaCategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaCategory findFirstOrThrow
   */
  export type TriviaCategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategory to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaCategories.
     */
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }


  /**
   * TriviaCategory findMany
   */
  export type TriviaCategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter, which TriviaCategories to fetch.
     */
    where?: TriviaCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaCategories to fetch.
     */
    orderBy?: Enumerable<TriviaCategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaCategories.
     */
    cursor?: TriviaCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaCategories.
     */
    skip?: number
    distinct?: Enumerable<TriviaCategoryScalarFieldEnum>
  }


  /**
   * TriviaCategory create
   */
  export type TriviaCategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The data needed to create a TriviaCategory.
     */
    data: XOR<TriviaCategoryCreateInput, TriviaCategoryUncheckedCreateInput>
  }


  /**
   * TriviaCategory createMany
   */
  export type TriviaCategoryCreateManyArgs = {
    /**
     * The data used to create many TriviaCategories.
     */
    data: Enumerable<TriviaCategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaCategory update
   */
  export type TriviaCategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The data needed to update a TriviaCategory.
     */
    data: XOR<TriviaCategoryUpdateInput, TriviaCategoryUncheckedUpdateInput>
    /**
     * Choose, which TriviaCategory to update.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory updateMany
   */
  export type TriviaCategoryUpdateManyArgs = {
    /**
     * The data used to update TriviaCategories.
     */
    data: XOR<TriviaCategoryUpdateManyMutationInput, TriviaCategoryUncheckedUpdateManyInput>
    /**
     * Filter which TriviaCategories to update
     */
    where?: TriviaCategoryWhereInput
  }


  /**
   * TriviaCategory upsert
   */
  export type TriviaCategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * The filter to search for the TriviaCategory to update in case it exists.
     */
    where: TriviaCategoryWhereUniqueInput
    /**
     * In case the TriviaCategory found by the `where` argument doesn't exist, create a new TriviaCategory with this data.
     */
    create: XOR<TriviaCategoryCreateInput, TriviaCategoryUncheckedCreateInput>
    /**
     * In case the TriviaCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaCategoryUpdateInput, TriviaCategoryUncheckedUpdateInput>
  }


  /**
   * TriviaCategory delete
   */
  export type TriviaCategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
    /**
     * Filter which TriviaCategory to delete.
     */
    where: TriviaCategoryWhereUniqueInput
  }


  /**
   * TriviaCategory deleteMany
   */
  export type TriviaCategoryDeleteManyArgs = {
    /**
     * Filter which TriviaCategories to delete
     */
    where?: TriviaCategoryWhereInput
  }


  /**
   * TriviaCategory.triviaQuizes
   */
  export type TriviaCategory$triviaQuizesArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    where?: TriviaQuizWhereInput
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    cursor?: TriviaQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaCategory.rounds
   */
  export type TriviaCategory$roundsArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    where?: TriviaRoundWhereInput
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    cursor?: TriviaRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaCategory without action
   */
  export type TriviaCategoryArgs = {
    /**
     * Select specific fields to fetch from the TriviaCategory
     */
    select?: TriviaCategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaCategoryInclude | null
  }



  /**
   * Model TriviaQuiz
   */


  export type AggregateTriviaQuiz = {
    _count: TriviaQuizCountAggregateOutputType | null
    _avg: TriviaQuizAvgAggregateOutputType | null
    _sum: TriviaQuizSumAggregateOutputType | null
    _min: TriviaQuizMinAggregateOutputType | null
    _max: TriviaQuizMaxAggregateOutputType | null
  }

  export type TriviaQuizAvgAggregateOutputType = {
    id: number | null
    answerId: number | null
  }

  export type TriviaQuizSumAggregateOutputType = {
    id: number | null
    answerId: number | null
  }

  export type TriviaQuizMinAggregateOutputType = {
    id: number | null
    quiz: string | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    answerId: number | null
  }

  export type TriviaQuizMaxAggregateOutputType = {
    id: number | null
    quiz: string | null
    categoryName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    answerId: number | null
  }

  export type TriviaQuizCountAggregateOutputType = {
    id: number
    quiz: number
    categoryName: number
    createdAt: number
    updatedAt: number
    answerId: number
    _all: number
  }


  export type TriviaQuizAvgAggregateInputType = {
    id?: true
    answerId?: true
  }

  export type TriviaQuizSumAggregateInputType = {
    id?: true
    answerId?: true
  }

  export type TriviaQuizMinAggregateInputType = {
    id?: true
    quiz?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    answerId?: true
  }

  export type TriviaQuizMaxAggregateInputType = {
    id?: true
    quiz?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    answerId?: true
  }

  export type TriviaQuizCountAggregateInputType = {
    id?: true
    quiz?: true
    categoryName?: true
    createdAt?: true
    updatedAt?: true
    answerId?: true
    _all?: true
  }

  export type TriviaQuizAggregateArgs = {
    /**
     * Filter which TriviaQuiz to aggregate.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaQuizs
    **/
    _count?: true | TriviaQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaQuizMaxAggregateInputType
  }

  export type GetTriviaQuizAggregateType<T extends TriviaQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaQuiz[P]>
      : GetScalarType<T[P], AggregateTriviaQuiz[P]>
  }




  export type TriviaQuizGroupByArgs = {
    where?: TriviaQuizWhereInput
    orderBy?: Enumerable<TriviaQuizOrderByWithAggregationInput>
    by: TriviaQuizScalarFieldEnum[]
    having?: TriviaQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaQuizCountAggregateInputType | true
    _avg?: TriviaQuizAvgAggregateInputType
    _sum?: TriviaQuizSumAggregateInputType
    _min?: TriviaQuizMinAggregateInputType
    _max?: TriviaQuizMaxAggregateInputType
  }


  export type TriviaQuizGroupByOutputType = {
    id: number
    quiz: string
    categoryName: string
    createdAt: Date
    updatedAt: Date
    answerId: number
    _count: TriviaQuizCountAggregateOutputType | null
    _avg: TriviaQuizAvgAggregateOutputType | null
    _sum: TriviaQuizSumAggregateOutputType | null
    _min: TriviaQuizMinAggregateOutputType | null
    _max: TriviaQuizMaxAggregateOutputType | null
  }

  type GetTriviaQuizGroupByPayload<T extends TriviaQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaQuizGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaQuizGroupByOutputType[P]>
        }
      >
    >


  export type TriviaQuizSelect = {
    id?: boolean
    quiz?: boolean
    category?: boolean | TriviaCategoryArgs
    categoryName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    choices?: boolean | TriviaQuiz$choicesArgs
    answerId?: boolean
    roundQuizes?: boolean | TriviaQuiz$roundQuizesArgs
    _count?: boolean | TriviaQuizCountOutputTypeArgs
  }


  export type TriviaQuizInclude = {
    category?: boolean | TriviaCategoryArgs
    choices?: boolean | TriviaQuiz$choicesArgs
    roundQuizes?: boolean | TriviaQuiz$roundQuizesArgs
    _count?: boolean | TriviaQuizCountOutputTypeArgs
  }

  export type TriviaQuizGetPayload<S extends boolean | null | undefined | TriviaQuizArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaQuiz :
    S extends undefined ? never :
    S extends { include: any } & (TriviaQuizArgs | TriviaQuizFindManyArgs)
    ? TriviaQuiz  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['include'][P]> | null :
        P extends 'choices' ? Array < TriviaChoiceGetPayload<S['include'][P]>>  :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaQuizCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaQuizArgs | TriviaQuizFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['select'][P]> | null :
        P extends 'choices' ? Array < TriviaChoiceGetPayload<S['select'][P]>>  :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaQuizCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaQuiz ? TriviaQuiz[P] : never
  } 
      : TriviaQuiz


  type TriviaQuizCountArgs = 
    Omit<TriviaQuizFindManyArgs, 'select' | 'include'> & {
      select?: TriviaQuizCountAggregateInputType | true
    }

  export interface TriviaQuizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaQuiz that matches the filter.
     * @param {TriviaQuizFindUniqueArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaQuizFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaQuizFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaQuiz'> extends True ? Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>> : Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | null, null>

    /**
     * Find one TriviaQuiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaQuizFindUniqueOrThrowArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaQuizFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaQuizFindUniqueOrThrowArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Find the first TriviaQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindFirstArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaQuizFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaQuizFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaQuiz'> extends True ? Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>> : Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | null, null>

    /**
     * Find the first TriviaQuiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindFirstOrThrowArgs} args - Arguments to find a TriviaQuiz
     * @example
     * // Get one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaQuizFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaQuizFindFirstOrThrowArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Find zero or more TriviaQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaQuizs
     * const triviaQuizs = await prisma.triviaQuiz.findMany()
     * 
     * // Get first 10 TriviaQuizs
     * const triviaQuizs = await prisma.triviaQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaQuizWithIdOnly = await prisma.triviaQuiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaQuizFindManyArgs>(
      args?: SelectSubset<T, TriviaQuizFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaQuizGetPayload<T>>>

    /**
     * Create a TriviaQuiz.
     * @param {TriviaQuizCreateArgs} args - Arguments to create a TriviaQuiz.
     * @example
     * // Create one TriviaQuiz
     * const TriviaQuiz = await prisma.triviaQuiz.create({
     *   data: {
     *     // ... data to create a TriviaQuiz
     *   }
     * })
     * 
    **/
    create<T extends TriviaQuizCreateArgs>(
      args: SelectSubset<T, TriviaQuizCreateArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Create many TriviaQuizs.
     *     @param {TriviaQuizCreateManyArgs} args - Arguments to create many TriviaQuizs.
     *     @example
     *     // Create many TriviaQuizs
     *     const triviaQuiz = await prisma.triviaQuiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaQuizCreateManyArgs>(
      args?: SelectSubset<T, TriviaQuizCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaQuiz.
     * @param {TriviaQuizDeleteArgs} args - Arguments to delete one TriviaQuiz.
     * @example
     * // Delete one TriviaQuiz
     * const TriviaQuiz = await prisma.triviaQuiz.delete({
     *   where: {
     *     // ... filter to delete one TriviaQuiz
     *   }
     * })
     * 
    **/
    delete<T extends TriviaQuizDeleteArgs>(
      args: SelectSubset<T, TriviaQuizDeleteArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Update one TriviaQuiz.
     * @param {TriviaQuizUpdateArgs} args - Arguments to update one TriviaQuiz.
     * @example
     * // Update one TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaQuizUpdateArgs>(
      args: SelectSubset<T, TriviaQuizUpdateArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Delete zero or more TriviaQuizs.
     * @param {TriviaQuizDeleteManyArgs} args - Arguments to filter TriviaQuizs to delete.
     * @example
     * // Delete a few TriviaQuizs
     * const { count } = await prisma.triviaQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaQuizDeleteManyArgs>(
      args?: SelectSubset<T, TriviaQuizDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaQuizs
     * const triviaQuiz = await prisma.triviaQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaQuizUpdateManyArgs>(
      args: SelectSubset<T, TriviaQuizUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaQuiz.
     * @param {TriviaQuizUpsertArgs} args - Arguments to update or create a TriviaQuiz.
     * @example
     * // Update or create a TriviaQuiz
     * const triviaQuiz = await prisma.triviaQuiz.upsert({
     *   create: {
     *     // ... data to create a TriviaQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaQuiz we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaQuizUpsertArgs>(
      args: SelectSubset<T, TriviaQuizUpsertArgs>
    ): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T>>

    /**
     * Count the number of TriviaQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizCountArgs} args - Arguments to filter TriviaQuizs to count.
     * @example
     * // Count the number of TriviaQuizs
     * const count = await prisma.triviaQuiz.count({
     *   where: {
     *     // ... the filter for the TriviaQuizs we want to count
     *   }
     * })
    **/
    count<T extends TriviaQuizCountArgs>(
      args?: Subset<T, TriviaQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaQuizAggregateArgs>(args: Subset<T, TriviaQuizAggregateArgs>): Prisma.PrismaPromise<GetTriviaQuizAggregateType<T>>

    /**
     * Group by TriviaQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaQuizGroupByArgs['orderBy'] }
        : { orderBy?: TriviaQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaQuizClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends TriviaCategoryArgs= {}>(args?: Subset<T, TriviaCategoryArgs>): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | Null>;

    choices<T extends TriviaQuiz$choicesArgs= {}>(args?: Subset<T, TriviaQuiz$choicesArgs>): Prisma.PrismaPromise<Array<TriviaChoiceGetPayload<T>>| Null>;

    roundQuizes<T extends TriviaQuiz$roundQuizesArgs= {}>(args?: Subset<T, TriviaQuiz$roundQuizesArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaQuiz base type for findUnique actions
   */
  export type TriviaQuizFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where: TriviaQuizWhereUniqueInput
  }

  /**
   * TriviaQuiz findUnique
   */
  export interface TriviaQuizFindUniqueArgs extends TriviaQuizFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaQuiz findUniqueOrThrow
   */
  export type TriviaQuizFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz base type for findFirst actions
   */
  export type TriviaQuizFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaQuizs.
     */
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }

  /**
   * TriviaQuiz findFirst
   */
  export interface TriviaQuizFindFirstArgs extends TriviaQuizFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaQuiz findFirstOrThrow
   */
  export type TriviaQuizFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuiz to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaQuizs.
     */
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz findMany
   */
  export type TriviaQuizFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter, which TriviaQuizs to fetch.
     */
    where?: TriviaQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaQuizs.
     */
    cursor?: TriviaQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaQuizs.
     */
    skip?: number
    distinct?: Enumerable<TriviaQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz create
   */
  export type TriviaQuizCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The data needed to create a TriviaQuiz.
     */
    data: XOR<TriviaQuizCreateInput, TriviaQuizUncheckedCreateInput>
  }


  /**
   * TriviaQuiz createMany
   */
  export type TriviaQuizCreateManyArgs = {
    /**
     * The data used to create many TriviaQuizs.
     */
    data: Enumerable<TriviaQuizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaQuiz update
   */
  export type TriviaQuizUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The data needed to update a TriviaQuiz.
     */
    data: XOR<TriviaQuizUpdateInput, TriviaQuizUncheckedUpdateInput>
    /**
     * Choose, which TriviaQuiz to update.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz updateMany
   */
  export type TriviaQuizUpdateManyArgs = {
    /**
     * The data used to update TriviaQuizs.
     */
    data: XOR<TriviaQuizUpdateManyMutationInput, TriviaQuizUncheckedUpdateManyInput>
    /**
     * Filter which TriviaQuizs to update
     */
    where?: TriviaQuizWhereInput
  }


  /**
   * TriviaQuiz upsert
   */
  export type TriviaQuizUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * The filter to search for the TriviaQuiz to update in case it exists.
     */
    where: TriviaQuizWhereUniqueInput
    /**
     * In case the TriviaQuiz found by the `where` argument doesn't exist, create a new TriviaQuiz with this data.
     */
    create: XOR<TriviaQuizCreateInput, TriviaQuizUncheckedCreateInput>
    /**
     * In case the TriviaQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaQuizUpdateInput, TriviaQuizUncheckedUpdateInput>
  }


  /**
   * TriviaQuiz delete
   */
  export type TriviaQuizDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
    /**
     * Filter which TriviaQuiz to delete.
     */
    where: TriviaQuizWhereUniqueInput
  }


  /**
   * TriviaQuiz deleteMany
   */
  export type TriviaQuizDeleteManyArgs = {
    /**
     * Filter which TriviaQuizs to delete
     */
    where?: TriviaQuizWhereInput
  }


  /**
   * TriviaQuiz.choices
   */
  export type TriviaQuiz$choicesArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    where?: TriviaChoiceWhereInput
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    cursor?: TriviaChoiceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaQuiz.roundQuizes
   */
  export type TriviaQuiz$roundQuizesArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    cursor?: TriviaRoundQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaQuiz without action
   */
  export type TriviaQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaQuiz
     */
    select?: TriviaQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaQuizInclude | null
  }



  /**
   * Model TriviaChoice
   */


  export type AggregateTriviaChoice = {
    _count: TriviaChoiceCountAggregateOutputType | null
    _avg: TriviaChoiceAvgAggregateOutputType | null
    _sum: TriviaChoiceSumAggregateOutputType | null
    _min: TriviaChoiceMinAggregateOutputType | null
    _max: TriviaChoiceMaxAggregateOutputType | null
  }

  export type TriviaChoiceAvgAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type TriviaChoiceSumAggregateOutputType = {
    id: number | null
    quizId: number | null
  }

  export type TriviaChoiceMinAggregateOutputType = {
    id: number | null
    choice: string | null
    quizId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaChoiceMaxAggregateOutputType = {
    id: number | null
    choice: string | null
    quizId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaChoiceCountAggregateOutputType = {
    id: number
    choice: number
    quizId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaChoiceAvgAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type TriviaChoiceSumAggregateInputType = {
    id?: true
    quizId?: true
  }

  export type TriviaChoiceMinAggregateInputType = {
    id?: true
    choice?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaChoiceMaxAggregateInputType = {
    id?: true
    choice?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaChoiceCountAggregateInputType = {
    id?: true
    choice?: true
    quizId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaChoiceAggregateArgs = {
    /**
     * Filter which TriviaChoice to aggregate.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaChoices
    **/
    _count?: true | TriviaChoiceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaChoiceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaChoiceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaChoiceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaChoiceMaxAggregateInputType
  }

  export type GetTriviaChoiceAggregateType<T extends TriviaChoiceAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaChoice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaChoice[P]>
      : GetScalarType<T[P], AggregateTriviaChoice[P]>
  }




  export type TriviaChoiceGroupByArgs = {
    where?: TriviaChoiceWhereInput
    orderBy?: Enumerable<TriviaChoiceOrderByWithAggregationInput>
    by: TriviaChoiceScalarFieldEnum[]
    having?: TriviaChoiceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaChoiceCountAggregateInputType | true
    _avg?: TriviaChoiceAvgAggregateInputType
    _sum?: TriviaChoiceSumAggregateInputType
    _min?: TriviaChoiceMinAggregateInputType
    _max?: TriviaChoiceMaxAggregateInputType
  }


  export type TriviaChoiceGroupByOutputType = {
    id: number
    choice: string
    quizId: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaChoiceCountAggregateOutputType | null
    _avg: TriviaChoiceAvgAggregateOutputType | null
    _sum: TriviaChoiceSumAggregateOutputType | null
    _min: TriviaChoiceMinAggregateOutputType | null
    _max: TriviaChoiceMaxAggregateOutputType | null
  }

  type GetTriviaChoiceGroupByPayload<T extends TriviaChoiceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaChoiceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaChoiceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaChoiceGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaChoiceGroupByOutputType[P]>
        }
      >
    >


  export type TriviaChoiceSelect = {
    id?: boolean
    choice?: boolean
    quiz?: boolean | TriviaQuizArgs
    quizId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roundQuizes?: boolean | TriviaChoice$roundQuizesArgs
    _count?: boolean | TriviaChoiceCountOutputTypeArgs
  }


  export type TriviaChoiceInclude = {
    quiz?: boolean | TriviaQuizArgs
    roundQuizes?: boolean | TriviaChoice$roundQuizesArgs
    _count?: boolean | TriviaChoiceCountOutputTypeArgs
  }

  export type TriviaChoiceGetPayload<S extends boolean | null | undefined | TriviaChoiceArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaChoice :
    S extends undefined ? never :
    S extends { include: any } & (TriviaChoiceArgs | TriviaChoiceFindManyArgs)
    ? TriviaChoice  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'quiz' ? TriviaQuizGetPayload<S['include'][P]> | null :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaChoiceCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaChoiceArgs | TriviaChoiceFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'quiz' ? TriviaQuizGetPayload<S['select'][P]> | null :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaChoiceCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaChoice ? TriviaChoice[P] : never
  } 
      : TriviaChoice


  type TriviaChoiceCountArgs = 
    Omit<TriviaChoiceFindManyArgs, 'select' | 'include'> & {
      select?: TriviaChoiceCountAggregateInputType | true
    }

  export interface TriviaChoiceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaChoice that matches the filter.
     * @param {TriviaChoiceFindUniqueArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaChoiceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaChoiceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaChoice'> extends True ? Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>> : Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | null, null>

    /**
     * Find one TriviaChoice that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaChoiceFindUniqueOrThrowArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaChoiceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaChoiceFindUniqueOrThrowArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Find the first TriviaChoice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindFirstArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaChoiceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaChoiceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaChoice'> extends True ? Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>> : Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | null, null>

    /**
     * Find the first TriviaChoice that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindFirstOrThrowArgs} args - Arguments to find a TriviaChoice
     * @example
     * // Get one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaChoiceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaChoiceFindFirstOrThrowArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Find zero or more TriviaChoices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaChoices
     * const triviaChoices = await prisma.triviaChoice.findMany()
     * 
     * // Get first 10 TriviaChoices
     * const triviaChoices = await prisma.triviaChoice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaChoiceWithIdOnly = await prisma.triviaChoice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaChoiceFindManyArgs>(
      args?: SelectSubset<T, TriviaChoiceFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaChoiceGetPayload<T>>>

    /**
     * Create a TriviaChoice.
     * @param {TriviaChoiceCreateArgs} args - Arguments to create a TriviaChoice.
     * @example
     * // Create one TriviaChoice
     * const TriviaChoice = await prisma.triviaChoice.create({
     *   data: {
     *     // ... data to create a TriviaChoice
     *   }
     * })
     * 
    **/
    create<T extends TriviaChoiceCreateArgs>(
      args: SelectSubset<T, TriviaChoiceCreateArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Create many TriviaChoices.
     *     @param {TriviaChoiceCreateManyArgs} args - Arguments to create many TriviaChoices.
     *     @example
     *     // Create many TriviaChoices
     *     const triviaChoice = await prisma.triviaChoice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaChoiceCreateManyArgs>(
      args?: SelectSubset<T, TriviaChoiceCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaChoice.
     * @param {TriviaChoiceDeleteArgs} args - Arguments to delete one TriviaChoice.
     * @example
     * // Delete one TriviaChoice
     * const TriviaChoice = await prisma.triviaChoice.delete({
     *   where: {
     *     // ... filter to delete one TriviaChoice
     *   }
     * })
     * 
    **/
    delete<T extends TriviaChoiceDeleteArgs>(
      args: SelectSubset<T, TriviaChoiceDeleteArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Update one TriviaChoice.
     * @param {TriviaChoiceUpdateArgs} args - Arguments to update one TriviaChoice.
     * @example
     * // Update one TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaChoiceUpdateArgs>(
      args: SelectSubset<T, TriviaChoiceUpdateArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Delete zero or more TriviaChoices.
     * @param {TriviaChoiceDeleteManyArgs} args - Arguments to filter TriviaChoices to delete.
     * @example
     * // Delete a few TriviaChoices
     * const { count } = await prisma.triviaChoice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaChoiceDeleteManyArgs>(
      args?: SelectSubset<T, TriviaChoiceDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaChoices
     * const triviaChoice = await prisma.triviaChoice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaChoiceUpdateManyArgs>(
      args: SelectSubset<T, TriviaChoiceUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaChoice.
     * @param {TriviaChoiceUpsertArgs} args - Arguments to update or create a TriviaChoice.
     * @example
     * // Update or create a TriviaChoice
     * const triviaChoice = await prisma.triviaChoice.upsert({
     *   create: {
     *     // ... data to create a TriviaChoice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaChoice we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaChoiceUpsertArgs>(
      args: SelectSubset<T, TriviaChoiceUpsertArgs>
    ): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T>>

    /**
     * Count the number of TriviaChoices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceCountArgs} args - Arguments to filter TriviaChoices to count.
     * @example
     * // Count the number of TriviaChoices
     * const count = await prisma.triviaChoice.count({
     *   where: {
     *     // ... the filter for the TriviaChoices we want to count
     *   }
     * })
    **/
    count<T extends TriviaChoiceCountArgs>(
      args?: Subset<T, TriviaChoiceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaChoiceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaChoiceAggregateArgs>(args: Subset<T, TriviaChoiceAggregateArgs>): Prisma.PrismaPromise<GetTriviaChoiceAggregateType<T>>

    /**
     * Group by TriviaChoice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaChoiceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaChoiceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaChoiceGroupByArgs['orderBy'] }
        : { orderBy?: TriviaChoiceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaChoiceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaChoiceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaChoice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaChoiceClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    quiz<T extends TriviaQuizArgs= {}>(args?: Subset<T, TriviaQuizArgs>): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | Null>;

    roundQuizes<T extends TriviaChoice$roundQuizesArgs= {}>(args?: Subset<T, TriviaChoice$roundQuizesArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaChoice base type for findUnique actions
   */
  export type TriviaChoiceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where: TriviaChoiceWhereUniqueInput
  }

  /**
   * TriviaChoice findUnique
   */
  export interface TriviaChoiceFindUniqueArgs extends TriviaChoiceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaChoice findUniqueOrThrow
   */
  export type TriviaChoiceFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice base type for findFirst actions
   */
  export type TriviaChoiceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaChoices.
     */
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }

  /**
   * TriviaChoice findFirst
   */
  export interface TriviaChoiceFindFirstArgs extends TriviaChoiceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaChoice findFirstOrThrow
   */
  export type TriviaChoiceFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoice to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaChoices.
     */
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaChoice findMany
   */
  export type TriviaChoiceFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter, which TriviaChoices to fetch.
     */
    where?: TriviaChoiceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaChoices to fetch.
     */
    orderBy?: Enumerable<TriviaChoiceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaChoices.
     */
    cursor?: TriviaChoiceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaChoices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaChoices.
     */
    skip?: number
    distinct?: Enumerable<TriviaChoiceScalarFieldEnum>
  }


  /**
   * TriviaChoice create
   */
  export type TriviaChoiceCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The data needed to create a TriviaChoice.
     */
    data: XOR<TriviaChoiceCreateInput, TriviaChoiceUncheckedCreateInput>
  }


  /**
   * TriviaChoice createMany
   */
  export type TriviaChoiceCreateManyArgs = {
    /**
     * The data used to create many TriviaChoices.
     */
    data: Enumerable<TriviaChoiceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaChoice update
   */
  export type TriviaChoiceUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The data needed to update a TriviaChoice.
     */
    data: XOR<TriviaChoiceUpdateInput, TriviaChoiceUncheckedUpdateInput>
    /**
     * Choose, which TriviaChoice to update.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice updateMany
   */
  export type TriviaChoiceUpdateManyArgs = {
    /**
     * The data used to update TriviaChoices.
     */
    data: XOR<TriviaChoiceUpdateManyMutationInput, TriviaChoiceUncheckedUpdateManyInput>
    /**
     * Filter which TriviaChoices to update
     */
    where?: TriviaChoiceWhereInput
  }


  /**
   * TriviaChoice upsert
   */
  export type TriviaChoiceUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * The filter to search for the TriviaChoice to update in case it exists.
     */
    where: TriviaChoiceWhereUniqueInput
    /**
     * In case the TriviaChoice found by the `where` argument doesn't exist, create a new TriviaChoice with this data.
     */
    create: XOR<TriviaChoiceCreateInput, TriviaChoiceUncheckedCreateInput>
    /**
     * In case the TriviaChoice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaChoiceUpdateInput, TriviaChoiceUncheckedUpdateInput>
  }


  /**
   * TriviaChoice delete
   */
  export type TriviaChoiceDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
    /**
     * Filter which TriviaChoice to delete.
     */
    where: TriviaChoiceWhereUniqueInput
  }


  /**
   * TriviaChoice deleteMany
   */
  export type TriviaChoiceDeleteManyArgs = {
    /**
     * Filter which TriviaChoices to delete
     */
    where?: TriviaChoiceWhereInput
  }


  /**
   * TriviaChoice.roundQuizes
   */
  export type TriviaChoice$roundQuizesArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    cursor?: TriviaRoundQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaChoice without action
   */
  export type TriviaChoiceArgs = {
    /**
     * Select specific fields to fetch from the TriviaChoice
     */
    select?: TriviaChoiceSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaChoiceInclude | null
  }



  /**
   * Model TriviaRound
   */


  export type AggregateTriviaRound = {
    _count: TriviaRoundCountAggregateOutputType | null
    _avg: TriviaRoundAvgAggregateOutputType | null
    _sum: TriviaRoundSumAggregateOutputType | null
    _min: TriviaRoundMinAggregateOutputType | null
    _max: TriviaRoundMaxAggregateOutputType | null
  }

  export type TriviaRoundAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    score: number | null
  }

  export type TriviaRoundSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    score: number | null
  }

  export type TriviaRoundMinAggregateOutputType = {
    id: number | null
    round: string | null
    categoryId: number | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundMaxAggregateOutputType = {
    id: number | null
    round: string | null
    categoryId: number | null
    score: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundCountAggregateOutputType = {
    id: number
    round: number
    categoryId: number
    score: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaRoundAvgAggregateInputType = {
    id?: true
    categoryId?: true
    score?: true
  }

  export type TriviaRoundSumAggregateInputType = {
    id?: true
    categoryId?: true
    score?: true
  }

  export type TriviaRoundMinAggregateInputType = {
    id?: true
    round?: true
    categoryId?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundMaxAggregateInputType = {
    id?: true
    round?: true
    categoryId?: true
    score?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundCountAggregateInputType = {
    id?: true
    round?: true
    categoryId?: true
    score?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaRoundAggregateArgs = {
    /**
     * Filter which TriviaRound to aggregate.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaRounds
    **/
    _count?: true | TriviaRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaRoundMaxAggregateInputType
  }

  export type GetTriviaRoundAggregateType<T extends TriviaRoundAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaRound[P]>
      : GetScalarType<T[P], AggregateTriviaRound[P]>
  }




  export type TriviaRoundGroupByArgs = {
    where?: TriviaRoundWhereInput
    orderBy?: Enumerable<TriviaRoundOrderByWithAggregationInput>
    by: TriviaRoundScalarFieldEnum[]
    having?: TriviaRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaRoundCountAggregateInputType | true
    _avg?: TriviaRoundAvgAggregateInputType
    _sum?: TriviaRoundSumAggregateInputType
    _min?: TriviaRoundMinAggregateInputType
    _max?: TriviaRoundMaxAggregateInputType
  }


  export type TriviaRoundGroupByOutputType = {
    id: number
    round: string
    categoryId: number
    score: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaRoundCountAggregateOutputType | null
    _avg: TriviaRoundAvgAggregateOutputType | null
    _sum: TriviaRoundSumAggregateOutputType | null
    _min: TriviaRoundMinAggregateOutputType | null
    _max: TriviaRoundMaxAggregateOutputType | null
  }

  type GetTriviaRoundGroupByPayload<T extends TriviaRoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaRoundGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaRoundGroupByOutputType[P]>
        }
      >
    >


  export type TriviaRoundSelect = {
    id?: boolean
    round?: boolean
    category?: boolean | TriviaCategoryArgs
    categoryId?: boolean
    score?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    roundQuizes?: boolean | TriviaRound$roundQuizesArgs
    _count?: boolean | TriviaRoundCountOutputTypeArgs
  }


  export type TriviaRoundInclude = {
    category?: boolean | TriviaCategoryArgs
    roundQuizes?: boolean | TriviaRound$roundQuizesArgs
    _count?: boolean | TriviaRoundCountOutputTypeArgs
  }

  export type TriviaRoundGetPayload<S extends boolean | null | undefined | TriviaRoundArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRound :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundArgs | TriviaRoundFindManyArgs)
    ? TriviaRound  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['include'][P]> | null :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['include'][P]>>  :
        P extends '_count' ? TriviaRoundCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TriviaRoundArgs | TriviaRoundFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'category' ? TriviaCategoryGetPayload<S['select'][P]> | null :
        P extends 'roundQuizes' ? Array < TriviaRoundQuizGetPayload<S['select'][P]>>  :
        P extends '_count' ? TriviaRoundCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TriviaRound ? TriviaRound[P] : never
  } 
      : TriviaRound


  type TriviaRoundCountArgs = 
    Omit<TriviaRoundFindManyArgs, 'select' | 'include'> & {
      select?: TriviaRoundCountAggregateInputType | true
    }

  export interface TriviaRoundDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaRound that matches the filter.
     * @param {TriviaRoundFindUniqueArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaRoundFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaRoundFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaRound'> extends True ? Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>> : Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | null, null>

    /**
     * Find one TriviaRound that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaRoundFindUniqueOrThrowArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaRoundFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundFindUniqueOrThrowArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Find the first TriviaRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindFirstArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaRoundFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaRoundFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaRound'> extends True ? Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>> : Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | null, null>

    /**
     * Find the first TriviaRound that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindFirstOrThrowArgs} args - Arguments to find a TriviaRound
     * @example
     * // Get one TriviaRound
     * const triviaRound = await prisma.triviaRound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaRoundFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundFindFirstOrThrowArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Find zero or more TriviaRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaRounds
     * const triviaRounds = await prisma.triviaRound.findMany()
     * 
     * // Get first 10 TriviaRounds
     * const triviaRounds = await prisma.triviaRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaRoundWithIdOnly = await prisma.triviaRound.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaRoundFindManyArgs>(
      args?: SelectSubset<T, TriviaRoundFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaRoundGetPayload<T>>>

    /**
     * Create a TriviaRound.
     * @param {TriviaRoundCreateArgs} args - Arguments to create a TriviaRound.
     * @example
     * // Create one TriviaRound
     * const TriviaRound = await prisma.triviaRound.create({
     *   data: {
     *     // ... data to create a TriviaRound
     *   }
     * })
     * 
    **/
    create<T extends TriviaRoundCreateArgs>(
      args: SelectSubset<T, TriviaRoundCreateArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Create many TriviaRounds.
     *     @param {TriviaRoundCreateManyArgs} args - Arguments to create many TriviaRounds.
     *     @example
     *     // Create many TriviaRounds
     *     const triviaRound = await prisma.triviaRound.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaRoundCreateManyArgs>(
      args?: SelectSubset<T, TriviaRoundCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaRound.
     * @param {TriviaRoundDeleteArgs} args - Arguments to delete one TriviaRound.
     * @example
     * // Delete one TriviaRound
     * const TriviaRound = await prisma.triviaRound.delete({
     *   where: {
     *     // ... filter to delete one TriviaRound
     *   }
     * })
     * 
    **/
    delete<T extends TriviaRoundDeleteArgs>(
      args: SelectSubset<T, TriviaRoundDeleteArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Update one TriviaRound.
     * @param {TriviaRoundUpdateArgs} args - Arguments to update one TriviaRound.
     * @example
     * // Update one TriviaRound
     * const triviaRound = await prisma.triviaRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaRoundUpdateArgs>(
      args: SelectSubset<T, TriviaRoundUpdateArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Delete zero or more TriviaRounds.
     * @param {TriviaRoundDeleteManyArgs} args - Arguments to filter TriviaRounds to delete.
     * @example
     * // Delete a few TriviaRounds
     * const { count } = await prisma.triviaRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaRoundDeleteManyArgs>(
      args?: SelectSubset<T, TriviaRoundDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaRounds
     * const triviaRound = await prisma.triviaRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaRoundUpdateManyArgs>(
      args: SelectSubset<T, TriviaRoundUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaRound.
     * @param {TriviaRoundUpsertArgs} args - Arguments to update or create a TriviaRound.
     * @example
     * // Update or create a TriviaRound
     * const triviaRound = await prisma.triviaRound.upsert({
     *   create: {
     *     // ... data to create a TriviaRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaRound we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaRoundUpsertArgs>(
      args: SelectSubset<T, TriviaRoundUpsertArgs>
    ): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T>>

    /**
     * Count the number of TriviaRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundCountArgs} args - Arguments to filter TriviaRounds to count.
     * @example
     * // Count the number of TriviaRounds
     * const count = await prisma.triviaRound.count({
     *   where: {
     *     // ... the filter for the TriviaRounds we want to count
     *   }
     * })
    **/
    count<T extends TriviaRoundCountArgs>(
      args?: Subset<T, TriviaRoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaRoundAggregateArgs>(args: Subset<T, TriviaRoundAggregateArgs>): Prisma.PrismaPromise<GetTriviaRoundAggregateType<T>>

    /**
     * Group by TriviaRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaRoundGroupByArgs['orderBy'] }
        : { orderBy?: TriviaRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaRoundClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    category<T extends TriviaCategoryArgs= {}>(args?: Subset<T, TriviaCategoryArgs>): Prisma__TriviaCategoryClient<TriviaCategoryGetPayload<T> | Null>;

    roundQuizes<T extends TriviaRound$roundQuizesArgs= {}>(args?: Subset<T, TriviaRound$roundQuizesArgs>): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaRound base type for findUnique actions
   */
  export type TriviaRoundFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where: TriviaRoundWhereUniqueInput
  }

  /**
   * TriviaRound findUnique
   */
  export interface TriviaRoundFindUniqueArgs extends TriviaRoundFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRound findUniqueOrThrow
   */
  export type TriviaRoundFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound base type for findFirst actions
   */
  export type TriviaRoundFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRounds.
     */
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }

  /**
   * TriviaRound findFirst
   */
  export interface TriviaRoundFindFirstArgs extends TriviaRoundFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRound findFirstOrThrow
   */
  export type TriviaRoundFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRound to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRounds.
     */
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaRound findMany
   */
  export type TriviaRoundFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter, which TriviaRounds to fetch.
     */
    where?: TriviaRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRounds to fetch.
     */
    orderBy?: Enumerable<TriviaRoundOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaRounds.
     */
    cursor?: TriviaRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRounds.
     */
    skip?: number
    distinct?: Enumerable<TriviaRoundScalarFieldEnum>
  }


  /**
   * TriviaRound create
   */
  export type TriviaRoundCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The data needed to create a TriviaRound.
     */
    data: XOR<TriviaRoundCreateInput, TriviaRoundUncheckedCreateInput>
  }


  /**
   * TriviaRound createMany
   */
  export type TriviaRoundCreateManyArgs = {
    /**
     * The data used to create many TriviaRounds.
     */
    data: Enumerable<TriviaRoundCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaRound update
   */
  export type TriviaRoundUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The data needed to update a TriviaRound.
     */
    data: XOR<TriviaRoundUpdateInput, TriviaRoundUncheckedUpdateInput>
    /**
     * Choose, which TriviaRound to update.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound updateMany
   */
  export type TriviaRoundUpdateManyArgs = {
    /**
     * The data used to update TriviaRounds.
     */
    data: XOR<TriviaRoundUpdateManyMutationInput, TriviaRoundUncheckedUpdateManyInput>
    /**
     * Filter which TriviaRounds to update
     */
    where?: TriviaRoundWhereInput
  }


  /**
   * TriviaRound upsert
   */
  export type TriviaRoundUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * The filter to search for the TriviaRound to update in case it exists.
     */
    where: TriviaRoundWhereUniqueInput
    /**
     * In case the TriviaRound found by the `where` argument doesn't exist, create a new TriviaRound with this data.
     */
    create: XOR<TriviaRoundCreateInput, TriviaRoundUncheckedCreateInput>
    /**
     * In case the TriviaRound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaRoundUpdateInput, TriviaRoundUncheckedUpdateInput>
  }


  /**
   * TriviaRound delete
   */
  export type TriviaRoundDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
    /**
     * Filter which TriviaRound to delete.
     */
    where: TriviaRoundWhereUniqueInput
  }


  /**
   * TriviaRound deleteMany
   */
  export type TriviaRoundDeleteManyArgs = {
    /**
     * Filter which TriviaRounds to delete
     */
    where?: TriviaRoundWhereInput
  }


  /**
   * TriviaRound.roundQuizes
   */
  export type TriviaRound$roundQuizesArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    cursor?: TriviaRoundQuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRound without action
   */
  export type TriviaRoundArgs = {
    /**
     * Select specific fields to fetch from the TriviaRound
     */
    select?: TriviaRoundSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundInclude | null
  }



  /**
   * Model TriviaRoundQuiz
   */


  export type AggregateTriviaRoundQuiz = {
    _count: TriviaRoundQuizCountAggregateOutputType | null
    _avg: TriviaRoundQuizAvgAggregateOutputType | null
    _sum: TriviaRoundQuizSumAggregateOutputType | null
    _min: TriviaRoundQuizMinAggregateOutputType | null
    _max: TriviaRoundQuizMaxAggregateOutputType | null
  }

  export type TriviaRoundQuizAvgAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    userChoiceId: number | null
  }

  export type TriviaRoundQuizSumAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    userChoiceId: number | null
  }

  export type TriviaRoundQuizMinAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    userChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizMaxAggregateOutputType = {
    id: number | null
    roundId: number | null
    quizId: number | null
    userChoiceId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TriviaRoundQuizCountAggregateOutputType = {
    id: number
    roundId: number
    quizId: number
    userChoiceId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TriviaRoundQuizAvgAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    userChoiceId?: true
  }

  export type TriviaRoundQuizSumAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    userChoiceId?: true
  }

  export type TriviaRoundQuizMinAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    userChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizMaxAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    userChoiceId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TriviaRoundQuizCountAggregateInputType = {
    id?: true
    roundId?: true
    quizId?: true
    userChoiceId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TriviaRoundQuizAggregateArgs = {
    /**
     * Filter which TriviaRoundQuiz to aggregate.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TriviaRoundQuizs
    **/
    _count?: true | TriviaRoundQuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TriviaRoundQuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TriviaRoundQuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TriviaRoundQuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TriviaRoundQuizMaxAggregateInputType
  }

  export type GetTriviaRoundQuizAggregateType<T extends TriviaRoundQuizAggregateArgs> = {
        [P in keyof T & keyof AggregateTriviaRoundQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTriviaRoundQuiz[P]>
      : GetScalarType<T[P], AggregateTriviaRoundQuiz[P]>
  }




  export type TriviaRoundQuizGroupByArgs = {
    where?: TriviaRoundQuizWhereInput
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithAggregationInput>
    by: TriviaRoundQuizScalarFieldEnum[]
    having?: TriviaRoundQuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TriviaRoundQuizCountAggregateInputType | true
    _avg?: TriviaRoundQuizAvgAggregateInputType
    _sum?: TriviaRoundQuizSumAggregateInputType
    _min?: TriviaRoundQuizMinAggregateInputType
    _max?: TriviaRoundQuizMaxAggregateInputType
  }


  export type TriviaRoundQuizGroupByOutputType = {
    id: number
    roundId: number
    quizId: number
    userChoiceId: number
    createdAt: Date
    updatedAt: Date
    _count: TriviaRoundQuizCountAggregateOutputType | null
    _avg: TriviaRoundQuizAvgAggregateOutputType | null
    _sum: TriviaRoundQuizSumAggregateOutputType | null
    _min: TriviaRoundQuizMinAggregateOutputType | null
    _max: TriviaRoundQuizMaxAggregateOutputType | null
  }

  type GetTriviaRoundQuizGroupByPayload<T extends TriviaRoundQuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TriviaRoundQuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TriviaRoundQuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TriviaRoundQuizGroupByOutputType[P]>
            : GetScalarType<T[P], TriviaRoundQuizGroupByOutputType[P]>
        }
      >
    >


  export type TriviaRoundQuizSelect = {
    id?: boolean
    round?: boolean | TriviaRoundArgs
    roundId?: boolean
    quiz?: boolean | TriviaQuizArgs
    quizId?: boolean
    userChoice?: boolean | TriviaChoiceArgs
    userChoiceId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TriviaRoundQuizInclude = {
    round?: boolean | TriviaRoundArgs
    quiz?: boolean | TriviaQuizArgs
    userChoice?: boolean | TriviaChoiceArgs
  }

  export type TriviaRoundQuizGetPayload<S extends boolean | null | undefined | TriviaRoundQuizArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TriviaRoundQuiz :
    S extends undefined ? never :
    S extends { include: any } & (TriviaRoundQuizArgs | TriviaRoundQuizFindManyArgs)
    ? TriviaRoundQuiz  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'round' ? TriviaRoundGetPayload<S['include'][P]> | null :
        P extends 'quiz' ? TriviaQuizGetPayload<S['include'][P]> | null :
        P extends 'userChoice' ? TriviaChoiceGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (TriviaRoundQuizArgs | TriviaRoundQuizFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'round' ? TriviaRoundGetPayload<S['select'][P]> | null :
        P extends 'quiz' ? TriviaQuizGetPayload<S['select'][P]> | null :
        P extends 'userChoice' ? TriviaChoiceGetPayload<S['select'][P]> | null :  P extends keyof TriviaRoundQuiz ? TriviaRoundQuiz[P] : never
  } 
      : TriviaRoundQuiz


  type TriviaRoundQuizCountArgs = 
    Omit<TriviaRoundQuizFindManyArgs, 'select' | 'include'> & {
      select?: TriviaRoundQuizCountAggregateInputType | true
    }

  export interface TriviaRoundQuizDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TriviaRoundQuiz that matches the filter.
     * @param {TriviaRoundQuizFindUniqueArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TriviaRoundQuizFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TriviaRoundQuizFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TriviaRoundQuiz'> extends True ? Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>> : Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T> | null, null>

    /**
     * Find one TriviaRoundQuiz that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TriviaRoundQuizFindUniqueOrThrowArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TriviaRoundQuizFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindUniqueOrThrowArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Find the first TriviaRoundQuiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindFirstArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TriviaRoundQuizFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TriviaRoundQuizFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TriviaRoundQuiz'> extends True ? Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>> : Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T> | null, null>

    /**
     * Find the first TriviaRoundQuiz that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindFirstOrThrowArgs} args - Arguments to find a TriviaRoundQuiz
     * @example
     * // Get one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TriviaRoundQuizFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindFirstOrThrowArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Find zero or more TriviaRoundQuizs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TriviaRoundQuizs
     * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany()
     * 
     * // Get first 10 TriviaRoundQuizs
     * const triviaRoundQuizs = await prisma.triviaRoundQuiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const triviaRoundQuizWithIdOnly = await prisma.triviaRoundQuiz.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TriviaRoundQuizFindManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizFindManyArgs>
    ): Prisma.PrismaPromise<Array<TriviaRoundQuizGetPayload<T>>>

    /**
     * Create a TriviaRoundQuiz.
     * @param {TriviaRoundQuizCreateArgs} args - Arguments to create a TriviaRoundQuiz.
     * @example
     * // Create one TriviaRoundQuiz
     * const TriviaRoundQuiz = await prisma.triviaRoundQuiz.create({
     *   data: {
     *     // ... data to create a TriviaRoundQuiz
     *   }
     * })
     * 
    **/
    create<T extends TriviaRoundQuizCreateArgs>(
      args: SelectSubset<T, TriviaRoundQuizCreateArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Create many TriviaRoundQuizs.
     *     @param {TriviaRoundQuizCreateManyArgs} args - Arguments to create many TriviaRoundQuizs.
     *     @example
     *     // Create many TriviaRoundQuizs
     *     const triviaRoundQuiz = await prisma.triviaRoundQuiz.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TriviaRoundQuizCreateManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TriviaRoundQuiz.
     * @param {TriviaRoundQuizDeleteArgs} args - Arguments to delete one TriviaRoundQuiz.
     * @example
     * // Delete one TriviaRoundQuiz
     * const TriviaRoundQuiz = await prisma.triviaRoundQuiz.delete({
     *   where: {
     *     // ... filter to delete one TriviaRoundQuiz
     *   }
     * })
     * 
    **/
    delete<T extends TriviaRoundQuizDeleteArgs>(
      args: SelectSubset<T, TriviaRoundQuizDeleteArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Update one TriviaRoundQuiz.
     * @param {TriviaRoundQuizUpdateArgs} args - Arguments to update one TriviaRoundQuiz.
     * @example
     * // Update one TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TriviaRoundQuizUpdateArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpdateArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Delete zero or more TriviaRoundQuizs.
     * @param {TriviaRoundQuizDeleteManyArgs} args - Arguments to filter TriviaRoundQuizs to delete.
     * @example
     * // Delete a few TriviaRoundQuizs
     * const { count } = await prisma.triviaRoundQuiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TriviaRoundQuizDeleteManyArgs>(
      args?: SelectSubset<T, TriviaRoundQuizDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TriviaRoundQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TriviaRoundQuizs
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TriviaRoundQuizUpdateManyArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TriviaRoundQuiz.
     * @param {TriviaRoundQuizUpsertArgs} args - Arguments to update or create a TriviaRoundQuiz.
     * @example
     * // Update or create a TriviaRoundQuiz
     * const triviaRoundQuiz = await prisma.triviaRoundQuiz.upsert({
     *   create: {
     *     // ... data to create a TriviaRoundQuiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TriviaRoundQuiz we want to update
     *   }
     * })
    **/
    upsert<T extends TriviaRoundQuizUpsertArgs>(
      args: SelectSubset<T, TriviaRoundQuizUpsertArgs>
    ): Prisma__TriviaRoundQuizClient<TriviaRoundQuizGetPayload<T>>

    /**
     * Count the number of TriviaRoundQuizs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizCountArgs} args - Arguments to filter TriviaRoundQuizs to count.
     * @example
     * // Count the number of TriviaRoundQuizs
     * const count = await prisma.triviaRoundQuiz.count({
     *   where: {
     *     // ... the filter for the TriviaRoundQuizs we want to count
     *   }
     * })
    **/
    count<T extends TriviaRoundQuizCountArgs>(
      args?: Subset<T, TriviaRoundQuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TriviaRoundQuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TriviaRoundQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TriviaRoundQuizAggregateArgs>(args: Subset<T, TriviaRoundQuizAggregateArgs>): Prisma.PrismaPromise<GetTriviaRoundQuizAggregateType<T>>

    /**
     * Group by TriviaRoundQuiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TriviaRoundQuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TriviaRoundQuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TriviaRoundQuizGroupByArgs['orderBy'] }
        : { orderBy?: TriviaRoundQuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TriviaRoundQuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTriviaRoundQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TriviaRoundQuiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TriviaRoundQuizClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    round<T extends TriviaRoundArgs= {}>(args?: Subset<T, TriviaRoundArgs>): Prisma__TriviaRoundClient<TriviaRoundGetPayload<T> | Null>;

    quiz<T extends TriviaQuizArgs= {}>(args?: Subset<T, TriviaQuizArgs>): Prisma__TriviaQuizClient<TriviaQuizGetPayload<T> | Null>;

    userChoice<T extends TriviaChoiceArgs= {}>(args?: Subset<T, TriviaChoiceArgs>): Prisma__TriviaChoiceClient<TriviaChoiceGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TriviaRoundQuiz base type for findUnique actions
   */
  export type TriviaRoundQuizFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }

  /**
   * TriviaRoundQuiz findUnique
   */
  export interface TriviaRoundQuizFindUniqueArgs extends TriviaRoundQuizFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuiz findUniqueOrThrow
   */
  export type TriviaRoundQuizFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz base type for findFirst actions
   */
  export type TriviaRoundQuizFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizs.
     */
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }

  /**
   * TriviaRoundQuiz findFirst
   */
  export interface TriviaRoundQuizFindFirstArgs extends TriviaRoundQuizFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TriviaRoundQuiz findFirstOrThrow
   */
  export type TriviaRoundQuizFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuiz to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TriviaRoundQuizs.
     */
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRoundQuiz findMany
   */
  export type TriviaRoundQuizFindManyArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter, which TriviaRoundQuizs to fetch.
     */
    where?: TriviaRoundQuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TriviaRoundQuizs to fetch.
     */
    orderBy?: Enumerable<TriviaRoundQuizOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TriviaRoundQuizs.
     */
    cursor?: TriviaRoundQuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TriviaRoundQuizs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TriviaRoundQuizs.
     */
    skip?: number
    distinct?: Enumerable<TriviaRoundQuizScalarFieldEnum>
  }


  /**
   * TriviaRoundQuiz create
   */
  export type TriviaRoundQuizCreateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The data needed to create a TriviaRoundQuiz.
     */
    data: XOR<TriviaRoundQuizCreateInput, TriviaRoundQuizUncheckedCreateInput>
  }


  /**
   * TriviaRoundQuiz createMany
   */
  export type TriviaRoundQuizCreateManyArgs = {
    /**
     * The data used to create many TriviaRoundQuizs.
     */
    data: Enumerable<TriviaRoundQuizCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TriviaRoundQuiz update
   */
  export type TriviaRoundQuizUpdateArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The data needed to update a TriviaRoundQuiz.
     */
    data: XOR<TriviaRoundQuizUpdateInput, TriviaRoundQuizUncheckedUpdateInput>
    /**
     * Choose, which TriviaRoundQuiz to update.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz updateMany
   */
  export type TriviaRoundQuizUpdateManyArgs = {
    /**
     * The data used to update TriviaRoundQuizs.
     */
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyInput>
    /**
     * Filter which TriviaRoundQuizs to update
     */
    where?: TriviaRoundQuizWhereInput
  }


  /**
   * TriviaRoundQuiz upsert
   */
  export type TriviaRoundQuizUpsertArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * The filter to search for the TriviaRoundQuiz to update in case it exists.
     */
    where: TriviaRoundQuizWhereUniqueInput
    /**
     * In case the TriviaRoundQuiz found by the `where` argument doesn't exist, create a new TriviaRoundQuiz with this data.
     */
    create: XOR<TriviaRoundQuizCreateInput, TriviaRoundQuizUncheckedCreateInput>
    /**
     * In case the TriviaRoundQuiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TriviaRoundQuizUpdateInput, TriviaRoundQuizUncheckedUpdateInput>
  }


  /**
   * TriviaRoundQuiz delete
   */
  export type TriviaRoundQuizDeleteArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
    /**
     * Filter which TriviaRoundQuiz to delete.
     */
    where: TriviaRoundQuizWhereUniqueInput
  }


  /**
   * TriviaRoundQuiz deleteMany
   */
  export type TriviaRoundQuizDeleteManyArgs = {
    /**
     * Filter which TriviaRoundQuizs to delete
     */
    where?: TriviaRoundQuizWhereInput
  }


  /**
   * TriviaRoundQuiz without action
   */
  export type TriviaRoundQuizArgs = {
    /**
     * Select specific fields to fetch from the TriviaRoundQuiz
     */
    select?: TriviaRoundQuizSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TriviaRoundQuizInclude | null
  }



  /**
   * Model TwitterUser
   */


  export type AggregateTwitterUser = {
    _count: TwitterUserCountAggregateOutputType | null
    _avg: TwitterUserAvgAggregateOutputType | null
    _sum: TwitterUserSumAggregateOutputType | null
    _min: TwitterUserMinAggregateOutputType | null
    _max: TwitterUserMaxAggregateOutputType | null
  }

  export type TwitterUserAvgAggregateOutputType = {
    id: number | null
  }

  export type TwitterUserSumAggregateOutputType = {
    id: number | null
  }

  export type TwitterUserMinAggregateOutputType = {
    id: number | null
    image: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterUserMaxAggregateOutputType = {
    id: number | null
    image: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterUserCountAggregateOutputType = {
    id: number
    image: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterUserAvgAggregateInputType = {
    id?: true
  }

  export type TwitterUserSumAggregateInputType = {
    id?: true
  }

  export type TwitterUserMinAggregateInputType = {
    id?: true
    image?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterUserMaxAggregateInputType = {
    id?: true
    image?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterUserCountAggregateInputType = {
    id?: true
    image?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterUserAggregateArgs = {
    /**
     * Filter which TwitterUser to aggregate.
     */
    where?: TwitterUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUsers to fetch.
     */
    orderBy?: Enumerable<TwitterUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterUsers
    **/
    _count?: true | TwitterUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterUserMaxAggregateInputType
  }

  export type GetTwitterUserAggregateType<T extends TwitterUserAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterUser[P]>
      : GetScalarType<T[P], AggregateTwitterUser[P]>
  }




  export type TwitterUserGroupByArgs = {
    where?: TwitterUserWhereInput
    orderBy?: Enumerable<TwitterUserOrderByWithAggregationInput>
    by: TwitterUserScalarFieldEnum[]
    having?: TwitterUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterUserCountAggregateInputType | true
    _avg?: TwitterUserAvgAggregateInputType
    _sum?: TwitterUserSumAggregateInputType
    _min?: TwitterUserMinAggregateInputType
    _max?: TwitterUserMaxAggregateInputType
  }


  export type TwitterUserGroupByOutputType = {
    id: number
    image: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: TwitterUserCountAggregateOutputType | null
    _avg: TwitterUserAvgAggregateOutputType | null
    _sum: TwitterUserSumAggregateOutputType | null
    _min: TwitterUserMinAggregateOutputType | null
    _max: TwitterUserMaxAggregateOutputType | null
  }

  type GetTwitterUserGroupByPayload<T extends TwitterUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterUserGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterUserGroupByOutputType[P]>
        }
      >
    >


  export type TwitterUserSelect = {
    id?: boolean
    image?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    follwers?: boolean | TwitterUser$follwersArgs
    followings?: boolean | TwitterUser$followingsArgs
    twitterPosts?: boolean | TwitterUser$twitterPostsArgs
    twitterReplies?: boolean | TwitterUser$twitterRepliesArgs
    directFroms?: boolean | TwitterUser$directFromsArgs
    directToes?: boolean | TwitterUser$directToesArgs
    _count?: boolean | TwitterUserCountOutputTypeArgs
  }


  export type TwitterUserInclude = {
    follwers?: boolean | TwitterUser$follwersArgs
    followings?: boolean | TwitterUser$followingsArgs
    twitterPosts?: boolean | TwitterUser$twitterPostsArgs
    twitterReplies?: boolean | TwitterUser$twitterRepliesArgs
    directFroms?: boolean | TwitterUser$directFromsArgs
    directToes?: boolean | TwitterUser$directToesArgs
    _count?: boolean | TwitterUserCountOutputTypeArgs
  }

  export type TwitterUserGetPayload<S extends boolean | null | undefined | TwitterUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterUser :
    S extends undefined ? never :
    S extends { include: any } & (TwitterUserArgs | TwitterUserFindManyArgs)
    ? TwitterUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'follwers' ? Array < TwitterUserRelationGetPayload<S['include'][P]>>  :
        P extends 'followings' ? Array < TwitterUserRelationGetPayload<S['include'][P]>>  :
        P extends 'twitterPosts' ? Array < TwitterPostGetPayload<S['include'][P]>>  :
        P extends 'twitterReplies' ? Array < TwitterReplyGetPayload<S['include'][P]>>  :
        P extends 'directFroms' ? Array < TwitterDMGetPayload<S['include'][P]>>  :
        P extends 'directToes' ? Array < TwitterDMGetPayload<S['include'][P]>>  :
        P extends '_count' ? TwitterUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterUserArgs | TwitterUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'follwers' ? Array < TwitterUserRelationGetPayload<S['select'][P]>>  :
        P extends 'followings' ? Array < TwitterUserRelationGetPayload<S['select'][P]>>  :
        P extends 'twitterPosts' ? Array < TwitterPostGetPayload<S['select'][P]>>  :
        P extends 'twitterReplies' ? Array < TwitterReplyGetPayload<S['select'][P]>>  :
        P extends 'directFroms' ? Array < TwitterDMGetPayload<S['select'][P]>>  :
        P extends 'directToes' ? Array < TwitterDMGetPayload<S['select'][P]>>  :
        P extends '_count' ? TwitterUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TwitterUser ? TwitterUser[P] : never
  } 
      : TwitterUser


  type TwitterUserCountArgs = 
    Omit<TwitterUserFindManyArgs, 'select' | 'include'> & {
      select?: TwitterUserCountAggregateInputType | true
    }

  export interface TwitterUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterUser that matches the filter.
     * @param {TwitterUserFindUniqueArgs} args - Arguments to find a TwitterUser
     * @example
     * // Get one TwitterUser
     * const twitterUser = await prisma.twitterUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterUser'> extends True ? Prisma__TwitterUserClient<TwitterUserGetPayload<T>> : Prisma__TwitterUserClient<TwitterUserGetPayload<T> | null, null>

    /**
     * Find one TwitterUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterUserFindUniqueOrThrowArgs} args - Arguments to find a TwitterUser
     * @example
     * // Get one TwitterUser
     * const twitterUser = await prisma.twitterUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterUserFindUniqueOrThrowArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Find the first TwitterUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserFindFirstArgs} args - Arguments to find a TwitterUser
     * @example
     * // Get one TwitterUser
     * const twitterUser = await prisma.twitterUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterUser'> extends True ? Prisma__TwitterUserClient<TwitterUserGetPayload<T>> : Prisma__TwitterUserClient<TwitterUserGetPayload<T> | null, null>

    /**
     * Find the first TwitterUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserFindFirstOrThrowArgs} args - Arguments to find a TwitterUser
     * @example
     * // Get one TwitterUser
     * const twitterUser = await prisma.twitterUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterUserFindFirstOrThrowArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Find zero or more TwitterUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterUsers
     * const twitterUsers = await prisma.twitterUser.findMany()
     * 
     * // Get first 10 TwitterUsers
     * const twitterUsers = await prisma.twitterUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterUserWithIdOnly = await prisma.twitterUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterUserFindManyArgs>(
      args?: SelectSubset<T, TwitterUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterUserGetPayload<T>>>

    /**
     * Create a TwitterUser.
     * @param {TwitterUserCreateArgs} args - Arguments to create a TwitterUser.
     * @example
     * // Create one TwitterUser
     * const TwitterUser = await prisma.twitterUser.create({
     *   data: {
     *     // ... data to create a TwitterUser
     *   }
     * })
     * 
    **/
    create<T extends TwitterUserCreateArgs>(
      args: SelectSubset<T, TwitterUserCreateArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Create many TwitterUsers.
     *     @param {TwitterUserCreateManyArgs} args - Arguments to create many TwitterUsers.
     *     @example
     *     // Create many TwitterUsers
     *     const twitterUser = await prisma.twitterUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterUserCreateManyArgs>(
      args?: SelectSubset<T, TwitterUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterUser.
     * @param {TwitterUserDeleteArgs} args - Arguments to delete one TwitterUser.
     * @example
     * // Delete one TwitterUser
     * const TwitterUser = await prisma.twitterUser.delete({
     *   where: {
     *     // ... filter to delete one TwitterUser
     *   }
     * })
     * 
    **/
    delete<T extends TwitterUserDeleteArgs>(
      args: SelectSubset<T, TwitterUserDeleteArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Update one TwitterUser.
     * @param {TwitterUserUpdateArgs} args - Arguments to update one TwitterUser.
     * @example
     * // Update one TwitterUser
     * const twitterUser = await prisma.twitterUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterUserUpdateArgs>(
      args: SelectSubset<T, TwitterUserUpdateArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Delete zero or more TwitterUsers.
     * @param {TwitterUserDeleteManyArgs} args - Arguments to filter TwitterUsers to delete.
     * @example
     * // Delete a few TwitterUsers
     * const { count } = await prisma.twitterUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterUserDeleteManyArgs>(
      args?: SelectSubset<T, TwitterUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterUsers
     * const twitterUser = await prisma.twitterUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterUserUpdateManyArgs>(
      args: SelectSubset<T, TwitterUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterUser.
     * @param {TwitterUserUpsertArgs} args - Arguments to update or create a TwitterUser.
     * @example
     * // Update or create a TwitterUser
     * const twitterUser = await prisma.twitterUser.upsert({
     *   create: {
     *     // ... data to create a TwitterUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterUser we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterUserUpsertArgs>(
      args: SelectSubset<T, TwitterUserUpsertArgs>
    ): Prisma__TwitterUserClient<TwitterUserGetPayload<T>>

    /**
     * Count the number of TwitterUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserCountArgs} args - Arguments to filter TwitterUsers to count.
     * @example
     * // Count the number of TwitterUsers
     * const count = await prisma.twitterUser.count({
     *   where: {
     *     // ... the filter for the TwitterUsers we want to count
     *   }
     * })
    **/
    count<T extends TwitterUserCountArgs>(
      args?: Subset<T, TwitterUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterUserAggregateArgs>(args: Subset<T, TwitterUserAggregateArgs>): Prisma.PrismaPromise<GetTwitterUserAggregateType<T>>

    /**
     * Group by TwitterUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterUserGroupByArgs['orderBy'] }
        : { orderBy?: TwitterUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    follwers<T extends TwitterUser$follwersArgs= {}>(args?: Subset<T, TwitterUser$follwersArgs>): Prisma.PrismaPromise<Array<TwitterUserRelationGetPayload<T>>| Null>;

    followings<T extends TwitterUser$followingsArgs= {}>(args?: Subset<T, TwitterUser$followingsArgs>): Prisma.PrismaPromise<Array<TwitterUserRelationGetPayload<T>>| Null>;

    twitterPosts<T extends TwitterUser$twitterPostsArgs= {}>(args?: Subset<T, TwitterUser$twitterPostsArgs>): Prisma.PrismaPromise<Array<TwitterPostGetPayload<T>>| Null>;

    twitterReplies<T extends TwitterUser$twitterRepliesArgs= {}>(args?: Subset<T, TwitterUser$twitterRepliesArgs>): Prisma.PrismaPromise<Array<TwitterReplyGetPayload<T>>| Null>;

    directFroms<T extends TwitterUser$directFromsArgs= {}>(args?: Subset<T, TwitterUser$directFromsArgs>): Prisma.PrismaPromise<Array<TwitterDMGetPayload<T>>| Null>;

    directToes<T extends TwitterUser$directToesArgs= {}>(args?: Subset<T, TwitterUser$directToesArgs>): Prisma.PrismaPromise<Array<TwitterDMGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterUser base type for findUnique actions
   */
  export type TwitterUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter, which TwitterUser to fetch.
     */
    where: TwitterUserWhereUniqueInput
  }

  /**
   * TwitterUser findUnique
   */
  export interface TwitterUserFindUniqueArgs extends TwitterUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterUser findUniqueOrThrow
   */
  export type TwitterUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter, which TwitterUser to fetch.
     */
    where: TwitterUserWhereUniqueInput
  }


  /**
   * TwitterUser base type for findFirst actions
   */
  export type TwitterUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter, which TwitterUser to fetch.
     */
    where?: TwitterUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUsers to fetch.
     */
    orderBy?: Enumerable<TwitterUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterUsers.
     */
    cursor?: TwitterUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterUsers.
     */
    distinct?: Enumerable<TwitterUserScalarFieldEnum>
  }

  /**
   * TwitterUser findFirst
   */
  export interface TwitterUserFindFirstArgs extends TwitterUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterUser findFirstOrThrow
   */
  export type TwitterUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter, which TwitterUser to fetch.
     */
    where?: TwitterUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUsers to fetch.
     */
    orderBy?: Enumerable<TwitterUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterUsers.
     */
    cursor?: TwitterUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterUsers.
     */
    distinct?: Enumerable<TwitterUserScalarFieldEnum>
  }


  /**
   * TwitterUser findMany
   */
  export type TwitterUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter, which TwitterUsers to fetch.
     */
    where?: TwitterUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUsers to fetch.
     */
    orderBy?: Enumerable<TwitterUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterUsers.
     */
    cursor?: TwitterUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUsers.
     */
    skip?: number
    distinct?: Enumerable<TwitterUserScalarFieldEnum>
  }


  /**
   * TwitterUser create
   */
  export type TwitterUserCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * The data needed to create a TwitterUser.
     */
    data: XOR<TwitterUserCreateInput, TwitterUserUncheckedCreateInput>
  }


  /**
   * TwitterUser createMany
   */
  export type TwitterUserCreateManyArgs = {
    /**
     * The data used to create many TwitterUsers.
     */
    data: Enumerable<TwitterUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterUser update
   */
  export type TwitterUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * The data needed to update a TwitterUser.
     */
    data: XOR<TwitterUserUpdateInput, TwitterUserUncheckedUpdateInput>
    /**
     * Choose, which TwitterUser to update.
     */
    where: TwitterUserWhereUniqueInput
  }


  /**
   * TwitterUser updateMany
   */
  export type TwitterUserUpdateManyArgs = {
    /**
     * The data used to update TwitterUsers.
     */
    data: XOR<TwitterUserUpdateManyMutationInput, TwitterUserUncheckedUpdateManyInput>
    /**
     * Filter which TwitterUsers to update
     */
    where?: TwitterUserWhereInput
  }


  /**
   * TwitterUser upsert
   */
  export type TwitterUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * The filter to search for the TwitterUser to update in case it exists.
     */
    where: TwitterUserWhereUniqueInput
    /**
     * In case the TwitterUser found by the `where` argument doesn't exist, create a new TwitterUser with this data.
     */
    create: XOR<TwitterUserCreateInput, TwitterUserUncheckedCreateInput>
    /**
     * In case the TwitterUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterUserUpdateInput, TwitterUserUncheckedUpdateInput>
  }


  /**
   * TwitterUser delete
   */
  export type TwitterUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
    /**
     * Filter which TwitterUser to delete.
     */
    where: TwitterUserWhereUniqueInput
  }


  /**
   * TwitterUser deleteMany
   */
  export type TwitterUserDeleteManyArgs = {
    /**
     * Filter which TwitterUsers to delete
     */
    where?: TwitterUserWhereInput
  }


  /**
   * TwitterUser.follwers
   */
  export type TwitterUser$follwersArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    where?: TwitterUserRelationWhereInput
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    cursor?: TwitterUserRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterUserRelationScalarFieldEnum>
  }


  /**
   * TwitterUser.followings
   */
  export type TwitterUser$followingsArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    where?: TwitterUserRelationWhereInput
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    cursor?: TwitterUserRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterUserRelationScalarFieldEnum>
  }


  /**
   * TwitterUser.twitterPosts
   */
  export type TwitterUser$twitterPostsArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    where?: TwitterPostWhereInput
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    cursor?: TwitterPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterPostScalarFieldEnum>
  }


  /**
   * TwitterUser.twitterReplies
   */
  export type TwitterUser$twitterRepliesArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    where?: TwitterReplyWhereInput
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    cursor?: TwitterReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterReplyScalarFieldEnum>
  }


  /**
   * TwitterUser.directFroms
   */
  export type TwitterUser$directFromsArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    where?: TwitterDMWhereInput
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    cursor?: TwitterDMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterDMScalarFieldEnum>
  }


  /**
   * TwitterUser.directToes
   */
  export type TwitterUser$directToesArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    where?: TwitterDMWhereInput
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    cursor?: TwitterDMWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterDMScalarFieldEnum>
  }


  /**
   * TwitterUser without action
   */
  export type TwitterUserArgs = {
    /**
     * Select specific fields to fetch from the TwitterUser
     */
    select?: TwitterUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserInclude | null
  }



  /**
   * Model TwitterUserRelation
   */


  export type AggregateTwitterUserRelation = {
    _count: TwitterUserRelationCountAggregateOutputType | null
    _avg: TwitterUserRelationAvgAggregateOutputType | null
    _sum: TwitterUserRelationSumAggregateOutputType | null
    _min: TwitterUserRelationMinAggregateOutputType | null
    _max: TwitterUserRelationMaxAggregateOutputType | null
  }

  export type TwitterUserRelationAvgAggregateOutputType = {
    id: number | null
    followerId: number | null
    followingId: number | null
  }

  export type TwitterUserRelationSumAggregateOutputType = {
    id: number | null
    followerId: number | null
    followingId: number | null
  }

  export type TwitterUserRelationMinAggregateOutputType = {
    id: number | null
    followerId: number | null
    followingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterUserRelationMaxAggregateOutputType = {
    id: number | null
    followerId: number | null
    followingId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterUserRelationCountAggregateOutputType = {
    id: number
    followerId: number
    followingId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterUserRelationAvgAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
  }

  export type TwitterUserRelationSumAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
  }

  export type TwitterUserRelationMinAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterUserRelationMaxAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterUserRelationCountAggregateInputType = {
    id?: true
    followerId?: true
    followingId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterUserRelationAggregateArgs = {
    /**
     * Filter which TwitterUserRelation to aggregate.
     */
    where?: TwitterUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUserRelations to fetch.
     */
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterUserRelations
    **/
    _count?: true | TwitterUserRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterUserRelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterUserRelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterUserRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterUserRelationMaxAggregateInputType
  }

  export type GetTwitterUserRelationAggregateType<T extends TwitterUserRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterUserRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterUserRelation[P]>
      : GetScalarType<T[P], AggregateTwitterUserRelation[P]>
  }




  export type TwitterUserRelationGroupByArgs = {
    where?: TwitterUserRelationWhereInput
    orderBy?: Enumerable<TwitterUserRelationOrderByWithAggregationInput>
    by: TwitterUserRelationScalarFieldEnum[]
    having?: TwitterUserRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterUserRelationCountAggregateInputType | true
    _avg?: TwitterUserRelationAvgAggregateInputType
    _sum?: TwitterUserRelationSumAggregateInputType
    _min?: TwitterUserRelationMinAggregateInputType
    _max?: TwitterUserRelationMaxAggregateInputType
  }


  export type TwitterUserRelationGroupByOutputType = {
    id: number
    followerId: number
    followingId: number
    createdAt: Date
    updatedAt: Date
    _count: TwitterUserRelationCountAggregateOutputType | null
    _avg: TwitterUserRelationAvgAggregateOutputType | null
    _sum: TwitterUserRelationSumAggregateOutputType | null
    _min: TwitterUserRelationMinAggregateOutputType | null
    _max: TwitterUserRelationMaxAggregateOutputType | null
  }

  type GetTwitterUserRelationGroupByPayload<T extends TwitterUserRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterUserRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterUserRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterUserRelationGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterUserRelationGroupByOutputType[P]>
        }
      >
    >


  export type TwitterUserRelationSelect = {
    id?: boolean
    follwer?: boolean | TwitterUserArgs
    followerId?: boolean
    following?: boolean | TwitterUserArgs
    followingId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TwitterUserRelationInclude = {
    follwer?: boolean | TwitterUserArgs
    following?: boolean | TwitterUserArgs
  }

  export type TwitterUserRelationGetPayload<S extends boolean | null | undefined | TwitterUserRelationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterUserRelation :
    S extends undefined ? never :
    S extends { include: any } & (TwitterUserRelationArgs | TwitterUserRelationFindManyArgs)
    ? TwitterUserRelation  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'follwer' ? TwitterUserGetPayload<S['include'][P]> :
        P extends 'following' ? TwitterUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterUserRelationArgs | TwitterUserRelationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'follwer' ? TwitterUserGetPayload<S['select'][P]> :
        P extends 'following' ? TwitterUserGetPayload<S['select'][P]> :  P extends keyof TwitterUserRelation ? TwitterUserRelation[P] : never
  } 
      : TwitterUserRelation


  type TwitterUserRelationCountArgs = 
    Omit<TwitterUserRelationFindManyArgs, 'select' | 'include'> & {
      select?: TwitterUserRelationCountAggregateInputType | true
    }

  export interface TwitterUserRelationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterUserRelation that matches the filter.
     * @param {TwitterUserRelationFindUniqueArgs} args - Arguments to find a TwitterUserRelation
     * @example
     * // Get one TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterUserRelationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterUserRelationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterUserRelation'> extends True ? Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>> : Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T> | null, null>

    /**
     * Find one TwitterUserRelation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterUserRelationFindUniqueOrThrowArgs} args - Arguments to find a TwitterUserRelation
     * @example
     * // Get one TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterUserRelationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterUserRelationFindUniqueOrThrowArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Find the first TwitterUserRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationFindFirstArgs} args - Arguments to find a TwitterUserRelation
     * @example
     * // Get one TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterUserRelationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterUserRelationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterUserRelation'> extends True ? Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>> : Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T> | null, null>

    /**
     * Find the first TwitterUserRelation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationFindFirstOrThrowArgs} args - Arguments to find a TwitterUserRelation
     * @example
     * // Get one TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterUserRelationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterUserRelationFindFirstOrThrowArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Find zero or more TwitterUserRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterUserRelations
     * const twitterUserRelations = await prisma.twitterUserRelation.findMany()
     * 
     * // Get first 10 TwitterUserRelations
     * const twitterUserRelations = await prisma.twitterUserRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterUserRelationWithIdOnly = await prisma.twitterUserRelation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterUserRelationFindManyArgs>(
      args?: SelectSubset<T, TwitterUserRelationFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterUserRelationGetPayload<T>>>

    /**
     * Create a TwitterUserRelation.
     * @param {TwitterUserRelationCreateArgs} args - Arguments to create a TwitterUserRelation.
     * @example
     * // Create one TwitterUserRelation
     * const TwitterUserRelation = await prisma.twitterUserRelation.create({
     *   data: {
     *     // ... data to create a TwitterUserRelation
     *   }
     * })
     * 
    **/
    create<T extends TwitterUserRelationCreateArgs>(
      args: SelectSubset<T, TwitterUserRelationCreateArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Create many TwitterUserRelations.
     *     @param {TwitterUserRelationCreateManyArgs} args - Arguments to create many TwitterUserRelations.
     *     @example
     *     // Create many TwitterUserRelations
     *     const twitterUserRelation = await prisma.twitterUserRelation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterUserRelationCreateManyArgs>(
      args?: SelectSubset<T, TwitterUserRelationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterUserRelation.
     * @param {TwitterUserRelationDeleteArgs} args - Arguments to delete one TwitterUserRelation.
     * @example
     * // Delete one TwitterUserRelation
     * const TwitterUserRelation = await prisma.twitterUserRelation.delete({
     *   where: {
     *     // ... filter to delete one TwitterUserRelation
     *   }
     * })
     * 
    **/
    delete<T extends TwitterUserRelationDeleteArgs>(
      args: SelectSubset<T, TwitterUserRelationDeleteArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Update one TwitterUserRelation.
     * @param {TwitterUserRelationUpdateArgs} args - Arguments to update one TwitterUserRelation.
     * @example
     * // Update one TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterUserRelationUpdateArgs>(
      args: SelectSubset<T, TwitterUserRelationUpdateArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Delete zero or more TwitterUserRelations.
     * @param {TwitterUserRelationDeleteManyArgs} args - Arguments to filter TwitterUserRelations to delete.
     * @example
     * // Delete a few TwitterUserRelations
     * const { count } = await prisma.twitterUserRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterUserRelationDeleteManyArgs>(
      args?: SelectSubset<T, TwitterUserRelationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterUserRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterUserRelations
     * const twitterUserRelation = await prisma.twitterUserRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterUserRelationUpdateManyArgs>(
      args: SelectSubset<T, TwitterUserRelationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterUserRelation.
     * @param {TwitterUserRelationUpsertArgs} args - Arguments to update or create a TwitterUserRelation.
     * @example
     * // Update or create a TwitterUserRelation
     * const twitterUserRelation = await prisma.twitterUserRelation.upsert({
     *   create: {
     *     // ... data to create a TwitterUserRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterUserRelation we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterUserRelationUpsertArgs>(
      args: SelectSubset<T, TwitterUserRelationUpsertArgs>
    ): Prisma__TwitterUserRelationClient<TwitterUserRelationGetPayload<T>>

    /**
     * Count the number of TwitterUserRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationCountArgs} args - Arguments to filter TwitterUserRelations to count.
     * @example
     * // Count the number of TwitterUserRelations
     * const count = await prisma.twitterUserRelation.count({
     *   where: {
     *     // ... the filter for the TwitterUserRelations we want to count
     *   }
     * })
    **/
    count<T extends TwitterUserRelationCountArgs>(
      args?: Subset<T, TwitterUserRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterUserRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterUserRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterUserRelationAggregateArgs>(args: Subset<T, TwitterUserRelationAggregateArgs>): Prisma.PrismaPromise<GetTwitterUserRelationAggregateType<T>>

    /**
     * Group by TwitterUserRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterUserRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterUserRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterUserRelationGroupByArgs['orderBy'] }
        : { orderBy?: TwitterUserRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterUserRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterUserRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterUserRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterUserRelationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    follwer<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    following<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterUserRelation base type for findUnique actions
   */
  export type TwitterUserRelationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter, which TwitterUserRelation to fetch.
     */
    where: TwitterUserRelationWhereUniqueInput
  }

  /**
   * TwitterUserRelation findUnique
   */
  export interface TwitterUserRelationFindUniqueArgs extends TwitterUserRelationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterUserRelation findUniqueOrThrow
   */
  export type TwitterUserRelationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter, which TwitterUserRelation to fetch.
     */
    where: TwitterUserRelationWhereUniqueInput
  }


  /**
   * TwitterUserRelation base type for findFirst actions
   */
  export type TwitterUserRelationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter, which TwitterUserRelation to fetch.
     */
    where?: TwitterUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUserRelations to fetch.
     */
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterUserRelations.
     */
    cursor?: TwitterUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterUserRelations.
     */
    distinct?: Enumerable<TwitterUserRelationScalarFieldEnum>
  }

  /**
   * TwitterUserRelation findFirst
   */
  export interface TwitterUserRelationFindFirstArgs extends TwitterUserRelationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterUserRelation findFirstOrThrow
   */
  export type TwitterUserRelationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter, which TwitterUserRelation to fetch.
     */
    where?: TwitterUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUserRelations to fetch.
     */
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterUserRelations.
     */
    cursor?: TwitterUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterUserRelations.
     */
    distinct?: Enumerable<TwitterUserRelationScalarFieldEnum>
  }


  /**
   * TwitterUserRelation findMany
   */
  export type TwitterUserRelationFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter, which TwitterUserRelations to fetch.
     */
    where?: TwitterUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterUserRelations to fetch.
     */
    orderBy?: Enumerable<TwitterUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterUserRelations.
     */
    cursor?: TwitterUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterUserRelations.
     */
    skip?: number
    distinct?: Enumerable<TwitterUserRelationScalarFieldEnum>
  }


  /**
   * TwitterUserRelation create
   */
  export type TwitterUserRelationCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * The data needed to create a TwitterUserRelation.
     */
    data: XOR<TwitterUserRelationCreateInput, TwitterUserRelationUncheckedCreateInput>
  }


  /**
   * TwitterUserRelation createMany
   */
  export type TwitterUserRelationCreateManyArgs = {
    /**
     * The data used to create many TwitterUserRelations.
     */
    data: Enumerable<TwitterUserRelationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterUserRelation update
   */
  export type TwitterUserRelationUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * The data needed to update a TwitterUserRelation.
     */
    data: XOR<TwitterUserRelationUpdateInput, TwitterUserRelationUncheckedUpdateInput>
    /**
     * Choose, which TwitterUserRelation to update.
     */
    where: TwitterUserRelationWhereUniqueInput
  }


  /**
   * TwitterUserRelation updateMany
   */
  export type TwitterUserRelationUpdateManyArgs = {
    /**
     * The data used to update TwitterUserRelations.
     */
    data: XOR<TwitterUserRelationUpdateManyMutationInput, TwitterUserRelationUncheckedUpdateManyInput>
    /**
     * Filter which TwitterUserRelations to update
     */
    where?: TwitterUserRelationWhereInput
  }


  /**
   * TwitterUserRelation upsert
   */
  export type TwitterUserRelationUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * The filter to search for the TwitterUserRelation to update in case it exists.
     */
    where: TwitterUserRelationWhereUniqueInput
    /**
     * In case the TwitterUserRelation found by the `where` argument doesn't exist, create a new TwitterUserRelation with this data.
     */
    create: XOR<TwitterUserRelationCreateInput, TwitterUserRelationUncheckedCreateInput>
    /**
     * In case the TwitterUserRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterUserRelationUpdateInput, TwitterUserRelationUncheckedUpdateInput>
  }


  /**
   * TwitterUserRelation delete
   */
  export type TwitterUserRelationDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
    /**
     * Filter which TwitterUserRelation to delete.
     */
    where: TwitterUserRelationWhereUniqueInput
  }


  /**
   * TwitterUserRelation deleteMany
   */
  export type TwitterUserRelationDeleteManyArgs = {
    /**
     * Filter which TwitterUserRelations to delete
     */
    where?: TwitterUserRelationWhereInput
  }


  /**
   * TwitterUserRelation without action
   */
  export type TwitterUserRelationArgs = {
    /**
     * Select specific fields to fetch from the TwitterUserRelation
     */
    select?: TwitterUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterUserRelationInclude | null
  }



  /**
   * Model TwitterPost
   */


  export type AggregateTwitterPost = {
    _count: TwitterPostCountAggregateOutputType | null
    _avg: TwitterPostAvgAggregateOutputType | null
    _sum: TwitterPostSumAggregateOutputType | null
    _min: TwitterPostMinAggregateOutputType | null
    _max: TwitterPostMaxAggregateOutputType | null
  }

  export type TwitterPostAvgAggregateOutputType = {
    id: number | null
    postByUserId: number | null
  }

  export type TwitterPostSumAggregateOutputType = {
    id: number | null
    postByUserId: number | null
  }

  export type TwitterPostMinAggregateOutputType = {
    id: number | null
    message: string | null
    postByUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterPostMaxAggregateOutputType = {
    id: number | null
    message: string | null
    postByUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterPostCountAggregateOutputType = {
    id: number
    message: number
    postByUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterPostAvgAggregateInputType = {
    id?: true
    postByUserId?: true
  }

  export type TwitterPostSumAggregateInputType = {
    id?: true
    postByUserId?: true
  }

  export type TwitterPostMinAggregateInputType = {
    id?: true
    message?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterPostMaxAggregateInputType = {
    id?: true
    message?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterPostCountAggregateInputType = {
    id?: true
    message?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterPostAggregateArgs = {
    /**
     * Filter which TwitterPost to aggregate.
     */
    where?: TwitterPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterPosts to fetch.
     */
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterPosts
    **/
    _count?: true | TwitterPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterPostMaxAggregateInputType
  }

  export type GetTwitterPostAggregateType<T extends TwitterPostAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterPost[P]>
      : GetScalarType<T[P], AggregateTwitterPost[P]>
  }




  export type TwitterPostGroupByArgs = {
    where?: TwitterPostWhereInput
    orderBy?: Enumerable<TwitterPostOrderByWithAggregationInput>
    by: TwitterPostScalarFieldEnum[]
    having?: TwitterPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterPostCountAggregateInputType | true
    _avg?: TwitterPostAvgAggregateInputType
    _sum?: TwitterPostSumAggregateInputType
    _min?: TwitterPostMinAggregateInputType
    _max?: TwitterPostMaxAggregateInputType
  }


  export type TwitterPostGroupByOutputType = {
    id: number
    message: string
    postByUserId: number
    createdAt: Date
    updatedAt: Date
    _count: TwitterPostCountAggregateOutputType | null
    _avg: TwitterPostAvgAggregateOutputType | null
    _sum: TwitterPostSumAggregateOutputType | null
    _min: TwitterPostMinAggregateOutputType | null
    _max: TwitterPostMaxAggregateOutputType | null
  }

  type GetTwitterPostGroupByPayload<T extends TwitterPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterPostGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterPostGroupByOutputType[P]>
        }
      >
    >


  export type TwitterPostSelect = {
    id?: boolean
    message?: boolean
    user?: boolean | TwitterUserArgs
    postByUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    twitterReplies?: boolean | TwitterPost$twitterRepliesArgs
    hashTags?: boolean | TwitterPost$hashTagsArgs
    _count?: boolean | TwitterPostCountOutputTypeArgs
  }


  export type TwitterPostInclude = {
    user?: boolean | TwitterUserArgs
    twitterReplies?: boolean | TwitterPost$twitterRepliesArgs
    hashTags?: boolean | TwitterPost$hashTagsArgs
    _count?: boolean | TwitterPostCountOutputTypeArgs
  }

  export type TwitterPostGetPayload<S extends boolean | null | undefined | TwitterPostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterPost :
    S extends undefined ? never :
    S extends { include: any } & (TwitterPostArgs | TwitterPostFindManyArgs)
    ? TwitterPost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? TwitterUserGetPayload<S['include'][P]> :
        P extends 'twitterReplies' ? Array < TwitterReplyGetPayload<S['include'][P]>>  :
        P extends 'hashTags' ? Array < TwitterHashTagGetPayload<S['include'][P]>>  :
        P extends '_count' ? TwitterPostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterPostArgs | TwitterPostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? TwitterUserGetPayload<S['select'][P]> :
        P extends 'twitterReplies' ? Array < TwitterReplyGetPayload<S['select'][P]>>  :
        P extends 'hashTags' ? Array < TwitterHashTagGetPayload<S['select'][P]>>  :
        P extends '_count' ? TwitterPostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TwitterPost ? TwitterPost[P] : never
  } 
      : TwitterPost


  type TwitterPostCountArgs = 
    Omit<TwitterPostFindManyArgs, 'select' | 'include'> & {
      select?: TwitterPostCountAggregateInputType | true
    }

  export interface TwitterPostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterPost that matches the filter.
     * @param {TwitterPostFindUniqueArgs} args - Arguments to find a TwitterPost
     * @example
     * // Get one TwitterPost
     * const twitterPost = await prisma.twitterPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterPostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterPostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterPost'> extends True ? Prisma__TwitterPostClient<TwitterPostGetPayload<T>> : Prisma__TwitterPostClient<TwitterPostGetPayload<T> | null, null>

    /**
     * Find one TwitterPost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterPostFindUniqueOrThrowArgs} args - Arguments to find a TwitterPost
     * @example
     * // Get one TwitterPost
     * const twitterPost = await prisma.twitterPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterPostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterPostFindUniqueOrThrowArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Find the first TwitterPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostFindFirstArgs} args - Arguments to find a TwitterPost
     * @example
     * // Get one TwitterPost
     * const twitterPost = await prisma.twitterPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterPostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterPostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterPost'> extends True ? Prisma__TwitterPostClient<TwitterPostGetPayload<T>> : Prisma__TwitterPostClient<TwitterPostGetPayload<T> | null, null>

    /**
     * Find the first TwitterPost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostFindFirstOrThrowArgs} args - Arguments to find a TwitterPost
     * @example
     * // Get one TwitterPost
     * const twitterPost = await prisma.twitterPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterPostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterPostFindFirstOrThrowArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Find zero or more TwitterPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterPosts
     * const twitterPosts = await prisma.twitterPost.findMany()
     * 
     * // Get first 10 TwitterPosts
     * const twitterPosts = await prisma.twitterPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterPostWithIdOnly = await prisma.twitterPost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterPostFindManyArgs>(
      args?: SelectSubset<T, TwitterPostFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterPostGetPayload<T>>>

    /**
     * Create a TwitterPost.
     * @param {TwitterPostCreateArgs} args - Arguments to create a TwitterPost.
     * @example
     * // Create one TwitterPost
     * const TwitterPost = await prisma.twitterPost.create({
     *   data: {
     *     // ... data to create a TwitterPost
     *   }
     * })
     * 
    **/
    create<T extends TwitterPostCreateArgs>(
      args: SelectSubset<T, TwitterPostCreateArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Create many TwitterPosts.
     *     @param {TwitterPostCreateManyArgs} args - Arguments to create many TwitterPosts.
     *     @example
     *     // Create many TwitterPosts
     *     const twitterPost = await prisma.twitterPost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterPostCreateManyArgs>(
      args?: SelectSubset<T, TwitterPostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterPost.
     * @param {TwitterPostDeleteArgs} args - Arguments to delete one TwitterPost.
     * @example
     * // Delete one TwitterPost
     * const TwitterPost = await prisma.twitterPost.delete({
     *   where: {
     *     // ... filter to delete one TwitterPost
     *   }
     * })
     * 
    **/
    delete<T extends TwitterPostDeleteArgs>(
      args: SelectSubset<T, TwitterPostDeleteArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Update one TwitterPost.
     * @param {TwitterPostUpdateArgs} args - Arguments to update one TwitterPost.
     * @example
     * // Update one TwitterPost
     * const twitterPost = await prisma.twitterPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterPostUpdateArgs>(
      args: SelectSubset<T, TwitterPostUpdateArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Delete zero or more TwitterPosts.
     * @param {TwitterPostDeleteManyArgs} args - Arguments to filter TwitterPosts to delete.
     * @example
     * // Delete a few TwitterPosts
     * const { count } = await prisma.twitterPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterPostDeleteManyArgs>(
      args?: SelectSubset<T, TwitterPostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterPosts
     * const twitterPost = await prisma.twitterPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterPostUpdateManyArgs>(
      args: SelectSubset<T, TwitterPostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterPost.
     * @param {TwitterPostUpsertArgs} args - Arguments to update or create a TwitterPost.
     * @example
     * // Update or create a TwitterPost
     * const twitterPost = await prisma.twitterPost.upsert({
     *   create: {
     *     // ... data to create a TwitterPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterPost we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterPostUpsertArgs>(
      args: SelectSubset<T, TwitterPostUpsertArgs>
    ): Prisma__TwitterPostClient<TwitterPostGetPayload<T>>

    /**
     * Count the number of TwitterPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostCountArgs} args - Arguments to filter TwitterPosts to count.
     * @example
     * // Count the number of TwitterPosts
     * const count = await prisma.twitterPost.count({
     *   where: {
     *     // ... the filter for the TwitterPosts we want to count
     *   }
     * })
    **/
    count<T extends TwitterPostCountArgs>(
      args?: Subset<T, TwitterPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterPostAggregateArgs>(args: Subset<T, TwitterPostAggregateArgs>): Prisma.PrismaPromise<GetTwitterPostAggregateType<T>>

    /**
     * Group by TwitterPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterPostGroupByArgs['orderBy'] }
        : { orderBy?: TwitterPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterPostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    twitterReplies<T extends TwitterPost$twitterRepliesArgs= {}>(args?: Subset<T, TwitterPost$twitterRepliesArgs>): Prisma.PrismaPromise<Array<TwitterReplyGetPayload<T>>| Null>;

    hashTags<T extends TwitterPost$hashTagsArgs= {}>(args?: Subset<T, TwitterPost$hashTagsArgs>): Prisma.PrismaPromise<Array<TwitterHashTagGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterPost base type for findUnique actions
   */
  export type TwitterPostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter, which TwitterPost to fetch.
     */
    where: TwitterPostWhereUniqueInput
  }

  /**
   * TwitterPost findUnique
   */
  export interface TwitterPostFindUniqueArgs extends TwitterPostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterPost findUniqueOrThrow
   */
  export type TwitterPostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter, which TwitterPost to fetch.
     */
    where: TwitterPostWhereUniqueInput
  }


  /**
   * TwitterPost base type for findFirst actions
   */
  export type TwitterPostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter, which TwitterPost to fetch.
     */
    where?: TwitterPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterPosts to fetch.
     */
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterPosts.
     */
    cursor?: TwitterPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterPosts.
     */
    distinct?: Enumerable<TwitterPostScalarFieldEnum>
  }

  /**
   * TwitterPost findFirst
   */
  export interface TwitterPostFindFirstArgs extends TwitterPostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterPost findFirstOrThrow
   */
  export type TwitterPostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter, which TwitterPost to fetch.
     */
    where?: TwitterPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterPosts to fetch.
     */
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterPosts.
     */
    cursor?: TwitterPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterPosts.
     */
    distinct?: Enumerable<TwitterPostScalarFieldEnum>
  }


  /**
   * TwitterPost findMany
   */
  export type TwitterPostFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter, which TwitterPosts to fetch.
     */
    where?: TwitterPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterPosts to fetch.
     */
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterPosts.
     */
    cursor?: TwitterPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterPosts.
     */
    skip?: number
    distinct?: Enumerable<TwitterPostScalarFieldEnum>
  }


  /**
   * TwitterPost create
   */
  export type TwitterPostCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * The data needed to create a TwitterPost.
     */
    data: XOR<TwitterPostCreateInput, TwitterPostUncheckedCreateInput>
  }


  /**
   * TwitterPost createMany
   */
  export type TwitterPostCreateManyArgs = {
    /**
     * The data used to create many TwitterPosts.
     */
    data: Enumerable<TwitterPostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterPost update
   */
  export type TwitterPostUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * The data needed to update a TwitterPost.
     */
    data: XOR<TwitterPostUpdateInput, TwitterPostUncheckedUpdateInput>
    /**
     * Choose, which TwitterPost to update.
     */
    where: TwitterPostWhereUniqueInput
  }


  /**
   * TwitterPost updateMany
   */
  export type TwitterPostUpdateManyArgs = {
    /**
     * The data used to update TwitterPosts.
     */
    data: XOR<TwitterPostUpdateManyMutationInput, TwitterPostUncheckedUpdateManyInput>
    /**
     * Filter which TwitterPosts to update
     */
    where?: TwitterPostWhereInput
  }


  /**
   * TwitterPost upsert
   */
  export type TwitterPostUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * The filter to search for the TwitterPost to update in case it exists.
     */
    where: TwitterPostWhereUniqueInput
    /**
     * In case the TwitterPost found by the `where` argument doesn't exist, create a new TwitterPost with this data.
     */
    create: XOR<TwitterPostCreateInput, TwitterPostUncheckedCreateInput>
    /**
     * In case the TwitterPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterPostUpdateInput, TwitterPostUncheckedUpdateInput>
  }


  /**
   * TwitterPost delete
   */
  export type TwitterPostDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    /**
     * Filter which TwitterPost to delete.
     */
    where: TwitterPostWhereUniqueInput
  }


  /**
   * TwitterPost deleteMany
   */
  export type TwitterPostDeleteManyArgs = {
    /**
     * Filter which TwitterPosts to delete
     */
    where?: TwitterPostWhereInput
  }


  /**
   * TwitterPost.twitterReplies
   */
  export type TwitterPost$twitterRepliesArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    where?: TwitterReplyWhereInput
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    cursor?: TwitterReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterReplyScalarFieldEnum>
  }


  /**
   * TwitterPost.hashTags
   */
  export type TwitterPost$hashTagsArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    where?: TwitterHashTagWhereInput
    orderBy?: Enumerable<TwitterHashTagOrderByWithRelationInput>
    cursor?: TwitterHashTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterHashTagScalarFieldEnum>
  }


  /**
   * TwitterPost without action
   */
  export type TwitterPostArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
  }



  /**
   * Model TwitterHashTag
   */


  export type AggregateTwitterHashTag = {
    _count: TwitterHashTagCountAggregateOutputType | null
    _avg: TwitterHashTagAvgAggregateOutputType | null
    _sum: TwitterHashTagSumAggregateOutputType | null
    _min: TwitterHashTagMinAggregateOutputType | null
    _max: TwitterHashTagMaxAggregateOutputType | null
  }

  export type TwitterHashTagAvgAggregateOutputType = {
    id: number | null
  }

  export type TwitterHashTagSumAggregateOutputType = {
    id: number | null
  }

  export type TwitterHashTagMinAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterHashTagMaxAggregateOutputType = {
    id: number | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterHashTagCountAggregateOutputType = {
    id: number
    message: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterHashTagAvgAggregateInputType = {
    id?: true
  }

  export type TwitterHashTagSumAggregateInputType = {
    id?: true
  }

  export type TwitterHashTagMinAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterHashTagMaxAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterHashTagCountAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterHashTagAggregateArgs = {
    /**
     * Filter which TwitterHashTag to aggregate.
     */
    where?: TwitterHashTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterHashTags to fetch.
     */
    orderBy?: Enumerable<TwitterHashTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterHashTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterHashTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterHashTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterHashTags
    **/
    _count?: true | TwitterHashTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterHashTagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterHashTagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterHashTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterHashTagMaxAggregateInputType
  }

  export type GetTwitterHashTagAggregateType<T extends TwitterHashTagAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterHashTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterHashTag[P]>
      : GetScalarType<T[P], AggregateTwitterHashTag[P]>
  }




  export type TwitterHashTagGroupByArgs = {
    where?: TwitterHashTagWhereInput
    orderBy?: Enumerable<TwitterHashTagOrderByWithAggregationInput>
    by: TwitterHashTagScalarFieldEnum[]
    having?: TwitterHashTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterHashTagCountAggregateInputType | true
    _avg?: TwitterHashTagAvgAggregateInputType
    _sum?: TwitterHashTagSumAggregateInputType
    _min?: TwitterHashTagMinAggregateInputType
    _max?: TwitterHashTagMaxAggregateInputType
  }


  export type TwitterHashTagGroupByOutputType = {
    id: number
    message: string
    createdAt: Date
    updatedAt: Date
    _count: TwitterHashTagCountAggregateOutputType | null
    _avg: TwitterHashTagAvgAggregateOutputType | null
    _sum: TwitterHashTagSumAggregateOutputType | null
    _min: TwitterHashTagMinAggregateOutputType | null
    _max: TwitterHashTagMaxAggregateOutputType | null
  }

  type GetTwitterHashTagGroupByPayload<T extends TwitterHashTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterHashTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterHashTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterHashTagGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterHashTagGroupByOutputType[P]>
        }
      >
    >


  export type TwitterHashTagSelect = {
    id?: boolean
    message?: boolean
    posts?: boolean | TwitterHashTag$postsArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | TwitterHashTagCountOutputTypeArgs
  }


  export type TwitterHashTagInclude = {
    posts?: boolean | TwitterHashTag$postsArgs
    _count?: boolean | TwitterHashTagCountOutputTypeArgs
  }

  export type TwitterHashTagGetPayload<S extends boolean | null | undefined | TwitterHashTagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterHashTag :
    S extends undefined ? never :
    S extends { include: any } & (TwitterHashTagArgs | TwitterHashTagFindManyArgs)
    ? TwitterHashTag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < TwitterPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? TwitterHashTagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterHashTagArgs | TwitterHashTagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < TwitterPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? TwitterHashTagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TwitterHashTag ? TwitterHashTag[P] : never
  } 
      : TwitterHashTag


  type TwitterHashTagCountArgs = 
    Omit<TwitterHashTagFindManyArgs, 'select' | 'include'> & {
      select?: TwitterHashTagCountAggregateInputType | true
    }

  export interface TwitterHashTagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterHashTag that matches the filter.
     * @param {TwitterHashTagFindUniqueArgs} args - Arguments to find a TwitterHashTag
     * @example
     * // Get one TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterHashTagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterHashTagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterHashTag'> extends True ? Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>> : Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T> | null, null>

    /**
     * Find one TwitterHashTag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterHashTagFindUniqueOrThrowArgs} args - Arguments to find a TwitterHashTag
     * @example
     * // Get one TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterHashTagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterHashTagFindUniqueOrThrowArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Find the first TwitterHashTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagFindFirstArgs} args - Arguments to find a TwitterHashTag
     * @example
     * // Get one TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterHashTagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterHashTagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterHashTag'> extends True ? Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>> : Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T> | null, null>

    /**
     * Find the first TwitterHashTag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagFindFirstOrThrowArgs} args - Arguments to find a TwitterHashTag
     * @example
     * // Get one TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterHashTagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterHashTagFindFirstOrThrowArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Find zero or more TwitterHashTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterHashTags
     * const twitterHashTags = await prisma.twitterHashTag.findMany()
     * 
     * // Get first 10 TwitterHashTags
     * const twitterHashTags = await prisma.twitterHashTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterHashTagWithIdOnly = await prisma.twitterHashTag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterHashTagFindManyArgs>(
      args?: SelectSubset<T, TwitterHashTagFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterHashTagGetPayload<T>>>

    /**
     * Create a TwitterHashTag.
     * @param {TwitterHashTagCreateArgs} args - Arguments to create a TwitterHashTag.
     * @example
     * // Create one TwitterHashTag
     * const TwitterHashTag = await prisma.twitterHashTag.create({
     *   data: {
     *     // ... data to create a TwitterHashTag
     *   }
     * })
     * 
    **/
    create<T extends TwitterHashTagCreateArgs>(
      args: SelectSubset<T, TwitterHashTagCreateArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Create many TwitterHashTags.
     *     @param {TwitterHashTagCreateManyArgs} args - Arguments to create many TwitterHashTags.
     *     @example
     *     // Create many TwitterHashTags
     *     const twitterHashTag = await prisma.twitterHashTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterHashTagCreateManyArgs>(
      args?: SelectSubset<T, TwitterHashTagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterHashTag.
     * @param {TwitterHashTagDeleteArgs} args - Arguments to delete one TwitterHashTag.
     * @example
     * // Delete one TwitterHashTag
     * const TwitterHashTag = await prisma.twitterHashTag.delete({
     *   where: {
     *     // ... filter to delete one TwitterHashTag
     *   }
     * })
     * 
    **/
    delete<T extends TwitterHashTagDeleteArgs>(
      args: SelectSubset<T, TwitterHashTagDeleteArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Update one TwitterHashTag.
     * @param {TwitterHashTagUpdateArgs} args - Arguments to update one TwitterHashTag.
     * @example
     * // Update one TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterHashTagUpdateArgs>(
      args: SelectSubset<T, TwitterHashTagUpdateArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Delete zero or more TwitterHashTags.
     * @param {TwitterHashTagDeleteManyArgs} args - Arguments to filter TwitterHashTags to delete.
     * @example
     * // Delete a few TwitterHashTags
     * const { count } = await prisma.twitterHashTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterHashTagDeleteManyArgs>(
      args?: SelectSubset<T, TwitterHashTagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterHashTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterHashTags
     * const twitterHashTag = await prisma.twitterHashTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterHashTagUpdateManyArgs>(
      args: SelectSubset<T, TwitterHashTagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterHashTag.
     * @param {TwitterHashTagUpsertArgs} args - Arguments to update or create a TwitterHashTag.
     * @example
     * // Update or create a TwitterHashTag
     * const twitterHashTag = await prisma.twitterHashTag.upsert({
     *   create: {
     *     // ... data to create a TwitterHashTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterHashTag we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterHashTagUpsertArgs>(
      args: SelectSubset<T, TwitterHashTagUpsertArgs>
    ): Prisma__TwitterHashTagClient<TwitterHashTagGetPayload<T>>

    /**
     * Count the number of TwitterHashTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagCountArgs} args - Arguments to filter TwitterHashTags to count.
     * @example
     * // Count the number of TwitterHashTags
     * const count = await prisma.twitterHashTag.count({
     *   where: {
     *     // ... the filter for the TwitterHashTags we want to count
     *   }
     * })
    **/
    count<T extends TwitterHashTagCountArgs>(
      args?: Subset<T, TwitterHashTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterHashTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterHashTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterHashTagAggregateArgs>(args: Subset<T, TwitterHashTagAggregateArgs>): Prisma.PrismaPromise<GetTwitterHashTagAggregateType<T>>

    /**
     * Group by TwitterHashTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterHashTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterHashTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterHashTagGroupByArgs['orderBy'] }
        : { orderBy?: TwitterHashTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterHashTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterHashTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterHashTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterHashTagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends TwitterHashTag$postsArgs= {}>(args?: Subset<T, TwitterHashTag$postsArgs>): Prisma.PrismaPromise<Array<TwitterPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterHashTag base type for findUnique actions
   */
  export type TwitterHashTagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter, which TwitterHashTag to fetch.
     */
    where: TwitterHashTagWhereUniqueInput
  }

  /**
   * TwitterHashTag findUnique
   */
  export interface TwitterHashTagFindUniqueArgs extends TwitterHashTagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterHashTag findUniqueOrThrow
   */
  export type TwitterHashTagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter, which TwitterHashTag to fetch.
     */
    where: TwitterHashTagWhereUniqueInput
  }


  /**
   * TwitterHashTag base type for findFirst actions
   */
  export type TwitterHashTagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter, which TwitterHashTag to fetch.
     */
    where?: TwitterHashTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterHashTags to fetch.
     */
    orderBy?: Enumerable<TwitterHashTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterHashTags.
     */
    cursor?: TwitterHashTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterHashTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterHashTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterHashTags.
     */
    distinct?: Enumerable<TwitterHashTagScalarFieldEnum>
  }

  /**
   * TwitterHashTag findFirst
   */
  export interface TwitterHashTagFindFirstArgs extends TwitterHashTagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterHashTag findFirstOrThrow
   */
  export type TwitterHashTagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter, which TwitterHashTag to fetch.
     */
    where?: TwitterHashTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterHashTags to fetch.
     */
    orderBy?: Enumerable<TwitterHashTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterHashTags.
     */
    cursor?: TwitterHashTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterHashTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterHashTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterHashTags.
     */
    distinct?: Enumerable<TwitterHashTagScalarFieldEnum>
  }


  /**
   * TwitterHashTag findMany
   */
  export type TwitterHashTagFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter, which TwitterHashTags to fetch.
     */
    where?: TwitterHashTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterHashTags to fetch.
     */
    orderBy?: Enumerable<TwitterHashTagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterHashTags.
     */
    cursor?: TwitterHashTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterHashTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterHashTags.
     */
    skip?: number
    distinct?: Enumerable<TwitterHashTagScalarFieldEnum>
  }


  /**
   * TwitterHashTag create
   */
  export type TwitterHashTagCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * The data needed to create a TwitterHashTag.
     */
    data: XOR<TwitterHashTagCreateInput, TwitterHashTagUncheckedCreateInput>
  }


  /**
   * TwitterHashTag createMany
   */
  export type TwitterHashTagCreateManyArgs = {
    /**
     * The data used to create many TwitterHashTags.
     */
    data: Enumerable<TwitterHashTagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterHashTag update
   */
  export type TwitterHashTagUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * The data needed to update a TwitterHashTag.
     */
    data: XOR<TwitterHashTagUpdateInput, TwitterHashTagUncheckedUpdateInput>
    /**
     * Choose, which TwitterHashTag to update.
     */
    where: TwitterHashTagWhereUniqueInput
  }


  /**
   * TwitterHashTag updateMany
   */
  export type TwitterHashTagUpdateManyArgs = {
    /**
     * The data used to update TwitterHashTags.
     */
    data: XOR<TwitterHashTagUpdateManyMutationInput, TwitterHashTagUncheckedUpdateManyInput>
    /**
     * Filter which TwitterHashTags to update
     */
    where?: TwitterHashTagWhereInput
  }


  /**
   * TwitterHashTag upsert
   */
  export type TwitterHashTagUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * The filter to search for the TwitterHashTag to update in case it exists.
     */
    where: TwitterHashTagWhereUniqueInput
    /**
     * In case the TwitterHashTag found by the `where` argument doesn't exist, create a new TwitterHashTag with this data.
     */
    create: XOR<TwitterHashTagCreateInput, TwitterHashTagUncheckedCreateInput>
    /**
     * In case the TwitterHashTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterHashTagUpdateInput, TwitterHashTagUncheckedUpdateInput>
  }


  /**
   * TwitterHashTag delete
   */
  export type TwitterHashTagDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
    /**
     * Filter which TwitterHashTag to delete.
     */
    where: TwitterHashTagWhereUniqueInput
  }


  /**
   * TwitterHashTag deleteMany
   */
  export type TwitterHashTagDeleteManyArgs = {
    /**
     * Filter which TwitterHashTags to delete
     */
    where?: TwitterHashTagWhereInput
  }


  /**
   * TwitterHashTag.posts
   */
  export type TwitterHashTag$postsArgs = {
    /**
     * Select specific fields to fetch from the TwitterPost
     */
    select?: TwitterPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterPostInclude | null
    where?: TwitterPostWhereInput
    orderBy?: Enumerable<TwitterPostOrderByWithRelationInput>
    cursor?: TwitterPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TwitterPostScalarFieldEnum>
  }


  /**
   * TwitterHashTag without action
   */
  export type TwitterHashTagArgs = {
    /**
     * Select specific fields to fetch from the TwitterHashTag
     */
    select?: TwitterHashTagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterHashTagInclude | null
  }



  /**
   * Model TwitterReply
   */


  export type AggregateTwitterReply = {
    _count: TwitterReplyCountAggregateOutputType | null
    _avg: TwitterReplyAvgAggregateOutputType | null
    _sum: TwitterReplySumAggregateOutputType | null
    _min: TwitterReplyMinAggregateOutputType | null
    _max: TwitterReplyMaxAggregateOutputType | null
  }

  export type TwitterReplyAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    postByUserId: number | null
  }

  export type TwitterReplySumAggregateOutputType = {
    id: number | null
    postId: number | null
    postByUserId: number | null
  }

  export type TwitterReplyMinAggregateOutputType = {
    id: number | null
    message: string | null
    postId: number | null
    postByUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterReplyMaxAggregateOutputType = {
    id: number | null
    message: string | null
    postId: number | null
    postByUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterReplyCountAggregateOutputType = {
    id: number
    message: number
    postId: number
    postByUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterReplyAvgAggregateInputType = {
    id?: true
    postId?: true
    postByUserId?: true
  }

  export type TwitterReplySumAggregateInputType = {
    id?: true
    postId?: true
    postByUserId?: true
  }

  export type TwitterReplyMinAggregateInputType = {
    id?: true
    message?: true
    postId?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterReplyMaxAggregateInputType = {
    id?: true
    message?: true
    postId?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterReplyCountAggregateInputType = {
    id?: true
    message?: true
    postId?: true
    postByUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterReplyAggregateArgs = {
    /**
     * Filter which TwitterReply to aggregate.
     */
    where?: TwitterReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterReplies to fetch.
     */
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterReplies
    **/
    _count?: true | TwitterReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterReplyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterReplySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterReplyMaxAggregateInputType
  }

  export type GetTwitterReplyAggregateType<T extends TwitterReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterReply[P]>
      : GetScalarType<T[P], AggregateTwitterReply[P]>
  }




  export type TwitterReplyGroupByArgs = {
    where?: TwitterReplyWhereInput
    orderBy?: Enumerable<TwitterReplyOrderByWithAggregationInput>
    by: TwitterReplyScalarFieldEnum[]
    having?: TwitterReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterReplyCountAggregateInputType | true
    _avg?: TwitterReplyAvgAggregateInputType
    _sum?: TwitterReplySumAggregateInputType
    _min?: TwitterReplyMinAggregateInputType
    _max?: TwitterReplyMaxAggregateInputType
  }


  export type TwitterReplyGroupByOutputType = {
    id: number
    message: string
    postId: number
    postByUserId: number
    createdAt: Date
    updatedAt: Date
    _count: TwitterReplyCountAggregateOutputType | null
    _avg: TwitterReplyAvgAggregateOutputType | null
    _sum: TwitterReplySumAggregateOutputType | null
    _min: TwitterReplyMinAggregateOutputType | null
    _max: TwitterReplyMaxAggregateOutputType | null
  }

  type GetTwitterReplyGroupByPayload<T extends TwitterReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterReplyGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterReplyGroupByOutputType[P]>
        }
      >
    >


  export type TwitterReplySelect = {
    id?: boolean
    message?: boolean
    post?: boolean | TwitterPostArgs
    postId?: boolean
    user?: boolean | TwitterUserArgs
    postByUserId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TwitterReplyInclude = {
    post?: boolean | TwitterPostArgs
    user?: boolean | TwitterUserArgs
  }

  export type TwitterReplyGetPayload<S extends boolean | null | undefined | TwitterReplyArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterReply :
    S extends undefined ? never :
    S extends { include: any } & (TwitterReplyArgs | TwitterReplyFindManyArgs)
    ? TwitterReply  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? TwitterPostGetPayload<S['include'][P]> :
        P extends 'user' ? TwitterUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterReplyArgs | TwitterReplyFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? TwitterPostGetPayload<S['select'][P]> :
        P extends 'user' ? TwitterUserGetPayload<S['select'][P]> :  P extends keyof TwitterReply ? TwitterReply[P] : never
  } 
      : TwitterReply


  type TwitterReplyCountArgs = 
    Omit<TwitterReplyFindManyArgs, 'select' | 'include'> & {
      select?: TwitterReplyCountAggregateInputType | true
    }

  export interface TwitterReplyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterReply that matches the filter.
     * @param {TwitterReplyFindUniqueArgs} args - Arguments to find a TwitterReply
     * @example
     * // Get one TwitterReply
     * const twitterReply = await prisma.twitterReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterReplyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterReplyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterReply'> extends True ? Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>> : Prisma__TwitterReplyClient<TwitterReplyGetPayload<T> | null, null>

    /**
     * Find one TwitterReply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterReplyFindUniqueOrThrowArgs} args - Arguments to find a TwitterReply
     * @example
     * // Get one TwitterReply
     * const twitterReply = await prisma.twitterReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterReplyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterReplyFindUniqueOrThrowArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Find the first TwitterReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyFindFirstArgs} args - Arguments to find a TwitterReply
     * @example
     * // Get one TwitterReply
     * const twitterReply = await prisma.twitterReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterReplyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterReplyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterReply'> extends True ? Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>> : Prisma__TwitterReplyClient<TwitterReplyGetPayload<T> | null, null>

    /**
     * Find the first TwitterReply that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyFindFirstOrThrowArgs} args - Arguments to find a TwitterReply
     * @example
     * // Get one TwitterReply
     * const twitterReply = await prisma.twitterReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterReplyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterReplyFindFirstOrThrowArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Find zero or more TwitterReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterReplies
     * const twitterReplies = await prisma.twitterReply.findMany()
     * 
     * // Get first 10 TwitterReplies
     * const twitterReplies = await prisma.twitterReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterReplyWithIdOnly = await prisma.twitterReply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterReplyFindManyArgs>(
      args?: SelectSubset<T, TwitterReplyFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterReplyGetPayload<T>>>

    /**
     * Create a TwitterReply.
     * @param {TwitterReplyCreateArgs} args - Arguments to create a TwitterReply.
     * @example
     * // Create one TwitterReply
     * const TwitterReply = await prisma.twitterReply.create({
     *   data: {
     *     // ... data to create a TwitterReply
     *   }
     * })
     * 
    **/
    create<T extends TwitterReplyCreateArgs>(
      args: SelectSubset<T, TwitterReplyCreateArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Create many TwitterReplies.
     *     @param {TwitterReplyCreateManyArgs} args - Arguments to create many TwitterReplies.
     *     @example
     *     // Create many TwitterReplies
     *     const twitterReply = await prisma.twitterReply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterReplyCreateManyArgs>(
      args?: SelectSubset<T, TwitterReplyCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterReply.
     * @param {TwitterReplyDeleteArgs} args - Arguments to delete one TwitterReply.
     * @example
     * // Delete one TwitterReply
     * const TwitterReply = await prisma.twitterReply.delete({
     *   where: {
     *     // ... filter to delete one TwitterReply
     *   }
     * })
     * 
    **/
    delete<T extends TwitterReplyDeleteArgs>(
      args: SelectSubset<T, TwitterReplyDeleteArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Update one TwitterReply.
     * @param {TwitterReplyUpdateArgs} args - Arguments to update one TwitterReply.
     * @example
     * // Update one TwitterReply
     * const twitterReply = await prisma.twitterReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterReplyUpdateArgs>(
      args: SelectSubset<T, TwitterReplyUpdateArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Delete zero or more TwitterReplies.
     * @param {TwitterReplyDeleteManyArgs} args - Arguments to filter TwitterReplies to delete.
     * @example
     * // Delete a few TwitterReplies
     * const { count } = await prisma.twitterReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterReplyDeleteManyArgs>(
      args?: SelectSubset<T, TwitterReplyDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterReplies
     * const twitterReply = await prisma.twitterReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterReplyUpdateManyArgs>(
      args: SelectSubset<T, TwitterReplyUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterReply.
     * @param {TwitterReplyUpsertArgs} args - Arguments to update or create a TwitterReply.
     * @example
     * // Update or create a TwitterReply
     * const twitterReply = await prisma.twitterReply.upsert({
     *   create: {
     *     // ... data to create a TwitterReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterReply we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterReplyUpsertArgs>(
      args: SelectSubset<T, TwitterReplyUpsertArgs>
    ): Prisma__TwitterReplyClient<TwitterReplyGetPayload<T>>

    /**
     * Count the number of TwitterReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyCountArgs} args - Arguments to filter TwitterReplies to count.
     * @example
     * // Count the number of TwitterReplies
     * const count = await prisma.twitterReply.count({
     *   where: {
     *     // ... the filter for the TwitterReplies we want to count
     *   }
     * })
    **/
    count<T extends TwitterReplyCountArgs>(
      args?: Subset<T, TwitterReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterReplyAggregateArgs>(args: Subset<T, TwitterReplyAggregateArgs>): Prisma.PrismaPromise<GetTwitterReplyAggregateType<T>>

    /**
     * Group by TwitterReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterReplyGroupByArgs['orderBy'] }
        : { orderBy?: TwitterReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterReplyClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends TwitterPostArgs= {}>(args?: Subset<T, TwitterPostArgs>): Prisma__TwitterPostClient<TwitterPostGetPayload<T> | Null>;

    user<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterReply base type for findUnique actions
   */
  export type TwitterReplyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter, which TwitterReply to fetch.
     */
    where: TwitterReplyWhereUniqueInput
  }

  /**
   * TwitterReply findUnique
   */
  export interface TwitterReplyFindUniqueArgs extends TwitterReplyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterReply findUniqueOrThrow
   */
  export type TwitterReplyFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter, which TwitterReply to fetch.
     */
    where: TwitterReplyWhereUniqueInput
  }


  /**
   * TwitterReply base type for findFirst actions
   */
  export type TwitterReplyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter, which TwitterReply to fetch.
     */
    where?: TwitterReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterReplies to fetch.
     */
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterReplies.
     */
    cursor?: TwitterReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterReplies.
     */
    distinct?: Enumerable<TwitterReplyScalarFieldEnum>
  }

  /**
   * TwitterReply findFirst
   */
  export interface TwitterReplyFindFirstArgs extends TwitterReplyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterReply findFirstOrThrow
   */
  export type TwitterReplyFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter, which TwitterReply to fetch.
     */
    where?: TwitterReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterReplies to fetch.
     */
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterReplies.
     */
    cursor?: TwitterReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterReplies.
     */
    distinct?: Enumerable<TwitterReplyScalarFieldEnum>
  }


  /**
   * TwitterReply findMany
   */
  export type TwitterReplyFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter, which TwitterReplies to fetch.
     */
    where?: TwitterReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterReplies to fetch.
     */
    orderBy?: Enumerable<TwitterReplyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterReplies.
     */
    cursor?: TwitterReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterReplies.
     */
    skip?: number
    distinct?: Enumerable<TwitterReplyScalarFieldEnum>
  }


  /**
   * TwitterReply create
   */
  export type TwitterReplyCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * The data needed to create a TwitterReply.
     */
    data: XOR<TwitterReplyCreateInput, TwitterReplyUncheckedCreateInput>
  }


  /**
   * TwitterReply createMany
   */
  export type TwitterReplyCreateManyArgs = {
    /**
     * The data used to create many TwitterReplies.
     */
    data: Enumerable<TwitterReplyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterReply update
   */
  export type TwitterReplyUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * The data needed to update a TwitterReply.
     */
    data: XOR<TwitterReplyUpdateInput, TwitterReplyUncheckedUpdateInput>
    /**
     * Choose, which TwitterReply to update.
     */
    where: TwitterReplyWhereUniqueInput
  }


  /**
   * TwitterReply updateMany
   */
  export type TwitterReplyUpdateManyArgs = {
    /**
     * The data used to update TwitterReplies.
     */
    data: XOR<TwitterReplyUpdateManyMutationInput, TwitterReplyUncheckedUpdateManyInput>
    /**
     * Filter which TwitterReplies to update
     */
    where?: TwitterReplyWhereInput
  }


  /**
   * TwitterReply upsert
   */
  export type TwitterReplyUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * The filter to search for the TwitterReply to update in case it exists.
     */
    where: TwitterReplyWhereUniqueInput
    /**
     * In case the TwitterReply found by the `where` argument doesn't exist, create a new TwitterReply with this data.
     */
    create: XOR<TwitterReplyCreateInput, TwitterReplyUncheckedCreateInput>
    /**
     * In case the TwitterReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterReplyUpdateInput, TwitterReplyUncheckedUpdateInput>
  }


  /**
   * TwitterReply delete
   */
  export type TwitterReplyDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
    /**
     * Filter which TwitterReply to delete.
     */
    where: TwitterReplyWhereUniqueInput
  }


  /**
   * TwitterReply deleteMany
   */
  export type TwitterReplyDeleteManyArgs = {
    /**
     * Filter which TwitterReplies to delete
     */
    where?: TwitterReplyWhereInput
  }


  /**
   * TwitterReply without action
   */
  export type TwitterReplyArgs = {
    /**
     * Select specific fields to fetch from the TwitterReply
     */
    select?: TwitterReplySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterReplyInclude | null
  }



  /**
   * Model TwitterDM
   */


  export type AggregateTwitterDM = {
    _count: TwitterDMCountAggregateOutputType | null
    _avg: TwitterDMAvgAggregateOutputType | null
    _sum: TwitterDMSumAggregateOutputType | null
    _min: TwitterDMMinAggregateOutputType | null
    _max: TwitterDMMaxAggregateOutputType | null
  }

  export type TwitterDMAvgAggregateOutputType = {
    id: number | null
    directFromId: number | null
    directToId: number | null
  }

  export type TwitterDMSumAggregateOutputType = {
    id: number | null
    directFromId: number | null
    directToId: number | null
  }

  export type TwitterDMMinAggregateOutputType = {
    id: number | null
    message: string | null
    directFromId: number | null
    directToId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterDMMaxAggregateOutputType = {
    id: number | null
    message: string | null
    directFromId: number | null
    directToId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TwitterDMCountAggregateOutputType = {
    id: number
    message: number
    directFromId: number
    directToId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TwitterDMAvgAggregateInputType = {
    id?: true
    directFromId?: true
    directToId?: true
  }

  export type TwitterDMSumAggregateInputType = {
    id?: true
    directFromId?: true
    directToId?: true
  }

  export type TwitterDMMinAggregateInputType = {
    id?: true
    message?: true
    directFromId?: true
    directToId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterDMMaxAggregateInputType = {
    id?: true
    message?: true
    directFromId?: true
    directToId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TwitterDMCountAggregateInputType = {
    id?: true
    message?: true
    directFromId?: true
    directToId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TwitterDMAggregateArgs = {
    /**
     * Filter which TwitterDM to aggregate.
     */
    where?: TwitterDMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterDMS to fetch.
     */
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TwitterDMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterDMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterDMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TwitterDMS
    **/
    _count?: true | TwitterDMCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TwitterDMAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TwitterDMSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TwitterDMMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TwitterDMMaxAggregateInputType
  }

  export type GetTwitterDMAggregateType<T extends TwitterDMAggregateArgs> = {
        [P in keyof T & keyof AggregateTwitterDM]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTwitterDM[P]>
      : GetScalarType<T[P], AggregateTwitterDM[P]>
  }




  export type TwitterDMGroupByArgs = {
    where?: TwitterDMWhereInput
    orderBy?: Enumerable<TwitterDMOrderByWithAggregationInput>
    by: TwitterDMScalarFieldEnum[]
    having?: TwitterDMScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TwitterDMCountAggregateInputType | true
    _avg?: TwitterDMAvgAggregateInputType
    _sum?: TwitterDMSumAggregateInputType
    _min?: TwitterDMMinAggregateInputType
    _max?: TwitterDMMaxAggregateInputType
  }


  export type TwitterDMGroupByOutputType = {
    id: number
    message: string
    directFromId: number
    directToId: number
    createdAt: Date
    updatedAt: Date
    _count: TwitterDMCountAggregateOutputType | null
    _avg: TwitterDMAvgAggregateOutputType | null
    _sum: TwitterDMSumAggregateOutputType | null
    _min: TwitterDMMinAggregateOutputType | null
    _max: TwitterDMMaxAggregateOutputType | null
  }

  type GetTwitterDMGroupByPayload<T extends TwitterDMGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TwitterDMGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TwitterDMGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TwitterDMGroupByOutputType[P]>
            : GetScalarType<T[P], TwitterDMGroupByOutputType[P]>
        }
      >
    >


  export type TwitterDMSelect = {
    id?: boolean
    message?: boolean
    directFrom?: boolean | TwitterUserArgs
    directFromId?: boolean
    directTo?: boolean | TwitterUserArgs
    directToId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type TwitterDMInclude = {
    directFrom?: boolean | TwitterUserArgs
    directTo?: boolean | TwitterUserArgs
  }

  export type TwitterDMGetPayload<S extends boolean | null | undefined | TwitterDMArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? TwitterDM :
    S extends undefined ? never :
    S extends { include: any } & (TwitterDMArgs | TwitterDMFindManyArgs)
    ? TwitterDM  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'directFrom' ? TwitterUserGetPayload<S['include'][P]> :
        P extends 'directTo' ? TwitterUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (TwitterDMArgs | TwitterDMFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'directFrom' ? TwitterUserGetPayload<S['select'][P]> :
        P extends 'directTo' ? TwitterUserGetPayload<S['select'][P]> :  P extends keyof TwitterDM ? TwitterDM[P] : never
  } 
      : TwitterDM


  type TwitterDMCountArgs = 
    Omit<TwitterDMFindManyArgs, 'select' | 'include'> & {
      select?: TwitterDMCountAggregateInputType | true
    }

  export interface TwitterDMDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one TwitterDM that matches the filter.
     * @param {TwitterDMFindUniqueArgs} args - Arguments to find a TwitterDM
     * @example
     * // Get one TwitterDM
     * const twitterDM = await prisma.twitterDM.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TwitterDMFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TwitterDMFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TwitterDM'> extends True ? Prisma__TwitterDMClient<TwitterDMGetPayload<T>> : Prisma__TwitterDMClient<TwitterDMGetPayload<T> | null, null>

    /**
     * Find one TwitterDM that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TwitterDMFindUniqueOrThrowArgs} args - Arguments to find a TwitterDM
     * @example
     * // Get one TwitterDM
     * const twitterDM = await prisma.twitterDM.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TwitterDMFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TwitterDMFindUniqueOrThrowArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Find the first TwitterDM that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMFindFirstArgs} args - Arguments to find a TwitterDM
     * @example
     * // Get one TwitterDM
     * const twitterDM = await prisma.twitterDM.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TwitterDMFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TwitterDMFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TwitterDM'> extends True ? Prisma__TwitterDMClient<TwitterDMGetPayload<T>> : Prisma__TwitterDMClient<TwitterDMGetPayload<T> | null, null>

    /**
     * Find the first TwitterDM that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMFindFirstOrThrowArgs} args - Arguments to find a TwitterDM
     * @example
     * // Get one TwitterDM
     * const twitterDM = await prisma.twitterDM.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TwitterDMFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TwitterDMFindFirstOrThrowArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Find zero or more TwitterDMS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TwitterDMS
     * const twitterDMS = await prisma.twitterDM.findMany()
     * 
     * // Get first 10 TwitterDMS
     * const twitterDMS = await prisma.twitterDM.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const twitterDMWithIdOnly = await prisma.twitterDM.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TwitterDMFindManyArgs>(
      args?: SelectSubset<T, TwitterDMFindManyArgs>
    ): Prisma.PrismaPromise<Array<TwitterDMGetPayload<T>>>

    /**
     * Create a TwitterDM.
     * @param {TwitterDMCreateArgs} args - Arguments to create a TwitterDM.
     * @example
     * // Create one TwitterDM
     * const TwitterDM = await prisma.twitterDM.create({
     *   data: {
     *     // ... data to create a TwitterDM
     *   }
     * })
     * 
    **/
    create<T extends TwitterDMCreateArgs>(
      args: SelectSubset<T, TwitterDMCreateArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Create many TwitterDMS.
     *     @param {TwitterDMCreateManyArgs} args - Arguments to create many TwitterDMS.
     *     @example
     *     // Create many TwitterDMS
     *     const twitterDM = await prisma.twitterDM.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TwitterDMCreateManyArgs>(
      args?: SelectSubset<T, TwitterDMCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a TwitterDM.
     * @param {TwitterDMDeleteArgs} args - Arguments to delete one TwitterDM.
     * @example
     * // Delete one TwitterDM
     * const TwitterDM = await prisma.twitterDM.delete({
     *   where: {
     *     // ... filter to delete one TwitterDM
     *   }
     * })
     * 
    **/
    delete<T extends TwitterDMDeleteArgs>(
      args: SelectSubset<T, TwitterDMDeleteArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Update one TwitterDM.
     * @param {TwitterDMUpdateArgs} args - Arguments to update one TwitterDM.
     * @example
     * // Update one TwitterDM
     * const twitterDM = await prisma.twitterDM.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TwitterDMUpdateArgs>(
      args: SelectSubset<T, TwitterDMUpdateArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Delete zero or more TwitterDMS.
     * @param {TwitterDMDeleteManyArgs} args - Arguments to filter TwitterDMS to delete.
     * @example
     * // Delete a few TwitterDMS
     * const { count } = await prisma.twitterDM.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TwitterDMDeleteManyArgs>(
      args?: SelectSubset<T, TwitterDMDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TwitterDMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TwitterDMS
     * const twitterDM = await prisma.twitterDM.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TwitterDMUpdateManyArgs>(
      args: SelectSubset<T, TwitterDMUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TwitterDM.
     * @param {TwitterDMUpsertArgs} args - Arguments to update or create a TwitterDM.
     * @example
     * // Update or create a TwitterDM
     * const twitterDM = await prisma.twitterDM.upsert({
     *   create: {
     *     // ... data to create a TwitterDM
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TwitterDM we want to update
     *   }
     * })
    **/
    upsert<T extends TwitterDMUpsertArgs>(
      args: SelectSubset<T, TwitterDMUpsertArgs>
    ): Prisma__TwitterDMClient<TwitterDMGetPayload<T>>

    /**
     * Count the number of TwitterDMS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMCountArgs} args - Arguments to filter TwitterDMS to count.
     * @example
     * // Count the number of TwitterDMS
     * const count = await prisma.twitterDM.count({
     *   where: {
     *     // ... the filter for the TwitterDMS we want to count
     *   }
     * })
    **/
    count<T extends TwitterDMCountArgs>(
      args?: Subset<T, TwitterDMCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TwitterDMCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TwitterDM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TwitterDMAggregateArgs>(args: Subset<T, TwitterDMAggregateArgs>): Prisma.PrismaPromise<GetTwitterDMAggregateType<T>>

    /**
     * Group by TwitterDM.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TwitterDMGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TwitterDMGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TwitterDMGroupByArgs['orderBy'] }
        : { orderBy?: TwitterDMGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TwitterDMGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTwitterDMGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for TwitterDM.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TwitterDMClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    directFrom<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    directTo<T extends TwitterUserArgs= {}>(args?: Subset<T, TwitterUserArgs>): Prisma__TwitterUserClient<TwitterUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * TwitterDM base type for findUnique actions
   */
  export type TwitterDMFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter, which TwitterDM to fetch.
     */
    where: TwitterDMWhereUniqueInput
  }

  /**
   * TwitterDM findUnique
   */
  export interface TwitterDMFindUniqueArgs extends TwitterDMFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterDM findUniqueOrThrow
   */
  export type TwitterDMFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter, which TwitterDM to fetch.
     */
    where: TwitterDMWhereUniqueInput
  }


  /**
   * TwitterDM base type for findFirst actions
   */
  export type TwitterDMFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter, which TwitterDM to fetch.
     */
    where?: TwitterDMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterDMS to fetch.
     */
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterDMS.
     */
    cursor?: TwitterDMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterDMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterDMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterDMS.
     */
    distinct?: Enumerable<TwitterDMScalarFieldEnum>
  }

  /**
   * TwitterDM findFirst
   */
  export interface TwitterDMFindFirstArgs extends TwitterDMFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * TwitterDM findFirstOrThrow
   */
  export type TwitterDMFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter, which TwitterDM to fetch.
     */
    where?: TwitterDMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterDMS to fetch.
     */
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TwitterDMS.
     */
    cursor?: TwitterDMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterDMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterDMS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TwitterDMS.
     */
    distinct?: Enumerable<TwitterDMScalarFieldEnum>
  }


  /**
   * TwitterDM findMany
   */
  export type TwitterDMFindManyArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter, which TwitterDMS to fetch.
     */
    where?: TwitterDMWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TwitterDMS to fetch.
     */
    orderBy?: Enumerable<TwitterDMOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TwitterDMS.
     */
    cursor?: TwitterDMWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TwitterDMS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TwitterDMS.
     */
    skip?: number
    distinct?: Enumerable<TwitterDMScalarFieldEnum>
  }


  /**
   * TwitterDM create
   */
  export type TwitterDMCreateArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * The data needed to create a TwitterDM.
     */
    data: XOR<TwitterDMCreateInput, TwitterDMUncheckedCreateInput>
  }


  /**
   * TwitterDM createMany
   */
  export type TwitterDMCreateManyArgs = {
    /**
     * The data used to create many TwitterDMS.
     */
    data: Enumerable<TwitterDMCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TwitterDM update
   */
  export type TwitterDMUpdateArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * The data needed to update a TwitterDM.
     */
    data: XOR<TwitterDMUpdateInput, TwitterDMUncheckedUpdateInput>
    /**
     * Choose, which TwitterDM to update.
     */
    where: TwitterDMWhereUniqueInput
  }


  /**
   * TwitterDM updateMany
   */
  export type TwitterDMUpdateManyArgs = {
    /**
     * The data used to update TwitterDMS.
     */
    data: XOR<TwitterDMUpdateManyMutationInput, TwitterDMUncheckedUpdateManyInput>
    /**
     * Filter which TwitterDMS to update
     */
    where?: TwitterDMWhereInput
  }


  /**
   * TwitterDM upsert
   */
  export type TwitterDMUpsertArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * The filter to search for the TwitterDM to update in case it exists.
     */
    where: TwitterDMWhereUniqueInput
    /**
     * In case the TwitterDM found by the `where` argument doesn't exist, create a new TwitterDM with this data.
     */
    create: XOR<TwitterDMCreateInput, TwitterDMUncheckedCreateInput>
    /**
     * In case the TwitterDM was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TwitterDMUpdateInput, TwitterDMUncheckedUpdateInput>
  }


  /**
   * TwitterDM delete
   */
  export type TwitterDMDeleteArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
    /**
     * Filter which TwitterDM to delete.
     */
    where: TwitterDMWhereUniqueInput
  }


  /**
   * TwitterDM deleteMany
   */
  export type TwitterDMDeleteManyArgs = {
    /**
     * Filter which TwitterDMS to delete
     */
    where?: TwitterDMWhereInput
  }


  /**
   * TwitterDM without action
   */
  export type TwitterDMArgs = {
    /**
     * Select specific fields to fetch from the TwitterDM
     */
    select?: TwitterDMSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TwitterDMInclude | null
  }



  /**
   * Model YoutubeUser
   */


  export type AggregateYoutubeUser = {
    _count: YoutubeUserCountAggregateOutputType | null
    _avg: YoutubeUserAvgAggregateOutputType | null
    _sum: YoutubeUserSumAggregateOutputType | null
    _min: YoutubeUserMinAggregateOutputType | null
    _max: YoutubeUserMaxAggregateOutputType | null
  }

  export type YoutubeUserAvgAggregateOutputType = {
    id: number | null
  }

  export type YoutubeUserSumAggregateOutputType = {
    id: number | null
  }

  export type YoutubeUserMinAggregateOutputType = {
    id: number | null
    profileImage: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeUserMaxAggregateOutputType = {
    id: number | null
    profileImage: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeUserCountAggregateOutputType = {
    id: number
    profileImage: number
    email: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeUserAvgAggregateInputType = {
    id?: true
  }

  export type YoutubeUserSumAggregateInputType = {
    id?: true
  }

  export type YoutubeUserMinAggregateInputType = {
    id?: true
    profileImage?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeUserMaxAggregateInputType = {
    id?: true
    profileImage?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeUserCountAggregateInputType = {
    id?: true
    profileImage?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeUserAggregateArgs = {
    /**
     * Filter which YoutubeUser to aggregate.
     */
    where?: YoutubeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeUsers to fetch.
     */
    orderBy?: Enumerable<YoutubeUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeUsers
    **/
    _count?: true | YoutubeUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeUserMaxAggregateInputType
  }

  export type GetYoutubeUserAggregateType<T extends YoutubeUserAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeUser[P]>
      : GetScalarType<T[P], AggregateYoutubeUser[P]>
  }




  export type YoutubeUserGroupByArgs = {
    where?: YoutubeUserWhereInput
    orderBy?: Enumerable<YoutubeUserOrderByWithAggregationInput>
    by: YoutubeUserScalarFieldEnum[]
    having?: YoutubeUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeUserCountAggregateInputType | true
    _avg?: YoutubeUserAvgAggregateInputType
    _sum?: YoutubeUserSumAggregateInputType
    _min?: YoutubeUserMinAggregateInputType
    _max?: YoutubeUserMaxAggregateInputType
  }


  export type YoutubeUserGroupByOutputType = {
    id: number
    profileImage: string
    email: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: YoutubeUserCountAggregateOutputType | null
    _avg: YoutubeUserAvgAggregateOutputType | null
    _sum: YoutubeUserSumAggregateOutputType | null
    _min: YoutubeUserMinAggregateOutputType | null
    _max: YoutubeUserMaxAggregateOutputType | null
  }

  type GetYoutubeUserGroupByPayload<T extends YoutubeUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeUserGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeUserGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeUserSelect = {
    id?: boolean
    profileImage?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chanelToUserPermissions?: boolean | YoutubeUser$chanelToUserPermissionsArgs
    posts?: boolean | YoutubeUser$postsArgs
    comments?: boolean | YoutubeUser$commentsArgs
    likePosts?: boolean | YoutubeUser$likePostsArgs
    likeComments?: boolean | YoutubeUser$likeCommentsArgs
    subcribers?: boolean | YoutubeUser$subcribersArgs
    _count?: boolean | YoutubeUserCountOutputTypeArgs
  }


  export type YoutubeUserInclude = {
    chanelToUserPermissions?: boolean | YoutubeUser$chanelToUserPermissionsArgs
    posts?: boolean | YoutubeUser$postsArgs
    comments?: boolean | YoutubeUser$commentsArgs
    likePosts?: boolean | YoutubeUser$likePostsArgs
    likeComments?: boolean | YoutubeUser$likeCommentsArgs
    subcribers?: boolean | YoutubeUser$subcribersArgs
    _count?: boolean | YoutubeUserCountOutputTypeArgs
  }

  export type YoutubeUserGetPayload<S extends boolean | null | undefined | YoutubeUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeUser :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeUserArgs | YoutubeUserFindManyArgs)
    ? YoutubeUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['include'][P]>>  :
        P extends 'posts' ? Array < YoutubePostGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < YoutubeCommentGetPayload<S['include'][P]>>  :
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['include'][P]>>  :
        P extends 'subcribers' ? Array < YoutubeSubcriberGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubeUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeUserArgs | YoutubeUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['select'][P]>>  :
        P extends 'posts' ? Array < YoutubePostGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < YoutubeCommentGetPayload<S['select'][P]>>  :
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['select'][P]>>  :
        P extends 'subcribers' ? Array < YoutubeSubcriberGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubeUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeUser ? YoutubeUser[P] : never
  } 
      : YoutubeUser


  type YoutubeUserCountArgs = 
    Omit<YoutubeUserFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeUserCountAggregateInputType | true
    }

  export interface YoutubeUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeUser that matches the filter.
     * @param {YoutubeUserFindUniqueArgs} args - Arguments to find a YoutubeUser
     * @example
     * // Get one YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeUser'> extends True ? Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>> : Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | null, null>

    /**
     * Find one YoutubeUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeUserFindUniqueOrThrowArgs} args - Arguments to find a YoutubeUser
     * @example
     * // Get one YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeUserFindUniqueOrThrowArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Find the first YoutubeUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserFindFirstArgs} args - Arguments to find a YoutubeUser
     * @example
     * // Get one YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeUser'> extends True ? Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>> : Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | null, null>

    /**
     * Find the first YoutubeUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserFindFirstOrThrowArgs} args - Arguments to find a YoutubeUser
     * @example
     * // Get one YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeUserFindFirstOrThrowArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Find zero or more YoutubeUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeUsers
     * const youtubeUsers = await prisma.youtubeUser.findMany()
     * 
     * // Get first 10 YoutubeUsers
     * const youtubeUsers = await prisma.youtubeUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeUserWithIdOnly = await prisma.youtubeUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeUserFindManyArgs>(
      args?: SelectSubset<T, YoutubeUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeUserGetPayload<T>>>

    /**
     * Create a YoutubeUser.
     * @param {YoutubeUserCreateArgs} args - Arguments to create a YoutubeUser.
     * @example
     * // Create one YoutubeUser
     * const YoutubeUser = await prisma.youtubeUser.create({
     *   data: {
     *     // ... data to create a YoutubeUser
     *   }
     * })
     * 
    **/
    create<T extends YoutubeUserCreateArgs>(
      args: SelectSubset<T, YoutubeUserCreateArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Create many YoutubeUsers.
     *     @param {YoutubeUserCreateManyArgs} args - Arguments to create many YoutubeUsers.
     *     @example
     *     // Create many YoutubeUsers
     *     const youtubeUser = await prisma.youtubeUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeUserCreateManyArgs>(
      args?: SelectSubset<T, YoutubeUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeUser.
     * @param {YoutubeUserDeleteArgs} args - Arguments to delete one YoutubeUser.
     * @example
     * // Delete one YoutubeUser
     * const YoutubeUser = await prisma.youtubeUser.delete({
     *   where: {
     *     // ... filter to delete one YoutubeUser
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeUserDeleteArgs>(
      args: SelectSubset<T, YoutubeUserDeleteArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Update one YoutubeUser.
     * @param {YoutubeUserUpdateArgs} args - Arguments to update one YoutubeUser.
     * @example
     * // Update one YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeUserUpdateArgs>(
      args: SelectSubset<T, YoutubeUserUpdateArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Delete zero or more YoutubeUsers.
     * @param {YoutubeUserDeleteManyArgs} args - Arguments to filter YoutubeUsers to delete.
     * @example
     * // Delete a few YoutubeUsers
     * const { count } = await prisma.youtubeUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeUserDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeUsers
     * const youtubeUser = await prisma.youtubeUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeUserUpdateManyArgs>(
      args: SelectSubset<T, YoutubeUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeUser.
     * @param {YoutubeUserUpsertArgs} args - Arguments to update or create a YoutubeUser.
     * @example
     * // Update or create a YoutubeUser
     * const youtubeUser = await prisma.youtubeUser.upsert({
     *   create: {
     *     // ... data to create a YoutubeUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeUser we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeUserUpsertArgs>(
      args: SelectSubset<T, YoutubeUserUpsertArgs>
    ): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T>>

    /**
     * Count the number of YoutubeUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserCountArgs} args - Arguments to filter YoutubeUsers to count.
     * @example
     * // Count the number of YoutubeUsers
     * const count = await prisma.youtubeUser.count({
     *   where: {
     *     // ... the filter for the YoutubeUsers we want to count
     *   }
     * })
    **/
    count<T extends YoutubeUserCountArgs>(
      args?: Subset<T, YoutubeUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeUserAggregateArgs>(args: Subset<T, YoutubeUserAggregateArgs>): Prisma.PrismaPromise<GetYoutubeUserAggregateType<T>>

    /**
     * Group by YoutubeUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeUserGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanelToUserPermissions<T extends YoutubeUser$chanelToUserPermissionsArgs= {}>(args?: Subset<T, YoutubeUser$chanelToUserPermissionsArgs>): Prisma.PrismaPromise<Array<YoutubeChanelToUserPermissionGetPayload<T>>| Null>;

    posts<T extends YoutubeUser$postsArgs= {}>(args?: Subset<T, YoutubeUser$postsArgs>): Prisma.PrismaPromise<Array<YoutubePostGetPayload<T>>| Null>;

    comments<T extends YoutubeUser$commentsArgs= {}>(args?: Subset<T, YoutubeUser$commentsArgs>): Prisma.PrismaPromise<Array<YoutubeCommentGetPayload<T>>| Null>;

    likePosts<T extends YoutubeUser$likePostsArgs= {}>(args?: Subset<T, YoutubeUser$likePostsArgs>): Prisma.PrismaPromise<Array<YoutubeLikePostGetPayload<T>>| Null>;

    likeComments<T extends YoutubeUser$likeCommentsArgs= {}>(args?: Subset<T, YoutubeUser$likeCommentsArgs>): Prisma.PrismaPromise<Array<YoutubeLikeCommentGetPayload<T>>| Null>;

    subcribers<T extends YoutubeUser$subcribersArgs= {}>(args?: Subset<T, YoutubeUser$subcribersArgs>): Prisma.PrismaPromise<Array<YoutubeSubcriberGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeUser base type for findUnique actions
   */
  export type YoutubeUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter, which YoutubeUser to fetch.
     */
    where: YoutubeUserWhereUniqueInput
  }

  /**
   * YoutubeUser findUnique
   */
  export interface YoutubeUserFindUniqueArgs extends YoutubeUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeUser findUniqueOrThrow
   */
  export type YoutubeUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter, which YoutubeUser to fetch.
     */
    where: YoutubeUserWhereUniqueInput
  }


  /**
   * YoutubeUser base type for findFirst actions
   */
  export type YoutubeUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter, which YoutubeUser to fetch.
     */
    where?: YoutubeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeUsers to fetch.
     */
    orderBy?: Enumerable<YoutubeUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeUsers.
     */
    cursor?: YoutubeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeUsers.
     */
    distinct?: Enumerable<YoutubeUserScalarFieldEnum>
  }

  /**
   * YoutubeUser findFirst
   */
  export interface YoutubeUserFindFirstArgs extends YoutubeUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeUser findFirstOrThrow
   */
  export type YoutubeUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter, which YoutubeUser to fetch.
     */
    where?: YoutubeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeUsers to fetch.
     */
    orderBy?: Enumerable<YoutubeUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeUsers.
     */
    cursor?: YoutubeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeUsers.
     */
    distinct?: Enumerable<YoutubeUserScalarFieldEnum>
  }


  /**
   * YoutubeUser findMany
   */
  export type YoutubeUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter, which YoutubeUsers to fetch.
     */
    where?: YoutubeUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeUsers to fetch.
     */
    orderBy?: Enumerable<YoutubeUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeUsers.
     */
    cursor?: YoutubeUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeUsers.
     */
    skip?: number
    distinct?: Enumerable<YoutubeUserScalarFieldEnum>
  }


  /**
   * YoutubeUser create
   */
  export type YoutubeUserCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * The data needed to create a YoutubeUser.
     */
    data: XOR<YoutubeUserCreateInput, YoutubeUserUncheckedCreateInput>
  }


  /**
   * YoutubeUser createMany
   */
  export type YoutubeUserCreateManyArgs = {
    /**
     * The data used to create many YoutubeUsers.
     */
    data: Enumerable<YoutubeUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeUser update
   */
  export type YoutubeUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * The data needed to update a YoutubeUser.
     */
    data: XOR<YoutubeUserUpdateInput, YoutubeUserUncheckedUpdateInput>
    /**
     * Choose, which YoutubeUser to update.
     */
    where: YoutubeUserWhereUniqueInput
  }


  /**
   * YoutubeUser updateMany
   */
  export type YoutubeUserUpdateManyArgs = {
    /**
     * The data used to update YoutubeUsers.
     */
    data: XOR<YoutubeUserUpdateManyMutationInput, YoutubeUserUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeUsers to update
     */
    where?: YoutubeUserWhereInput
  }


  /**
   * YoutubeUser upsert
   */
  export type YoutubeUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * The filter to search for the YoutubeUser to update in case it exists.
     */
    where: YoutubeUserWhereUniqueInput
    /**
     * In case the YoutubeUser found by the `where` argument doesn't exist, create a new YoutubeUser with this data.
     */
    create: XOR<YoutubeUserCreateInput, YoutubeUserUncheckedCreateInput>
    /**
     * In case the YoutubeUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeUserUpdateInput, YoutubeUserUncheckedUpdateInput>
  }


  /**
   * YoutubeUser delete
   */
  export type YoutubeUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
    /**
     * Filter which YoutubeUser to delete.
     */
    where: YoutubeUserWhereUniqueInput
  }


  /**
   * YoutubeUser deleteMany
   */
  export type YoutubeUserDeleteManyArgs = {
    /**
     * Filter which YoutubeUsers to delete
     */
    where?: YoutubeUserWhereInput
  }


  /**
   * YoutubeUser.chanelToUserPermissions
   */
  export type YoutubeUser$chanelToUserPermissionsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    where?: YoutubeChanelToUserPermissionWhereInput
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }


  /**
   * YoutubeUser.posts
   */
  export type YoutubeUser$postsArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    where?: YoutubePostWhereInput
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    cursor?: YoutubePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }


  /**
   * YoutubeUser.comments
   */
  export type YoutubeUser$commentsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    where?: YoutubeCommentWhereInput
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    cursor?: YoutubeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeCommentScalarFieldEnum>
  }


  /**
   * YoutubeUser.likePosts
   */
  export type YoutubeUser$likePostsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    where?: YoutubeLikePostWhereInput
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    cursor?: YoutubeLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }


  /**
   * YoutubeUser.likeComments
   */
  export type YoutubeUser$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    where?: YoutubeLikeCommentWhereInput
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    cursor?: YoutubeLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }


  /**
   * YoutubeUser.subcribers
   */
  export type YoutubeUser$subcribersArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    where?: YoutubeSubcriberWhereInput
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    cursor?: YoutubeSubcriberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeSubcriberScalarFieldEnum>
  }


  /**
   * YoutubeUser without action
   */
  export type YoutubeUserArgs = {
    /**
     * Select specific fields to fetch from the YoutubeUser
     */
    select?: YoutubeUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeUserInclude | null
  }



  /**
   * Model YoutubeChanelPermission
   */


  export type AggregateYoutubeChanelPermission = {
    _count: YoutubeChanelPermissionCountAggregateOutputType | null
    _avg: YoutubeChanelPermissionAvgAggregateOutputType | null
    _sum: YoutubeChanelPermissionSumAggregateOutputType | null
    _min: YoutubeChanelPermissionMinAggregateOutputType | null
    _max: YoutubeChanelPermissionMaxAggregateOutputType | null
  }

  export type YoutubeChanelPermissionAvgAggregateOutputType = {
    id: number | null
  }

  export type YoutubeChanelPermissionSumAggregateOutputType = {
    id: number | null
  }

  export type YoutubeChanelPermissionMinAggregateOutputType = {
    id: number | null
    name: YoutubePermissionEnum | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelPermissionMaxAggregateOutputType = {
    id: number | null
    name: YoutubePermissionEnum | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelPermissionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeChanelPermissionAvgAggregateInputType = {
    id?: true
  }

  export type YoutubeChanelPermissionSumAggregateInputType = {
    id?: true
  }

  export type YoutubeChanelPermissionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelPermissionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelPermissionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeChanelPermissionAggregateArgs = {
    /**
     * Filter which YoutubeChanelPermission to aggregate.
     */
    where?: YoutubeChanelPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeChanelPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeChanelPermissions
    **/
    _count?: true | YoutubeChanelPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeChanelPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeChanelPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeChanelPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeChanelPermissionMaxAggregateInputType
  }

  export type GetYoutubeChanelPermissionAggregateType<T extends YoutubeChanelPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeChanelPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeChanelPermission[P]>
      : GetScalarType<T[P], AggregateYoutubeChanelPermission[P]>
  }




  export type YoutubeChanelPermissionGroupByArgs = {
    where?: YoutubeChanelPermissionWhereInput
    orderBy?: Enumerable<YoutubeChanelPermissionOrderByWithAggregationInput>
    by: YoutubeChanelPermissionScalarFieldEnum[]
    having?: YoutubeChanelPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeChanelPermissionCountAggregateInputType | true
    _avg?: YoutubeChanelPermissionAvgAggregateInputType
    _sum?: YoutubeChanelPermissionSumAggregateInputType
    _min?: YoutubeChanelPermissionMinAggregateInputType
    _max?: YoutubeChanelPermissionMaxAggregateInputType
  }


  export type YoutubeChanelPermissionGroupByOutputType = {
    id: number
    name: YoutubePermissionEnum
    createdAt: Date
    updatedAt: Date
    _count: YoutubeChanelPermissionCountAggregateOutputType | null
    _avg: YoutubeChanelPermissionAvgAggregateOutputType | null
    _sum: YoutubeChanelPermissionSumAggregateOutputType | null
    _min: YoutubeChanelPermissionMinAggregateOutputType | null
    _max: YoutubeChanelPermissionMaxAggregateOutputType | null
  }

  type GetYoutubeChanelPermissionGroupByPayload<T extends YoutubeChanelPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeChanelPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeChanelPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeChanelPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeChanelPermissionGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeChanelPermissionSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chanelToUserPermissions?: boolean | YoutubeChanelPermission$chanelToUserPermissionsArgs
    _count?: boolean | YoutubeChanelPermissionCountOutputTypeArgs
  }


  export type YoutubeChanelPermissionInclude = {
    chanelToUserPermissions?: boolean | YoutubeChanelPermission$chanelToUserPermissionsArgs
    _count?: boolean | YoutubeChanelPermissionCountOutputTypeArgs
  }

  export type YoutubeChanelPermissionGetPayload<S extends boolean | null | undefined | YoutubeChanelPermissionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeChanelPermission :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeChanelPermissionArgs | YoutubeChanelPermissionFindManyArgs)
    ? YoutubeChanelPermission  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubeChanelPermissionCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeChanelPermissionArgs | YoutubeChanelPermissionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubeChanelPermissionCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeChanelPermission ? YoutubeChanelPermission[P] : never
  } 
      : YoutubeChanelPermission


  type YoutubeChanelPermissionCountArgs = 
    Omit<YoutubeChanelPermissionFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeChanelPermissionCountAggregateInputType | true
    }

  export interface YoutubeChanelPermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeChanelPermission that matches the filter.
     * @param {YoutubeChanelPermissionFindUniqueArgs} args - Arguments to find a YoutubeChanelPermission
     * @example
     * // Get one YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeChanelPermissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeChanelPermissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeChanelPermission'> extends True ? Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>> : Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T> | null, null>

    /**
     * Find one YoutubeChanelPermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeChanelPermissionFindUniqueOrThrowArgs} args - Arguments to find a YoutubeChanelPermission
     * @example
     * // Get one YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeChanelPermissionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelPermissionFindUniqueOrThrowArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Find the first YoutubeChanelPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionFindFirstArgs} args - Arguments to find a YoutubeChanelPermission
     * @example
     * // Get one YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeChanelPermissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeChanelPermissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeChanelPermission'> extends True ? Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>> : Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T> | null, null>

    /**
     * Find the first YoutubeChanelPermission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionFindFirstOrThrowArgs} args - Arguments to find a YoutubeChanelPermission
     * @example
     * // Get one YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeChanelPermissionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelPermissionFindFirstOrThrowArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Find zero or more YoutubeChanelPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeChanelPermissions
     * const youtubeChanelPermissions = await prisma.youtubeChanelPermission.findMany()
     * 
     * // Get first 10 YoutubeChanelPermissions
     * const youtubeChanelPermissions = await prisma.youtubeChanelPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeChanelPermissionWithIdOnly = await prisma.youtubeChanelPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeChanelPermissionFindManyArgs>(
      args?: SelectSubset<T, YoutubeChanelPermissionFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeChanelPermissionGetPayload<T>>>

    /**
     * Create a YoutubeChanelPermission.
     * @param {YoutubeChanelPermissionCreateArgs} args - Arguments to create a YoutubeChanelPermission.
     * @example
     * // Create one YoutubeChanelPermission
     * const YoutubeChanelPermission = await prisma.youtubeChanelPermission.create({
     *   data: {
     *     // ... data to create a YoutubeChanelPermission
     *   }
     * })
     * 
    **/
    create<T extends YoutubeChanelPermissionCreateArgs>(
      args: SelectSubset<T, YoutubeChanelPermissionCreateArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Create many YoutubeChanelPermissions.
     *     @param {YoutubeChanelPermissionCreateManyArgs} args - Arguments to create many YoutubeChanelPermissions.
     *     @example
     *     // Create many YoutubeChanelPermissions
     *     const youtubeChanelPermission = await prisma.youtubeChanelPermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeChanelPermissionCreateManyArgs>(
      args?: SelectSubset<T, YoutubeChanelPermissionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeChanelPermission.
     * @param {YoutubeChanelPermissionDeleteArgs} args - Arguments to delete one YoutubeChanelPermission.
     * @example
     * // Delete one YoutubeChanelPermission
     * const YoutubeChanelPermission = await prisma.youtubeChanelPermission.delete({
     *   where: {
     *     // ... filter to delete one YoutubeChanelPermission
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeChanelPermissionDeleteArgs>(
      args: SelectSubset<T, YoutubeChanelPermissionDeleteArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Update one YoutubeChanelPermission.
     * @param {YoutubeChanelPermissionUpdateArgs} args - Arguments to update one YoutubeChanelPermission.
     * @example
     * // Update one YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeChanelPermissionUpdateArgs>(
      args: SelectSubset<T, YoutubeChanelPermissionUpdateArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Delete zero or more YoutubeChanelPermissions.
     * @param {YoutubeChanelPermissionDeleteManyArgs} args - Arguments to filter YoutubeChanelPermissions to delete.
     * @example
     * // Delete a few YoutubeChanelPermissions
     * const { count } = await prisma.youtubeChanelPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeChanelPermissionDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeChanelPermissionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeChanelPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeChanelPermissions
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeChanelPermissionUpdateManyArgs>(
      args: SelectSubset<T, YoutubeChanelPermissionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeChanelPermission.
     * @param {YoutubeChanelPermissionUpsertArgs} args - Arguments to update or create a YoutubeChanelPermission.
     * @example
     * // Update or create a YoutubeChanelPermission
     * const youtubeChanelPermission = await prisma.youtubeChanelPermission.upsert({
     *   create: {
     *     // ... data to create a YoutubeChanelPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeChanelPermission we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeChanelPermissionUpsertArgs>(
      args: SelectSubset<T, YoutubeChanelPermissionUpsertArgs>
    ): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T>>

    /**
     * Count the number of YoutubeChanelPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionCountArgs} args - Arguments to filter YoutubeChanelPermissions to count.
     * @example
     * // Count the number of YoutubeChanelPermissions
     * const count = await prisma.youtubeChanelPermission.count({
     *   where: {
     *     // ... the filter for the YoutubeChanelPermissions we want to count
     *   }
     * })
    **/
    count<T extends YoutubeChanelPermissionCountArgs>(
      args?: Subset<T, YoutubeChanelPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeChanelPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeChanelPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeChanelPermissionAggregateArgs>(args: Subset<T, YoutubeChanelPermissionAggregateArgs>): Prisma.PrismaPromise<GetYoutubeChanelPermissionAggregateType<T>>

    /**
     * Group by YoutubeChanelPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeChanelPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeChanelPermissionGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeChanelPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeChanelPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeChanelPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeChanelPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeChanelPermissionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanelToUserPermissions<T extends YoutubeChanelPermission$chanelToUserPermissionsArgs= {}>(args?: Subset<T, YoutubeChanelPermission$chanelToUserPermissionsArgs>): Prisma.PrismaPromise<Array<YoutubeChanelToUserPermissionGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeChanelPermission base type for findUnique actions
   */
  export type YoutubeChanelPermissionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter, which YoutubeChanelPermission to fetch.
     */
    where: YoutubeChanelPermissionWhereUniqueInput
  }

  /**
   * YoutubeChanelPermission findUnique
   */
  export interface YoutubeChanelPermissionFindUniqueArgs extends YoutubeChanelPermissionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanelPermission findUniqueOrThrow
   */
  export type YoutubeChanelPermissionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter, which YoutubeChanelPermission to fetch.
     */
    where: YoutubeChanelPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelPermission base type for findFirst actions
   */
  export type YoutubeChanelPermissionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter, which YoutubeChanelPermission to fetch.
     */
    where?: YoutubeChanelPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanelPermissions.
     */
    cursor?: YoutubeChanelPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanelPermissions.
     */
    distinct?: Enumerable<YoutubeChanelPermissionScalarFieldEnum>
  }

  /**
   * YoutubeChanelPermission findFirst
   */
  export interface YoutubeChanelPermissionFindFirstArgs extends YoutubeChanelPermissionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanelPermission findFirstOrThrow
   */
  export type YoutubeChanelPermissionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter, which YoutubeChanelPermission to fetch.
     */
    where?: YoutubeChanelPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanelPermissions.
     */
    cursor?: YoutubeChanelPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanelPermissions.
     */
    distinct?: Enumerable<YoutubeChanelPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanelPermission findMany
   */
  export type YoutubeChanelPermissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter, which YoutubeChanelPermissions to fetch.
     */
    where?: YoutubeChanelPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeChanelPermissions.
     */
    cursor?: YoutubeChanelPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelPermissions.
     */
    skip?: number
    distinct?: Enumerable<YoutubeChanelPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanelPermission create
   */
  export type YoutubeChanelPermissionCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * The data needed to create a YoutubeChanelPermission.
     */
    data: XOR<YoutubeChanelPermissionCreateInput, YoutubeChanelPermissionUncheckedCreateInput>
  }


  /**
   * YoutubeChanelPermission createMany
   */
  export type YoutubeChanelPermissionCreateManyArgs = {
    /**
     * The data used to create many YoutubeChanelPermissions.
     */
    data: Enumerable<YoutubeChanelPermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeChanelPermission update
   */
  export type YoutubeChanelPermissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * The data needed to update a YoutubeChanelPermission.
     */
    data: XOR<YoutubeChanelPermissionUpdateInput, YoutubeChanelPermissionUncheckedUpdateInput>
    /**
     * Choose, which YoutubeChanelPermission to update.
     */
    where: YoutubeChanelPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelPermission updateMany
   */
  export type YoutubeChanelPermissionUpdateManyArgs = {
    /**
     * The data used to update YoutubeChanelPermissions.
     */
    data: XOR<YoutubeChanelPermissionUpdateManyMutationInput, YoutubeChanelPermissionUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeChanelPermissions to update
     */
    where?: YoutubeChanelPermissionWhereInput
  }


  /**
   * YoutubeChanelPermission upsert
   */
  export type YoutubeChanelPermissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * The filter to search for the YoutubeChanelPermission to update in case it exists.
     */
    where: YoutubeChanelPermissionWhereUniqueInput
    /**
     * In case the YoutubeChanelPermission found by the `where` argument doesn't exist, create a new YoutubeChanelPermission with this data.
     */
    create: XOR<YoutubeChanelPermissionCreateInput, YoutubeChanelPermissionUncheckedCreateInput>
    /**
     * In case the YoutubeChanelPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeChanelPermissionUpdateInput, YoutubeChanelPermissionUncheckedUpdateInput>
  }


  /**
   * YoutubeChanelPermission delete
   */
  export type YoutubeChanelPermissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
    /**
     * Filter which YoutubeChanelPermission to delete.
     */
    where: YoutubeChanelPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelPermission deleteMany
   */
  export type YoutubeChanelPermissionDeleteManyArgs = {
    /**
     * Filter which YoutubeChanelPermissions to delete
     */
    where?: YoutubeChanelPermissionWhereInput
  }


  /**
   * YoutubeChanelPermission.chanelToUserPermissions
   */
  export type YoutubeChanelPermission$chanelToUserPermissionsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    where?: YoutubeChanelToUserPermissionWhereInput
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanelPermission without action
   */
  export type YoutubeChanelPermissionArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelPermission
     */
    select?: YoutubeChanelPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelPermissionInclude | null
  }



  /**
   * Model YoutubeChanel
   */


  export type AggregateYoutubeChanel = {
    _count: YoutubeChanelCountAggregateOutputType | null
    _avg: YoutubeChanelAvgAggregateOutputType | null
    _sum: YoutubeChanelSumAggregateOutputType | null
    _min: YoutubeChanelMinAggregateOutputType | null
    _max: YoutubeChanelMaxAggregateOutputType | null
  }

  export type YoutubeChanelAvgAggregateOutputType = {
    id: number | null
  }

  export type YoutubeChanelSumAggregateOutputType = {
    id: number | null
  }

  export type YoutubeChanelMinAggregateOutputType = {
    id: number | null
    ChanelImage: string | null
    coverImage: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelMaxAggregateOutputType = {
    id: number | null
    ChanelImage: string | null
    coverImage: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelCountAggregateOutputType = {
    id: number
    ChanelImage: number
    coverImage: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeChanelAvgAggregateInputType = {
    id?: true
  }

  export type YoutubeChanelSumAggregateInputType = {
    id?: true
  }

  export type YoutubeChanelMinAggregateInputType = {
    id?: true
    ChanelImage?: true
    coverImage?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelMaxAggregateInputType = {
    id?: true
    ChanelImage?: true
    coverImage?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelCountAggregateInputType = {
    id?: true
    ChanelImage?: true
    coverImage?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeChanelAggregateArgs = {
    /**
     * Filter which YoutubeChanel to aggregate.
     */
    where?: YoutubeChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanels to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeChanels
    **/
    _count?: true | YoutubeChanelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeChanelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeChanelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeChanelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeChanelMaxAggregateInputType
  }

  export type GetYoutubeChanelAggregateType<T extends YoutubeChanelAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeChanel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeChanel[P]>
      : GetScalarType<T[P], AggregateYoutubeChanel[P]>
  }




  export type YoutubeChanelGroupByArgs = {
    where?: YoutubeChanelWhereInput
    orderBy?: Enumerable<YoutubeChanelOrderByWithAggregationInput>
    by: YoutubeChanelScalarFieldEnum[]
    having?: YoutubeChanelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeChanelCountAggregateInputType | true
    _avg?: YoutubeChanelAvgAggregateInputType
    _sum?: YoutubeChanelSumAggregateInputType
    _min?: YoutubeChanelMinAggregateInputType
    _max?: YoutubeChanelMaxAggregateInputType
  }


  export type YoutubeChanelGroupByOutputType = {
    id: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: YoutubeChanelCountAggregateOutputType | null
    _avg: YoutubeChanelAvgAggregateOutputType | null
    _sum: YoutubeChanelSumAggregateOutputType | null
    _min: YoutubeChanelMinAggregateOutputType | null
    _max: YoutubeChanelMaxAggregateOutputType | null
  }

  type GetYoutubeChanelGroupByPayload<T extends YoutubeChanelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeChanelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeChanelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeChanelGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeChanelGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeChanelSelect = {
    id?: boolean
    ChanelImage?: boolean
    coverImage?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    chanelToUserPermissions?: boolean | YoutubeChanel$chanelToUserPermissionsArgs
    posts?: boolean | YoutubeChanel$postsArgs
    subcribers?: boolean | YoutubeChanel$subcribersArgs
    _count?: boolean | YoutubeChanelCountOutputTypeArgs
  }


  export type YoutubeChanelInclude = {
    chanelToUserPermissions?: boolean | YoutubeChanel$chanelToUserPermissionsArgs
    posts?: boolean | YoutubeChanel$postsArgs
    subcribers?: boolean | YoutubeChanel$subcribersArgs
    _count?: boolean | YoutubeChanelCountOutputTypeArgs
  }

  export type YoutubeChanelGetPayload<S extends boolean | null | undefined | YoutubeChanelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeChanel :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeChanelArgs | YoutubeChanelFindManyArgs)
    ? YoutubeChanel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['include'][P]>>  :
        P extends 'posts' ? Array < YoutubePostGetPayload<S['include'][P]>>  :
        P extends 'subcribers' ? Array < YoutubeSubcriberGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubeChanelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeChanelArgs | YoutubeChanelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanelToUserPermissions' ? Array < YoutubeChanelToUserPermissionGetPayload<S['select'][P]>>  :
        P extends 'posts' ? Array < YoutubePostGetPayload<S['select'][P]>>  :
        P extends 'subcribers' ? Array < YoutubeSubcriberGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubeChanelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeChanel ? YoutubeChanel[P] : never
  } 
      : YoutubeChanel


  type YoutubeChanelCountArgs = 
    Omit<YoutubeChanelFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeChanelCountAggregateInputType | true
    }

  export interface YoutubeChanelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeChanel that matches the filter.
     * @param {YoutubeChanelFindUniqueArgs} args - Arguments to find a YoutubeChanel
     * @example
     * // Get one YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeChanelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeChanelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeChanel'> extends True ? Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>> : Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T> | null, null>

    /**
     * Find one YoutubeChanel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeChanelFindUniqueOrThrowArgs} args - Arguments to find a YoutubeChanel
     * @example
     * // Get one YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeChanelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelFindUniqueOrThrowArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Find the first YoutubeChanel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelFindFirstArgs} args - Arguments to find a YoutubeChanel
     * @example
     * // Get one YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeChanelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeChanelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeChanel'> extends True ? Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>> : Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T> | null, null>

    /**
     * Find the first YoutubeChanel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelFindFirstOrThrowArgs} args - Arguments to find a YoutubeChanel
     * @example
     * // Get one YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeChanelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelFindFirstOrThrowArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Find zero or more YoutubeChanels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeChanels
     * const youtubeChanels = await prisma.youtubeChanel.findMany()
     * 
     * // Get first 10 YoutubeChanels
     * const youtubeChanels = await prisma.youtubeChanel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeChanelWithIdOnly = await prisma.youtubeChanel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeChanelFindManyArgs>(
      args?: SelectSubset<T, YoutubeChanelFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeChanelGetPayload<T>>>

    /**
     * Create a YoutubeChanel.
     * @param {YoutubeChanelCreateArgs} args - Arguments to create a YoutubeChanel.
     * @example
     * // Create one YoutubeChanel
     * const YoutubeChanel = await prisma.youtubeChanel.create({
     *   data: {
     *     // ... data to create a YoutubeChanel
     *   }
     * })
     * 
    **/
    create<T extends YoutubeChanelCreateArgs>(
      args: SelectSubset<T, YoutubeChanelCreateArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Create many YoutubeChanels.
     *     @param {YoutubeChanelCreateManyArgs} args - Arguments to create many YoutubeChanels.
     *     @example
     *     // Create many YoutubeChanels
     *     const youtubeChanel = await prisma.youtubeChanel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeChanelCreateManyArgs>(
      args?: SelectSubset<T, YoutubeChanelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeChanel.
     * @param {YoutubeChanelDeleteArgs} args - Arguments to delete one YoutubeChanel.
     * @example
     * // Delete one YoutubeChanel
     * const YoutubeChanel = await prisma.youtubeChanel.delete({
     *   where: {
     *     // ... filter to delete one YoutubeChanel
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeChanelDeleteArgs>(
      args: SelectSubset<T, YoutubeChanelDeleteArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Update one YoutubeChanel.
     * @param {YoutubeChanelUpdateArgs} args - Arguments to update one YoutubeChanel.
     * @example
     * // Update one YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeChanelUpdateArgs>(
      args: SelectSubset<T, YoutubeChanelUpdateArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Delete zero or more YoutubeChanels.
     * @param {YoutubeChanelDeleteManyArgs} args - Arguments to filter YoutubeChanels to delete.
     * @example
     * // Delete a few YoutubeChanels
     * const { count } = await prisma.youtubeChanel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeChanelDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeChanelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeChanels
     * const youtubeChanel = await prisma.youtubeChanel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeChanelUpdateManyArgs>(
      args: SelectSubset<T, YoutubeChanelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeChanel.
     * @param {YoutubeChanelUpsertArgs} args - Arguments to update or create a YoutubeChanel.
     * @example
     * // Update or create a YoutubeChanel
     * const youtubeChanel = await prisma.youtubeChanel.upsert({
     *   create: {
     *     // ... data to create a YoutubeChanel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeChanel we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeChanelUpsertArgs>(
      args: SelectSubset<T, YoutubeChanelUpsertArgs>
    ): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T>>

    /**
     * Count the number of YoutubeChanels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelCountArgs} args - Arguments to filter YoutubeChanels to count.
     * @example
     * // Count the number of YoutubeChanels
     * const count = await prisma.youtubeChanel.count({
     *   where: {
     *     // ... the filter for the YoutubeChanels we want to count
     *   }
     * })
    **/
    count<T extends YoutubeChanelCountArgs>(
      args?: Subset<T, YoutubeChanelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeChanelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeChanelAggregateArgs>(args: Subset<T, YoutubeChanelAggregateArgs>): Prisma.PrismaPromise<GetYoutubeChanelAggregateType<T>>

    /**
     * Group by YoutubeChanel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeChanelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeChanelGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeChanelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeChanelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeChanelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeChanel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeChanelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanelToUserPermissions<T extends YoutubeChanel$chanelToUserPermissionsArgs= {}>(args?: Subset<T, YoutubeChanel$chanelToUserPermissionsArgs>): Prisma.PrismaPromise<Array<YoutubeChanelToUserPermissionGetPayload<T>>| Null>;

    posts<T extends YoutubeChanel$postsArgs= {}>(args?: Subset<T, YoutubeChanel$postsArgs>): Prisma.PrismaPromise<Array<YoutubePostGetPayload<T>>| Null>;

    subcribers<T extends YoutubeChanel$subcribersArgs= {}>(args?: Subset<T, YoutubeChanel$subcribersArgs>): Prisma.PrismaPromise<Array<YoutubeSubcriberGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeChanel base type for findUnique actions
   */
  export type YoutubeChanelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter, which YoutubeChanel to fetch.
     */
    where: YoutubeChanelWhereUniqueInput
  }

  /**
   * YoutubeChanel findUnique
   */
  export interface YoutubeChanelFindUniqueArgs extends YoutubeChanelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanel findUniqueOrThrow
   */
  export type YoutubeChanelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter, which YoutubeChanel to fetch.
     */
    where: YoutubeChanelWhereUniqueInput
  }


  /**
   * YoutubeChanel base type for findFirst actions
   */
  export type YoutubeChanelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter, which YoutubeChanel to fetch.
     */
    where?: YoutubeChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanels to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanels.
     */
    cursor?: YoutubeChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanels.
     */
    distinct?: Enumerable<YoutubeChanelScalarFieldEnum>
  }

  /**
   * YoutubeChanel findFirst
   */
  export interface YoutubeChanelFindFirstArgs extends YoutubeChanelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanel findFirstOrThrow
   */
  export type YoutubeChanelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter, which YoutubeChanel to fetch.
     */
    where?: YoutubeChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanels to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanels.
     */
    cursor?: YoutubeChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanels.
     */
    distinct?: Enumerable<YoutubeChanelScalarFieldEnum>
  }


  /**
   * YoutubeChanel findMany
   */
  export type YoutubeChanelFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter, which YoutubeChanels to fetch.
     */
    where?: YoutubeChanelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanels to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeChanels.
     */
    cursor?: YoutubeChanelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanels.
     */
    skip?: number
    distinct?: Enumerable<YoutubeChanelScalarFieldEnum>
  }


  /**
   * YoutubeChanel create
   */
  export type YoutubeChanelCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * The data needed to create a YoutubeChanel.
     */
    data: XOR<YoutubeChanelCreateInput, YoutubeChanelUncheckedCreateInput>
  }


  /**
   * YoutubeChanel createMany
   */
  export type YoutubeChanelCreateManyArgs = {
    /**
     * The data used to create many YoutubeChanels.
     */
    data: Enumerable<YoutubeChanelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeChanel update
   */
  export type YoutubeChanelUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * The data needed to update a YoutubeChanel.
     */
    data: XOR<YoutubeChanelUpdateInput, YoutubeChanelUncheckedUpdateInput>
    /**
     * Choose, which YoutubeChanel to update.
     */
    where: YoutubeChanelWhereUniqueInput
  }


  /**
   * YoutubeChanel updateMany
   */
  export type YoutubeChanelUpdateManyArgs = {
    /**
     * The data used to update YoutubeChanels.
     */
    data: XOR<YoutubeChanelUpdateManyMutationInput, YoutubeChanelUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeChanels to update
     */
    where?: YoutubeChanelWhereInput
  }


  /**
   * YoutubeChanel upsert
   */
  export type YoutubeChanelUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * The filter to search for the YoutubeChanel to update in case it exists.
     */
    where: YoutubeChanelWhereUniqueInput
    /**
     * In case the YoutubeChanel found by the `where` argument doesn't exist, create a new YoutubeChanel with this data.
     */
    create: XOR<YoutubeChanelCreateInput, YoutubeChanelUncheckedCreateInput>
    /**
     * In case the YoutubeChanel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeChanelUpdateInput, YoutubeChanelUncheckedUpdateInput>
  }


  /**
   * YoutubeChanel delete
   */
  export type YoutubeChanelDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
    /**
     * Filter which YoutubeChanel to delete.
     */
    where: YoutubeChanelWhereUniqueInput
  }


  /**
   * YoutubeChanel deleteMany
   */
  export type YoutubeChanelDeleteManyArgs = {
    /**
     * Filter which YoutubeChanels to delete
     */
    where?: YoutubeChanelWhereInput
  }


  /**
   * YoutubeChanel.chanelToUserPermissions
   */
  export type YoutubeChanel$chanelToUserPermissionsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    where?: YoutubeChanelToUserPermissionWhereInput
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanel.posts
   */
  export type YoutubeChanel$postsArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    where?: YoutubePostWhereInput
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    cursor?: YoutubePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }


  /**
   * YoutubeChanel.subcribers
   */
  export type YoutubeChanel$subcribersArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    where?: YoutubeSubcriberWhereInput
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    cursor?: YoutubeSubcriberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeSubcriberScalarFieldEnum>
  }


  /**
   * YoutubeChanel without action
   */
  export type YoutubeChanelArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanel
     */
    select?: YoutubeChanelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelInclude | null
  }



  /**
   * Model YoutubeChanelToUserPermission
   */


  export type AggregateYoutubeChanelToUserPermission = {
    _count: YoutubeChanelToUserPermissionCountAggregateOutputType | null
    _avg: YoutubeChanelToUserPermissionAvgAggregateOutputType | null
    _sum: YoutubeChanelToUserPermissionSumAggregateOutputType | null
    _min: YoutubeChanelToUserPermissionMinAggregateOutputType | null
    _max: YoutubeChanelToUserPermissionMaxAggregateOutputType | null
  }

  export type YoutubeChanelToUserPermissionAvgAggregateOutputType = {
    id: number | null
    chanelId: number | null
    UserId: number | null
    permissionId: number | null
  }

  export type YoutubeChanelToUserPermissionSumAggregateOutputType = {
    id: number | null
    chanelId: number | null
    UserId: number | null
    permissionId: number | null
  }

  export type YoutubeChanelToUserPermissionMinAggregateOutputType = {
    id: number | null
    chanelId: number | null
    UserId: number | null
    permissionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelToUserPermissionMaxAggregateOutputType = {
    id: number | null
    chanelId: number | null
    UserId: number | null
    permissionId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeChanelToUserPermissionCountAggregateOutputType = {
    id: number
    chanelId: number
    UserId: number
    permissionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeChanelToUserPermissionAvgAggregateInputType = {
    id?: true
    chanelId?: true
    UserId?: true
    permissionId?: true
  }

  export type YoutubeChanelToUserPermissionSumAggregateInputType = {
    id?: true
    chanelId?: true
    UserId?: true
    permissionId?: true
  }

  export type YoutubeChanelToUserPermissionMinAggregateInputType = {
    id?: true
    chanelId?: true
    UserId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelToUserPermissionMaxAggregateInputType = {
    id?: true
    chanelId?: true
    UserId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeChanelToUserPermissionCountAggregateInputType = {
    id?: true
    chanelId?: true
    UserId?: true
    permissionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeChanelToUserPermissionAggregateArgs = {
    /**
     * Filter which YoutubeChanelToUserPermission to aggregate.
     */
    where?: YoutubeChanelToUserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelToUserPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelToUserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelToUserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeChanelToUserPermissions
    **/
    _count?: true | YoutubeChanelToUserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeChanelToUserPermissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeChanelToUserPermissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeChanelToUserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeChanelToUserPermissionMaxAggregateInputType
  }

  export type GetYoutubeChanelToUserPermissionAggregateType<T extends YoutubeChanelToUserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeChanelToUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeChanelToUserPermission[P]>
      : GetScalarType<T[P], AggregateYoutubeChanelToUserPermission[P]>
  }




  export type YoutubeChanelToUserPermissionGroupByArgs = {
    where?: YoutubeChanelToUserPermissionWhereInput
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithAggregationInput>
    by: YoutubeChanelToUserPermissionScalarFieldEnum[]
    having?: YoutubeChanelToUserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeChanelToUserPermissionCountAggregateInputType | true
    _avg?: YoutubeChanelToUserPermissionAvgAggregateInputType
    _sum?: YoutubeChanelToUserPermissionSumAggregateInputType
    _min?: YoutubeChanelToUserPermissionMinAggregateInputType
    _max?: YoutubeChanelToUserPermissionMaxAggregateInputType
  }


  export type YoutubeChanelToUserPermissionGroupByOutputType = {
    id: number
    chanelId: number
    UserId: number
    permissionId: number
    createdAt: Date
    updatedAt: Date
    _count: YoutubeChanelToUserPermissionCountAggregateOutputType | null
    _avg: YoutubeChanelToUserPermissionAvgAggregateOutputType | null
    _sum: YoutubeChanelToUserPermissionSumAggregateOutputType | null
    _min: YoutubeChanelToUserPermissionMinAggregateOutputType | null
    _max: YoutubeChanelToUserPermissionMaxAggregateOutputType | null
  }

  type GetYoutubeChanelToUserPermissionGroupByPayload<T extends YoutubeChanelToUserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeChanelToUserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeChanelToUserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeChanelToUserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeChanelToUserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeChanelToUserPermissionSelect = {
    id?: boolean
    chanel?: boolean | YoutubeChanelArgs
    chanelId?: boolean
    User?: boolean | YoutubeUserArgs
    UserId?: boolean
    permission?: boolean | YoutubeChanelPermissionArgs
    permissionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YoutubeChanelToUserPermissionInclude = {
    chanel?: boolean | YoutubeChanelArgs
    User?: boolean | YoutubeUserArgs
    permission?: boolean | YoutubeChanelPermissionArgs
  }

  export type YoutubeChanelToUserPermissionGetPayload<S extends boolean | null | undefined | YoutubeChanelToUserPermissionArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeChanelToUserPermission :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeChanelToUserPermissionArgs | YoutubeChanelToUserPermissionFindManyArgs)
    ? YoutubeChanelToUserPermission  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'chanel' ? YoutubeChanelGetPayload<S['include'][P]> :
        P extends 'User' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'permission' ? YoutubeChanelPermissionGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeChanelToUserPermissionArgs | YoutubeChanelToUserPermissionFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'chanel' ? YoutubeChanelGetPayload<S['select'][P]> :
        P extends 'User' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'permission' ? YoutubeChanelPermissionGetPayload<S['select'][P]> :  P extends keyof YoutubeChanelToUserPermission ? YoutubeChanelToUserPermission[P] : never
  } 
      : YoutubeChanelToUserPermission


  type YoutubeChanelToUserPermissionCountArgs = 
    Omit<YoutubeChanelToUserPermissionFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeChanelToUserPermissionCountAggregateInputType | true
    }

  export interface YoutubeChanelToUserPermissionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeChanelToUserPermission that matches the filter.
     * @param {YoutubeChanelToUserPermissionFindUniqueArgs} args - Arguments to find a YoutubeChanelToUserPermission
     * @example
     * // Get one YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeChanelToUserPermissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeChanelToUserPermission'> extends True ? Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>> : Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T> | null, null>

    /**
     * Find one YoutubeChanelToUserPermission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeChanelToUserPermissionFindUniqueOrThrowArgs} args - Arguments to find a YoutubeChanelToUserPermission
     * @example
     * // Get one YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeChanelToUserPermissionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionFindUniqueOrThrowArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Find the first YoutubeChanelToUserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionFindFirstArgs} args - Arguments to find a YoutubeChanelToUserPermission
     * @example
     * // Get one YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeChanelToUserPermissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeChanelToUserPermission'> extends True ? Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>> : Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T> | null, null>

    /**
     * Find the first YoutubeChanelToUserPermission that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionFindFirstOrThrowArgs} args - Arguments to find a YoutubeChanelToUserPermission
     * @example
     * // Get one YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeChanelToUserPermissionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionFindFirstOrThrowArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Find zero or more YoutubeChanelToUserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeChanelToUserPermissions
     * const youtubeChanelToUserPermissions = await prisma.youtubeChanelToUserPermission.findMany()
     * 
     * // Get first 10 YoutubeChanelToUserPermissions
     * const youtubeChanelToUserPermissions = await prisma.youtubeChanelToUserPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeChanelToUserPermissionWithIdOnly = await prisma.youtubeChanelToUserPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeChanelToUserPermissionFindManyArgs>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeChanelToUserPermissionGetPayload<T>>>

    /**
     * Create a YoutubeChanelToUserPermission.
     * @param {YoutubeChanelToUserPermissionCreateArgs} args - Arguments to create a YoutubeChanelToUserPermission.
     * @example
     * // Create one YoutubeChanelToUserPermission
     * const YoutubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.create({
     *   data: {
     *     // ... data to create a YoutubeChanelToUserPermission
     *   }
     * })
     * 
    **/
    create<T extends YoutubeChanelToUserPermissionCreateArgs>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionCreateArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Create many YoutubeChanelToUserPermissions.
     *     @param {YoutubeChanelToUserPermissionCreateManyArgs} args - Arguments to create many YoutubeChanelToUserPermissions.
     *     @example
     *     // Create many YoutubeChanelToUserPermissions
     *     const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeChanelToUserPermissionCreateManyArgs>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeChanelToUserPermission.
     * @param {YoutubeChanelToUserPermissionDeleteArgs} args - Arguments to delete one YoutubeChanelToUserPermission.
     * @example
     * // Delete one YoutubeChanelToUserPermission
     * const YoutubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.delete({
     *   where: {
     *     // ... filter to delete one YoutubeChanelToUserPermission
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeChanelToUserPermissionDeleteArgs>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionDeleteArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Update one YoutubeChanelToUserPermission.
     * @param {YoutubeChanelToUserPermissionUpdateArgs} args - Arguments to update one YoutubeChanelToUserPermission.
     * @example
     * // Update one YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeChanelToUserPermissionUpdateArgs>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionUpdateArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Delete zero or more YoutubeChanelToUserPermissions.
     * @param {YoutubeChanelToUserPermissionDeleteManyArgs} args - Arguments to filter YoutubeChanelToUserPermissions to delete.
     * @example
     * // Delete a few YoutubeChanelToUserPermissions
     * const { count } = await prisma.youtubeChanelToUserPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeChanelToUserPermissionDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeChanelToUserPermissionDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeChanelToUserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeChanelToUserPermissions
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeChanelToUserPermissionUpdateManyArgs>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeChanelToUserPermission.
     * @param {YoutubeChanelToUserPermissionUpsertArgs} args - Arguments to update or create a YoutubeChanelToUserPermission.
     * @example
     * // Update or create a YoutubeChanelToUserPermission
     * const youtubeChanelToUserPermission = await prisma.youtubeChanelToUserPermission.upsert({
     *   create: {
     *     // ... data to create a YoutubeChanelToUserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeChanelToUserPermission we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeChanelToUserPermissionUpsertArgs>(
      args: SelectSubset<T, YoutubeChanelToUserPermissionUpsertArgs>
    ): Prisma__YoutubeChanelToUserPermissionClient<YoutubeChanelToUserPermissionGetPayload<T>>

    /**
     * Count the number of YoutubeChanelToUserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionCountArgs} args - Arguments to filter YoutubeChanelToUserPermissions to count.
     * @example
     * // Count the number of YoutubeChanelToUserPermissions
     * const count = await prisma.youtubeChanelToUserPermission.count({
     *   where: {
     *     // ... the filter for the YoutubeChanelToUserPermissions we want to count
     *   }
     * })
    **/
    count<T extends YoutubeChanelToUserPermissionCountArgs>(
      args?: Subset<T, YoutubeChanelToUserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeChanelToUserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeChanelToUserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeChanelToUserPermissionAggregateArgs>(args: Subset<T, YoutubeChanelToUserPermissionAggregateArgs>): Prisma.PrismaPromise<GetYoutubeChanelToUserPermissionAggregateType<T>>

    /**
     * Group by YoutubeChanelToUserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeChanelToUserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeChanelToUserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeChanelToUserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeChanelToUserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeChanelToUserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeChanelToUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeChanelToUserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeChanelToUserPermissionClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    chanel<T extends YoutubeChanelArgs= {}>(args?: Subset<T, YoutubeChanelArgs>): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T> | Null>;

    User<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    permission<T extends YoutubeChanelPermissionArgs= {}>(args?: Subset<T, YoutubeChanelPermissionArgs>): Prisma__YoutubeChanelPermissionClient<YoutubeChanelPermissionGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeChanelToUserPermission base type for findUnique actions
   */
  export type YoutubeChanelToUserPermissionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter, which YoutubeChanelToUserPermission to fetch.
     */
    where: YoutubeChanelToUserPermissionWhereUniqueInput
  }

  /**
   * YoutubeChanelToUserPermission findUnique
   */
  export interface YoutubeChanelToUserPermissionFindUniqueArgs extends YoutubeChanelToUserPermissionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanelToUserPermission findUniqueOrThrow
   */
  export type YoutubeChanelToUserPermissionFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter, which YoutubeChanelToUserPermission to fetch.
     */
    where: YoutubeChanelToUserPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelToUserPermission base type for findFirst actions
   */
  export type YoutubeChanelToUserPermissionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter, which YoutubeChanelToUserPermission to fetch.
     */
    where?: YoutubeChanelToUserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelToUserPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanelToUserPermissions.
     */
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelToUserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelToUserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanelToUserPermissions.
     */
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }

  /**
   * YoutubeChanelToUserPermission findFirst
   */
  export interface YoutubeChanelToUserPermissionFindFirstArgs extends YoutubeChanelToUserPermissionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeChanelToUserPermission findFirstOrThrow
   */
  export type YoutubeChanelToUserPermissionFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter, which YoutubeChanelToUserPermission to fetch.
     */
    where?: YoutubeChanelToUserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelToUserPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeChanelToUserPermissions.
     */
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelToUserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelToUserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeChanelToUserPermissions.
     */
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanelToUserPermission findMany
   */
  export type YoutubeChanelToUserPermissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter, which YoutubeChanelToUserPermissions to fetch.
     */
    where?: YoutubeChanelToUserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeChanelToUserPermissions to fetch.
     */
    orderBy?: Enumerable<YoutubeChanelToUserPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeChanelToUserPermissions.
     */
    cursor?: YoutubeChanelToUserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeChanelToUserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeChanelToUserPermissions.
     */
    skip?: number
    distinct?: Enumerable<YoutubeChanelToUserPermissionScalarFieldEnum>
  }


  /**
   * YoutubeChanelToUserPermission create
   */
  export type YoutubeChanelToUserPermissionCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * The data needed to create a YoutubeChanelToUserPermission.
     */
    data: XOR<YoutubeChanelToUserPermissionCreateInput, YoutubeChanelToUserPermissionUncheckedCreateInput>
  }


  /**
   * YoutubeChanelToUserPermission createMany
   */
  export type YoutubeChanelToUserPermissionCreateManyArgs = {
    /**
     * The data used to create many YoutubeChanelToUserPermissions.
     */
    data: Enumerable<YoutubeChanelToUserPermissionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeChanelToUserPermission update
   */
  export type YoutubeChanelToUserPermissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * The data needed to update a YoutubeChanelToUserPermission.
     */
    data: XOR<YoutubeChanelToUserPermissionUpdateInput, YoutubeChanelToUserPermissionUncheckedUpdateInput>
    /**
     * Choose, which YoutubeChanelToUserPermission to update.
     */
    where: YoutubeChanelToUserPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelToUserPermission updateMany
   */
  export type YoutubeChanelToUserPermissionUpdateManyArgs = {
    /**
     * The data used to update YoutubeChanelToUserPermissions.
     */
    data: XOR<YoutubeChanelToUserPermissionUpdateManyMutationInput, YoutubeChanelToUserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeChanelToUserPermissions to update
     */
    where?: YoutubeChanelToUserPermissionWhereInput
  }


  /**
   * YoutubeChanelToUserPermission upsert
   */
  export type YoutubeChanelToUserPermissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * The filter to search for the YoutubeChanelToUserPermission to update in case it exists.
     */
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    /**
     * In case the YoutubeChanelToUserPermission found by the `where` argument doesn't exist, create a new YoutubeChanelToUserPermission with this data.
     */
    create: XOR<YoutubeChanelToUserPermissionCreateInput, YoutubeChanelToUserPermissionUncheckedCreateInput>
    /**
     * In case the YoutubeChanelToUserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeChanelToUserPermissionUpdateInput, YoutubeChanelToUserPermissionUncheckedUpdateInput>
  }


  /**
   * YoutubeChanelToUserPermission delete
   */
  export type YoutubeChanelToUserPermissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
    /**
     * Filter which YoutubeChanelToUserPermission to delete.
     */
    where: YoutubeChanelToUserPermissionWhereUniqueInput
  }


  /**
   * YoutubeChanelToUserPermission deleteMany
   */
  export type YoutubeChanelToUserPermissionDeleteManyArgs = {
    /**
     * Filter which YoutubeChanelToUserPermissions to delete
     */
    where?: YoutubeChanelToUserPermissionWhereInput
  }


  /**
   * YoutubeChanelToUserPermission without action
   */
  export type YoutubeChanelToUserPermissionArgs = {
    /**
     * Select specific fields to fetch from the YoutubeChanelToUserPermission
     */
    select?: YoutubeChanelToUserPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeChanelToUserPermissionInclude | null
  }



  /**
   * Model YoutubeHashtag
   */


  export type AggregateYoutubeHashtag = {
    _count: YoutubeHashtagCountAggregateOutputType | null
    _avg: YoutubeHashtagAvgAggregateOutputType | null
    _sum: YoutubeHashtagSumAggregateOutputType | null
    _min: YoutubeHashtagMinAggregateOutputType | null
    _max: YoutubeHashtagMaxAggregateOutputType | null
  }

  export type YoutubeHashtagAvgAggregateOutputType = {
    id: number | null
  }

  export type YoutubeHashtagSumAggregateOutputType = {
    id: number | null
  }

  export type YoutubeHashtagMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeHashtagMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeHashtagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeHashtagAvgAggregateInputType = {
    id?: true
  }

  export type YoutubeHashtagSumAggregateInputType = {
    id?: true
  }

  export type YoutubeHashtagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeHashtagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeHashtagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeHashtagAggregateArgs = {
    /**
     * Filter which YoutubeHashtag to aggregate.
     */
    where?: YoutubeHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeHashtags to fetch.
     */
    orderBy?: Enumerable<YoutubeHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeHashtags
    **/
    _count?: true | YoutubeHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeHashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeHashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeHashtagMaxAggregateInputType
  }

  export type GetYoutubeHashtagAggregateType<T extends YoutubeHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeHashtag[P]>
      : GetScalarType<T[P], AggregateYoutubeHashtag[P]>
  }




  export type YoutubeHashtagGroupByArgs = {
    where?: YoutubeHashtagWhereInput
    orderBy?: Enumerable<YoutubeHashtagOrderByWithAggregationInput>
    by: YoutubeHashtagScalarFieldEnum[]
    having?: YoutubeHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeHashtagCountAggregateInputType | true
    _avg?: YoutubeHashtagAvgAggregateInputType
    _sum?: YoutubeHashtagSumAggregateInputType
    _min?: YoutubeHashtagMinAggregateInputType
    _max?: YoutubeHashtagMaxAggregateInputType
  }


  export type YoutubeHashtagGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: YoutubeHashtagCountAggregateOutputType | null
    _avg: YoutubeHashtagAvgAggregateOutputType | null
    _sum: YoutubeHashtagSumAggregateOutputType | null
    _min: YoutubeHashtagMinAggregateOutputType | null
    _max: YoutubeHashtagMaxAggregateOutputType | null
  }

  type GetYoutubeHashtagGroupByPayload<T extends YoutubeHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeHashtagGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeHashtagSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | YoutubeHashtag$postsArgs
    _count?: boolean | YoutubeHashtagCountOutputTypeArgs
  }


  export type YoutubeHashtagInclude = {
    posts?: boolean | YoutubeHashtag$postsArgs
    _count?: boolean | YoutubeHashtagCountOutputTypeArgs
  }

  export type YoutubeHashtagGetPayload<S extends boolean | null | undefined | YoutubeHashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeHashtag :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeHashtagArgs | YoutubeHashtagFindManyArgs)
    ? YoutubeHashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < YoutubePostGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubeHashtagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeHashtagArgs | YoutubeHashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < YoutubePostGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubeHashtagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeHashtag ? YoutubeHashtag[P] : never
  } 
      : YoutubeHashtag


  type YoutubeHashtagCountArgs = 
    Omit<YoutubeHashtagFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeHashtagCountAggregateInputType | true
    }

  export interface YoutubeHashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeHashtag that matches the filter.
     * @param {YoutubeHashtagFindUniqueArgs} args - Arguments to find a YoutubeHashtag
     * @example
     * // Get one YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeHashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeHashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeHashtag'> extends True ? Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>> : Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T> | null, null>

    /**
     * Find one YoutubeHashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeHashtagFindUniqueOrThrowArgs} args - Arguments to find a YoutubeHashtag
     * @example
     * // Get one YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeHashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeHashtagFindUniqueOrThrowArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Find the first YoutubeHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagFindFirstArgs} args - Arguments to find a YoutubeHashtag
     * @example
     * // Get one YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeHashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeHashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeHashtag'> extends True ? Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>> : Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T> | null, null>

    /**
     * Find the first YoutubeHashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagFindFirstOrThrowArgs} args - Arguments to find a YoutubeHashtag
     * @example
     * // Get one YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeHashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeHashtagFindFirstOrThrowArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Find zero or more YoutubeHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeHashtags
     * const youtubeHashtags = await prisma.youtubeHashtag.findMany()
     * 
     * // Get first 10 YoutubeHashtags
     * const youtubeHashtags = await prisma.youtubeHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeHashtagWithIdOnly = await prisma.youtubeHashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeHashtagFindManyArgs>(
      args?: SelectSubset<T, YoutubeHashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeHashtagGetPayload<T>>>

    /**
     * Create a YoutubeHashtag.
     * @param {YoutubeHashtagCreateArgs} args - Arguments to create a YoutubeHashtag.
     * @example
     * // Create one YoutubeHashtag
     * const YoutubeHashtag = await prisma.youtubeHashtag.create({
     *   data: {
     *     // ... data to create a YoutubeHashtag
     *   }
     * })
     * 
    **/
    create<T extends YoutubeHashtagCreateArgs>(
      args: SelectSubset<T, YoutubeHashtagCreateArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Create many YoutubeHashtags.
     *     @param {YoutubeHashtagCreateManyArgs} args - Arguments to create many YoutubeHashtags.
     *     @example
     *     // Create many YoutubeHashtags
     *     const youtubeHashtag = await prisma.youtubeHashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeHashtagCreateManyArgs>(
      args?: SelectSubset<T, YoutubeHashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeHashtag.
     * @param {YoutubeHashtagDeleteArgs} args - Arguments to delete one YoutubeHashtag.
     * @example
     * // Delete one YoutubeHashtag
     * const YoutubeHashtag = await prisma.youtubeHashtag.delete({
     *   where: {
     *     // ... filter to delete one YoutubeHashtag
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeHashtagDeleteArgs>(
      args: SelectSubset<T, YoutubeHashtagDeleteArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Update one YoutubeHashtag.
     * @param {YoutubeHashtagUpdateArgs} args - Arguments to update one YoutubeHashtag.
     * @example
     * // Update one YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeHashtagUpdateArgs>(
      args: SelectSubset<T, YoutubeHashtagUpdateArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Delete zero or more YoutubeHashtags.
     * @param {YoutubeHashtagDeleteManyArgs} args - Arguments to filter YoutubeHashtags to delete.
     * @example
     * // Delete a few YoutubeHashtags
     * const { count } = await prisma.youtubeHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeHashtagDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeHashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeHashtags
     * const youtubeHashtag = await prisma.youtubeHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeHashtagUpdateManyArgs>(
      args: SelectSubset<T, YoutubeHashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeHashtag.
     * @param {YoutubeHashtagUpsertArgs} args - Arguments to update or create a YoutubeHashtag.
     * @example
     * // Update or create a YoutubeHashtag
     * const youtubeHashtag = await prisma.youtubeHashtag.upsert({
     *   create: {
     *     // ... data to create a YoutubeHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeHashtag we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeHashtagUpsertArgs>(
      args: SelectSubset<T, YoutubeHashtagUpsertArgs>
    ): Prisma__YoutubeHashtagClient<YoutubeHashtagGetPayload<T>>

    /**
     * Count the number of YoutubeHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagCountArgs} args - Arguments to filter YoutubeHashtags to count.
     * @example
     * // Count the number of YoutubeHashtags
     * const count = await prisma.youtubeHashtag.count({
     *   where: {
     *     // ... the filter for the YoutubeHashtags we want to count
     *   }
     * })
    **/
    count<T extends YoutubeHashtagCountArgs>(
      args?: Subset<T, YoutubeHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeHashtagAggregateArgs>(args: Subset<T, YoutubeHashtagAggregateArgs>): Prisma.PrismaPromise<GetYoutubeHashtagAggregateType<T>>

    /**
     * Group by YoutubeHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeHashtagGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeHashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends YoutubeHashtag$postsArgs= {}>(args?: Subset<T, YoutubeHashtag$postsArgs>): Prisma.PrismaPromise<Array<YoutubePostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeHashtag base type for findUnique actions
   */
  export type YoutubeHashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter, which YoutubeHashtag to fetch.
     */
    where: YoutubeHashtagWhereUniqueInput
  }

  /**
   * YoutubeHashtag findUnique
   */
  export interface YoutubeHashtagFindUniqueArgs extends YoutubeHashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeHashtag findUniqueOrThrow
   */
  export type YoutubeHashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter, which YoutubeHashtag to fetch.
     */
    where: YoutubeHashtagWhereUniqueInput
  }


  /**
   * YoutubeHashtag base type for findFirst actions
   */
  export type YoutubeHashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter, which YoutubeHashtag to fetch.
     */
    where?: YoutubeHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeHashtags to fetch.
     */
    orderBy?: Enumerable<YoutubeHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeHashtags.
     */
    cursor?: YoutubeHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeHashtags.
     */
    distinct?: Enumerable<YoutubeHashtagScalarFieldEnum>
  }

  /**
   * YoutubeHashtag findFirst
   */
  export interface YoutubeHashtagFindFirstArgs extends YoutubeHashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeHashtag findFirstOrThrow
   */
  export type YoutubeHashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter, which YoutubeHashtag to fetch.
     */
    where?: YoutubeHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeHashtags to fetch.
     */
    orderBy?: Enumerable<YoutubeHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeHashtags.
     */
    cursor?: YoutubeHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeHashtags.
     */
    distinct?: Enumerable<YoutubeHashtagScalarFieldEnum>
  }


  /**
   * YoutubeHashtag findMany
   */
  export type YoutubeHashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter, which YoutubeHashtags to fetch.
     */
    where?: YoutubeHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeHashtags to fetch.
     */
    orderBy?: Enumerable<YoutubeHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeHashtags.
     */
    cursor?: YoutubeHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeHashtags.
     */
    skip?: number
    distinct?: Enumerable<YoutubeHashtagScalarFieldEnum>
  }


  /**
   * YoutubeHashtag create
   */
  export type YoutubeHashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * The data needed to create a YoutubeHashtag.
     */
    data: XOR<YoutubeHashtagCreateInput, YoutubeHashtagUncheckedCreateInput>
  }


  /**
   * YoutubeHashtag createMany
   */
  export type YoutubeHashtagCreateManyArgs = {
    /**
     * The data used to create many YoutubeHashtags.
     */
    data: Enumerable<YoutubeHashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeHashtag update
   */
  export type YoutubeHashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * The data needed to update a YoutubeHashtag.
     */
    data: XOR<YoutubeHashtagUpdateInput, YoutubeHashtagUncheckedUpdateInput>
    /**
     * Choose, which YoutubeHashtag to update.
     */
    where: YoutubeHashtagWhereUniqueInput
  }


  /**
   * YoutubeHashtag updateMany
   */
  export type YoutubeHashtagUpdateManyArgs = {
    /**
     * The data used to update YoutubeHashtags.
     */
    data: XOR<YoutubeHashtagUpdateManyMutationInput, YoutubeHashtagUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeHashtags to update
     */
    where?: YoutubeHashtagWhereInput
  }


  /**
   * YoutubeHashtag upsert
   */
  export type YoutubeHashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * The filter to search for the YoutubeHashtag to update in case it exists.
     */
    where: YoutubeHashtagWhereUniqueInput
    /**
     * In case the YoutubeHashtag found by the `where` argument doesn't exist, create a new YoutubeHashtag with this data.
     */
    create: XOR<YoutubeHashtagCreateInput, YoutubeHashtagUncheckedCreateInput>
    /**
     * In case the YoutubeHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeHashtagUpdateInput, YoutubeHashtagUncheckedUpdateInput>
  }


  /**
   * YoutubeHashtag delete
   */
  export type YoutubeHashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    /**
     * Filter which YoutubeHashtag to delete.
     */
    where: YoutubeHashtagWhereUniqueInput
  }


  /**
   * YoutubeHashtag deleteMany
   */
  export type YoutubeHashtagDeleteManyArgs = {
    /**
     * Filter which YoutubeHashtags to delete
     */
    where?: YoutubeHashtagWhereInput
  }


  /**
   * YoutubeHashtag.posts
   */
  export type YoutubeHashtag$postsArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    where?: YoutubePostWhereInput
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    cursor?: YoutubePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }


  /**
   * YoutubeHashtag without action
   */
  export type YoutubeHashtagArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
  }



  /**
   * Model YoutubePost
   */


  export type AggregateYoutubePost = {
    _count: YoutubePostCountAggregateOutputType | null
    _avg: YoutubePostAvgAggregateOutputType | null
    _sum: YoutubePostSumAggregateOutputType | null
    _min: YoutubePostMinAggregateOutputType | null
    _max: YoutubePostMaxAggregateOutputType | null
  }

  export type YoutubePostAvgAggregateOutputType = {
    id: number | null
    posterUserId: number | null
    chanelId: number | null
    shareFromPostId: number | null
  }

  export type YoutubePostSumAggregateOutputType = {
    id: number | null
    posterUserId: number | null
    chanelId: number | null
    shareFromPostId: number | null
  }

  export type YoutubePostMinAggregateOutputType = {
    id: number | null
    video: string | null
    name: string | null
    description: string | null
    posterUserId: number | null
    chanelId: number | null
    isShared: boolean | null
    shareFromPostId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubePostMaxAggregateOutputType = {
    id: number | null
    video: string | null
    name: string | null
    description: string | null
    posterUserId: number | null
    chanelId: number | null
    isShared: boolean | null
    shareFromPostId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubePostCountAggregateOutputType = {
    id: number
    video: number
    name: number
    description: number
    posterUserId: number
    chanelId: number
    isShared: number
    shareFromPostId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubePostAvgAggregateInputType = {
    id?: true
    posterUserId?: true
    chanelId?: true
    shareFromPostId?: true
  }

  export type YoutubePostSumAggregateInputType = {
    id?: true
    posterUserId?: true
    chanelId?: true
    shareFromPostId?: true
  }

  export type YoutubePostMinAggregateInputType = {
    id?: true
    video?: true
    name?: true
    description?: true
    posterUserId?: true
    chanelId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubePostMaxAggregateInputType = {
    id?: true
    video?: true
    name?: true
    description?: true
    posterUserId?: true
    chanelId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubePostCountAggregateInputType = {
    id?: true
    video?: true
    name?: true
    description?: true
    posterUserId?: true
    chanelId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubePostAggregateArgs = {
    /**
     * Filter which YoutubePost to aggregate.
     */
    where?: YoutubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubePosts to fetch.
     */
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubePosts
    **/
    _count?: true | YoutubePostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubePostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubePostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubePostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubePostMaxAggregateInputType
  }

  export type GetYoutubePostAggregateType<T extends YoutubePostAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubePost[P]>
      : GetScalarType<T[P], AggregateYoutubePost[P]>
  }




  export type YoutubePostGroupByArgs = {
    where?: YoutubePostWhereInput
    orderBy?: Enumerable<YoutubePostOrderByWithAggregationInput>
    by: YoutubePostScalarFieldEnum[]
    having?: YoutubePostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubePostCountAggregateInputType | true
    _avg?: YoutubePostAvgAggregateInputType
    _sum?: YoutubePostSumAggregateInputType
    _min?: YoutubePostMinAggregateInputType
    _max?: YoutubePostMaxAggregateInputType
  }


  export type YoutubePostGroupByOutputType = {
    id: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt: Date
    updatedAt: Date
    _count: YoutubePostCountAggregateOutputType | null
    _avg: YoutubePostAvgAggregateOutputType | null
    _sum: YoutubePostSumAggregateOutputType | null
    _min: YoutubePostMinAggregateOutputType | null
    _max: YoutubePostMaxAggregateOutputType | null
  }

  type GetYoutubePostGroupByPayload<T extends YoutubePostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubePostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubePostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubePostGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubePostGroupByOutputType[P]>
        }
      >
    >


  export type YoutubePostSelect = {
    id?: boolean
    video?: boolean
    name?: boolean
    description?: boolean
    posterUser?: boolean | YoutubeUserArgs
    posterUserId?: boolean
    chanel?: boolean | YoutubeChanelArgs
    chanelId?: boolean
    isShared?: boolean
    shareFromPostId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hashtags?: boolean | YoutubePost$hashtagsArgs
    comments?: boolean | YoutubePost$commentsArgs
    likePosts?: boolean | YoutubePost$likePostsArgs
    likeComments?: boolean | YoutubePost$likeCommentsArgs
    _count?: boolean | YoutubePostCountOutputTypeArgs
  }


  export type YoutubePostInclude = {
    posterUser?: boolean | YoutubeUserArgs
    chanel?: boolean | YoutubeChanelArgs
    hashtags?: boolean | YoutubePost$hashtagsArgs
    comments?: boolean | YoutubePost$commentsArgs
    likePosts?: boolean | YoutubePost$likePostsArgs
    likeComments?: boolean | YoutubePost$likeCommentsArgs
    _count?: boolean | YoutubePostCountOutputTypeArgs
  }

  export type YoutubePostGetPayload<S extends boolean | null | undefined | YoutubePostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubePost :
    S extends undefined ? never :
    S extends { include: any } & (YoutubePostArgs | YoutubePostFindManyArgs)
    ? YoutubePost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posterUser' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'chanel' ? YoutubeChanelGetPayload<S['include'][P]> :
        P extends 'hashtags' ? Array < YoutubeHashtagGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < YoutubeCommentGetPayload<S['include'][P]>>  :
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubePostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubePostArgs | YoutubePostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posterUser' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'chanel' ? YoutubeChanelGetPayload<S['select'][P]> :
        P extends 'hashtags' ? Array < YoutubeHashtagGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < YoutubeCommentGetPayload<S['select'][P]>>  :
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubePostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubePost ? YoutubePost[P] : never
  } 
      : YoutubePost


  type YoutubePostCountArgs = 
    Omit<YoutubePostFindManyArgs, 'select' | 'include'> & {
      select?: YoutubePostCountAggregateInputType | true
    }

  export interface YoutubePostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubePost that matches the filter.
     * @param {YoutubePostFindUniqueArgs} args - Arguments to find a YoutubePost
     * @example
     * // Get one YoutubePost
     * const youtubePost = await prisma.youtubePost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubePostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubePostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubePost'> extends True ? Prisma__YoutubePostClient<YoutubePostGetPayload<T>> : Prisma__YoutubePostClient<YoutubePostGetPayload<T> | null, null>

    /**
     * Find one YoutubePost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubePostFindUniqueOrThrowArgs} args - Arguments to find a YoutubePost
     * @example
     * // Get one YoutubePost
     * const youtubePost = await prisma.youtubePost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubePostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubePostFindUniqueOrThrowArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Find the first YoutubePost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostFindFirstArgs} args - Arguments to find a YoutubePost
     * @example
     * // Get one YoutubePost
     * const youtubePost = await prisma.youtubePost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubePostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubePostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubePost'> extends True ? Prisma__YoutubePostClient<YoutubePostGetPayload<T>> : Prisma__YoutubePostClient<YoutubePostGetPayload<T> | null, null>

    /**
     * Find the first YoutubePost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostFindFirstOrThrowArgs} args - Arguments to find a YoutubePost
     * @example
     * // Get one YoutubePost
     * const youtubePost = await prisma.youtubePost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubePostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubePostFindFirstOrThrowArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Find zero or more YoutubePosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubePosts
     * const youtubePosts = await prisma.youtubePost.findMany()
     * 
     * // Get first 10 YoutubePosts
     * const youtubePosts = await prisma.youtubePost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubePostWithIdOnly = await prisma.youtubePost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubePostFindManyArgs>(
      args?: SelectSubset<T, YoutubePostFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubePostGetPayload<T>>>

    /**
     * Create a YoutubePost.
     * @param {YoutubePostCreateArgs} args - Arguments to create a YoutubePost.
     * @example
     * // Create one YoutubePost
     * const YoutubePost = await prisma.youtubePost.create({
     *   data: {
     *     // ... data to create a YoutubePost
     *   }
     * })
     * 
    **/
    create<T extends YoutubePostCreateArgs>(
      args: SelectSubset<T, YoutubePostCreateArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Create many YoutubePosts.
     *     @param {YoutubePostCreateManyArgs} args - Arguments to create many YoutubePosts.
     *     @example
     *     // Create many YoutubePosts
     *     const youtubePost = await prisma.youtubePost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubePostCreateManyArgs>(
      args?: SelectSubset<T, YoutubePostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubePost.
     * @param {YoutubePostDeleteArgs} args - Arguments to delete one YoutubePost.
     * @example
     * // Delete one YoutubePost
     * const YoutubePost = await prisma.youtubePost.delete({
     *   where: {
     *     // ... filter to delete one YoutubePost
     *   }
     * })
     * 
    **/
    delete<T extends YoutubePostDeleteArgs>(
      args: SelectSubset<T, YoutubePostDeleteArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Update one YoutubePost.
     * @param {YoutubePostUpdateArgs} args - Arguments to update one YoutubePost.
     * @example
     * // Update one YoutubePost
     * const youtubePost = await prisma.youtubePost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubePostUpdateArgs>(
      args: SelectSubset<T, YoutubePostUpdateArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Delete zero or more YoutubePosts.
     * @param {YoutubePostDeleteManyArgs} args - Arguments to filter YoutubePosts to delete.
     * @example
     * // Delete a few YoutubePosts
     * const { count } = await prisma.youtubePost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubePostDeleteManyArgs>(
      args?: SelectSubset<T, YoutubePostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubePosts
     * const youtubePost = await prisma.youtubePost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubePostUpdateManyArgs>(
      args: SelectSubset<T, YoutubePostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubePost.
     * @param {YoutubePostUpsertArgs} args - Arguments to update or create a YoutubePost.
     * @example
     * // Update or create a YoutubePost
     * const youtubePost = await prisma.youtubePost.upsert({
     *   create: {
     *     // ... data to create a YoutubePost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubePost we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubePostUpsertArgs>(
      args: SelectSubset<T, YoutubePostUpsertArgs>
    ): Prisma__YoutubePostClient<YoutubePostGetPayload<T>>

    /**
     * Count the number of YoutubePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostCountArgs} args - Arguments to filter YoutubePosts to count.
     * @example
     * // Count the number of YoutubePosts
     * const count = await prisma.youtubePost.count({
     *   where: {
     *     // ... the filter for the YoutubePosts we want to count
     *   }
     * })
    **/
    count<T extends YoutubePostCountArgs>(
      args?: Subset<T, YoutubePostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubePostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubePostAggregateArgs>(args: Subset<T, YoutubePostAggregateArgs>): Prisma.PrismaPromise<GetYoutubePostAggregateType<T>>

    /**
     * Group by YoutubePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubePostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubePostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubePostGroupByArgs['orderBy'] }
        : { orderBy?: YoutubePostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubePostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubePostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubePost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubePostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posterUser<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    chanel<T extends YoutubeChanelArgs= {}>(args?: Subset<T, YoutubeChanelArgs>): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T> | Null>;

    hashtags<T extends YoutubePost$hashtagsArgs= {}>(args?: Subset<T, YoutubePost$hashtagsArgs>): Prisma.PrismaPromise<Array<YoutubeHashtagGetPayload<T>>| Null>;

    comments<T extends YoutubePost$commentsArgs= {}>(args?: Subset<T, YoutubePost$commentsArgs>): Prisma.PrismaPromise<Array<YoutubeCommentGetPayload<T>>| Null>;

    likePosts<T extends YoutubePost$likePostsArgs= {}>(args?: Subset<T, YoutubePost$likePostsArgs>): Prisma.PrismaPromise<Array<YoutubeLikePostGetPayload<T>>| Null>;

    likeComments<T extends YoutubePost$likeCommentsArgs= {}>(args?: Subset<T, YoutubePost$likeCommentsArgs>): Prisma.PrismaPromise<Array<YoutubeLikeCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubePost base type for findUnique actions
   */
  export type YoutubePostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter, which YoutubePost to fetch.
     */
    where: YoutubePostWhereUniqueInput
  }

  /**
   * YoutubePost findUnique
   */
  export interface YoutubePostFindUniqueArgs extends YoutubePostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubePost findUniqueOrThrow
   */
  export type YoutubePostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter, which YoutubePost to fetch.
     */
    where: YoutubePostWhereUniqueInput
  }


  /**
   * YoutubePost base type for findFirst actions
   */
  export type YoutubePostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter, which YoutubePost to fetch.
     */
    where?: YoutubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubePosts to fetch.
     */
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubePosts.
     */
    cursor?: YoutubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubePosts.
     */
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }

  /**
   * YoutubePost findFirst
   */
  export interface YoutubePostFindFirstArgs extends YoutubePostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubePost findFirstOrThrow
   */
  export type YoutubePostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter, which YoutubePost to fetch.
     */
    where?: YoutubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubePosts to fetch.
     */
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubePosts.
     */
    cursor?: YoutubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubePosts.
     */
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }


  /**
   * YoutubePost findMany
   */
  export type YoutubePostFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter, which YoutubePosts to fetch.
     */
    where?: YoutubePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubePosts to fetch.
     */
    orderBy?: Enumerable<YoutubePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubePosts.
     */
    cursor?: YoutubePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubePosts.
     */
    skip?: number
    distinct?: Enumerable<YoutubePostScalarFieldEnum>
  }


  /**
   * YoutubePost create
   */
  export type YoutubePostCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * The data needed to create a YoutubePost.
     */
    data: XOR<YoutubePostCreateInput, YoutubePostUncheckedCreateInput>
  }


  /**
   * YoutubePost createMany
   */
  export type YoutubePostCreateManyArgs = {
    /**
     * The data used to create many YoutubePosts.
     */
    data: Enumerable<YoutubePostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubePost update
   */
  export type YoutubePostUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * The data needed to update a YoutubePost.
     */
    data: XOR<YoutubePostUpdateInput, YoutubePostUncheckedUpdateInput>
    /**
     * Choose, which YoutubePost to update.
     */
    where: YoutubePostWhereUniqueInput
  }


  /**
   * YoutubePost updateMany
   */
  export type YoutubePostUpdateManyArgs = {
    /**
     * The data used to update YoutubePosts.
     */
    data: XOR<YoutubePostUpdateManyMutationInput, YoutubePostUncheckedUpdateManyInput>
    /**
     * Filter which YoutubePosts to update
     */
    where?: YoutubePostWhereInput
  }


  /**
   * YoutubePost upsert
   */
  export type YoutubePostUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * The filter to search for the YoutubePost to update in case it exists.
     */
    where: YoutubePostWhereUniqueInput
    /**
     * In case the YoutubePost found by the `where` argument doesn't exist, create a new YoutubePost with this data.
     */
    create: XOR<YoutubePostCreateInput, YoutubePostUncheckedCreateInput>
    /**
     * In case the YoutubePost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubePostUpdateInput, YoutubePostUncheckedUpdateInput>
  }


  /**
   * YoutubePost delete
   */
  export type YoutubePostDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
    /**
     * Filter which YoutubePost to delete.
     */
    where: YoutubePostWhereUniqueInput
  }


  /**
   * YoutubePost deleteMany
   */
  export type YoutubePostDeleteManyArgs = {
    /**
     * Filter which YoutubePosts to delete
     */
    where?: YoutubePostWhereInput
  }


  /**
   * YoutubePost.hashtags
   */
  export type YoutubePost$hashtagsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeHashtag
     */
    select?: YoutubeHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeHashtagInclude | null
    where?: YoutubeHashtagWhereInput
    orderBy?: Enumerable<YoutubeHashtagOrderByWithRelationInput>
    cursor?: YoutubeHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeHashtagScalarFieldEnum>
  }


  /**
   * YoutubePost.comments
   */
  export type YoutubePost$commentsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    where?: YoutubeCommentWhereInput
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    cursor?: YoutubeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeCommentScalarFieldEnum>
  }


  /**
   * YoutubePost.likePosts
   */
  export type YoutubePost$likePostsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    where?: YoutubeLikePostWhereInput
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    cursor?: YoutubeLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }


  /**
   * YoutubePost.likeComments
   */
  export type YoutubePost$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    where?: YoutubeLikeCommentWhereInput
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    cursor?: YoutubeLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }


  /**
   * YoutubePost without action
   */
  export type YoutubePostArgs = {
    /**
     * Select specific fields to fetch from the YoutubePost
     */
    select?: YoutubePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubePostInclude | null
  }



  /**
   * Model YoutubeComment
   */


  export type AggregateYoutubeComment = {
    _count: YoutubeCommentCountAggregateOutputType | null
    _avg: YoutubeCommentAvgAggregateOutputType | null
    _sum: YoutubeCommentSumAggregateOutputType | null
    _min: YoutubeCommentMinAggregateOutputType | null
    _max: YoutubeCommentMaxAggregateOutputType | null
  }

  export type YoutubeCommentAvgAggregateOutputType = {
    id: number | null
    commentByUserId: number | null
    postId: number | null
  }

  export type YoutubeCommentSumAggregateOutputType = {
    id: number | null
    commentByUserId: number | null
    postId: number | null
  }

  export type YoutubeCommentMinAggregateOutputType = {
    id: number | null
    message: string | null
    commentByUserId: number | null
    postId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeCommentMaxAggregateOutputType = {
    id: number | null
    message: string | null
    commentByUserId: number | null
    postId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeCommentCountAggregateOutputType = {
    id: number
    message: number
    commentByUserId: number
    postId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeCommentAvgAggregateInputType = {
    id?: true
    commentByUserId?: true
    postId?: true
  }

  export type YoutubeCommentSumAggregateInputType = {
    id?: true
    commentByUserId?: true
    postId?: true
  }

  export type YoutubeCommentMinAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeCommentMaxAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeCommentCountAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeCommentAggregateArgs = {
    /**
     * Filter which YoutubeComment to aggregate.
     */
    where?: YoutubeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeComments
    **/
    _count?: true | YoutubeCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeCommentMaxAggregateInputType
  }

  export type GetYoutubeCommentAggregateType<T extends YoutubeCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeComment[P]>
      : GetScalarType<T[P], AggregateYoutubeComment[P]>
  }




  export type YoutubeCommentGroupByArgs = {
    where?: YoutubeCommentWhereInput
    orderBy?: Enumerable<YoutubeCommentOrderByWithAggregationInput>
    by: YoutubeCommentScalarFieldEnum[]
    having?: YoutubeCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeCommentCountAggregateInputType | true
    _avg?: YoutubeCommentAvgAggregateInputType
    _sum?: YoutubeCommentSumAggregateInputType
    _min?: YoutubeCommentMinAggregateInputType
    _max?: YoutubeCommentMaxAggregateInputType
  }


  export type YoutubeCommentGroupByOutputType = {
    id: number
    message: string
    commentByUserId: number
    postId: number
    createdAt: Date
    updatedAt: Date
    _count: YoutubeCommentCountAggregateOutputType | null
    _avg: YoutubeCommentAvgAggregateOutputType | null
    _sum: YoutubeCommentSumAggregateOutputType | null
    _min: YoutubeCommentMinAggregateOutputType | null
    _max: YoutubeCommentMaxAggregateOutputType | null
  }

  type GetYoutubeCommentGroupByPayload<T extends YoutubeCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeCommentGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeCommentGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeCommentSelect = {
    id?: boolean
    message?: boolean
    commentByUser?: boolean | YoutubeUserArgs
    commentByUserId?: boolean
    post?: boolean | YoutubePostArgs
    postId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YoutubeCommentInclude = {
    commentByUser?: boolean | YoutubeUserArgs
    post?: boolean | YoutubePostArgs
  }

  export type YoutubeCommentGetPayload<S extends boolean | null | undefined | YoutubeCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeComment :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeCommentArgs | YoutubeCommentFindManyArgs)
    ? YoutubeComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'commentByUser' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'post' ? YoutubePostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeCommentArgs | YoutubeCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'commentByUser' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'post' ? YoutubePostGetPayload<S['select'][P]> :  P extends keyof YoutubeComment ? YoutubeComment[P] : never
  } 
      : YoutubeComment


  type YoutubeCommentCountArgs = 
    Omit<YoutubeCommentFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeCommentCountAggregateInputType | true
    }

  export interface YoutubeCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeComment that matches the filter.
     * @param {YoutubeCommentFindUniqueArgs} args - Arguments to find a YoutubeComment
     * @example
     * // Get one YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeComment'> extends True ? Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>> : Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T> | null, null>

    /**
     * Find one YoutubeComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeCommentFindUniqueOrThrowArgs} args - Arguments to find a YoutubeComment
     * @example
     * // Get one YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeCommentFindUniqueOrThrowArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Find the first YoutubeComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentFindFirstArgs} args - Arguments to find a YoutubeComment
     * @example
     * // Get one YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeComment'> extends True ? Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>> : Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T> | null, null>

    /**
     * Find the first YoutubeComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentFindFirstOrThrowArgs} args - Arguments to find a YoutubeComment
     * @example
     * // Get one YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeCommentFindFirstOrThrowArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Find zero or more YoutubeComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeComments
     * const youtubeComments = await prisma.youtubeComment.findMany()
     * 
     * // Get first 10 YoutubeComments
     * const youtubeComments = await prisma.youtubeComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeCommentWithIdOnly = await prisma.youtubeComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeCommentFindManyArgs>(
      args?: SelectSubset<T, YoutubeCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeCommentGetPayload<T>>>

    /**
     * Create a YoutubeComment.
     * @param {YoutubeCommentCreateArgs} args - Arguments to create a YoutubeComment.
     * @example
     * // Create one YoutubeComment
     * const YoutubeComment = await prisma.youtubeComment.create({
     *   data: {
     *     // ... data to create a YoutubeComment
     *   }
     * })
     * 
    **/
    create<T extends YoutubeCommentCreateArgs>(
      args: SelectSubset<T, YoutubeCommentCreateArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Create many YoutubeComments.
     *     @param {YoutubeCommentCreateManyArgs} args - Arguments to create many YoutubeComments.
     *     @example
     *     // Create many YoutubeComments
     *     const youtubeComment = await prisma.youtubeComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeCommentCreateManyArgs>(
      args?: SelectSubset<T, YoutubeCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeComment.
     * @param {YoutubeCommentDeleteArgs} args - Arguments to delete one YoutubeComment.
     * @example
     * // Delete one YoutubeComment
     * const YoutubeComment = await prisma.youtubeComment.delete({
     *   where: {
     *     // ... filter to delete one YoutubeComment
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeCommentDeleteArgs>(
      args: SelectSubset<T, YoutubeCommentDeleteArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Update one YoutubeComment.
     * @param {YoutubeCommentUpdateArgs} args - Arguments to update one YoutubeComment.
     * @example
     * // Update one YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeCommentUpdateArgs>(
      args: SelectSubset<T, YoutubeCommentUpdateArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Delete zero or more YoutubeComments.
     * @param {YoutubeCommentDeleteManyArgs} args - Arguments to filter YoutubeComments to delete.
     * @example
     * // Delete a few YoutubeComments
     * const { count } = await prisma.youtubeComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeCommentDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeComments
     * const youtubeComment = await prisma.youtubeComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeCommentUpdateManyArgs>(
      args: SelectSubset<T, YoutubeCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeComment.
     * @param {YoutubeCommentUpsertArgs} args - Arguments to update or create a YoutubeComment.
     * @example
     * // Update or create a YoutubeComment
     * const youtubeComment = await prisma.youtubeComment.upsert({
     *   create: {
     *     // ... data to create a YoutubeComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeComment we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeCommentUpsertArgs>(
      args: SelectSubset<T, YoutubeCommentUpsertArgs>
    ): Prisma__YoutubeCommentClient<YoutubeCommentGetPayload<T>>

    /**
     * Count the number of YoutubeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentCountArgs} args - Arguments to filter YoutubeComments to count.
     * @example
     * // Count the number of YoutubeComments
     * const count = await prisma.youtubeComment.count({
     *   where: {
     *     // ... the filter for the YoutubeComments we want to count
     *   }
     * })
    **/
    count<T extends YoutubeCommentCountArgs>(
      args?: Subset<T, YoutubeCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeCommentAggregateArgs>(args: Subset<T, YoutubeCommentAggregateArgs>): Prisma.PrismaPromise<GetYoutubeCommentAggregateType<T>>

    /**
     * Group by YoutubeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeCommentGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    commentByUser<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    post<T extends YoutubePostArgs= {}>(args?: Subset<T, YoutubePostArgs>): Prisma__YoutubePostClient<YoutubePostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeComment base type for findUnique actions
   */
  export type YoutubeCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter, which YoutubeComment to fetch.
     */
    where: YoutubeCommentWhereUniqueInput
  }

  /**
   * YoutubeComment findUnique
   */
  export interface YoutubeCommentFindUniqueArgs extends YoutubeCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeComment findUniqueOrThrow
   */
  export type YoutubeCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter, which YoutubeComment to fetch.
     */
    where: YoutubeCommentWhereUniqueInput
  }


  /**
   * YoutubeComment base type for findFirst actions
   */
  export type YoutubeCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter, which YoutubeComment to fetch.
     */
    where?: YoutubeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeComments.
     */
    cursor?: YoutubeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeComments.
     */
    distinct?: Enumerable<YoutubeCommentScalarFieldEnum>
  }

  /**
   * YoutubeComment findFirst
   */
  export interface YoutubeCommentFindFirstArgs extends YoutubeCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeComment findFirstOrThrow
   */
  export type YoutubeCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter, which YoutubeComment to fetch.
     */
    where?: YoutubeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeComments.
     */
    cursor?: YoutubeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeComments.
     */
    distinct?: Enumerable<YoutubeCommentScalarFieldEnum>
  }


  /**
   * YoutubeComment findMany
   */
  export type YoutubeCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter, which YoutubeComments to fetch.
     */
    where?: YoutubeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeComments.
     */
    cursor?: YoutubeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeComments.
     */
    skip?: number
    distinct?: Enumerable<YoutubeCommentScalarFieldEnum>
  }


  /**
   * YoutubeComment create
   */
  export type YoutubeCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * The data needed to create a YoutubeComment.
     */
    data: XOR<YoutubeCommentCreateInput, YoutubeCommentUncheckedCreateInput>
  }


  /**
   * YoutubeComment createMany
   */
  export type YoutubeCommentCreateManyArgs = {
    /**
     * The data used to create many YoutubeComments.
     */
    data: Enumerable<YoutubeCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeComment update
   */
  export type YoutubeCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * The data needed to update a YoutubeComment.
     */
    data: XOR<YoutubeCommentUpdateInput, YoutubeCommentUncheckedUpdateInput>
    /**
     * Choose, which YoutubeComment to update.
     */
    where: YoutubeCommentWhereUniqueInput
  }


  /**
   * YoutubeComment updateMany
   */
  export type YoutubeCommentUpdateManyArgs = {
    /**
     * The data used to update YoutubeComments.
     */
    data: XOR<YoutubeCommentUpdateManyMutationInput, YoutubeCommentUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeComments to update
     */
    where?: YoutubeCommentWhereInput
  }


  /**
   * YoutubeComment upsert
   */
  export type YoutubeCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * The filter to search for the YoutubeComment to update in case it exists.
     */
    where: YoutubeCommentWhereUniqueInput
    /**
     * In case the YoutubeComment found by the `where` argument doesn't exist, create a new YoutubeComment with this data.
     */
    create: XOR<YoutubeCommentCreateInput, YoutubeCommentUncheckedCreateInput>
    /**
     * In case the YoutubeComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeCommentUpdateInput, YoutubeCommentUncheckedUpdateInput>
  }


  /**
   * YoutubeComment delete
   */
  export type YoutubeCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
    /**
     * Filter which YoutubeComment to delete.
     */
    where: YoutubeCommentWhereUniqueInput
  }


  /**
   * YoutubeComment deleteMany
   */
  export type YoutubeCommentDeleteManyArgs = {
    /**
     * Filter which YoutubeComments to delete
     */
    where?: YoutubeCommentWhereInput
  }


  /**
   * YoutubeComment without action
   */
  export type YoutubeCommentArgs = {
    /**
     * Select specific fields to fetch from the YoutubeComment
     */
    select?: YoutubeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeCommentInclude | null
  }



  /**
   * Model YoutubeLikeType
   */


  export type AggregateYoutubeLikeType = {
    _count: YoutubeLikeTypeCountAggregateOutputType | null
    _avg: YoutubeLikeTypeAvgAggregateOutputType | null
    _sum: YoutubeLikeTypeSumAggregateOutputType | null
    _min: YoutubeLikeTypeMinAggregateOutputType | null
    _max: YoutubeLikeTypeMaxAggregateOutputType | null
  }

  export type YoutubeLikeTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type YoutubeLikeTypeSumAggregateOutputType = {
    id: number | null
  }

  export type YoutubeLikeTypeMinAggregateOutputType = {
    id: number | null
    emoji: string | null
    name: YoutubeLikeTypeEnum | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikeTypeMaxAggregateOutputType = {
    id: number | null
    emoji: string | null
    name: YoutubeLikeTypeEnum | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikeTypeCountAggregateOutputType = {
    id: number
    emoji: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeLikeTypeAvgAggregateInputType = {
    id?: true
  }

  export type YoutubeLikeTypeSumAggregateInputType = {
    id?: true
  }

  export type YoutubeLikeTypeMinAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikeTypeMaxAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikeTypeCountAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeLikeTypeAggregateArgs = {
    /**
     * Filter which YoutubeLikeType to aggregate.
     */
    where?: YoutubeLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeTypes to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeLikeTypes
    **/
    _count?: true | YoutubeLikeTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeLikeTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeLikeTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeLikeTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeLikeTypeMaxAggregateInputType
  }

  export type GetYoutubeLikeTypeAggregateType<T extends YoutubeLikeTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeLikeType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeLikeType[P]>
      : GetScalarType<T[P], AggregateYoutubeLikeType[P]>
  }




  export type YoutubeLikeTypeGroupByArgs = {
    where?: YoutubeLikeTypeWhereInput
    orderBy?: Enumerable<YoutubeLikeTypeOrderByWithAggregationInput>
    by: YoutubeLikeTypeScalarFieldEnum[]
    having?: YoutubeLikeTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeLikeTypeCountAggregateInputType | true
    _avg?: YoutubeLikeTypeAvgAggregateInputType
    _sum?: YoutubeLikeTypeSumAggregateInputType
    _min?: YoutubeLikeTypeMinAggregateInputType
    _max?: YoutubeLikeTypeMaxAggregateInputType
  }


  export type YoutubeLikeTypeGroupByOutputType = {
    id: number
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt: Date
    updatedAt: Date
    _count: YoutubeLikeTypeCountAggregateOutputType | null
    _avg: YoutubeLikeTypeAvgAggregateOutputType | null
    _sum: YoutubeLikeTypeSumAggregateOutputType | null
    _min: YoutubeLikeTypeMinAggregateOutputType | null
    _max: YoutubeLikeTypeMaxAggregateOutputType | null
  }

  type GetYoutubeLikeTypeGroupByPayload<T extends YoutubeLikeTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeLikeTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeLikeTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeLikeTypeGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeLikeTypeGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeLikeTypeSelect = {
    id?: boolean
    emoji?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likePosts?: boolean | YoutubeLikeType$likePostsArgs
    likeComments?: boolean | YoutubeLikeType$likeCommentsArgs
    _count?: boolean | YoutubeLikeTypeCountOutputTypeArgs
  }


  export type YoutubeLikeTypeInclude = {
    likePosts?: boolean | YoutubeLikeType$likePostsArgs
    likeComments?: boolean | YoutubeLikeType$likeCommentsArgs
    _count?: boolean | YoutubeLikeTypeCountOutputTypeArgs
  }

  export type YoutubeLikeTypeGetPayload<S extends boolean | null | undefined | YoutubeLikeTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeLikeType :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeLikeTypeArgs | YoutubeLikeTypeFindManyArgs)
    ? YoutubeLikeType  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? YoutubeLikeTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeLikeTypeArgs | YoutubeLikeTypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'likePosts' ? Array < YoutubeLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < YoutubeLikeCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? YoutubeLikeTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeLikeType ? YoutubeLikeType[P] : never
  } 
      : YoutubeLikeType


  type YoutubeLikeTypeCountArgs = 
    Omit<YoutubeLikeTypeFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeLikeTypeCountAggregateInputType | true
    }

  export interface YoutubeLikeTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeLikeType that matches the filter.
     * @param {YoutubeLikeTypeFindUniqueArgs} args - Arguments to find a YoutubeLikeType
     * @example
     * // Get one YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeLikeTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeLikeTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeLikeType'> extends True ? Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>> : Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T> | null, null>

    /**
     * Find one YoutubeLikeType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeLikeTypeFindUniqueOrThrowArgs} args - Arguments to find a YoutubeLikeType
     * @example
     * // Get one YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeLikeTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikeTypeFindUniqueOrThrowArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Find the first YoutubeLikeType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeFindFirstArgs} args - Arguments to find a YoutubeLikeType
     * @example
     * // Get one YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeLikeTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeLikeTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeLikeType'> extends True ? Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>> : Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T> | null, null>

    /**
     * Find the first YoutubeLikeType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeFindFirstOrThrowArgs} args - Arguments to find a YoutubeLikeType
     * @example
     * // Get one YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeLikeTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikeTypeFindFirstOrThrowArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Find zero or more YoutubeLikeTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeLikeTypes
     * const youtubeLikeTypes = await prisma.youtubeLikeType.findMany()
     * 
     * // Get first 10 YoutubeLikeTypes
     * const youtubeLikeTypes = await prisma.youtubeLikeType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeLikeTypeWithIdOnly = await prisma.youtubeLikeType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeLikeTypeFindManyArgs>(
      args?: SelectSubset<T, YoutubeLikeTypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeLikeTypeGetPayload<T>>>

    /**
     * Create a YoutubeLikeType.
     * @param {YoutubeLikeTypeCreateArgs} args - Arguments to create a YoutubeLikeType.
     * @example
     * // Create one YoutubeLikeType
     * const YoutubeLikeType = await prisma.youtubeLikeType.create({
     *   data: {
     *     // ... data to create a YoutubeLikeType
     *   }
     * })
     * 
    **/
    create<T extends YoutubeLikeTypeCreateArgs>(
      args: SelectSubset<T, YoutubeLikeTypeCreateArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Create many YoutubeLikeTypes.
     *     @param {YoutubeLikeTypeCreateManyArgs} args - Arguments to create many YoutubeLikeTypes.
     *     @example
     *     // Create many YoutubeLikeTypes
     *     const youtubeLikeType = await prisma.youtubeLikeType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeLikeTypeCreateManyArgs>(
      args?: SelectSubset<T, YoutubeLikeTypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeLikeType.
     * @param {YoutubeLikeTypeDeleteArgs} args - Arguments to delete one YoutubeLikeType.
     * @example
     * // Delete one YoutubeLikeType
     * const YoutubeLikeType = await prisma.youtubeLikeType.delete({
     *   where: {
     *     // ... filter to delete one YoutubeLikeType
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeLikeTypeDeleteArgs>(
      args: SelectSubset<T, YoutubeLikeTypeDeleteArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Update one YoutubeLikeType.
     * @param {YoutubeLikeTypeUpdateArgs} args - Arguments to update one YoutubeLikeType.
     * @example
     * // Update one YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeLikeTypeUpdateArgs>(
      args: SelectSubset<T, YoutubeLikeTypeUpdateArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Delete zero or more YoutubeLikeTypes.
     * @param {YoutubeLikeTypeDeleteManyArgs} args - Arguments to filter YoutubeLikeTypes to delete.
     * @example
     * // Delete a few YoutubeLikeTypes
     * const { count } = await prisma.youtubeLikeType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeLikeTypeDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeLikeTypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeLikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeLikeTypes
     * const youtubeLikeType = await prisma.youtubeLikeType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeLikeTypeUpdateManyArgs>(
      args: SelectSubset<T, YoutubeLikeTypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeLikeType.
     * @param {YoutubeLikeTypeUpsertArgs} args - Arguments to update or create a YoutubeLikeType.
     * @example
     * // Update or create a YoutubeLikeType
     * const youtubeLikeType = await prisma.youtubeLikeType.upsert({
     *   create: {
     *     // ... data to create a YoutubeLikeType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeLikeType we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeLikeTypeUpsertArgs>(
      args: SelectSubset<T, YoutubeLikeTypeUpsertArgs>
    ): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T>>

    /**
     * Count the number of YoutubeLikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeCountArgs} args - Arguments to filter YoutubeLikeTypes to count.
     * @example
     * // Count the number of YoutubeLikeTypes
     * const count = await prisma.youtubeLikeType.count({
     *   where: {
     *     // ... the filter for the YoutubeLikeTypes we want to count
     *   }
     * })
    **/
    count<T extends YoutubeLikeTypeCountArgs>(
      args?: Subset<T, YoutubeLikeTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeLikeTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeLikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeLikeTypeAggregateArgs>(args: Subset<T, YoutubeLikeTypeAggregateArgs>): Prisma.PrismaPromise<GetYoutubeLikeTypeAggregateType<T>>

    /**
     * Group by YoutubeLikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeLikeTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeLikeTypeGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeLikeTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeLikeTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeLikeTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeLikeType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeLikeTypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    likePosts<T extends YoutubeLikeType$likePostsArgs= {}>(args?: Subset<T, YoutubeLikeType$likePostsArgs>): Prisma.PrismaPromise<Array<YoutubeLikePostGetPayload<T>>| Null>;

    likeComments<T extends YoutubeLikeType$likeCommentsArgs= {}>(args?: Subset<T, YoutubeLikeType$likeCommentsArgs>): Prisma.PrismaPromise<Array<YoutubeLikeCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeLikeType base type for findUnique actions
   */
  export type YoutubeLikeTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter, which YoutubeLikeType to fetch.
     */
    where: YoutubeLikeTypeWhereUniqueInput
  }

  /**
   * YoutubeLikeType findUnique
   */
  export interface YoutubeLikeTypeFindUniqueArgs extends YoutubeLikeTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikeType findUniqueOrThrow
   */
  export type YoutubeLikeTypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter, which YoutubeLikeType to fetch.
     */
    where: YoutubeLikeTypeWhereUniqueInput
  }


  /**
   * YoutubeLikeType base type for findFirst actions
   */
  export type YoutubeLikeTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter, which YoutubeLikeType to fetch.
     */
    where?: YoutubeLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeTypes to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikeTypes.
     */
    cursor?: YoutubeLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikeTypes.
     */
    distinct?: Enumerable<YoutubeLikeTypeScalarFieldEnum>
  }

  /**
   * YoutubeLikeType findFirst
   */
  export interface YoutubeLikeTypeFindFirstArgs extends YoutubeLikeTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikeType findFirstOrThrow
   */
  export type YoutubeLikeTypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter, which YoutubeLikeType to fetch.
     */
    where?: YoutubeLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeTypes to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikeTypes.
     */
    cursor?: YoutubeLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikeTypes.
     */
    distinct?: Enumerable<YoutubeLikeTypeScalarFieldEnum>
  }


  /**
   * YoutubeLikeType findMany
   */
  export type YoutubeLikeTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter, which YoutubeLikeTypes to fetch.
     */
    where?: YoutubeLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeTypes to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeLikeTypes.
     */
    cursor?: YoutubeLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeTypes.
     */
    skip?: number
    distinct?: Enumerable<YoutubeLikeTypeScalarFieldEnum>
  }


  /**
   * YoutubeLikeType create
   */
  export type YoutubeLikeTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * The data needed to create a YoutubeLikeType.
     */
    data: XOR<YoutubeLikeTypeCreateInput, YoutubeLikeTypeUncheckedCreateInput>
  }


  /**
   * YoutubeLikeType createMany
   */
  export type YoutubeLikeTypeCreateManyArgs = {
    /**
     * The data used to create many YoutubeLikeTypes.
     */
    data: Enumerable<YoutubeLikeTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeLikeType update
   */
  export type YoutubeLikeTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * The data needed to update a YoutubeLikeType.
     */
    data: XOR<YoutubeLikeTypeUpdateInput, YoutubeLikeTypeUncheckedUpdateInput>
    /**
     * Choose, which YoutubeLikeType to update.
     */
    where: YoutubeLikeTypeWhereUniqueInput
  }


  /**
   * YoutubeLikeType updateMany
   */
  export type YoutubeLikeTypeUpdateManyArgs = {
    /**
     * The data used to update YoutubeLikeTypes.
     */
    data: XOR<YoutubeLikeTypeUpdateManyMutationInput, YoutubeLikeTypeUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeLikeTypes to update
     */
    where?: YoutubeLikeTypeWhereInput
  }


  /**
   * YoutubeLikeType upsert
   */
  export type YoutubeLikeTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * The filter to search for the YoutubeLikeType to update in case it exists.
     */
    where: YoutubeLikeTypeWhereUniqueInput
    /**
     * In case the YoutubeLikeType found by the `where` argument doesn't exist, create a new YoutubeLikeType with this data.
     */
    create: XOR<YoutubeLikeTypeCreateInput, YoutubeLikeTypeUncheckedCreateInput>
    /**
     * In case the YoutubeLikeType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeLikeTypeUpdateInput, YoutubeLikeTypeUncheckedUpdateInput>
  }


  /**
   * YoutubeLikeType delete
   */
  export type YoutubeLikeTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
    /**
     * Filter which YoutubeLikeType to delete.
     */
    where: YoutubeLikeTypeWhereUniqueInput
  }


  /**
   * YoutubeLikeType deleteMany
   */
  export type YoutubeLikeTypeDeleteManyArgs = {
    /**
     * Filter which YoutubeLikeTypes to delete
     */
    where?: YoutubeLikeTypeWhereInput
  }


  /**
   * YoutubeLikeType.likePosts
   */
  export type YoutubeLikeType$likePostsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    where?: YoutubeLikePostWhereInput
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    cursor?: YoutubeLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }


  /**
   * YoutubeLikeType.likeComments
   */
  export type YoutubeLikeType$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    where?: YoutubeLikeCommentWhereInput
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    cursor?: YoutubeLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }


  /**
   * YoutubeLikeType without action
   */
  export type YoutubeLikeTypeArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeType
     */
    select?: YoutubeLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeTypeInclude | null
  }



  /**
   * Model YoutubeLikePost
   */


  export type AggregateYoutubeLikePost = {
    _count: YoutubeLikePostCountAggregateOutputType | null
    _avg: YoutubeLikePostAvgAggregateOutputType | null
    _sum: YoutubeLikePostSumAggregateOutputType | null
    _min: YoutubeLikePostMinAggregateOutputType | null
    _max: YoutubeLikePostMaxAggregateOutputType | null
  }

  export type YoutubeLikePostAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
  }

  export type YoutubeLikePostSumAggregateOutputType = {
    id: number | null
    postId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
  }

  export type YoutubeLikePostMinAggregateOutputType = {
    id: number | null
    postId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikePostMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikePostCountAggregateOutputType = {
    id: number
    postId: number
    likeByUserId: number
    likeTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeLikePostAvgAggregateInputType = {
    id?: true
    postId?: true
    likeByUserId?: true
    likeTypeId?: true
  }

  export type YoutubeLikePostSumAggregateInputType = {
    id?: true
    postId?: true
    likeByUserId?: true
    likeTypeId?: true
  }

  export type YoutubeLikePostMinAggregateInputType = {
    id?: true
    postId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikePostMaxAggregateInputType = {
    id?: true
    postId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikePostCountAggregateInputType = {
    id?: true
    postId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeLikePostAggregateArgs = {
    /**
     * Filter which YoutubeLikePost to aggregate.
     */
    where?: YoutubeLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikePosts to fetch.
     */
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeLikePosts
    **/
    _count?: true | YoutubeLikePostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeLikePostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeLikePostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeLikePostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeLikePostMaxAggregateInputType
  }

  export type GetYoutubeLikePostAggregateType<T extends YoutubeLikePostAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeLikePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeLikePost[P]>
      : GetScalarType<T[P], AggregateYoutubeLikePost[P]>
  }




  export type YoutubeLikePostGroupByArgs = {
    where?: YoutubeLikePostWhereInput
    orderBy?: Enumerable<YoutubeLikePostOrderByWithAggregationInput>
    by: YoutubeLikePostScalarFieldEnum[]
    having?: YoutubeLikePostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeLikePostCountAggregateInputType | true
    _avg?: YoutubeLikePostAvgAggregateInputType
    _sum?: YoutubeLikePostSumAggregateInputType
    _min?: YoutubeLikePostMinAggregateInputType
    _max?: YoutubeLikePostMaxAggregateInputType
  }


  export type YoutubeLikePostGroupByOutputType = {
    id: number
    postId: number
    likeByUserId: number
    likeTypeId: number
    createdAt: Date
    updatedAt: Date
    _count: YoutubeLikePostCountAggregateOutputType | null
    _avg: YoutubeLikePostAvgAggregateOutputType | null
    _sum: YoutubeLikePostSumAggregateOutputType | null
    _min: YoutubeLikePostMinAggregateOutputType | null
    _max: YoutubeLikePostMaxAggregateOutputType | null
  }

  type GetYoutubeLikePostGroupByPayload<T extends YoutubeLikePostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeLikePostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeLikePostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeLikePostGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeLikePostGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeLikePostSelect = {
    id?: boolean
    post?: boolean | YoutubePostArgs
    postId?: boolean
    likeByUser?: boolean | YoutubeUserArgs
    likeByUserId?: boolean
    likeType?: boolean | YoutubeLikeTypeArgs
    likeTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YoutubeLikePostInclude = {
    post?: boolean | YoutubePostArgs
    likeByUser?: boolean | YoutubeUserArgs
    likeType?: boolean | YoutubeLikeTypeArgs
  }

  export type YoutubeLikePostGetPayload<S extends boolean | null | undefined | YoutubeLikePostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeLikePost :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeLikePostArgs | YoutubeLikePostFindManyArgs)
    ? YoutubeLikePost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? YoutubePostGetPayload<S['include'][P]> :
        P extends 'likeByUser' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'likeType' ? YoutubeLikeTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeLikePostArgs | YoutubeLikePostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? YoutubePostGetPayload<S['select'][P]> :
        P extends 'likeByUser' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'likeType' ? YoutubeLikeTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeLikePost ? YoutubeLikePost[P] : never
  } 
      : YoutubeLikePost


  type YoutubeLikePostCountArgs = 
    Omit<YoutubeLikePostFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeLikePostCountAggregateInputType | true
    }

  export interface YoutubeLikePostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeLikePost that matches the filter.
     * @param {YoutubeLikePostFindUniqueArgs} args - Arguments to find a YoutubeLikePost
     * @example
     * // Get one YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeLikePostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeLikePostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeLikePost'> extends True ? Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>> : Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T> | null, null>

    /**
     * Find one YoutubeLikePost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeLikePostFindUniqueOrThrowArgs} args - Arguments to find a YoutubeLikePost
     * @example
     * // Get one YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeLikePostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikePostFindUniqueOrThrowArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Find the first YoutubeLikePost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostFindFirstArgs} args - Arguments to find a YoutubeLikePost
     * @example
     * // Get one YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeLikePostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeLikePostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeLikePost'> extends True ? Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>> : Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T> | null, null>

    /**
     * Find the first YoutubeLikePost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostFindFirstOrThrowArgs} args - Arguments to find a YoutubeLikePost
     * @example
     * // Get one YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeLikePostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikePostFindFirstOrThrowArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Find zero or more YoutubeLikePosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeLikePosts
     * const youtubeLikePosts = await prisma.youtubeLikePost.findMany()
     * 
     * // Get first 10 YoutubeLikePosts
     * const youtubeLikePosts = await prisma.youtubeLikePost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeLikePostWithIdOnly = await prisma.youtubeLikePost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeLikePostFindManyArgs>(
      args?: SelectSubset<T, YoutubeLikePostFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeLikePostGetPayload<T>>>

    /**
     * Create a YoutubeLikePost.
     * @param {YoutubeLikePostCreateArgs} args - Arguments to create a YoutubeLikePost.
     * @example
     * // Create one YoutubeLikePost
     * const YoutubeLikePost = await prisma.youtubeLikePost.create({
     *   data: {
     *     // ... data to create a YoutubeLikePost
     *   }
     * })
     * 
    **/
    create<T extends YoutubeLikePostCreateArgs>(
      args: SelectSubset<T, YoutubeLikePostCreateArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Create many YoutubeLikePosts.
     *     @param {YoutubeLikePostCreateManyArgs} args - Arguments to create many YoutubeLikePosts.
     *     @example
     *     // Create many YoutubeLikePosts
     *     const youtubeLikePost = await prisma.youtubeLikePost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeLikePostCreateManyArgs>(
      args?: SelectSubset<T, YoutubeLikePostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeLikePost.
     * @param {YoutubeLikePostDeleteArgs} args - Arguments to delete one YoutubeLikePost.
     * @example
     * // Delete one YoutubeLikePost
     * const YoutubeLikePost = await prisma.youtubeLikePost.delete({
     *   where: {
     *     // ... filter to delete one YoutubeLikePost
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeLikePostDeleteArgs>(
      args: SelectSubset<T, YoutubeLikePostDeleteArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Update one YoutubeLikePost.
     * @param {YoutubeLikePostUpdateArgs} args - Arguments to update one YoutubeLikePost.
     * @example
     * // Update one YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeLikePostUpdateArgs>(
      args: SelectSubset<T, YoutubeLikePostUpdateArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Delete zero or more YoutubeLikePosts.
     * @param {YoutubeLikePostDeleteManyArgs} args - Arguments to filter YoutubeLikePosts to delete.
     * @example
     * // Delete a few YoutubeLikePosts
     * const { count } = await prisma.youtubeLikePost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeLikePostDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeLikePostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeLikePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeLikePosts
     * const youtubeLikePost = await prisma.youtubeLikePost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeLikePostUpdateManyArgs>(
      args: SelectSubset<T, YoutubeLikePostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeLikePost.
     * @param {YoutubeLikePostUpsertArgs} args - Arguments to update or create a YoutubeLikePost.
     * @example
     * // Update or create a YoutubeLikePost
     * const youtubeLikePost = await prisma.youtubeLikePost.upsert({
     *   create: {
     *     // ... data to create a YoutubeLikePost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeLikePost we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeLikePostUpsertArgs>(
      args: SelectSubset<T, YoutubeLikePostUpsertArgs>
    ): Prisma__YoutubeLikePostClient<YoutubeLikePostGetPayload<T>>

    /**
     * Count the number of YoutubeLikePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostCountArgs} args - Arguments to filter YoutubeLikePosts to count.
     * @example
     * // Count the number of YoutubeLikePosts
     * const count = await prisma.youtubeLikePost.count({
     *   where: {
     *     // ... the filter for the YoutubeLikePosts we want to count
     *   }
     * })
    **/
    count<T extends YoutubeLikePostCountArgs>(
      args?: Subset<T, YoutubeLikePostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeLikePostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeLikePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeLikePostAggregateArgs>(args: Subset<T, YoutubeLikePostAggregateArgs>): Prisma.PrismaPromise<GetYoutubeLikePostAggregateType<T>>

    /**
     * Group by YoutubeLikePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikePostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeLikePostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeLikePostGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeLikePostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeLikePostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeLikePostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeLikePost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeLikePostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends YoutubePostArgs= {}>(args?: Subset<T, YoutubePostArgs>): Prisma__YoutubePostClient<YoutubePostGetPayload<T> | Null>;

    likeByUser<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    likeType<T extends YoutubeLikeTypeArgs= {}>(args?: Subset<T, YoutubeLikeTypeArgs>): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeLikePost base type for findUnique actions
   */
  export type YoutubeLikePostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter, which YoutubeLikePost to fetch.
     */
    where: YoutubeLikePostWhereUniqueInput
  }

  /**
   * YoutubeLikePost findUnique
   */
  export interface YoutubeLikePostFindUniqueArgs extends YoutubeLikePostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikePost findUniqueOrThrow
   */
  export type YoutubeLikePostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter, which YoutubeLikePost to fetch.
     */
    where: YoutubeLikePostWhereUniqueInput
  }


  /**
   * YoutubeLikePost base type for findFirst actions
   */
  export type YoutubeLikePostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter, which YoutubeLikePost to fetch.
     */
    where?: YoutubeLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikePosts to fetch.
     */
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikePosts.
     */
    cursor?: YoutubeLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikePosts.
     */
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }

  /**
   * YoutubeLikePost findFirst
   */
  export interface YoutubeLikePostFindFirstArgs extends YoutubeLikePostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikePost findFirstOrThrow
   */
  export type YoutubeLikePostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter, which YoutubeLikePost to fetch.
     */
    where?: YoutubeLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikePosts to fetch.
     */
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikePosts.
     */
    cursor?: YoutubeLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikePosts.
     */
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }


  /**
   * YoutubeLikePost findMany
   */
  export type YoutubeLikePostFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter, which YoutubeLikePosts to fetch.
     */
    where?: YoutubeLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikePosts to fetch.
     */
    orderBy?: Enumerable<YoutubeLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeLikePosts.
     */
    cursor?: YoutubeLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikePosts.
     */
    skip?: number
    distinct?: Enumerable<YoutubeLikePostScalarFieldEnum>
  }


  /**
   * YoutubeLikePost create
   */
  export type YoutubeLikePostCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * The data needed to create a YoutubeLikePost.
     */
    data: XOR<YoutubeLikePostCreateInput, YoutubeLikePostUncheckedCreateInput>
  }


  /**
   * YoutubeLikePost createMany
   */
  export type YoutubeLikePostCreateManyArgs = {
    /**
     * The data used to create many YoutubeLikePosts.
     */
    data: Enumerable<YoutubeLikePostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeLikePost update
   */
  export type YoutubeLikePostUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * The data needed to update a YoutubeLikePost.
     */
    data: XOR<YoutubeLikePostUpdateInput, YoutubeLikePostUncheckedUpdateInput>
    /**
     * Choose, which YoutubeLikePost to update.
     */
    where: YoutubeLikePostWhereUniqueInput
  }


  /**
   * YoutubeLikePost updateMany
   */
  export type YoutubeLikePostUpdateManyArgs = {
    /**
     * The data used to update YoutubeLikePosts.
     */
    data: XOR<YoutubeLikePostUpdateManyMutationInput, YoutubeLikePostUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeLikePosts to update
     */
    where?: YoutubeLikePostWhereInput
  }


  /**
   * YoutubeLikePost upsert
   */
  export type YoutubeLikePostUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * The filter to search for the YoutubeLikePost to update in case it exists.
     */
    where: YoutubeLikePostWhereUniqueInput
    /**
     * In case the YoutubeLikePost found by the `where` argument doesn't exist, create a new YoutubeLikePost with this data.
     */
    create: XOR<YoutubeLikePostCreateInput, YoutubeLikePostUncheckedCreateInput>
    /**
     * In case the YoutubeLikePost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeLikePostUpdateInput, YoutubeLikePostUncheckedUpdateInput>
  }


  /**
   * YoutubeLikePost delete
   */
  export type YoutubeLikePostDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
    /**
     * Filter which YoutubeLikePost to delete.
     */
    where: YoutubeLikePostWhereUniqueInput
  }


  /**
   * YoutubeLikePost deleteMany
   */
  export type YoutubeLikePostDeleteManyArgs = {
    /**
     * Filter which YoutubeLikePosts to delete
     */
    where?: YoutubeLikePostWhereInput
  }


  /**
   * YoutubeLikePost without action
   */
  export type YoutubeLikePostArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikePost
     */
    select?: YoutubeLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikePostInclude | null
  }



  /**
   * Model YoutubeLikeComment
   */


  export type AggregateYoutubeLikeComment = {
    _count: YoutubeLikeCommentCountAggregateOutputType | null
    _avg: YoutubeLikeCommentAvgAggregateOutputType | null
    _sum: YoutubeLikeCommentSumAggregateOutputType | null
    _min: YoutubeLikeCommentMinAggregateOutputType | null
    _max: YoutubeLikeCommentMaxAggregateOutputType | null
  }

  export type YoutubeLikeCommentAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
  }

  export type YoutubeLikeCommentSumAggregateOutputType = {
    id: number | null
    commentId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
  }

  export type YoutubeLikeCommentMinAggregateOutputType = {
    id: number | null
    commentId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikeCommentMaxAggregateOutputType = {
    id: number | null
    commentId: number | null
    likeByUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeLikeCommentCountAggregateOutputType = {
    id: number
    commentId: number
    likeByUserId: number
    likeTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeLikeCommentAvgAggregateInputType = {
    id?: true
    commentId?: true
    likeByUserId?: true
    likeTypeId?: true
  }

  export type YoutubeLikeCommentSumAggregateInputType = {
    id?: true
    commentId?: true
    likeByUserId?: true
    likeTypeId?: true
  }

  export type YoutubeLikeCommentMinAggregateInputType = {
    id?: true
    commentId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikeCommentMaxAggregateInputType = {
    id?: true
    commentId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeLikeCommentCountAggregateInputType = {
    id?: true
    commentId?: true
    likeByUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeLikeCommentAggregateArgs = {
    /**
     * Filter which YoutubeLikeComment to aggregate.
     */
    where?: YoutubeLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeLikeComments
    **/
    _count?: true | YoutubeLikeCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeLikeCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeLikeCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeLikeCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeLikeCommentMaxAggregateInputType
  }

  export type GetYoutubeLikeCommentAggregateType<T extends YoutubeLikeCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeLikeComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeLikeComment[P]>
      : GetScalarType<T[P], AggregateYoutubeLikeComment[P]>
  }




  export type YoutubeLikeCommentGroupByArgs = {
    where?: YoutubeLikeCommentWhereInput
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithAggregationInput>
    by: YoutubeLikeCommentScalarFieldEnum[]
    having?: YoutubeLikeCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeLikeCommentCountAggregateInputType | true
    _avg?: YoutubeLikeCommentAvgAggregateInputType
    _sum?: YoutubeLikeCommentSumAggregateInputType
    _min?: YoutubeLikeCommentMinAggregateInputType
    _max?: YoutubeLikeCommentMaxAggregateInputType
  }


  export type YoutubeLikeCommentGroupByOutputType = {
    id: number
    commentId: number
    likeByUserId: number
    likeTypeId: number
    createdAt: Date
    updatedAt: Date
    _count: YoutubeLikeCommentCountAggregateOutputType | null
    _avg: YoutubeLikeCommentAvgAggregateOutputType | null
    _sum: YoutubeLikeCommentSumAggregateOutputType | null
    _min: YoutubeLikeCommentMinAggregateOutputType | null
    _max: YoutubeLikeCommentMaxAggregateOutputType | null
  }

  type GetYoutubeLikeCommentGroupByPayload<T extends YoutubeLikeCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeLikeCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeLikeCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeLikeCommentGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeLikeCommentGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeLikeCommentSelect = {
    id?: boolean
    comment?: boolean | YoutubePostArgs
    commentId?: boolean
    likeByUser?: boolean | YoutubeUserArgs
    likeByUserId?: boolean
    likeType?: boolean | YoutubeLikeTypeArgs
    likeTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YoutubeLikeCommentInclude = {
    comment?: boolean | YoutubePostArgs
    likeByUser?: boolean | YoutubeUserArgs
    likeType?: boolean | YoutubeLikeTypeArgs
  }

  export type YoutubeLikeCommentGetPayload<S extends boolean | null | undefined | YoutubeLikeCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeLikeComment :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeLikeCommentArgs | YoutubeLikeCommentFindManyArgs)
    ? YoutubeLikeComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comment' ? YoutubePostGetPayload<S['include'][P]> :
        P extends 'likeByUser' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'likeType' ? YoutubeLikeTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeLikeCommentArgs | YoutubeLikeCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comment' ? YoutubePostGetPayload<S['select'][P]> :
        P extends 'likeByUser' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'likeType' ? YoutubeLikeTypeGetPayload<S['select'][P]> :  P extends keyof YoutubeLikeComment ? YoutubeLikeComment[P] : never
  } 
      : YoutubeLikeComment


  type YoutubeLikeCommentCountArgs = 
    Omit<YoutubeLikeCommentFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeLikeCommentCountAggregateInputType | true
    }

  export interface YoutubeLikeCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeLikeComment that matches the filter.
     * @param {YoutubeLikeCommentFindUniqueArgs} args - Arguments to find a YoutubeLikeComment
     * @example
     * // Get one YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeLikeCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeLikeCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeLikeComment'> extends True ? Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>> : Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T> | null, null>

    /**
     * Find one YoutubeLikeComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeLikeCommentFindUniqueOrThrowArgs} args - Arguments to find a YoutubeLikeComment
     * @example
     * // Get one YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeLikeCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikeCommentFindUniqueOrThrowArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Find the first YoutubeLikeComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentFindFirstArgs} args - Arguments to find a YoutubeLikeComment
     * @example
     * // Get one YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeLikeCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeLikeCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeLikeComment'> extends True ? Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>> : Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T> | null, null>

    /**
     * Find the first YoutubeLikeComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentFindFirstOrThrowArgs} args - Arguments to find a YoutubeLikeComment
     * @example
     * // Get one YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeLikeCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeLikeCommentFindFirstOrThrowArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Find zero or more YoutubeLikeComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeLikeComments
     * const youtubeLikeComments = await prisma.youtubeLikeComment.findMany()
     * 
     * // Get first 10 YoutubeLikeComments
     * const youtubeLikeComments = await prisma.youtubeLikeComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeLikeCommentWithIdOnly = await prisma.youtubeLikeComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeLikeCommentFindManyArgs>(
      args?: SelectSubset<T, YoutubeLikeCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeLikeCommentGetPayload<T>>>

    /**
     * Create a YoutubeLikeComment.
     * @param {YoutubeLikeCommentCreateArgs} args - Arguments to create a YoutubeLikeComment.
     * @example
     * // Create one YoutubeLikeComment
     * const YoutubeLikeComment = await prisma.youtubeLikeComment.create({
     *   data: {
     *     // ... data to create a YoutubeLikeComment
     *   }
     * })
     * 
    **/
    create<T extends YoutubeLikeCommentCreateArgs>(
      args: SelectSubset<T, YoutubeLikeCommentCreateArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Create many YoutubeLikeComments.
     *     @param {YoutubeLikeCommentCreateManyArgs} args - Arguments to create many YoutubeLikeComments.
     *     @example
     *     // Create many YoutubeLikeComments
     *     const youtubeLikeComment = await prisma.youtubeLikeComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeLikeCommentCreateManyArgs>(
      args?: SelectSubset<T, YoutubeLikeCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeLikeComment.
     * @param {YoutubeLikeCommentDeleteArgs} args - Arguments to delete one YoutubeLikeComment.
     * @example
     * // Delete one YoutubeLikeComment
     * const YoutubeLikeComment = await prisma.youtubeLikeComment.delete({
     *   where: {
     *     // ... filter to delete one YoutubeLikeComment
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeLikeCommentDeleteArgs>(
      args: SelectSubset<T, YoutubeLikeCommentDeleteArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Update one YoutubeLikeComment.
     * @param {YoutubeLikeCommentUpdateArgs} args - Arguments to update one YoutubeLikeComment.
     * @example
     * // Update one YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeLikeCommentUpdateArgs>(
      args: SelectSubset<T, YoutubeLikeCommentUpdateArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Delete zero or more YoutubeLikeComments.
     * @param {YoutubeLikeCommentDeleteManyArgs} args - Arguments to filter YoutubeLikeComments to delete.
     * @example
     * // Delete a few YoutubeLikeComments
     * const { count } = await prisma.youtubeLikeComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeLikeCommentDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeLikeCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeLikeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeLikeComments
     * const youtubeLikeComment = await prisma.youtubeLikeComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeLikeCommentUpdateManyArgs>(
      args: SelectSubset<T, YoutubeLikeCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeLikeComment.
     * @param {YoutubeLikeCommentUpsertArgs} args - Arguments to update or create a YoutubeLikeComment.
     * @example
     * // Update or create a YoutubeLikeComment
     * const youtubeLikeComment = await prisma.youtubeLikeComment.upsert({
     *   create: {
     *     // ... data to create a YoutubeLikeComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeLikeComment we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeLikeCommentUpsertArgs>(
      args: SelectSubset<T, YoutubeLikeCommentUpsertArgs>
    ): Prisma__YoutubeLikeCommentClient<YoutubeLikeCommentGetPayload<T>>

    /**
     * Count the number of YoutubeLikeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentCountArgs} args - Arguments to filter YoutubeLikeComments to count.
     * @example
     * // Count the number of YoutubeLikeComments
     * const count = await prisma.youtubeLikeComment.count({
     *   where: {
     *     // ... the filter for the YoutubeLikeComments we want to count
     *   }
     * })
    **/
    count<T extends YoutubeLikeCommentCountArgs>(
      args?: Subset<T, YoutubeLikeCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeLikeCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeLikeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeLikeCommentAggregateArgs>(args: Subset<T, YoutubeLikeCommentAggregateArgs>): Prisma.PrismaPromise<GetYoutubeLikeCommentAggregateType<T>>

    /**
     * Group by YoutubeLikeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeLikeCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeLikeCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeLikeCommentGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeLikeCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeLikeCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeLikeCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeLikeComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeLikeCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comment<T extends YoutubePostArgs= {}>(args?: Subset<T, YoutubePostArgs>): Prisma__YoutubePostClient<YoutubePostGetPayload<T> | Null>;

    likeByUser<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    likeType<T extends YoutubeLikeTypeArgs= {}>(args?: Subset<T, YoutubeLikeTypeArgs>): Prisma__YoutubeLikeTypeClient<YoutubeLikeTypeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeLikeComment base type for findUnique actions
   */
  export type YoutubeLikeCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter, which YoutubeLikeComment to fetch.
     */
    where: YoutubeLikeCommentWhereUniqueInput
  }

  /**
   * YoutubeLikeComment findUnique
   */
  export interface YoutubeLikeCommentFindUniqueArgs extends YoutubeLikeCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikeComment findUniqueOrThrow
   */
  export type YoutubeLikeCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter, which YoutubeLikeComment to fetch.
     */
    where: YoutubeLikeCommentWhereUniqueInput
  }


  /**
   * YoutubeLikeComment base type for findFirst actions
   */
  export type YoutubeLikeCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter, which YoutubeLikeComment to fetch.
     */
    where?: YoutubeLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikeComments.
     */
    cursor?: YoutubeLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikeComments.
     */
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }

  /**
   * YoutubeLikeComment findFirst
   */
  export interface YoutubeLikeCommentFindFirstArgs extends YoutubeLikeCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeLikeComment findFirstOrThrow
   */
  export type YoutubeLikeCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter, which YoutubeLikeComment to fetch.
     */
    where?: YoutubeLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeLikeComments.
     */
    cursor?: YoutubeLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeLikeComments.
     */
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }


  /**
   * YoutubeLikeComment findMany
   */
  export type YoutubeLikeCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter, which YoutubeLikeComments to fetch.
     */
    where?: YoutubeLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeLikeComments to fetch.
     */
    orderBy?: Enumerable<YoutubeLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeLikeComments.
     */
    cursor?: YoutubeLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeLikeComments.
     */
    skip?: number
    distinct?: Enumerable<YoutubeLikeCommentScalarFieldEnum>
  }


  /**
   * YoutubeLikeComment create
   */
  export type YoutubeLikeCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * The data needed to create a YoutubeLikeComment.
     */
    data: XOR<YoutubeLikeCommentCreateInput, YoutubeLikeCommentUncheckedCreateInput>
  }


  /**
   * YoutubeLikeComment createMany
   */
  export type YoutubeLikeCommentCreateManyArgs = {
    /**
     * The data used to create many YoutubeLikeComments.
     */
    data: Enumerable<YoutubeLikeCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeLikeComment update
   */
  export type YoutubeLikeCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * The data needed to update a YoutubeLikeComment.
     */
    data: XOR<YoutubeLikeCommentUpdateInput, YoutubeLikeCommentUncheckedUpdateInput>
    /**
     * Choose, which YoutubeLikeComment to update.
     */
    where: YoutubeLikeCommentWhereUniqueInput
  }


  /**
   * YoutubeLikeComment updateMany
   */
  export type YoutubeLikeCommentUpdateManyArgs = {
    /**
     * The data used to update YoutubeLikeComments.
     */
    data: XOR<YoutubeLikeCommentUpdateManyMutationInput, YoutubeLikeCommentUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeLikeComments to update
     */
    where?: YoutubeLikeCommentWhereInput
  }


  /**
   * YoutubeLikeComment upsert
   */
  export type YoutubeLikeCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * The filter to search for the YoutubeLikeComment to update in case it exists.
     */
    where: YoutubeLikeCommentWhereUniqueInput
    /**
     * In case the YoutubeLikeComment found by the `where` argument doesn't exist, create a new YoutubeLikeComment with this data.
     */
    create: XOR<YoutubeLikeCommentCreateInput, YoutubeLikeCommentUncheckedCreateInput>
    /**
     * In case the YoutubeLikeComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeLikeCommentUpdateInput, YoutubeLikeCommentUncheckedUpdateInput>
  }


  /**
   * YoutubeLikeComment delete
   */
  export type YoutubeLikeCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
    /**
     * Filter which YoutubeLikeComment to delete.
     */
    where: YoutubeLikeCommentWhereUniqueInput
  }


  /**
   * YoutubeLikeComment deleteMany
   */
  export type YoutubeLikeCommentDeleteManyArgs = {
    /**
     * Filter which YoutubeLikeComments to delete
     */
    where?: YoutubeLikeCommentWhereInput
  }


  /**
   * YoutubeLikeComment without action
   */
  export type YoutubeLikeCommentArgs = {
    /**
     * Select specific fields to fetch from the YoutubeLikeComment
     */
    select?: YoutubeLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeLikeCommentInclude | null
  }



  /**
   * Model YoutubeSubcriber
   */


  export type AggregateYoutubeSubcriber = {
    _count: YoutubeSubcriberCountAggregateOutputType | null
    _avg: YoutubeSubcriberAvgAggregateOutputType | null
    _sum: YoutubeSubcriberSumAggregateOutputType | null
    _min: YoutubeSubcriberMinAggregateOutputType | null
    _max: YoutubeSubcriberMaxAggregateOutputType | null
  }

  export type YoutubeSubcriberAvgAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toChanelId: number | null
  }

  export type YoutubeSubcriberSumAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toChanelId: number | null
  }

  export type YoutubeSubcriberMinAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toChanelId: number | null
    isSupported: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeSubcriberMaxAggregateOutputType = {
    id: number | null
    fromUserId: number | null
    toChanelId: number | null
    isSupported: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YoutubeSubcriberCountAggregateOutputType = {
    id: number
    fromUserId: number
    toChanelId: number
    isSupported: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YoutubeSubcriberAvgAggregateInputType = {
    id?: true
    fromUserId?: true
    toChanelId?: true
  }

  export type YoutubeSubcriberSumAggregateInputType = {
    id?: true
    fromUserId?: true
    toChanelId?: true
  }

  export type YoutubeSubcriberMinAggregateInputType = {
    id?: true
    fromUserId?: true
    toChanelId?: true
    isSupported?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeSubcriberMaxAggregateInputType = {
    id?: true
    fromUserId?: true
    toChanelId?: true
    isSupported?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YoutubeSubcriberCountAggregateInputType = {
    id?: true
    fromUserId?: true
    toChanelId?: true
    isSupported?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YoutubeSubcriberAggregateArgs = {
    /**
     * Filter which YoutubeSubcriber to aggregate.
     */
    where?: YoutubeSubcriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeSubcribers to fetch.
     */
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YoutubeSubcriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeSubcribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeSubcribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YoutubeSubcribers
    **/
    _count?: true | YoutubeSubcriberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YoutubeSubcriberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YoutubeSubcriberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YoutubeSubcriberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YoutubeSubcriberMaxAggregateInputType
  }

  export type GetYoutubeSubcriberAggregateType<T extends YoutubeSubcriberAggregateArgs> = {
        [P in keyof T & keyof AggregateYoutubeSubcriber]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYoutubeSubcriber[P]>
      : GetScalarType<T[P], AggregateYoutubeSubcriber[P]>
  }




  export type YoutubeSubcriberGroupByArgs = {
    where?: YoutubeSubcriberWhereInput
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithAggregationInput>
    by: YoutubeSubcriberScalarFieldEnum[]
    having?: YoutubeSubcriberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YoutubeSubcriberCountAggregateInputType | true
    _avg?: YoutubeSubcriberAvgAggregateInputType
    _sum?: YoutubeSubcriberSumAggregateInputType
    _min?: YoutubeSubcriberMinAggregateInputType
    _max?: YoutubeSubcriberMaxAggregateInputType
  }


  export type YoutubeSubcriberGroupByOutputType = {
    id: number
    fromUserId: number
    toChanelId: number
    isSupported: boolean
    createdAt: Date
    updatedAt: Date
    _count: YoutubeSubcriberCountAggregateOutputType | null
    _avg: YoutubeSubcriberAvgAggregateOutputType | null
    _sum: YoutubeSubcriberSumAggregateOutputType | null
    _min: YoutubeSubcriberMinAggregateOutputType | null
    _max: YoutubeSubcriberMaxAggregateOutputType | null
  }

  type GetYoutubeSubcriberGroupByPayload<T extends YoutubeSubcriberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<YoutubeSubcriberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YoutubeSubcriberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YoutubeSubcriberGroupByOutputType[P]>
            : GetScalarType<T[P], YoutubeSubcriberGroupByOutputType[P]>
        }
      >
    >


  export type YoutubeSubcriberSelect = {
    id?: boolean
    fromUser?: boolean | YoutubeUserArgs
    fromUserId?: boolean
    toChanel?: boolean | YoutubeChanelArgs
    toChanelId?: boolean
    isSupported?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type YoutubeSubcriberInclude = {
    fromUser?: boolean | YoutubeUserArgs
    toChanel?: boolean | YoutubeChanelArgs
  }

  export type YoutubeSubcriberGetPayload<S extends boolean | null | undefined | YoutubeSubcriberArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? YoutubeSubcriber :
    S extends undefined ? never :
    S extends { include: any } & (YoutubeSubcriberArgs | YoutubeSubcriberFindManyArgs)
    ? YoutubeSubcriber  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'fromUser' ? YoutubeUserGetPayload<S['include'][P]> :
        P extends 'toChanel' ? YoutubeChanelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (YoutubeSubcriberArgs | YoutubeSubcriberFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'fromUser' ? YoutubeUserGetPayload<S['select'][P]> :
        P extends 'toChanel' ? YoutubeChanelGetPayload<S['select'][P]> :  P extends keyof YoutubeSubcriber ? YoutubeSubcriber[P] : never
  } 
      : YoutubeSubcriber


  type YoutubeSubcriberCountArgs = 
    Omit<YoutubeSubcriberFindManyArgs, 'select' | 'include'> & {
      select?: YoutubeSubcriberCountAggregateInputType | true
    }

  export interface YoutubeSubcriberDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one YoutubeSubcriber that matches the filter.
     * @param {YoutubeSubcriberFindUniqueArgs} args - Arguments to find a YoutubeSubcriber
     * @example
     * // Get one YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends YoutubeSubcriberFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, YoutubeSubcriberFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'YoutubeSubcriber'> extends True ? Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>> : Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T> | null, null>

    /**
     * Find one YoutubeSubcriber that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {YoutubeSubcriberFindUniqueOrThrowArgs} args - Arguments to find a YoutubeSubcriber
     * @example
     * // Get one YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends YoutubeSubcriberFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, YoutubeSubcriberFindUniqueOrThrowArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Find the first YoutubeSubcriber that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberFindFirstArgs} args - Arguments to find a YoutubeSubcriber
     * @example
     * // Get one YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends YoutubeSubcriberFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, YoutubeSubcriberFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'YoutubeSubcriber'> extends True ? Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>> : Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T> | null, null>

    /**
     * Find the first YoutubeSubcriber that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberFindFirstOrThrowArgs} args - Arguments to find a YoutubeSubcriber
     * @example
     * // Get one YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends YoutubeSubcriberFindFirstOrThrowArgs>(
      args?: SelectSubset<T, YoutubeSubcriberFindFirstOrThrowArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Find zero or more YoutubeSubcribers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YoutubeSubcribers
     * const youtubeSubcribers = await prisma.youtubeSubcriber.findMany()
     * 
     * // Get first 10 YoutubeSubcribers
     * const youtubeSubcribers = await prisma.youtubeSubcriber.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const youtubeSubcriberWithIdOnly = await prisma.youtubeSubcriber.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends YoutubeSubcriberFindManyArgs>(
      args?: SelectSubset<T, YoutubeSubcriberFindManyArgs>
    ): Prisma.PrismaPromise<Array<YoutubeSubcriberGetPayload<T>>>

    /**
     * Create a YoutubeSubcriber.
     * @param {YoutubeSubcriberCreateArgs} args - Arguments to create a YoutubeSubcriber.
     * @example
     * // Create one YoutubeSubcriber
     * const YoutubeSubcriber = await prisma.youtubeSubcriber.create({
     *   data: {
     *     // ... data to create a YoutubeSubcriber
     *   }
     * })
     * 
    **/
    create<T extends YoutubeSubcriberCreateArgs>(
      args: SelectSubset<T, YoutubeSubcriberCreateArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Create many YoutubeSubcribers.
     *     @param {YoutubeSubcriberCreateManyArgs} args - Arguments to create many YoutubeSubcribers.
     *     @example
     *     // Create many YoutubeSubcribers
     *     const youtubeSubcriber = await prisma.youtubeSubcriber.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends YoutubeSubcriberCreateManyArgs>(
      args?: SelectSubset<T, YoutubeSubcriberCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a YoutubeSubcriber.
     * @param {YoutubeSubcriberDeleteArgs} args - Arguments to delete one YoutubeSubcriber.
     * @example
     * // Delete one YoutubeSubcriber
     * const YoutubeSubcriber = await prisma.youtubeSubcriber.delete({
     *   where: {
     *     // ... filter to delete one YoutubeSubcriber
     *   }
     * })
     * 
    **/
    delete<T extends YoutubeSubcriberDeleteArgs>(
      args: SelectSubset<T, YoutubeSubcriberDeleteArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Update one YoutubeSubcriber.
     * @param {YoutubeSubcriberUpdateArgs} args - Arguments to update one YoutubeSubcriber.
     * @example
     * // Update one YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends YoutubeSubcriberUpdateArgs>(
      args: SelectSubset<T, YoutubeSubcriberUpdateArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Delete zero or more YoutubeSubcribers.
     * @param {YoutubeSubcriberDeleteManyArgs} args - Arguments to filter YoutubeSubcribers to delete.
     * @example
     * // Delete a few YoutubeSubcribers
     * const { count } = await prisma.youtubeSubcriber.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends YoutubeSubcriberDeleteManyArgs>(
      args?: SelectSubset<T, YoutubeSubcriberDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YoutubeSubcribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YoutubeSubcribers
     * const youtubeSubcriber = await prisma.youtubeSubcriber.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends YoutubeSubcriberUpdateManyArgs>(
      args: SelectSubset<T, YoutubeSubcriberUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YoutubeSubcriber.
     * @param {YoutubeSubcriberUpsertArgs} args - Arguments to update or create a YoutubeSubcriber.
     * @example
     * // Update or create a YoutubeSubcriber
     * const youtubeSubcriber = await prisma.youtubeSubcriber.upsert({
     *   create: {
     *     // ... data to create a YoutubeSubcriber
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YoutubeSubcriber we want to update
     *   }
     * })
    **/
    upsert<T extends YoutubeSubcriberUpsertArgs>(
      args: SelectSubset<T, YoutubeSubcriberUpsertArgs>
    ): Prisma__YoutubeSubcriberClient<YoutubeSubcriberGetPayload<T>>

    /**
     * Count the number of YoutubeSubcribers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberCountArgs} args - Arguments to filter YoutubeSubcribers to count.
     * @example
     * // Count the number of YoutubeSubcribers
     * const count = await prisma.youtubeSubcriber.count({
     *   where: {
     *     // ... the filter for the YoutubeSubcribers we want to count
     *   }
     * })
    **/
    count<T extends YoutubeSubcriberCountArgs>(
      args?: Subset<T, YoutubeSubcriberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YoutubeSubcriberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YoutubeSubcriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YoutubeSubcriberAggregateArgs>(args: Subset<T, YoutubeSubcriberAggregateArgs>): Prisma.PrismaPromise<GetYoutubeSubcriberAggregateType<T>>

    /**
     * Group by YoutubeSubcriber.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YoutubeSubcriberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YoutubeSubcriberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YoutubeSubcriberGroupByArgs['orderBy'] }
        : { orderBy?: YoutubeSubcriberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YoutubeSubcriberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYoutubeSubcriberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for YoutubeSubcriber.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__YoutubeSubcriberClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    fromUser<T extends YoutubeUserArgs= {}>(args?: Subset<T, YoutubeUserArgs>): Prisma__YoutubeUserClient<YoutubeUserGetPayload<T> | Null>;

    toChanel<T extends YoutubeChanelArgs= {}>(args?: Subset<T, YoutubeChanelArgs>): Prisma__YoutubeChanelClient<YoutubeChanelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * YoutubeSubcriber base type for findUnique actions
   */
  export type YoutubeSubcriberFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter, which YoutubeSubcriber to fetch.
     */
    where: YoutubeSubcriberWhereUniqueInput
  }

  /**
   * YoutubeSubcriber findUnique
   */
  export interface YoutubeSubcriberFindUniqueArgs extends YoutubeSubcriberFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeSubcriber findUniqueOrThrow
   */
  export type YoutubeSubcriberFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter, which YoutubeSubcriber to fetch.
     */
    where: YoutubeSubcriberWhereUniqueInput
  }


  /**
   * YoutubeSubcriber base type for findFirst actions
   */
  export type YoutubeSubcriberFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter, which YoutubeSubcriber to fetch.
     */
    where?: YoutubeSubcriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeSubcribers to fetch.
     */
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeSubcribers.
     */
    cursor?: YoutubeSubcriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeSubcribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeSubcribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeSubcribers.
     */
    distinct?: Enumerable<YoutubeSubcriberScalarFieldEnum>
  }

  /**
   * YoutubeSubcriber findFirst
   */
  export interface YoutubeSubcriberFindFirstArgs extends YoutubeSubcriberFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * YoutubeSubcriber findFirstOrThrow
   */
  export type YoutubeSubcriberFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter, which YoutubeSubcriber to fetch.
     */
    where?: YoutubeSubcriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeSubcribers to fetch.
     */
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YoutubeSubcribers.
     */
    cursor?: YoutubeSubcriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeSubcribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeSubcribers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YoutubeSubcribers.
     */
    distinct?: Enumerable<YoutubeSubcriberScalarFieldEnum>
  }


  /**
   * YoutubeSubcriber findMany
   */
  export type YoutubeSubcriberFindManyArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter, which YoutubeSubcribers to fetch.
     */
    where?: YoutubeSubcriberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YoutubeSubcribers to fetch.
     */
    orderBy?: Enumerable<YoutubeSubcriberOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YoutubeSubcribers.
     */
    cursor?: YoutubeSubcriberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YoutubeSubcribers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YoutubeSubcribers.
     */
    skip?: number
    distinct?: Enumerable<YoutubeSubcriberScalarFieldEnum>
  }


  /**
   * YoutubeSubcriber create
   */
  export type YoutubeSubcriberCreateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * The data needed to create a YoutubeSubcriber.
     */
    data: XOR<YoutubeSubcriberCreateInput, YoutubeSubcriberUncheckedCreateInput>
  }


  /**
   * YoutubeSubcriber createMany
   */
  export type YoutubeSubcriberCreateManyArgs = {
    /**
     * The data used to create many YoutubeSubcribers.
     */
    data: Enumerable<YoutubeSubcriberCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * YoutubeSubcriber update
   */
  export type YoutubeSubcriberUpdateArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * The data needed to update a YoutubeSubcriber.
     */
    data: XOR<YoutubeSubcriberUpdateInput, YoutubeSubcriberUncheckedUpdateInput>
    /**
     * Choose, which YoutubeSubcriber to update.
     */
    where: YoutubeSubcriberWhereUniqueInput
  }


  /**
   * YoutubeSubcriber updateMany
   */
  export type YoutubeSubcriberUpdateManyArgs = {
    /**
     * The data used to update YoutubeSubcribers.
     */
    data: XOR<YoutubeSubcriberUpdateManyMutationInput, YoutubeSubcriberUncheckedUpdateManyInput>
    /**
     * Filter which YoutubeSubcribers to update
     */
    where?: YoutubeSubcriberWhereInput
  }


  /**
   * YoutubeSubcriber upsert
   */
  export type YoutubeSubcriberUpsertArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * The filter to search for the YoutubeSubcriber to update in case it exists.
     */
    where: YoutubeSubcriberWhereUniqueInput
    /**
     * In case the YoutubeSubcriber found by the `where` argument doesn't exist, create a new YoutubeSubcriber with this data.
     */
    create: XOR<YoutubeSubcriberCreateInput, YoutubeSubcriberUncheckedCreateInput>
    /**
     * In case the YoutubeSubcriber was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YoutubeSubcriberUpdateInput, YoutubeSubcriberUncheckedUpdateInput>
  }


  /**
   * YoutubeSubcriber delete
   */
  export type YoutubeSubcriberDeleteArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
    /**
     * Filter which YoutubeSubcriber to delete.
     */
    where: YoutubeSubcriberWhereUniqueInput
  }


  /**
   * YoutubeSubcriber deleteMany
   */
  export type YoutubeSubcriberDeleteManyArgs = {
    /**
     * Filter which YoutubeSubcribers to delete
     */
    where?: YoutubeSubcriberWhereInput
  }


  /**
   * YoutubeSubcriber without action
   */
  export type YoutubeSubcriberArgs = {
    /**
     * Select specific fields to fetch from the YoutubeSubcriber
     */
    select?: YoutubeSubcriberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: YoutubeSubcriberInclude | null
  }



  /**
   * Model FacebookUser
   */


  export type AggregateFacebookUser = {
    _count: FacebookUserCountAggregateOutputType | null
    _avg: FacebookUserAvgAggregateOutputType | null
    _sum: FacebookUserSumAggregateOutputType | null
    _min: FacebookUserMinAggregateOutputType | null
    _max: FacebookUserMaxAggregateOutputType | null
  }

  export type FacebookUserAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookUserSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookUserMinAggregateOutputType = {
    id: number | null
    profileImage: string | null
    coverImage: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookUserMaxAggregateOutputType = {
    id: number | null
    profileImage: string | null
    coverImage: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookUserCountAggregateOutputType = {
    id: number
    profileImage: number
    coverImage: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookUserAvgAggregateInputType = {
    id?: true
  }

  export type FacebookUserSumAggregateInputType = {
    id?: true
  }

  export type FacebookUserMinAggregateInputType = {
    id?: true
    profileImage?: true
    coverImage?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookUserMaxAggregateInputType = {
    id?: true
    profileImage?: true
    coverImage?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookUserCountAggregateInputType = {
    id?: true
    profileImage?: true
    coverImage?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookUserAggregateArgs = {
    /**
     * Filter which FacebookUser to aggregate.
     */
    where?: FacebookUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUsers to fetch.
     */
    orderBy?: Enumerable<FacebookUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookUsers
    **/
    _count?: true | FacebookUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookUserMaxAggregateInputType
  }

  export type GetFacebookUserAggregateType<T extends FacebookUserAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookUser[P]>
      : GetScalarType<T[P], AggregateFacebookUser[P]>
  }




  export type FacebookUserGroupByArgs = {
    where?: FacebookUserWhereInput
    orderBy?: Enumerable<FacebookUserOrderByWithAggregationInput>
    by: FacebookUserScalarFieldEnum[]
    having?: FacebookUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookUserCountAggregateInputType | true
    _avg?: FacebookUserAvgAggregateInputType
    _sum?: FacebookUserSumAggregateInputType
    _min?: FacebookUserMinAggregateInputType
    _max?: FacebookUserMaxAggregateInputType
  }


  export type FacebookUserGroupByOutputType = {
    id: number
    profileImage: string
    coverImage: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookUserCountAggregateOutputType | null
    _avg: FacebookUserAvgAggregateOutputType | null
    _sum: FacebookUserSumAggregateOutputType | null
    _min: FacebookUserMinAggregateOutputType | null
    _max: FacebookUserMaxAggregateOutputType | null
  }

  type GetFacebookUserGroupByPayload<T extends FacebookUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookUserGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookUserGroupByOutputType[P]>
        }
      >
    >


  export type FacebookUserSelect = {
    id?: boolean
    profileImage?: boolean
    coverImage?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | FacebookUser$postsArgs
    groupcreater?: boolean | FacebookUser$groupcreaterArgs
    groupMember?: boolean | FacebookUser$groupMemberArgs
    comments?: boolean | FacebookUser$commentsArgs
    likePosts?: boolean | FacebookUser$likePostsArgs
    likeComments?: boolean | FacebookUser$likeCommentsArgs
    friendRequestFroms?: boolean | FacebookUser$friendRequestFromsArgs
    friendRequestToes?: boolean | FacebookUser$friendRequestToesArgs
    friendRelationFroms?: boolean | FacebookUser$friendRelationFromsArgs
    friendRelationToes?: boolean | FacebookUser$friendRelationToesArgs
    messengeFroms?: boolean | FacebookUser$messengeFromsArgs
    messengeToes?: boolean | FacebookUser$messengeToesArgs
    _count?: boolean | FacebookUserCountOutputTypeArgs
  }


  export type FacebookUserInclude = {
    posts?: boolean | FacebookUser$postsArgs
    groupcreater?: boolean | FacebookUser$groupcreaterArgs
    groupMember?: boolean | FacebookUser$groupMemberArgs
    comments?: boolean | FacebookUser$commentsArgs
    likePosts?: boolean | FacebookUser$likePostsArgs
    likeComments?: boolean | FacebookUser$likeCommentsArgs
    friendRequestFroms?: boolean | FacebookUser$friendRequestFromsArgs
    friendRequestToes?: boolean | FacebookUser$friendRequestToesArgs
    friendRelationFroms?: boolean | FacebookUser$friendRelationFromsArgs
    friendRelationToes?: boolean | FacebookUser$friendRelationToesArgs
    messengeFroms?: boolean | FacebookUser$messengeFromsArgs
    messengeToes?: boolean | FacebookUser$messengeToesArgs
    _count?: boolean | FacebookUserCountOutputTypeArgs
  }

  export type FacebookUserGetPayload<S extends boolean | null | undefined | FacebookUserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookUser :
    S extends undefined ? never :
    S extends { include: any } & (FacebookUserArgs | FacebookUserFindManyArgs)
    ? FacebookUser  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['include'][P]>>  :
        P extends 'groupcreater' ? Array < FacebookGroupGetPayload<S['include'][P]>>  :
        P extends 'groupMember' ? Array < FacebookGroupGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < FacebookCommentGetPayload<S['include'][P]>>  :
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['include'][P]>>  :
        P extends 'friendRequestFroms' ? Array < FacebookFriendRequestGetPayload<S['include'][P]>>  :
        P extends 'friendRequestToes' ? Array < FacebookFriendRequestGetPayload<S['include'][P]>>  :
        P extends 'friendRelationFroms' ? Array < FacebookUserRelationGetPayload<S['include'][P]>>  :
        P extends 'friendRelationToes' ? Array < FacebookUserRelationGetPayload<S['include'][P]>>  :
        P extends 'messengeFroms' ? Array < FacebookMessengerGetPayload<S['include'][P]>>  :
        P extends 'messengeToes' ? Array < FacebookMessengerGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookUserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookUserArgs | FacebookUserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['select'][P]>>  :
        P extends 'groupcreater' ? Array < FacebookGroupGetPayload<S['select'][P]>>  :
        P extends 'groupMember' ? Array < FacebookGroupGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < FacebookCommentGetPayload<S['select'][P]>>  :
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['select'][P]>>  :
        P extends 'friendRequestFroms' ? Array < FacebookFriendRequestGetPayload<S['select'][P]>>  :
        P extends 'friendRequestToes' ? Array < FacebookFriendRequestGetPayload<S['select'][P]>>  :
        P extends 'friendRelationFroms' ? Array < FacebookUserRelationGetPayload<S['select'][P]>>  :
        P extends 'friendRelationToes' ? Array < FacebookUserRelationGetPayload<S['select'][P]>>  :
        P extends 'messengeFroms' ? Array < FacebookMessengerGetPayload<S['select'][P]>>  :
        P extends 'messengeToes' ? Array < FacebookMessengerGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookUserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookUser ? FacebookUser[P] : never
  } 
      : FacebookUser


  type FacebookUserCountArgs = 
    Omit<FacebookUserFindManyArgs, 'select' | 'include'> & {
      select?: FacebookUserCountAggregateInputType | true
    }

  export interface FacebookUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookUser that matches the filter.
     * @param {FacebookUserFindUniqueArgs} args - Arguments to find a FacebookUser
     * @example
     * // Get one FacebookUser
     * const facebookUser = await prisma.facebookUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookUserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookUserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookUser'> extends True ? Prisma__FacebookUserClient<FacebookUserGetPayload<T>> : Prisma__FacebookUserClient<FacebookUserGetPayload<T> | null, null>

    /**
     * Find one FacebookUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookUserFindUniqueOrThrowArgs} args - Arguments to find a FacebookUser
     * @example
     * // Get one FacebookUser
     * const facebookUser = await prisma.facebookUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookUserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookUserFindUniqueOrThrowArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Find the first FacebookUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserFindFirstArgs} args - Arguments to find a FacebookUser
     * @example
     * // Get one FacebookUser
     * const facebookUser = await prisma.facebookUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookUserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookUserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookUser'> extends True ? Prisma__FacebookUserClient<FacebookUserGetPayload<T>> : Prisma__FacebookUserClient<FacebookUserGetPayload<T> | null, null>

    /**
     * Find the first FacebookUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserFindFirstOrThrowArgs} args - Arguments to find a FacebookUser
     * @example
     * // Get one FacebookUser
     * const facebookUser = await prisma.facebookUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookUserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookUserFindFirstOrThrowArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Find zero or more FacebookUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookUsers
     * const facebookUsers = await prisma.facebookUser.findMany()
     * 
     * // Get first 10 FacebookUsers
     * const facebookUsers = await prisma.facebookUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookUserWithIdOnly = await prisma.facebookUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookUserFindManyArgs>(
      args?: SelectSubset<T, FacebookUserFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookUserGetPayload<T>>>

    /**
     * Create a FacebookUser.
     * @param {FacebookUserCreateArgs} args - Arguments to create a FacebookUser.
     * @example
     * // Create one FacebookUser
     * const FacebookUser = await prisma.facebookUser.create({
     *   data: {
     *     // ... data to create a FacebookUser
     *   }
     * })
     * 
    **/
    create<T extends FacebookUserCreateArgs>(
      args: SelectSubset<T, FacebookUserCreateArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Create many FacebookUsers.
     *     @param {FacebookUserCreateManyArgs} args - Arguments to create many FacebookUsers.
     *     @example
     *     // Create many FacebookUsers
     *     const facebookUser = await prisma.facebookUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookUserCreateManyArgs>(
      args?: SelectSubset<T, FacebookUserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookUser.
     * @param {FacebookUserDeleteArgs} args - Arguments to delete one FacebookUser.
     * @example
     * // Delete one FacebookUser
     * const FacebookUser = await prisma.facebookUser.delete({
     *   where: {
     *     // ... filter to delete one FacebookUser
     *   }
     * })
     * 
    **/
    delete<T extends FacebookUserDeleteArgs>(
      args: SelectSubset<T, FacebookUserDeleteArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Update one FacebookUser.
     * @param {FacebookUserUpdateArgs} args - Arguments to update one FacebookUser.
     * @example
     * // Update one FacebookUser
     * const facebookUser = await prisma.facebookUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookUserUpdateArgs>(
      args: SelectSubset<T, FacebookUserUpdateArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Delete zero or more FacebookUsers.
     * @param {FacebookUserDeleteManyArgs} args - Arguments to filter FacebookUsers to delete.
     * @example
     * // Delete a few FacebookUsers
     * const { count } = await prisma.facebookUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookUserDeleteManyArgs>(
      args?: SelectSubset<T, FacebookUserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookUsers
     * const facebookUser = await prisma.facebookUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookUserUpdateManyArgs>(
      args: SelectSubset<T, FacebookUserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookUser.
     * @param {FacebookUserUpsertArgs} args - Arguments to update or create a FacebookUser.
     * @example
     * // Update or create a FacebookUser
     * const facebookUser = await prisma.facebookUser.upsert({
     *   create: {
     *     // ... data to create a FacebookUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookUser we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookUserUpsertArgs>(
      args: SelectSubset<T, FacebookUserUpsertArgs>
    ): Prisma__FacebookUserClient<FacebookUserGetPayload<T>>

    /**
     * Count the number of FacebookUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserCountArgs} args - Arguments to filter FacebookUsers to count.
     * @example
     * // Count the number of FacebookUsers
     * const count = await prisma.facebookUser.count({
     *   where: {
     *     // ... the filter for the FacebookUsers we want to count
     *   }
     * })
    **/
    count<T extends FacebookUserCountArgs>(
      args?: Subset<T, FacebookUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookUserAggregateArgs>(args: Subset<T, FacebookUserAggregateArgs>): Prisma.PrismaPromise<GetFacebookUserAggregateType<T>>

    /**
     * Group by FacebookUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookUserGroupByArgs['orderBy'] }
        : { orderBy?: FacebookUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookUserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends FacebookUser$postsArgs= {}>(args?: Subset<T, FacebookUser$postsArgs>): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>| Null>;

    groupcreater<T extends FacebookUser$groupcreaterArgs= {}>(args?: Subset<T, FacebookUser$groupcreaterArgs>): Prisma.PrismaPromise<Array<FacebookGroupGetPayload<T>>| Null>;

    groupMember<T extends FacebookUser$groupMemberArgs= {}>(args?: Subset<T, FacebookUser$groupMemberArgs>): Prisma.PrismaPromise<Array<FacebookGroupGetPayload<T>>| Null>;

    comments<T extends FacebookUser$commentsArgs= {}>(args?: Subset<T, FacebookUser$commentsArgs>): Prisma.PrismaPromise<Array<FacebookCommentGetPayload<T>>| Null>;

    likePosts<T extends FacebookUser$likePostsArgs= {}>(args?: Subset<T, FacebookUser$likePostsArgs>): Prisma.PrismaPromise<Array<FacebookLikePostGetPayload<T>>| Null>;

    likeComments<T extends FacebookUser$likeCommentsArgs= {}>(args?: Subset<T, FacebookUser$likeCommentsArgs>): Prisma.PrismaPromise<Array<FacebookLikeCommentGetPayload<T>>| Null>;

    friendRequestFroms<T extends FacebookUser$friendRequestFromsArgs= {}>(args?: Subset<T, FacebookUser$friendRequestFromsArgs>): Prisma.PrismaPromise<Array<FacebookFriendRequestGetPayload<T>>| Null>;

    friendRequestToes<T extends FacebookUser$friendRequestToesArgs= {}>(args?: Subset<T, FacebookUser$friendRequestToesArgs>): Prisma.PrismaPromise<Array<FacebookFriendRequestGetPayload<T>>| Null>;

    friendRelationFroms<T extends FacebookUser$friendRelationFromsArgs= {}>(args?: Subset<T, FacebookUser$friendRelationFromsArgs>): Prisma.PrismaPromise<Array<FacebookUserRelationGetPayload<T>>| Null>;

    friendRelationToes<T extends FacebookUser$friendRelationToesArgs= {}>(args?: Subset<T, FacebookUser$friendRelationToesArgs>): Prisma.PrismaPromise<Array<FacebookUserRelationGetPayload<T>>| Null>;

    messengeFroms<T extends FacebookUser$messengeFromsArgs= {}>(args?: Subset<T, FacebookUser$messengeFromsArgs>): Prisma.PrismaPromise<Array<FacebookMessengerGetPayload<T>>| Null>;

    messengeToes<T extends FacebookUser$messengeToesArgs= {}>(args?: Subset<T, FacebookUser$messengeToesArgs>): Prisma.PrismaPromise<Array<FacebookMessengerGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookUser base type for findUnique actions
   */
  export type FacebookUserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter, which FacebookUser to fetch.
     */
    where: FacebookUserWhereUniqueInput
  }

  /**
   * FacebookUser findUnique
   */
  export interface FacebookUserFindUniqueArgs extends FacebookUserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookUser findUniqueOrThrow
   */
  export type FacebookUserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter, which FacebookUser to fetch.
     */
    where: FacebookUserWhereUniqueInput
  }


  /**
   * FacebookUser base type for findFirst actions
   */
  export type FacebookUserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter, which FacebookUser to fetch.
     */
    where?: FacebookUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUsers to fetch.
     */
    orderBy?: Enumerable<FacebookUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookUsers.
     */
    cursor?: FacebookUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookUsers.
     */
    distinct?: Enumerable<FacebookUserScalarFieldEnum>
  }

  /**
   * FacebookUser findFirst
   */
  export interface FacebookUserFindFirstArgs extends FacebookUserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookUser findFirstOrThrow
   */
  export type FacebookUserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter, which FacebookUser to fetch.
     */
    where?: FacebookUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUsers to fetch.
     */
    orderBy?: Enumerable<FacebookUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookUsers.
     */
    cursor?: FacebookUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookUsers.
     */
    distinct?: Enumerable<FacebookUserScalarFieldEnum>
  }


  /**
   * FacebookUser findMany
   */
  export type FacebookUserFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter, which FacebookUsers to fetch.
     */
    where?: FacebookUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUsers to fetch.
     */
    orderBy?: Enumerable<FacebookUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookUsers.
     */
    cursor?: FacebookUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUsers.
     */
    skip?: number
    distinct?: Enumerable<FacebookUserScalarFieldEnum>
  }


  /**
   * FacebookUser create
   */
  export type FacebookUserCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * The data needed to create a FacebookUser.
     */
    data: XOR<FacebookUserCreateInput, FacebookUserUncheckedCreateInput>
  }


  /**
   * FacebookUser createMany
   */
  export type FacebookUserCreateManyArgs = {
    /**
     * The data used to create many FacebookUsers.
     */
    data: Enumerable<FacebookUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookUser update
   */
  export type FacebookUserUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * The data needed to update a FacebookUser.
     */
    data: XOR<FacebookUserUpdateInput, FacebookUserUncheckedUpdateInput>
    /**
     * Choose, which FacebookUser to update.
     */
    where: FacebookUserWhereUniqueInput
  }


  /**
   * FacebookUser updateMany
   */
  export type FacebookUserUpdateManyArgs = {
    /**
     * The data used to update FacebookUsers.
     */
    data: XOR<FacebookUserUpdateManyMutationInput, FacebookUserUncheckedUpdateManyInput>
    /**
     * Filter which FacebookUsers to update
     */
    where?: FacebookUserWhereInput
  }


  /**
   * FacebookUser upsert
   */
  export type FacebookUserUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * The filter to search for the FacebookUser to update in case it exists.
     */
    where: FacebookUserWhereUniqueInput
    /**
     * In case the FacebookUser found by the `where` argument doesn't exist, create a new FacebookUser with this data.
     */
    create: XOR<FacebookUserCreateInput, FacebookUserUncheckedCreateInput>
    /**
     * In case the FacebookUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookUserUpdateInput, FacebookUserUncheckedUpdateInput>
  }


  /**
   * FacebookUser delete
   */
  export type FacebookUserDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    /**
     * Filter which FacebookUser to delete.
     */
    where: FacebookUserWhereUniqueInput
  }


  /**
   * FacebookUser deleteMany
   */
  export type FacebookUserDeleteManyArgs = {
    /**
     * Filter which FacebookUsers to delete
     */
    where?: FacebookUserWhereInput
  }


  /**
   * FacebookUser.posts
   */
  export type FacebookUser$postsArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    cursor?: FacebookPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookUser.groupcreater
   */
  export type FacebookUser$groupcreaterArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    where?: FacebookGroupWhereInput
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    cursor?: FacebookGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookGroupScalarFieldEnum>
  }


  /**
   * FacebookUser.groupMember
   */
  export type FacebookUser$groupMemberArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    where?: FacebookGroupWhereInput
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    cursor?: FacebookGroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookGroupScalarFieldEnum>
  }


  /**
   * FacebookUser.comments
   */
  export type FacebookUser$commentsArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    where?: FacebookCommentWhereInput
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    cursor?: FacebookCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookCommentScalarFieldEnum>
  }


  /**
   * FacebookUser.likePosts
   */
  export type FacebookUser$likePostsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    where?: FacebookLikePostWhereInput
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    cursor?: FacebookLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }


  /**
   * FacebookUser.likeComments
   */
  export type FacebookUser$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    where?: FacebookLikeCommentWhereInput
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    cursor?: FacebookLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }


  /**
   * FacebookUser.friendRequestFroms
   */
  export type FacebookUser$friendRequestFromsArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    where?: FacebookFriendRequestWhereInput
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    cursor?: FacebookFriendRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookFriendRequestScalarFieldEnum>
  }


  /**
   * FacebookUser.friendRequestToes
   */
  export type FacebookUser$friendRequestToesArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    where?: FacebookFriendRequestWhereInput
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    cursor?: FacebookFriendRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookFriendRequestScalarFieldEnum>
  }


  /**
   * FacebookUser.friendRelationFroms
   */
  export type FacebookUser$friendRelationFromsArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    where?: FacebookUserRelationWhereInput
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    cursor?: FacebookUserRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookUserRelationScalarFieldEnum>
  }


  /**
   * FacebookUser.friendRelationToes
   */
  export type FacebookUser$friendRelationToesArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    where?: FacebookUserRelationWhereInput
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    cursor?: FacebookUserRelationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookUserRelationScalarFieldEnum>
  }


  /**
   * FacebookUser.messengeFroms
   */
  export type FacebookUser$messengeFromsArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    where?: FacebookMessengerWhereInput
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    cursor?: FacebookMessengerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookMessengerScalarFieldEnum>
  }


  /**
   * FacebookUser.messengeToes
   */
  export type FacebookUser$messengeToesArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    where?: FacebookMessengerWhereInput
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    cursor?: FacebookMessengerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookMessengerScalarFieldEnum>
  }


  /**
   * FacebookUser without action
   */
  export type FacebookUserArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
  }



  /**
   * Model FacebookGroup
   */


  export type AggregateFacebookGroup = {
    _count: FacebookGroupCountAggregateOutputType | null
    _avg: FacebookGroupAvgAggregateOutputType | null
    _sum: FacebookGroupSumAggregateOutputType | null
    _min: FacebookGroupMinAggregateOutputType | null
    _max: FacebookGroupMaxAggregateOutputType | null
  }

  export type FacebookGroupAvgAggregateOutputType = {
    id: number | null
    createrUserId: number | null
  }

  export type FacebookGroupSumAggregateOutputType = {
    id: number | null
    createrUserId: number | null
  }

  export type FacebookGroupMinAggregateOutputType = {
    id: number | null
    GroupImage: string | null
    coverImage: string | null
    name: string | null
    createrUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookGroupMaxAggregateOutputType = {
    id: number | null
    GroupImage: string | null
    coverImage: string | null
    name: string | null
    createrUserId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookGroupCountAggregateOutputType = {
    id: number
    GroupImage: number
    coverImage: number
    name: number
    createrUserId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookGroupAvgAggregateInputType = {
    id?: true
    createrUserId?: true
  }

  export type FacebookGroupSumAggregateInputType = {
    id?: true
    createrUserId?: true
  }

  export type FacebookGroupMinAggregateInputType = {
    id?: true
    GroupImage?: true
    coverImage?: true
    name?: true
    createrUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookGroupMaxAggregateInputType = {
    id?: true
    GroupImage?: true
    coverImage?: true
    name?: true
    createrUserId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookGroupCountAggregateInputType = {
    id?: true
    GroupImage?: true
    coverImage?: true
    name?: true
    createrUserId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookGroupAggregateArgs = {
    /**
     * Filter which FacebookGroup to aggregate.
     */
    where?: FacebookGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookGroups to fetch.
     */
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookGroups
    **/
    _count?: true | FacebookGroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookGroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookGroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookGroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookGroupMaxAggregateInputType
  }

  export type GetFacebookGroupAggregateType<T extends FacebookGroupAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookGroup[P]>
      : GetScalarType<T[P], AggregateFacebookGroup[P]>
  }




  export type FacebookGroupGroupByArgs = {
    where?: FacebookGroupWhereInput
    orderBy?: Enumerable<FacebookGroupOrderByWithAggregationInput>
    by: FacebookGroupScalarFieldEnum[]
    having?: FacebookGroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookGroupCountAggregateInputType | true
    _avg?: FacebookGroupAvgAggregateInputType
    _sum?: FacebookGroupSumAggregateInputType
    _min?: FacebookGroupMinAggregateInputType
    _max?: FacebookGroupMaxAggregateInputType
  }


  export type FacebookGroupGroupByOutputType = {
    id: number
    GroupImage: string
    coverImage: string
    name: string
    createrUserId: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookGroupCountAggregateOutputType | null
    _avg: FacebookGroupAvgAggregateOutputType | null
    _sum: FacebookGroupSumAggregateOutputType | null
    _min: FacebookGroupMinAggregateOutputType | null
    _max: FacebookGroupMaxAggregateOutputType | null
  }

  type GetFacebookGroupGroupByPayload<T extends FacebookGroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookGroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookGroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookGroupGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookGroupGroupByOutputType[P]>
        }
      >
    >


  export type FacebookGroupSelect = {
    id?: boolean
    GroupImage?: boolean
    coverImage?: boolean
    name?: boolean
    createrUser?: boolean | FacebookUserArgs
    createrUserId?: boolean
    memberUsers?: boolean | FacebookGroup$memberUsersArgs
    createdAt?: boolean
    updatedAt?: boolean
    _count?: boolean | FacebookGroupCountOutputTypeArgs
  }


  export type FacebookGroupInclude = {
    createrUser?: boolean | FacebookUserArgs
    memberUsers?: boolean | FacebookGroup$memberUsersArgs
    _count?: boolean | FacebookGroupCountOutputTypeArgs
  }

  export type FacebookGroupGetPayload<S extends boolean | null | undefined | FacebookGroupArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookGroup :
    S extends undefined ? never :
    S extends { include: any } & (FacebookGroupArgs | FacebookGroupFindManyArgs)
    ? FacebookGroup  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'createrUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'memberUsers' ? Array < FacebookUserGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookGroupCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookGroupArgs | FacebookGroupFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'createrUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'memberUsers' ? Array < FacebookUserGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookGroupCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookGroup ? FacebookGroup[P] : never
  } 
      : FacebookGroup


  type FacebookGroupCountArgs = 
    Omit<FacebookGroupFindManyArgs, 'select' | 'include'> & {
      select?: FacebookGroupCountAggregateInputType | true
    }

  export interface FacebookGroupDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookGroup that matches the filter.
     * @param {FacebookGroupFindUniqueArgs} args - Arguments to find a FacebookGroup
     * @example
     * // Get one FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookGroupFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookGroupFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookGroup'> extends True ? Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>> : Prisma__FacebookGroupClient<FacebookGroupGetPayload<T> | null, null>

    /**
     * Find one FacebookGroup that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookGroupFindUniqueOrThrowArgs} args - Arguments to find a FacebookGroup
     * @example
     * // Get one FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookGroupFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookGroupFindUniqueOrThrowArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Find the first FacebookGroup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupFindFirstArgs} args - Arguments to find a FacebookGroup
     * @example
     * // Get one FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookGroupFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookGroupFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookGroup'> extends True ? Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>> : Prisma__FacebookGroupClient<FacebookGroupGetPayload<T> | null, null>

    /**
     * Find the first FacebookGroup that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupFindFirstOrThrowArgs} args - Arguments to find a FacebookGroup
     * @example
     * // Get one FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookGroupFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookGroupFindFirstOrThrowArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Find zero or more FacebookGroups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookGroups
     * const facebookGroups = await prisma.facebookGroup.findMany()
     * 
     * // Get first 10 FacebookGroups
     * const facebookGroups = await prisma.facebookGroup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookGroupWithIdOnly = await prisma.facebookGroup.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookGroupFindManyArgs>(
      args?: SelectSubset<T, FacebookGroupFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookGroupGetPayload<T>>>

    /**
     * Create a FacebookGroup.
     * @param {FacebookGroupCreateArgs} args - Arguments to create a FacebookGroup.
     * @example
     * // Create one FacebookGroup
     * const FacebookGroup = await prisma.facebookGroup.create({
     *   data: {
     *     // ... data to create a FacebookGroup
     *   }
     * })
     * 
    **/
    create<T extends FacebookGroupCreateArgs>(
      args: SelectSubset<T, FacebookGroupCreateArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Create many FacebookGroups.
     *     @param {FacebookGroupCreateManyArgs} args - Arguments to create many FacebookGroups.
     *     @example
     *     // Create many FacebookGroups
     *     const facebookGroup = await prisma.facebookGroup.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookGroupCreateManyArgs>(
      args?: SelectSubset<T, FacebookGroupCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookGroup.
     * @param {FacebookGroupDeleteArgs} args - Arguments to delete one FacebookGroup.
     * @example
     * // Delete one FacebookGroup
     * const FacebookGroup = await prisma.facebookGroup.delete({
     *   where: {
     *     // ... filter to delete one FacebookGroup
     *   }
     * })
     * 
    **/
    delete<T extends FacebookGroupDeleteArgs>(
      args: SelectSubset<T, FacebookGroupDeleteArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Update one FacebookGroup.
     * @param {FacebookGroupUpdateArgs} args - Arguments to update one FacebookGroup.
     * @example
     * // Update one FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookGroupUpdateArgs>(
      args: SelectSubset<T, FacebookGroupUpdateArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Delete zero or more FacebookGroups.
     * @param {FacebookGroupDeleteManyArgs} args - Arguments to filter FacebookGroups to delete.
     * @example
     * // Delete a few FacebookGroups
     * const { count } = await prisma.facebookGroup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookGroupDeleteManyArgs>(
      args?: SelectSubset<T, FacebookGroupDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookGroups
     * const facebookGroup = await prisma.facebookGroup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookGroupUpdateManyArgs>(
      args: SelectSubset<T, FacebookGroupUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookGroup.
     * @param {FacebookGroupUpsertArgs} args - Arguments to update or create a FacebookGroup.
     * @example
     * // Update or create a FacebookGroup
     * const facebookGroup = await prisma.facebookGroup.upsert({
     *   create: {
     *     // ... data to create a FacebookGroup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookGroup we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookGroupUpsertArgs>(
      args: SelectSubset<T, FacebookGroupUpsertArgs>
    ): Prisma__FacebookGroupClient<FacebookGroupGetPayload<T>>

    /**
     * Count the number of FacebookGroups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupCountArgs} args - Arguments to filter FacebookGroups to count.
     * @example
     * // Count the number of FacebookGroups
     * const count = await prisma.facebookGroup.count({
     *   where: {
     *     // ... the filter for the FacebookGroups we want to count
     *   }
     * })
    **/
    count<T extends FacebookGroupCountArgs>(
      args?: Subset<T, FacebookGroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookGroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookGroupAggregateArgs>(args: Subset<T, FacebookGroupAggregateArgs>): Prisma.PrismaPromise<GetFacebookGroupAggregateType<T>>

    /**
     * Group by FacebookGroup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookGroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookGroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookGroupGroupByArgs['orderBy'] }
        : { orderBy?: FacebookGroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookGroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookGroup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookGroupClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    createrUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    memberUsers<T extends FacebookGroup$memberUsersArgs= {}>(args?: Subset<T, FacebookGroup$memberUsersArgs>): Prisma.PrismaPromise<Array<FacebookUserGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookGroup base type for findUnique actions
   */
  export type FacebookGroupFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter, which FacebookGroup to fetch.
     */
    where: FacebookGroupWhereUniqueInput
  }

  /**
   * FacebookGroup findUnique
   */
  export interface FacebookGroupFindUniqueArgs extends FacebookGroupFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookGroup findUniqueOrThrow
   */
  export type FacebookGroupFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter, which FacebookGroup to fetch.
     */
    where: FacebookGroupWhereUniqueInput
  }


  /**
   * FacebookGroup base type for findFirst actions
   */
  export type FacebookGroupFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter, which FacebookGroup to fetch.
     */
    where?: FacebookGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookGroups to fetch.
     */
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookGroups.
     */
    cursor?: FacebookGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookGroups.
     */
    distinct?: Enumerable<FacebookGroupScalarFieldEnum>
  }

  /**
   * FacebookGroup findFirst
   */
  export interface FacebookGroupFindFirstArgs extends FacebookGroupFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookGroup findFirstOrThrow
   */
  export type FacebookGroupFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter, which FacebookGroup to fetch.
     */
    where?: FacebookGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookGroups to fetch.
     */
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookGroups.
     */
    cursor?: FacebookGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookGroups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookGroups.
     */
    distinct?: Enumerable<FacebookGroupScalarFieldEnum>
  }


  /**
   * FacebookGroup findMany
   */
  export type FacebookGroupFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter, which FacebookGroups to fetch.
     */
    where?: FacebookGroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookGroups to fetch.
     */
    orderBy?: Enumerable<FacebookGroupOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookGroups.
     */
    cursor?: FacebookGroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookGroups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookGroups.
     */
    skip?: number
    distinct?: Enumerable<FacebookGroupScalarFieldEnum>
  }


  /**
   * FacebookGroup create
   */
  export type FacebookGroupCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * The data needed to create a FacebookGroup.
     */
    data: XOR<FacebookGroupCreateInput, FacebookGroupUncheckedCreateInput>
  }


  /**
   * FacebookGroup createMany
   */
  export type FacebookGroupCreateManyArgs = {
    /**
     * The data used to create many FacebookGroups.
     */
    data: Enumerable<FacebookGroupCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookGroup update
   */
  export type FacebookGroupUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * The data needed to update a FacebookGroup.
     */
    data: XOR<FacebookGroupUpdateInput, FacebookGroupUncheckedUpdateInput>
    /**
     * Choose, which FacebookGroup to update.
     */
    where: FacebookGroupWhereUniqueInput
  }


  /**
   * FacebookGroup updateMany
   */
  export type FacebookGroupUpdateManyArgs = {
    /**
     * The data used to update FacebookGroups.
     */
    data: XOR<FacebookGroupUpdateManyMutationInput, FacebookGroupUncheckedUpdateManyInput>
    /**
     * Filter which FacebookGroups to update
     */
    where?: FacebookGroupWhereInput
  }


  /**
   * FacebookGroup upsert
   */
  export type FacebookGroupUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * The filter to search for the FacebookGroup to update in case it exists.
     */
    where: FacebookGroupWhereUniqueInput
    /**
     * In case the FacebookGroup found by the `where` argument doesn't exist, create a new FacebookGroup with this data.
     */
    create: XOR<FacebookGroupCreateInput, FacebookGroupUncheckedCreateInput>
    /**
     * In case the FacebookGroup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookGroupUpdateInput, FacebookGroupUncheckedUpdateInput>
  }


  /**
   * FacebookGroup delete
   */
  export type FacebookGroupDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
    /**
     * Filter which FacebookGroup to delete.
     */
    where: FacebookGroupWhereUniqueInput
  }


  /**
   * FacebookGroup deleteMany
   */
  export type FacebookGroupDeleteManyArgs = {
    /**
     * Filter which FacebookGroups to delete
     */
    where?: FacebookGroupWhereInput
  }


  /**
   * FacebookGroup.memberUsers
   */
  export type FacebookGroup$memberUsersArgs = {
    /**
     * Select specific fields to fetch from the FacebookUser
     */
    select?: FacebookUserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserInclude | null
    where?: FacebookUserWhereInput
    orderBy?: Enumerable<FacebookUserOrderByWithRelationInput>
    cursor?: FacebookUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookUserScalarFieldEnum>
  }


  /**
   * FacebookGroup without action
   */
  export type FacebookGroupArgs = {
    /**
     * Select specific fields to fetch from the FacebookGroup
     */
    select?: FacebookGroupSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookGroupInclude | null
  }



  /**
   * Model FacebookPostDestination
   */


  export type AggregateFacebookPostDestination = {
    _count: FacebookPostDestinationCountAggregateOutputType | null
    _avg: FacebookPostDestinationAvgAggregateOutputType | null
    _sum: FacebookPostDestinationSumAggregateOutputType | null
    _min: FacebookPostDestinationMinAggregateOutputType | null
    _max: FacebookPostDestinationMaxAggregateOutputType | null
  }

  export type FacebookPostDestinationAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookPostDestinationSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookPostDestinationMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostDestinationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostDestinationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookPostDestinationAvgAggregateInputType = {
    id?: true
  }

  export type FacebookPostDestinationSumAggregateInputType = {
    id?: true
  }

  export type FacebookPostDestinationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostDestinationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostDestinationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookPostDestinationAggregateArgs = {
    /**
     * Filter which FacebookPostDestination to aggregate.
     */
    where?: FacebookPostDestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostDestinations to fetch.
     */
    orderBy?: Enumerable<FacebookPostDestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookPostDestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostDestinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostDestinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookPostDestinations
    **/
    _count?: true | FacebookPostDestinationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookPostDestinationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookPostDestinationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookPostDestinationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookPostDestinationMaxAggregateInputType
  }

  export type GetFacebookPostDestinationAggregateType<T extends FacebookPostDestinationAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookPostDestination]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookPostDestination[P]>
      : GetScalarType<T[P], AggregateFacebookPostDestination[P]>
  }




  export type FacebookPostDestinationGroupByArgs = {
    where?: FacebookPostDestinationWhereInput
    orderBy?: Enumerable<FacebookPostDestinationOrderByWithAggregationInput>
    by: FacebookPostDestinationScalarFieldEnum[]
    having?: FacebookPostDestinationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookPostDestinationCountAggregateInputType | true
    _avg?: FacebookPostDestinationAvgAggregateInputType
    _sum?: FacebookPostDestinationSumAggregateInputType
    _min?: FacebookPostDestinationMinAggregateInputType
    _max?: FacebookPostDestinationMaxAggregateInputType
  }


  export type FacebookPostDestinationGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookPostDestinationCountAggregateOutputType | null
    _avg: FacebookPostDestinationAvgAggregateOutputType | null
    _sum: FacebookPostDestinationSumAggregateOutputType | null
    _min: FacebookPostDestinationMinAggregateOutputType | null
    _max: FacebookPostDestinationMaxAggregateOutputType | null
  }

  type GetFacebookPostDestinationGroupByPayload<T extends FacebookPostDestinationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookPostDestinationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookPostDestinationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookPostDestinationGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookPostDestinationGroupByOutputType[P]>
        }
      >
    >


  export type FacebookPostDestinationSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | FacebookPostDestination$postsArgs
    _count?: boolean | FacebookPostDestinationCountOutputTypeArgs
  }


  export type FacebookPostDestinationInclude = {
    posts?: boolean | FacebookPostDestination$postsArgs
    _count?: boolean | FacebookPostDestinationCountOutputTypeArgs
  }

  export type FacebookPostDestinationGetPayload<S extends boolean | null | undefined | FacebookPostDestinationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPostDestination :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostDestinationArgs | FacebookPostDestinationFindManyArgs)
    ? FacebookPostDestination  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookPostDestinationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookPostDestinationArgs | FacebookPostDestinationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookPostDestinationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookPostDestination ? FacebookPostDestination[P] : never
  } 
      : FacebookPostDestination


  type FacebookPostDestinationCountArgs = 
    Omit<FacebookPostDestinationFindManyArgs, 'select' | 'include'> & {
      select?: FacebookPostDestinationCountAggregateInputType | true
    }

  export interface FacebookPostDestinationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookPostDestination that matches the filter.
     * @param {FacebookPostDestinationFindUniqueArgs} args - Arguments to find a FacebookPostDestination
     * @example
     * // Get one FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookPostDestinationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookPostDestinationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookPostDestination'> extends True ? Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>> : Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T> | null, null>

    /**
     * Find one FacebookPostDestination that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookPostDestinationFindUniqueOrThrowArgs} args - Arguments to find a FacebookPostDestination
     * @example
     * // Get one FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookPostDestinationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostDestinationFindUniqueOrThrowArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Find the first FacebookPostDestination that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationFindFirstArgs} args - Arguments to find a FacebookPostDestination
     * @example
     * // Get one FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookPostDestinationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookPostDestinationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookPostDestination'> extends True ? Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>> : Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T> | null, null>

    /**
     * Find the first FacebookPostDestination that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationFindFirstOrThrowArgs} args - Arguments to find a FacebookPostDestination
     * @example
     * // Get one FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookPostDestinationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostDestinationFindFirstOrThrowArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Find zero or more FacebookPostDestinations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookPostDestinations
     * const facebookPostDestinations = await prisma.facebookPostDestination.findMany()
     * 
     * // Get first 10 FacebookPostDestinations
     * const facebookPostDestinations = await prisma.facebookPostDestination.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookPostDestinationWithIdOnly = await prisma.facebookPostDestination.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookPostDestinationFindManyArgs>(
      args?: SelectSubset<T, FacebookPostDestinationFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookPostDestinationGetPayload<T>>>

    /**
     * Create a FacebookPostDestination.
     * @param {FacebookPostDestinationCreateArgs} args - Arguments to create a FacebookPostDestination.
     * @example
     * // Create one FacebookPostDestination
     * const FacebookPostDestination = await prisma.facebookPostDestination.create({
     *   data: {
     *     // ... data to create a FacebookPostDestination
     *   }
     * })
     * 
    **/
    create<T extends FacebookPostDestinationCreateArgs>(
      args: SelectSubset<T, FacebookPostDestinationCreateArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Create many FacebookPostDestinations.
     *     @param {FacebookPostDestinationCreateManyArgs} args - Arguments to create many FacebookPostDestinations.
     *     @example
     *     // Create many FacebookPostDestinations
     *     const facebookPostDestination = await prisma.facebookPostDestination.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookPostDestinationCreateManyArgs>(
      args?: SelectSubset<T, FacebookPostDestinationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookPostDestination.
     * @param {FacebookPostDestinationDeleteArgs} args - Arguments to delete one FacebookPostDestination.
     * @example
     * // Delete one FacebookPostDestination
     * const FacebookPostDestination = await prisma.facebookPostDestination.delete({
     *   where: {
     *     // ... filter to delete one FacebookPostDestination
     *   }
     * })
     * 
    **/
    delete<T extends FacebookPostDestinationDeleteArgs>(
      args: SelectSubset<T, FacebookPostDestinationDeleteArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Update one FacebookPostDestination.
     * @param {FacebookPostDestinationUpdateArgs} args - Arguments to update one FacebookPostDestination.
     * @example
     * // Update one FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookPostDestinationUpdateArgs>(
      args: SelectSubset<T, FacebookPostDestinationUpdateArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Delete zero or more FacebookPostDestinations.
     * @param {FacebookPostDestinationDeleteManyArgs} args - Arguments to filter FacebookPostDestinations to delete.
     * @example
     * // Delete a few FacebookPostDestinations
     * const { count } = await prisma.facebookPostDestination.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookPostDestinationDeleteManyArgs>(
      args?: SelectSubset<T, FacebookPostDestinationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookPostDestinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookPostDestinations
     * const facebookPostDestination = await prisma.facebookPostDestination.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookPostDestinationUpdateManyArgs>(
      args: SelectSubset<T, FacebookPostDestinationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookPostDestination.
     * @param {FacebookPostDestinationUpsertArgs} args - Arguments to update or create a FacebookPostDestination.
     * @example
     * // Update or create a FacebookPostDestination
     * const facebookPostDestination = await prisma.facebookPostDestination.upsert({
     *   create: {
     *     // ... data to create a FacebookPostDestination
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookPostDestination we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookPostDestinationUpsertArgs>(
      args: SelectSubset<T, FacebookPostDestinationUpsertArgs>
    ): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T>>

    /**
     * Count the number of FacebookPostDestinations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationCountArgs} args - Arguments to filter FacebookPostDestinations to count.
     * @example
     * // Count the number of FacebookPostDestinations
     * const count = await prisma.facebookPostDestination.count({
     *   where: {
     *     // ... the filter for the FacebookPostDestinations we want to count
     *   }
     * })
    **/
    count<T extends FacebookPostDestinationCountArgs>(
      args?: Subset<T, FacebookPostDestinationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookPostDestinationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookPostDestination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookPostDestinationAggregateArgs>(args: Subset<T, FacebookPostDestinationAggregateArgs>): Prisma.PrismaPromise<GetFacebookPostDestinationAggregateType<T>>

    /**
     * Group by FacebookPostDestination.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostDestinationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookPostDestinationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookPostDestinationGroupByArgs['orderBy'] }
        : { orderBy?: FacebookPostDestinationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookPostDestinationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookPostDestinationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookPostDestination.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookPostDestinationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends FacebookPostDestination$postsArgs= {}>(args?: Subset<T, FacebookPostDestination$postsArgs>): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookPostDestination base type for findUnique actions
   */
  export type FacebookPostDestinationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter, which FacebookPostDestination to fetch.
     */
    where: FacebookPostDestinationWhereUniqueInput
  }

  /**
   * FacebookPostDestination findUnique
   */
  export interface FacebookPostDestinationFindUniqueArgs extends FacebookPostDestinationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPostDestination findUniqueOrThrow
   */
  export type FacebookPostDestinationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter, which FacebookPostDestination to fetch.
     */
    where: FacebookPostDestinationWhereUniqueInput
  }


  /**
   * FacebookPostDestination base type for findFirst actions
   */
  export type FacebookPostDestinationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter, which FacebookPostDestination to fetch.
     */
    where?: FacebookPostDestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostDestinations to fetch.
     */
    orderBy?: Enumerable<FacebookPostDestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPostDestinations.
     */
    cursor?: FacebookPostDestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostDestinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostDestinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPostDestinations.
     */
    distinct?: Enumerable<FacebookPostDestinationScalarFieldEnum>
  }

  /**
   * FacebookPostDestination findFirst
   */
  export interface FacebookPostDestinationFindFirstArgs extends FacebookPostDestinationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPostDestination findFirstOrThrow
   */
  export type FacebookPostDestinationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter, which FacebookPostDestination to fetch.
     */
    where?: FacebookPostDestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostDestinations to fetch.
     */
    orderBy?: Enumerable<FacebookPostDestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPostDestinations.
     */
    cursor?: FacebookPostDestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostDestinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostDestinations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPostDestinations.
     */
    distinct?: Enumerable<FacebookPostDestinationScalarFieldEnum>
  }


  /**
   * FacebookPostDestination findMany
   */
  export type FacebookPostDestinationFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter, which FacebookPostDestinations to fetch.
     */
    where?: FacebookPostDestinationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostDestinations to fetch.
     */
    orderBy?: Enumerable<FacebookPostDestinationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookPostDestinations.
     */
    cursor?: FacebookPostDestinationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostDestinations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostDestinations.
     */
    skip?: number
    distinct?: Enumerable<FacebookPostDestinationScalarFieldEnum>
  }


  /**
   * FacebookPostDestination create
   */
  export type FacebookPostDestinationCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * The data needed to create a FacebookPostDestination.
     */
    data: XOR<FacebookPostDestinationCreateInput, FacebookPostDestinationUncheckedCreateInput>
  }


  /**
   * FacebookPostDestination createMany
   */
  export type FacebookPostDestinationCreateManyArgs = {
    /**
     * The data used to create many FacebookPostDestinations.
     */
    data: Enumerable<FacebookPostDestinationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookPostDestination update
   */
  export type FacebookPostDestinationUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * The data needed to update a FacebookPostDestination.
     */
    data: XOR<FacebookPostDestinationUpdateInput, FacebookPostDestinationUncheckedUpdateInput>
    /**
     * Choose, which FacebookPostDestination to update.
     */
    where: FacebookPostDestinationWhereUniqueInput
  }


  /**
   * FacebookPostDestination updateMany
   */
  export type FacebookPostDestinationUpdateManyArgs = {
    /**
     * The data used to update FacebookPostDestinations.
     */
    data: XOR<FacebookPostDestinationUpdateManyMutationInput, FacebookPostDestinationUncheckedUpdateManyInput>
    /**
     * Filter which FacebookPostDestinations to update
     */
    where?: FacebookPostDestinationWhereInput
  }


  /**
   * FacebookPostDestination upsert
   */
  export type FacebookPostDestinationUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * The filter to search for the FacebookPostDestination to update in case it exists.
     */
    where: FacebookPostDestinationWhereUniqueInput
    /**
     * In case the FacebookPostDestination found by the `where` argument doesn't exist, create a new FacebookPostDestination with this data.
     */
    create: XOR<FacebookPostDestinationCreateInput, FacebookPostDestinationUncheckedCreateInput>
    /**
     * In case the FacebookPostDestination was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookPostDestinationUpdateInput, FacebookPostDestinationUncheckedUpdateInput>
  }


  /**
   * FacebookPostDestination delete
   */
  export type FacebookPostDestinationDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
    /**
     * Filter which FacebookPostDestination to delete.
     */
    where: FacebookPostDestinationWhereUniqueInput
  }


  /**
   * FacebookPostDestination deleteMany
   */
  export type FacebookPostDestinationDeleteManyArgs = {
    /**
     * Filter which FacebookPostDestinations to delete
     */
    where?: FacebookPostDestinationWhereInput
  }


  /**
   * FacebookPostDestination.posts
   */
  export type FacebookPostDestination$postsArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    cursor?: FacebookPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookPostDestination without action
   */
  export type FacebookPostDestinationArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostDestination
     */
    select?: FacebookPostDestinationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostDestinationInclude | null
  }



  /**
   * Model FacebookPostType
   */


  export type AggregateFacebookPostType = {
    _count: FacebookPostTypeCountAggregateOutputType | null
    _avg: FacebookPostTypeAvgAggregateOutputType | null
    _sum: FacebookPostTypeSumAggregateOutputType | null
    _min: FacebookPostTypeMinAggregateOutputType | null
    _max: FacebookPostTypeMaxAggregateOutputType | null
  }

  export type FacebookPostTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookPostTypeSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookPostTypeMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostTypeMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostTypeCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookPostTypeAvgAggregateInputType = {
    id?: true
  }

  export type FacebookPostTypeSumAggregateInputType = {
    id?: true
  }

  export type FacebookPostTypeMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostTypeMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostTypeCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookPostTypeAggregateArgs = {
    /**
     * Filter which FacebookPostType to aggregate.
     */
    where?: FacebookPostTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostTypes to fetch.
     */
    orderBy?: Enumerable<FacebookPostTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookPostTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookPostTypes
    **/
    _count?: true | FacebookPostTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookPostTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookPostTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookPostTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookPostTypeMaxAggregateInputType
  }

  export type GetFacebookPostTypeAggregateType<T extends FacebookPostTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookPostType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookPostType[P]>
      : GetScalarType<T[P], AggregateFacebookPostType[P]>
  }




  export type FacebookPostTypeGroupByArgs = {
    where?: FacebookPostTypeWhereInput
    orderBy?: Enumerable<FacebookPostTypeOrderByWithAggregationInput>
    by: FacebookPostTypeScalarFieldEnum[]
    having?: FacebookPostTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookPostTypeCountAggregateInputType | true
    _avg?: FacebookPostTypeAvgAggregateInputType
    _sum?: FacebookPostTypeSumAggregateInputType
    _min?: FacebookPostTypeMinAggregateInputType
    _max?: FacebookPostTypeMaxAggregateInputType
  }


  export type FacebookPostTypeGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookPostTypeCountAggregateOutputType | null
    _avg: FacebookPostTypeAvgAggregateOutputType | null
    _sum: FacebookPostTypeSumAggregateOutputType | null
    _min: FacebookPostTypeMinAggregateOutputType | null
    _max: FacebookPostTypeMaxAggregateOutputType | null
  }

  type GetFacebookPostTypeGroupByPayload<T extends FacebookPostTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookPostTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookPostTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookPostTypeGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookPostTypeGroupByOutputType[P]>
        }
      >
    >


  export type FacebookPostTypeSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | FacebookPostType$postsArgs
    _count?: boolean | FacebookPostTypeCountOutputTypeArgs
  }


  export type FacebookPostTypeInclude = {
    posts?: boolean | FacebookPostType$postsArgs
    _count?: boolean | FacebookPostTypeCountOutputTypeArgs
  }

  export type FacebookPostTypeGetPayload<S extends boolean | null | undefined | FacebookPostTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPostType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostTypeArgs | FacebookPostTypeFindManyArgs)
    ? FacebookPostType  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookPostTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookPostTypeArgs | FacebookPostTypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookPostTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookPostType ? FacebookPostType[P] : never
  } 
      : FacebookPostType


  type FacebookPostTypeCountArgs = 
    Omit<FacebookPostTypeFindManyArgs, 'select' | 'include'> & {
      select?: FacebookPostTypeCountAggregateInputType | true
    }

  export interface FacebookPostTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookPostType that matches the filter.
     * @param {FacebookPostTypeFindUniqueArgs} args - Arguments to find a FacebookPostType
     * @example
     * // Get one FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookPostTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookPostTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookPostType'> extends True ? Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>> : Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T> | null, null>

    /**
     * Find one FacebookPostType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookPostTypeFindUniqueOrThrowArgs} args - Arguments to find a FacebookPostType
     * @example
     * // Get one FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookPostTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostTypeFindUniqueOrThrowArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Find the first FacebookPostType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeFindFirstArgs} args - Arguments to find a FacebookPostType
     * @example
     * // Get one FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookPostTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookPostTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookPostType'> extends True ? Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>> : Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T> | null, null>

    /**
     * Find the first FacebookPostType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeFindFirstOrThrowArgs} args - Arguments to find a FacebookPostType
     * @example
     * // Get one FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookPostTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostTypeFindFirstOrThrowArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Find zero or more FacebookPostTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookPostTypes
     * const facebookPostTypes = await prisma.facebookPostType.findMany()
     * 
     * // Get first 10 FacebookPostTypes
     * const facebookPostTypes = await prisma.facebookPostType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookPostTypeWithIdOnly = await prisma.facebookPostType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookPostTypeFindManyArgs>(
      args?: SelectSubset<T, FacebookPostTypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookPostTypeGetPayload<T>>>

    /**
     * Create a FacebookPostType.
     * @param {FacebookPostTypeCreateArgs} args - Arguments to create a FacebookPostType.
     * @example
     * // Create one FacebookPostType
     * const FacebookPostType = await prisma.facebookPostType.create({
     *   data: {
     *     // ... data to create a FacebookPostType
     *   }
     * })
     * 
    **/
    create<T extends FacebookPostTypeCreateArgs>(
      args: SelectSubset<T, FacebookPostTypeCreateArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Create many FacebookPostTypes.
     *     @param {FacebookPostTypeCreateManyArgs} args - Arguments to create many FacebookPostTypes.
     *     @example
     *     // Create many FacebookPostTypes
     *     const facebookPostType = await prisma.facebookPostType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookPostTypeCreateManyArgs>(
      args?: SelectSubset<T, FacebookPostTypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookPostType.
     * @param {FacebookPostTypeDeleteArgs} args - Arguments to delete one FacebookPostType.
     * @example
     * // Delete one FacebookPostType
     * const FacebookPostType = await prisma.facebookPostType.delete({
     *   where: {
     *     // ... filter to delete one FacebookPostType
     *   }
     * })
     * 
    **/
    delete<T extends FacebookPostTypeDeleteArgs>(
      args: SelectSubset<T, FacebookPostTypeDeleteArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Update one FacebookPostType.
     * @param {FacebookPostTypeUpdateArgs} args - Arguments to update one FacebookPostType.
     * @example
     * // Update one FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookPostTypeUpdateArgs>(
      args: SelectSubset<T, FacebookPostTypeUpdateArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Delete zero or more FacebookPostTypes.
     * @param {FacebookPostTypeDeleteManyArgs} args - Arguments to filter FacebookPostTypes to delete.
     * @example
     * // Delete a few FacebookPostTypes
     * const { count } = await prisma.facebookPostType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookPostTypeDeleteManyArgs>(
      args?: SelectSubset<T, FacebookPostTypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookPostTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookPostTypes
     * const facebookPostType = await prisma.facebookPostType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookPostTypeUpdateManyArgs>(
      args: SelectSubset<T, FacebookPostTypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookPostType.
     * @param {FacebookPostTypeUpsertArgs} args - Arguments to update or create a FacebookPostType.
     * @example
     * // Update or create a FacebookPostType
     * const facebookPostType = await prisma.facebookPostType.upsert({
     *   create: {
     *     // ... data to create a FacebookPostType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookPostType we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookPostTypeUpsertArgs>(
      args: SelectSubset<T, FacebookPostTypeUpsertArgs>
    ): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T>>

    /**
     * Count the number of FacebookPostTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeCountArgs} args - Arguments to filter FacebookPostTypes to count.
     * @example
     * // Count the number of FacebookPostTypes
     * const count = await prisma.facebookPostType.count({
     *   where: {
     *     // ... the filter for the FacebookPostTypes we want to count
     *   }
     * })
    **/
    count<T extends FacebookPostTypeCountArgs>(
      args?: Subset<T, FacebookPostTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookPostTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookPostType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookPostTypeAggregateArgs>(args: Subset<T, FacebookPostTypeAggregateArgs>): Prisma.PrismaPromise<GetFacebookPostTypeAggregateType<T>>

    /**
     * Group by FacebookPostType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookPostTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookPostTypeGroupByArgs['orderBy'] }
        : { orderBy?: FacebookPostTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookPostTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookPostTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookPostType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookPostTypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends FacebookPostType$postsArgs= {}>(args?: Subset<T, FacebookPostType$postsArgs>): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookPostType base type for findUnique actions
   */
  export type FacebookPostTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter, which FacebookPostType to fetch.
     */
    where: FacebookPostTypeWhereUniqueInput
  }

  /**
   * FacebookPostType findUnique
   */
  export interface FacebookPostTypeFindUniqueArgs extends FacebookPostTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPostType findUniqueOrThrow
   */
  export type FacebookPostTypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter, which FacebookPostType to fetch.
     */
    where: FacebookPostTypeWhereUniqueInput
  }


  /**
   * FacebookPostType base type for findFirst actions
   */
  export type FacebookPostTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter, which FacebookPostType to fetch.
     */
    where?: FacebookPostTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostTypes to fetch.
     */
    orderBy?: Enumerable<FacebookPostTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPostTypes.
     */
    cursor?: FacebookPostTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPostTypes.
     */
    distinct?: Enumerable<FacebookPostTypeScalarFieldEnum>
  }

  /**
   * FacebookPostType findFirst
   */
  export interface FacebookPostTypeFindFirstArgs extends FacebookPostTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPostType findFirstOrThrow
   */
  export type FacebookPostTypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter, which FacebookPostType to fetch.
     */
    where?: FacebookPostTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostTypes to fetch.
     */
    orderBy?: Enumerable<FacebookPostTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPostTypes.
     */
    cursor?: FacebookPostTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPostTypes.
     */
    distinct?: Enumerable<FacebookPostTypeScalarFieldEnum>
  }


  /**
   * FacebookPostType findMany
   */
  export type FacebookPostTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter, which FacebookPostTypes to fetch.
     */
    where?: FacebookPostTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPostTypes to fetch.
     */
    orderBy?: Enumerable<FacebookPostTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookPostTypes.
     */
    cursor?: FacebookPostTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPostTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPostTypes.
     */
    skip?: number
    distinct?: Enumerable<FacebookPostTypeScalarFieldEnum>
  }


  /**
   * FacebookPostType create
   */
  export type FacebookPostTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * The data needed to create a FacebookPostType.
     */
    data: XOR<FacebookPostTypeCreateInput, FacebookPostTypeUncheckedCreateInput>
  }


  /**
   * FacebookPostType createMany
   */
  export type FacebookPostTypeCreateManyArgs = {
    /**
     * The data used to create many FacebookPostTypes.
     */
    data: Enumerable<FacebookPostTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookPostType update
   */
  export type FacebookPostTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * The data needed to update a FacebookPostType.
     */
    data: XOR<FacebookPostTypeUpdateInput, FacebookPostTypeUncheckedUpdateInput>
    /**
     * Choose, which FacebookPostType to update.
     */
    where: FacebookPostTypeWhereUniqueInput
  }


  /**
   * FacebookPostType updateMany
   */
  export type FacebookPostTypeUpdateManyArgs = {
    /**
     * The data used to update FacebookPostTypes.
     */
    data: XOR<FacebookPostTypeUpdateManyMutationInput, FacebookPostTypeUncheckedUpdateManyInput>
    /**
     * Filter which FacebookPostTypes to update
     */
    where?: FacebookPostTypeWhereInput
  }


  /**
   * FacebookPostType upsert
   */
  export type FacebookPostTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * The filter to search for the FacebookPostType to update in case it exists.
     */
    where: FacebookPostTypeWhereUniqueInput
    /**
     * In case the FacebookPostType found by the `where` argument doesn't exist, create a new FacebookPostType with this data.
     */
    create: XOR<FacebookPostTypeCreateInput, FacebookPostTypeUncheckedCreateInput>
    /**
     * In case the FacebookPostType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookPostTypeUpdateInput, FacebookPostTypeUncheckedUpdateInput>
  }


  /**
   * FacebookPostType delete
   */
  export type FacebookPostTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
    /**
     * Filter which FacebookPostType to delete.
     */
    where: FacebookPostTypeWhereUniqueInput
  }


  /**
   * FacebookPostType deleteMany
   */
  export type FacebookPostTypeDeleteManyArgs = {
    /**
     * Filter which FacebookPostTypes to delete
     */
    where?: FacebookPostTypeWhereInput
  }


  /**
   * FacebookPostType.posts
   */
  export type FacebookPostType$postsArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    cursor?: FacebookPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookPostType without action
   */
  export type FacebookPostTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookPostType
     */
    select?: FacebookPostTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostTypeInclude | null
  }



  /**
   * Model FacebookLocation
   */


  export type AggregateFacebookLocation = {
    _count: FacebookLocationCountAggregateOutputType | null
    _avg: FacebookLocationAvgAggregateOutputType | null
    _sum: FacebookLocationSumAggregateOutputType | null
    _min: FacebookLocationMinAggregateOutputType | null
    _max: FacebookLocationMaxAggregateOutputType | null
  }

  export type FacebookLocationAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookLocationSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookLocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLocationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookLocationAvgAggregateInputType = {
    id?: true
  }

  export type FacebookLocationSumAggregateInputType = {
    id?: true
  }

  export type FacebookLocationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLocationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLocationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookLocationAggregateArgs = {
    /**
     * Filter which FacebookLocation to aggregate.
     */
    where?: FacebookLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLocations to fetch.
     */
    orderBy?: Enumerable<FacebookLocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookLocations
    **/
    _count?: true | FacebookLocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookLocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookLocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookLocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookLocationMaxAggregateInputType
  }

  export type GetFacebookLocationAggregateType<T extends FacebookLocationAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookLocation[P]>
      : GetScalarType<T[P], AggregateFacebookLocation[P]>
  }




  export type FacebookLocationGroupByArgs = {
    where?: FacebookLocationWhereInput
    orderBy?: Enumerable<FacebookLocationOrderByWithAggregationInput>
    by: FacebookLocationScalarFieldEnum[]
    having?: FacebookLocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookLocationCountAggregateInputType | true
    _avg?: FacebookLocationAvgAggregateInputType
    _sum?: FacebookLocationSumAggregateInputType
    _min?: FacebookLocationMinAggregateInputType
    _max?: FacebookLocationMaxAggregateInputType
  }


  export type FacebookLocationGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookLocationCountAggregateOutputType | null
    _avg: FacebookLocationAvgAggregateOutputType | null
    _sum: FacebookLocationSumAggregateOutputType | null
    _min: FacebookLocationMinAggregateOutputType | null
    _max: FacebookLocationMaxAggregateOutputType | null
  }

  type GetFacebookLocationGroupByPayload<T extends FacebookLocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookLocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookLocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookLocationGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookLocationGroupByOutputType[P]>
        }
      >
    >


  export type FacebookLocationSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | FacebookLocation$postsArgs
    _count?: boolean | FacebookLocationCountOutputTypeArgs
  }


  export type FacebookLocationInclude = {
    posts?: boolean | FacebookLocation$postsArgs
    _count?: boolean | FacebookLocationCountOutputTypeArgs
  }

  export type FacebookLocationGetPayload<S extends boolean | null | undefined | FacebookLocationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLocation :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLocationArgs | FacebookLocationFindManyArgs)
    ? FacebookLocation  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookLocationCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookLocationArgs | FacebookLocationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookLocationCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookLocation ? FacebookLocation[P] : never
  } 
      : FacebookLocation


  type FacebookLocationCountArgs = 
    Omit<FacebookLocationFindManyArgs, 'select' | 'include'> & {
      select?: FacebookLocationCountAggregateInputType | true
    }

  export interface FacebookLocationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookLocation that matches the filter.
     * @param {FacebookLocationFindUniqueArgs} args - Arguments to find a FacebookLocation
     * @example
     * // Get one FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookLocationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookLocationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookLocation'> extends True ? Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>> : Prisma__FacebookLocationClient<FacebookLocationGetPayload<T> | null, null>

    /**
     * Find one FacebookLocation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookLocationFindUniqueOrThrowArgs} args - Arguments to find a FacebookLocation
     * @example
     * // Get one FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookLocationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookLocationFindUniqueOrThrowArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Find the first FacebookLocation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationFindFirstArgs} args - Arguments to find a FacebookLocation
     * @example
     * // Get one FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookLocationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookLocationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookLocation'> extends True ? Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>> : Prisma__FacebookLocationClient<FacebookLocationGetPayload<T> | null, null>

    /**
     * Find the first FacebookLocation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationFindFirstOrThrowArgs} args - Arguments to find a FacebookLocation
     * @example
     * // Get one FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookLocationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookLocationFindFirstOrThrowArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Find zero or more FacebookLocations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookLocations
     * const facebookLocations = await prisma.facebookLocation.findMany()
     * 
     * // Get first 10 FacebookLocations
     * const facebookLocations = await prisma.facebookLocation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookLocationWithIdOnly = await prisma.facebookLocation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookLocationFindManyArgs>(
      args?: SelectSubset<T, FacebookLocationFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookLocationGetPayload<T>>>

    /**
     * Create a FacebookLocation.
     * @param {FacebookLocationCreateArgs} args - Arguments to create a FacebookLocation.
     * @example
     * // Create one FacebookLocation
     * const FacebookLocation = await prisma.facebookLocation.create({
     *   data: {
     *     // ... data to create a FacebookLocation
     *   }
     * })
     * 
    **/
    create<T extends FacebookLocationCreateArgs>(
      args: SelectSubset<T, FacebookLocationCreateArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Create many FacebookLocations.
     *     @param {FacebookLocationCreateManyArgs} args - Arguments to create many FacebookLocations.
     *     @example
     *     // Create many FacebookLocations
     *     const facebookLocation = await prisma.facebookLocation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookLocationCreateManyArgs>(
      args?: SelectSubset<T, FacebookLocationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookLocation.
     * @param {FacebookLocationDeleteArgs} args - Arguments to delete one FacebookLocation.
     * @example
     * // Delete one FacebookLocation
     * const FacebookLocation = await prisma.facebookLocation.delete({
     *   where: {
     *     // ... filter to delete one FacebookLocation
     *   }
     * })
     * 
    **/
    delete<T extends FacebookLocationDeleteArgs>(
      args: SelectSubset<T, FacebookLocationDeleteArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Update one FacebookLocation.
     * @param {FacebookLocationUpdateArgs} args - Arguments to update one FacebookLocation.
     * @example
     * // Update one FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookLocationUpdateArgs>(
      args: SelectSubset<T, FacebookLocationUpdateArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Delete zero or more FacebookLocations.
     * @param {FacebookLocationDeleteManyArgs} args - Arguments to filter FacebookLocations to delete.
     * @example
     * // Delete a few FacebookLocations
     * const { count } = await prisma.facebookLocation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookLocationDeleteManyArgs>(
      args?: SelectSubset<T, FacebookLocationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookLocations
     * const facebookLocation = await prisma.facebookLocation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookLocationUpdateManyArgs>(
      args: SelectSubset<T, FacebookLocationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookLocation.
     * @param {FacebookLocationUpsertArgs} args - Arguments to update or create a FacebookLocation.
     * @example
     * // Update or create a FacebookLocation
     * const facebookLocation = await prisma.facebookLocation.upsert({
     *   create: {
     *     // ... data to create a FacebookLocation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookLocation we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookLocationUpsertArgs>(
      args: SelectSubset<T, FacebookLocationUpsertArgs>
    ): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T>>

    /**
     * Count the number of FacebookLocations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationCountArgs} args - Arguments to filter FacebookLocations to count.
     * @example
     * // Count the number of FacebookLocations
     * const count = await prisma.facebookLocation.count({
     *   where: {
     *     // ... the filter for the FacebookLocations we want to count
     *   }
     * })
    **/
    count<T extends FacebookLocationCountArgs>(
      args?: Subset<T, FacebookLocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookLocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookLocationAggregateArgs>(args: Subset<T, FacebookLocationAggregateArgs>): Prisma.PrismaPromise<GetFacebookLocationAggregateType<T>>

    /**
     * Group by FacebookLocation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookLocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookLocationGroupByArgs['orderBy'] }
        : { orderBy?: FacebookLocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookLocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookLocation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookLocationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends FacebookLocation$postsArgs= {}>(args?: Subset<T, FacebookLocation$postsArgs>): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookLocation base type for findUnique actions
   */
  export type FacebookLocationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter, which FacebookLocation to fetch.
     */
    where: FacebookLocationWhereUniqueInput
  }

  /**
   * FacebookLocation findUnique
   */
  export interface FacebookLocationFindUniqueArgs extends FacebookLocationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLocation findUniqueOrThrow
   */
  export type FacebookLocationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter, which FacebookLocation to fetch.
     */
    where: FacebookLocationWhereUniqueInput
  }


  /**
   * FacebookLocation base type for findFirst actions
   */
  export type FacebookLocationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter, which FacebookLocation to fetch.
     */
    where?: FacebookLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLocations to fetch.
     */
    orderBy?: Enumerable<FacebookLocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLocations.
     */
    cursor?: FacebookLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLocations.
     */
    distinct?: Enumerable<FacebookLocationScalarFieldEnum>
  }

  /**
   * FacebookLocation findFirst
   */
  export interface FacebookLocationFindFirstArgs extends FacebookLocationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLocation findFirstOrThrow
   */
  export type FacebookLocationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter, which FacebookLocation to fetch.
     */
    where?: FacebookLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLocations to fetch.
     */
    orderBy?: Enumerable<FacebookLocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLocations.
     */
    cursor?: FacebookLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLocations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLocations.
     */
    distinct?: Enumerable<FacebookLocationScalarFieldEnum>
  }


  /**
   * FacebookLocation findMany
   */
  export type FacebookLocationFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter, which FacebookLocations to fetch.
     */
    where?: FacebookLocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLocations to fetch.
     */
    orderBy?: Enumerable<FacebookLocationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookLocations.
     */
    cursor?: FacebookLocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLocations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLocations.
     */
    skip?: number
    distinct?: Enumerable<FacebookLocationScalarFieldEnum>
  }


  /**
   * FacebookLocation create
   */
  export type FacebookLocationCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * The data needed to create a FacebookLocation.
     */
    data: XOR<FacebookLocationCreateInput, FacebookLocationUncheckedCreateInput>
  }


  /**
   * FacebookLocation createMany
   */
  export type FacebookLocationCreateManyArgs = {
    /**
     * The data used to create many FacebookLocations.
     */
    data: Enumerable<FacebookLocationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookLocation update
   */
  export type FacebookLocationUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * The data needed to update a FacebookLocation.
     */
    data: XOR<FacebookLocationUpdateInput, FacebookLocationUncheckedUpdateInput>
    /**
     * Choose, which FacebookLocation to update.
     */
    where: FacebookLocationWhereUniqueInput
  }


  /**
   * FacebookLocation updateMany
   */
  export type FacebookLocationUpdateManyArgs = {
    /**
     * The data used to update FacebookLocations.
     */
    data: XOR<FacebookLocationUpdateManyMutationInput, FacebookLocationUncheckedUpdateManyInput>
    /**
     * Filter which FacebookLocations to update
     */
    where?: FacebookLocationWhereInput
  }


  /**
   * FacebookLocation upsert
   */
  export type FacebookLocationUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * The filter to search for the FacebookLocation to update in case it exists.
     */
    where: FacebookLocationWhereUniqueInput
    /**
     * In case the FacebookLocation found by the `where` argument doesn't exist, create a new FacebookLocation with this data.
     */
    create: XOR<FacebookLocationCreateInput, FacebookLocationUncheckedCreateInput>
    /**
     * In case the FacebookLocation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookLocationUpdateInput, FacebookLocationUncheckedUpdateInput>
  }


  /**
   * FacebookLocation delete
   */
  export type FacebookLocationDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
    /**
     * Filter which FacebookLocation to delete.
     */
    where: FacebookLocationWhereUniqueInput
  }


  /**
   * FacebookLocation deleteMany
   */
  export type FacebookLocationDeleteManyArgs = {
    /**
     * Filter which FacebookLocations to delete
     */
    where?: FacebookLocationWhereInput
  }


  /**
   * FacebookLocation.posts
   */
  export type FacebookLocation$postsArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    cursor?: FacebookPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookLocation without action
   */
  export type FacebookLocationArgs = {
    /**
     * Select specific fields to fetch from the FacebookLocation
     */
    select?: FacebookLocationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLocationInclude | null
  }



  /**
   * Model FacebookHashtag
   */


  export type AggregateFacebookHashtag = {
    _count: FacebookHashtagCountAggregateOutputType | null
    _avg: FacebookHashtagAvgAggregateOutputType | null
    _sum: FacebookHashtagSumAggregateOutputType | null
    _min: FacebookHashtagMinAggregateOutputType | null
    _max: FacebookHashtagMaxAggregateOutputType | null
  }

  export type FacebookHashtagAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookHashtagSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookHashtagMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookHashtagMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookHashtagCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookHashtagAvgAggregateInputType = {
    id?: true
  }

  export type FacebookHashtagSumAggregateInputType = {
    id?: true
  }

  export type FacebookHashtagMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookHashtagMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookHashtagCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookHashtagAggregateArgs = {
    /**
     * Filter which FacebookHashtag to aggregate.
     */
    where?: FacebookHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookHashtags to fetch.
     */
    orderBy?: Enumerable<FacebookHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookHashtags
    **/
    _count?: true | FacebookHashtagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookHashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookHashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookHashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookHashtagMaxAggregateInputType
  }

  export type GetFacebookHashtagAggregateType<T extends FacebookHashtagAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookHashtag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookHashtag[P]>
      : GetScalarType<T[P], AggregateFacebookHashtag[P]>
  }




  export type FacebookHashtagGroupByArgs = {
    where?: FacebookHashtagWhereInput
    orderBy?: Enumerable<FacebookHashtagOrderByWithAggregationInput>
    by: FacebookHashtagScalarFieldEnum[]
    having?: FacebookHashtagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookHashtagCountAggregateInputType | true
    _avg?: FacebookHashtagAvgAggregateInputType
    _sum?: FacebookHashtagSumAggregateInputType
    _min?: FacebookHashtagMinAggregateInputType
    _max?: FacebookHashtagMaxAggregateInputType
  }


  export type FacebookHashtagGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookHashtagCountAggregateOutputType | null
    _avg: FacebookHashtagAvgAggregateOutputType | null
    _sum: FacebookHashtagSumAggregateOutputType | null
    _min: FacebookHashtagMinAggregateOutputType | null
    _max: FacebookHashtagMaxAggregateOutputType | null
  }

  type GetFacebookHashtagGroupByPayload<T extends FacebookHashtagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookHashtagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookHashtagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookHashtagGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookHashtagGroupByOutputType[P]>
        }
      >
    >


  export type FacebookHashtagSelect = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    posts?: boolean | FacebookHashtag$postsArgs
    _count?: boolean | FacebookHashtagCountOutputTypeArgs
  }


  export type FacebookHashtagInclude = {
    posts?: boolean | FacebookHashtag$postsArgs
    _count?: boolean | FacebookHashtagCountOutputTypeArgs
  }

  export type FacebookHashtagGetPayload<S extends boolean | null | undefined | FacebookHashtagArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookHashtag :
    S extends undefined ? never :
    S extends { include: any } & (FacebookHashtagArgs | FacebookHashtagFindManyArgs)
    ? FacebookHashtag  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookHashtagCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookHashtagArgs | FacebookHashtagFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'posts' ? Array < FacebookPostGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookHashtagCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookHashtag ? FacebookHashtag[P] : never
  } 
      : FacebookHashtag


  type FacebookHashtagCountArgs = 
    Omit<FacebookHashtagFindManyArgs, 'select' | 'include'> & {
      select?: FacebookHashtagCountAggregateInputType | true
    }

  export interface FacebookHashtagDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookHashtag that matches the filter.
     * @param {FacebookHashtagFindUniqueArgs} args - Arguments to find a FacebookHashtag
     * @example
     * // Get one FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookHashtagFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookHashtagFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookHashtag'> extends True ? Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>> : Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T> | null, null>

    /**
     * Find one FacebookHashtag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookHashtagFindUniqueOrThrowArgs} args - Arguments to find a FacebookHashtag
     * @example
     * // Get one FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookHashtagFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookHashtagFindUniqueOrThrowArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Find the first FacebookHashtag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagFindFirstArgs} args - Arguments to find a FacebookHashtag
     * @example
     * // Get one FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookHashtagFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookHashtagFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookHashtag'> extends True ? Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>> : Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T> | null, null>

    /**
     * Find the first FacebookHashtag that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagFindFirstOrThrowArgs} args - Arguments to find a FacebookHashtag
     * @example
     * // Get one FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookHashtagFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookHashtagFindFirstOrThrowArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Find zero or more FacebookHashtags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookHashtags
     * const facebookHashtags = await prisma.facebookHashtag.findMany()
     * 
     * // Get first 10 FacebookHashtags
     * const facebookHashtags = await prisma.facebookHashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookHashtagWithIdOnly = await prisma.facebookHashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookHashtagFindManyArgs>(
      args?: SelectSubset<T, FacebookHashtagFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookHashtagGetPayload<T>>>

    /**
     * Create a FacebookHashtag.
     * @param {FacebookHashtagCreateArgs} args - Arguments to create a FacebookHashtag.
     * @example
     * // Create one FacebookHashtag
     * const FacebookHashtag = await prisma.facebookHashtag.create({
     *   data: {
     *     // ... data to create a FacebookHashtag
     *   }
     * })
     * 
    **/
    create<T extends FacebookHashtagCreateArgs>(
      args: SelectSubset<T, FacebookHashtagCreateArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Create many FacebookHashtags.
     *     @param {FacebookHashtagCreateManyArgs} args - Arguments to create many FacebookHashtags.
     *     @example
     *     // Create many FacebookHashtags
     *     const facebookHashtag = await prisma.facebookHashtag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookHashtagCreateManyArgs>(
      args?: SelectSubset<T, FacebookHashtagCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookHashtag.
     * @param {FacebookHashtagDeleteArgs} args - Arguments to delete one FacebookHashtag.
     * @example
     * // Delete one FacebookHashtag
     * const FacebookHashtag = await prisma.facebookHashtag.delete({
     *   where: {
     *     // ... filter to delete one FacebookHashtag
     *   }
     * })
     * 
    **/
    delete<T extends FacebookHashtagDeleteArgs>(
      args: SelectSubset<T, FacebookHashtagDeleteArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Update one FacebookHashtag.
     * @param {FacebookHashtagUpdateArgs} args - Arguments to update one FacebookHashtag.
     * @example
     * // Update one FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookHashtagUpdateArgs>(
      args: SelectSubset<T, FacebookHashtagUpdateArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Delete zero or more FacebookHashtags.
     * @param {FacebookHashtagDeleteManyArgs} args - Arguments to filter FacebookHashtags to delete.
     * @example
     * // Delete a few FacebookHashtags
     * const { count } = await prisma.facebookHashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookHashtagDeleteManyArgs>(
      args?: SelectSubset<T, FacebookHashtagDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookHashtags
     * const facebookHashtag = await prisma.facebookHashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookHashtagUpdateManyArgs>(
      args: SelectSubset<T, FacebookHashtagUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookHashtag.
     * @param {FacebookHashtagUpsertArgs} args - Arguments to update or create a FacebookHashtag.
     * @example
     * // Update or create a FacebookHashtag
     * const facebookHashtag = await prisma.facebookHashtag.upsert({
     *   create: {
     *     // ... data to create a FacebookHashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookHashtag we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookHashtagUpsertArgs>(
      args: SelectSubset<T, FacebookHashtagUpsertArgs>
    ): Prisma__FacebookHashtagClient<FacebookHashtagGetPayload<T>>

    /**
     * Count the number of FacebookHashtags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagCountArgs} args - Arguments to filter FacebookHashtags to count.
     * @example
     * // Count the number of FacebookHashtags
     * const count = await prisma.facebookHashtag.count({
     *   where: {
     *     // ... the filter for the FacebookHashtags we want to count
     *   }
     * })
    **/
    count<T extends FacebookHashtagCountArgs>(
      args?: Subset<T, FacebookHashtagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookHashtagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookHashtagAggregateArgs>(args: Subset<T, FacebookHashtagAggregateArgs>): Prisma.PrismaPromise<GetFacebookHashtagAggregateType<T>>

    /**
     * Group by FacebookHashtag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookHashtagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookHashtagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookHashtagGroupByArgs['orderBy'] }
        : { orderBy?: FacebookHashtagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookHashtagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookHashtagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookHashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookHashtagClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    posts<T extends FacebookHashtag$postsArgs= {}>(args?: Subset<T, FacebookHashtag$postsArgs>): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookHashtag base type for findUnique actions
   */
  export type FacebookHashtagFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter, which FacebookHashtag to fetch.
     */
    where: FacebookHashtagWhereUniqueInput
  }

  /**
   * FacebookHashtag findUnique
   */
  export interface FacebookHashtagFindUniqueArgs extends FacebookHashtagFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookHashtag findUniqueOrThrow
   */
  export type FacebookHashtagFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter, which FacebookHashtag to fetch.
     */
    where: FacebookHashtagWhereUniqueInput
  }


  /**
   * FacebookHashtag base type for findFirst actions
   */
  export type FacebookHashtagFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter, which FacebookHashtag to fetch.
     */
    where?: FacebookHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookHashtags to fetch.
     */
    orderBy?: Enumerable<FacebookHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookHashtags.
     */
    cursor?: FacebookHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookHashtags.
     */
    distinct?: Enumerable<FacebookHashtagScalarFieldEnum>
  }

  /**
   * FacebookHashtag findFirst
   */
  export interface FacebookHashtagFindFirstArgs extends FacebookHashtagFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookHashtag findFirstOrThrow
   */
  export type FacebookHashtagFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter, which FacebookHashtag to fetch.
     */
    where?: FacebookHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookHashtags to fetch.
     */
    orderBy?: Enumerable<FacebookHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookHashtags.
     */
    cursor?: FacebookHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookHashtags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookHashtags.
     */
    distinct?: Enumerable<FacebookHashtagScalarFieldEnum>
  }


  /**
   * FacebookHashtag findMany
   */
  export type FacebookHashtagFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter, which FacebookHashtags to fetch.
     */
    where?: FacebookHashtagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookHashtags to fetch.
     */
    orderBy?: Enumerable<FacebookHashtagOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookHashtags.
     */
    cursor?: FacebookHashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookHashtags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookHashtags.
     */
    skip?: number
    distinct?: Enumerable<FacebookHashtagScalarFieldEnum>
  }


  /**
   * FacebookHashtag create
   */
  export type FacebookHashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * The data needed to create a FacebookHashtag.
     */
    data: XOR<FacebookHashtagCreateInput, FacebookHashtagUncheckedCreateInput>
  }


  /**
   * FacebookHashtag createMany
   */
  export type FacebookHashtagCreateManyArgs = {
    /**
     * The data used to create many FacebookHashtags.
     */
    data: Enumerable<FacebookHashtagCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookHashtag update
   */
  export type FacebookHashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * The data needed to update a FacebookHashtag.
     */
    data: XOR<FacebookHashtagUpdateInput, FacebookHashtagUncheckedUpdateInput>
    /**
     * Choose, which FacebookHashtag to update.
     */
    where: FacebookHashtagWhereUniqueInput
  }


  /**
   * FacebookHashtag updateMany
   */
  export type FacebookHashtagUpdateManyArgs = {
    /**
     * The data used to update FacebookHashtags.
     */
    data: XOR<FacebookHashtagUpdateManyMutationInput, FacebookHashtagUncheckedUpdateManyInput>
    /**
     * Filter which FacebookHashtags to update
     */
    where?: FacebookHashtagWhereInput
  }


  /**
   * FacebookHashtag upsert
   */
  export type FacebookHashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * The filter to search for the FacebookHashtag to update in case it exists.
     */
    where: FacebookHashtagWhereUniqueInput
    /**
     * In case the FacebookHashtag found by the `where` argument doesn't exist, create a new FacebookHashtag with this data.
     */
    create: XOR<FacebookHashtagCreateInput, FacebookHashtagUncheckedCreateInput>
    /**
     * In case the FacebookHashtag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookHashtagUpdateInput, FacebookHashtagUncheckedUpdateInput>
  }


  /**
   * FacebookHashtag delete
   */
  export type FacebookHashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    /**
     * Filter which FacebookHashtag to delete.
     */
    where: FacebookHashtagWhereUniqueInput
  }


  /**
   * FacebookHashtag deleteMany
   */
  export type FacebookHashtagDeleteManyArgs = {
    /**
     * Filter which FacebookHashtags to delete
     */
    where?: FacebookHashtagWhereInput
  }


  /**
   * FacebookHashtag.posts
   */
  export type FacebookHashtag$postsArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    cursor?: FacebookPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookHashtag without action
   */
  export type FacebookHashtagArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
  }



  /**
   * Model FacebookPost
   */


  export type AggregateFacebookPost = {
    _count: FacebookPostCountAggregateOutputType | null
    _avg: FacebookPostAvgAggregateOutputType | null
    _sum: FacebookPostSumAggregateOutputType | null
    _min: FacebookPostMinAggregateOutputType | null
    _max: FacebookPostMaxAggregateOutputType | null
  }

  export type FacebookPostAvgAggregateOutputType = {
    id: number | null
    postTypeId: number | null
    posterUserId: number | null
    locationId: number | null
    destinationId: number | null
    destinationRelateId: number | null
    shareFromPostId: number | null
  }

  export type FacebookPostSumAggregateOutputType = {
    id: number | null
    postTypeId: number | null
    posterUserId: number | null
    locationId: number | null
    destinationId: number | null
    destinationRelateId: number | null
    shareFromPostId: number | null
  }

  export type FacebookPostMinAggregateOutputType = {
    id: number | null
    message: string | null
    postTypeId: number | null
    posterUserId: number | null
    locationId: number | null
    destinationId: number | null
    destinationRelateId: number | null
    isShared: boolean | null
    shareFromPostId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostMaxAggregateOutputType = {
    id: number | null
    message: string | null
    postTypeId: number | null
    posterUserId: number | null
    locationId: number | null
    destinationId: number | null
    destinationRelateId: number | null
    isShared: boolean | null
    shareFromPostId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookPostCountAggregateOutputType = {
    id: number
    message: number
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: number
    shareFromPostId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookPostAvgAggregateInputType = {
    id?: true
    postTypeId?: true
    posterUserId?: true
    locationId?: true
    destinationId?: true
    destinationRelateId?: true
    shareFromPostId?: true
  }

  export type FacebookPostSumAggregateInputType = {
    id?: true
    postTypeId?: true
    posterUserId?: true
    locationId?: true
    destinationId?: true
    destinationRelateId?: true
    shareFromPostId?: true
  }

  export type FacebookPostMinAggregateInputType = {
    id?: true
    message?: true
    postTypeId?: true
    posterUserId?: true
    locationId?: true
    destinationId?: true
    destinationRelateId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostMaxAggregateInputType = {
    id?: true
    message?: true
    postTypeId?: true
    posterUserId?: true
    locationId?: true
    destinationId?: true
    destinationRelateId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookPostCountAggregateInputType = {
    id?: true
    message?: true
    postTypeId?: true
    posterUserId?: true
    locationId?: true
    destinationId?: true
    destinationRelateId?: true
    isShared?: true
    shareFromPostId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookPostAggregateArgs = {
    /**
     * Filter which FacebookPost to aggregate.
     */
    where?: FacebookPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPosts to fetch.
     */
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookPosts
    **/
    _count?: true | FacebookPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookPostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookPostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookPostMaxAggregateInputType
  }

  export type GetFacebookPostAggregateType<T extends FacebookPostAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookPost[P]>
      : GetScalarType<T[P], AggregateFacebookPost[P]>
  }




  export type FacebookPostGroupByArgs = {
    where?: FacebookPostWhereInput
    orderBy?: Enumerable<FacebookPostOrderByWithAggregationInput>
    by: FacebookPostScalarFieldEnum[]
    having?: FacebookPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookPostCountAggregateInputType | true
    _avg?: FacebookPostAvgAggregateInputType
    _sum?: FacebookPostSumAggregateInputType
    _min?: FacebookPostMinAggregateInputType
    _max?: FacebookPostMaxAggregateInputType
  }


  export type FacebookPostGroupByOutputType = {
    id: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookPostCountAggregateOutputType | null
    _avg: FacebookPostAvgAggregateOutputType | null
    _sum: FacebookPostSumAggregateOutputType | null
    _min: FacebookPostMinAggregateOutputType | null
    _max: FacebookPostMaxAggregateOutputType | null
  }

  type GetFacebookPostGroupByPayload<T extends FacebookPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookPostGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookPostGroupByOutputType[P]>
        }
      >
    >


  export type FacebookPostSelect = {
    id?: boolean
    message?: boolean
    postType?: boolean | FacebookPostTypeArgs
    postTypeId?: boolean
    posterUser?: boolean | FacebookUserArgs
    posterUserId?: boolean
    location?: boolean | FacebookLocationArgs
    locationId?: boolean
    destination?: boolean | FacebookPostDestinationArgs
    destinationId?: boolean
    destinationRelateId?: boolean
    isShared?: boolean
    shareFromPostId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    hashtags?: boolean | FacebookPost$hashtagsArgs
    comments?: boolean | FacebookPost$commentsArgs
    likePosts?: boolean | FacebookPost$likePostsArgs
    likeComments?: boolean | FacebookPost$likeCommentsArgs
    _count?: boolean | FacebookPostCountOutputTypeArgs
  }


  export type FacebookPostInclude = {
    postType?: boolean | FacebookPostTypeArgs
    posterUser?: boolean | FacebookUserArgs
    location?: boolean | FacebookLocationArgs
    destination?: boolean | FacebookPostDestinationArgs
    hashtags?: boolean | FacebookPost$hashtagsArgs
    comments?: boolean | FacebookPost$commentsArgs
    likePosts?: boolean | FacebookPost$likePostsArgs
    likeComments?: boolean | FacebookPost$likeCommentsArgs
    _count?: boolean | FacebookPostCountOutputTypeArgs
  }

  export type FacebookPostGetPayload<S extends boolean | null | undefined | FacebookPostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookPost :
    S extends undefined ? never :
    S extends { include: any } & (FacebookPostArgs | FacebookPostFindManyArgs)
    ? FacebookPost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'postType' ? FacebookPostTypeGetPayload<S['include'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'location' ? FacebookLocationGetPayload<S['include'][P]> :
        P extends 'destination' ? FacebookPostDestinationGetPayload<S['include'][P]> :
        P extends 'hashtags' ? Array < FacebookHashtagGetPayload<S['include'][P]>>  :
        P extends 'comments' ? Array < FacebookCommentGetPayload<S['include'][P]>>  :
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookPostCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookPostArgs | FacebookPostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'postType' ? FacebookPostTypeGetPayload<S['select'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'location' ? FacebookLocationGetPayload<S['select'][P]> :
        P extends 'destination' ? FacebookPostDestinationGetPayload<S['select'][P]> :
        P extends 'hashtags' ? Array < FacebookHashtagGetPayload<S['select'][P]>>  :
        P extends 'comments' ? Array < FacebookCommentGetPayload<S['select'][P]>>  :
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookPostCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookPost ? FacebookPost[P] : never
  } 
      : FacebookPost


  type FacebookPostCountArgs = 
    Omit<FacebookPostFindManyArgs, 'select' | 'include'> & {
      select?: FacebookPostCountAggregateInputType | true
    }

  export interface FacebookPostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookPost that matches the filter.
     * @param {FacebookPostFindUniqueArgs} args - Arguments to find a FacebookPost
     * @example
     * // Get one FacebookPost
     * const facebookPost = await prisma.facebookPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookPostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookPostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookPost'> extends True ? Prisma__FacebookPostClient<FacebookPostGetPayload<T>> : Prisma__FacebookPostClient<FacebookPostGetPayload<T> | null, null>

    /**
     * Find one FacebookPost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookPostFindUniqueOrThrowArgs} args - Arguments to find a FacebookPost
     * @example
     * // Get one FacebookPost
     * const facebookPost = await prisma.facebookPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookPostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostFindUniqueOrThrowArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Find the first FacebookPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostFindFirstArgs} args - Arguments to find a FacebookPost
     * @example
     * // Get one FacebookPost
     * const facebookPost = await prisma.facebookPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookPostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookPostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookPost'> extends True ? Prisma__FacebookPostClient<FacebookPostGetPayload<T>> : Prisma__FacebookPostClient<FacebookPostGetPayload<T> | null, null>

    /**
     * Find the first FacebookPost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostFindFirstOrThrowArgs} args - Arguments to find a FacebookPost
     * @example
     * // Get one FacebookPost
     * const facebookPost = await prisma.facebookPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookPostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookPostFindFirstOrThrowArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Find zero or more FacebookPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookPosts
     * const facebookPosts = await prisma.facebookPost.findMany()
     * 
     * // Get first 10 FacebookPosts
     * const facebookPosts = await prisma.facebookPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookPostWithIdOnly = await prisma.facebookPost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookPostFindManyArgs>(
      args?: SelectSubset<T, FacebookPostFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookPostGetPayload<T>>>

    /**
     * Create a FacebookPost.
     * @param {FacebookPostCreateArgs} args - Arguments to create a FacebookPost.
     * @example
     * // Create one FacebookPost
     * const FacebookPost = await prisma.facebookPost.create({
     *   data: {
     *     // ... data to create a FacebookPost
     *   }
     * })
     * 
    **/
    create<T extends FacebookPostCreateArgs>(
      args: SelectSubset<T, FacebookPostCreateArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Create many FacebookPosts.
     *     @param {FacebookPostCreateManyArgs} args - Arguments to create many FacebookPosts.
     *     @example
     *     // Create many FacebookPosts
     *     const facebookPost = await prisma.facebookPost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookPostCreateManyArgs>(
      args?: SelectSubset<T, FacebookPostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookPost.
     * @param {FacebookPostDeleteArgs} args - Arguments to delete one FacebookPost.
     * @example
     * // Delete one FacebookPost
     * const FacebookPost = await prisma.facebookPost.delete({
     *   where: {
     *     // ... filter to delete one FacebookPost
     *   }
     * })
     * 
    **/
    delete<T extends FacebookPostDeleteArgs>(
      args: SelectSubset<T, FacebookPostDeleteArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Update one FacebookPost.
     * @param {FacebookPostUpdateArgs} args - Arguments to update one FacebookPost.
     * @example
     * // Update one FacebookPost
     * const facebookPost = await prisma.facebookPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookPostUpdateArgs>(
      args: SelectSubset<T, FacebookPostUpdateArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Delete zero or more FacebookPosts.
     * @param {FacebookPostDeleteManyArgs} args - Arguments to filter FacebookPosts to delete.
     * @example
     * // Delete a few FacebookPosts
     * const { count } = await prisma.facebookPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookPostDeleteManyArgs>(
      args?: SelectSubset<T, FacebookPostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookPosts
     * const facebookPost = await prisma.facebookPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookPostUpdateManyArgs>(
      args: SelectSubset<T, FacebookPostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookPost.
     * @param {FacebookPostUpsertArgs} args - Arguments to update or create a FacebookPost.
     * @example
     * // Update or create a FacebookPost
     * const facebookPost = await prisma.facebookPost.upsert({
     *   create: {
     *     // ... data to create a FacebookPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookPost we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookPostUpsertArgs>(
      args: SelectSubset<T, FacebookPostUpsertArgs>
    ): Prisma__FacebookPostClient<FacebookPostGetPayload<T>>

    /**
     * Count the number of FacebookPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostCountArgs} args - Arguments to filter FacebookPosts to count.
     * @example
     * // Count the number of FacebookPosts
     * const count = await prisma.facebookPost.count({
     *   where: {
     *     // ... the filter for the FacebookPosts we want to count
     *   }
     * })
    **/
    count<T extends FacebookPostCountArgs>(
      args?: Subset<T, FacebookPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookPostAggregateArgs>(args: Subset<T, FacebookPostAggregateArgs>): Prisma.PrismaPromise<GetFacebookPostAggregateType<T>>

    /**
     * Group by FacebookPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookPostGroupByArgs['orderBy'] }
        : { orderBy?: FacebookPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookPostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    postType<T extends FacebookPostTypeArgs= {}>(args?: Subset<T, FacebookPostTypeArgs>): Prisma__FacebookPostTypeClient<FacebookPostTypeGetPayload<T> | Null>;

    posterUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    location<T extends FacebookLocationArgs= {}>(args?: Subset<T, FacebookLocationArgs>): Prisma__FacebookLocationClient<FacebookLocationGetPayload<T> | Null>;

    destination<T extends FacebookPostDestinationArgs= {}>(args?: Subset<T, FacebookPostDestinationArgs>): Prisma__FacebookPostDestinationClient<FacebookPostDestinationGetPayload<T> | Null>;

    hashtags<T extends FacebookPost$hashtagsArgs= {}>(args?: Subset<T, FacebookPost$hashtagsArgs>): Prisma.PrismaPromise<Array<FacebookHashtagGetPayload<T>>| Null>;

    comments<T extends FacebookPost$commentsArgs= {}>(args?: Subset<T, FacebookPost$commentsArgs>): Prisma.PrismaPromise<Array<FacebookCommentGetPayload<T>>| Null>;

    likePosts<T extends FacebookPost$likePostsArgs= {}>(args?: Subset<T, FacebookPost$likePostsArgs>): Prisma.PrismaPromise<Array<FacebookLikePostGetPayload<T>>| Null>;

    likeComments<T extends FacebookPost$likeCommentsArgs= {}>(args?: Subset<T, FacebookPost$likeCommentsArgs>): Prisma.PrismaPromise<Array<FacebookLikeCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookPost base type for findUnique actions
   */
  export type FacebookPostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter, which FacebookPost to fetch.
     */
    where: FacebookPostWhereUniqueInput
  }

  /**
   * FacebookPost findUnique
   */
  export interface FacebookPostFindUniqueArgs extends FacebookPostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPost findUniqueOrThrow
   */
  export type FacebookPostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter, which FacebookPost to fetch.
     */
    where: FacebookPostWhereUniqueInput
  }


  /**
   * FacebookPost base type for findFirst actions
   */
  export type FacebookPostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter, which FacebookPost to fetch.
     */
    where?: FacebookPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPosts to fetch.
     */
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPosts.
     */
    cursor?: FacebookPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPosts.
     */
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }

  /**
   * FacebookPost findFirst
   */
  export interface FacebookPostFindFirstArgs extends FacebookPostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookPost findFirstOrThrow
   */
  export type FacebookPostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter, which FacebookPost to fetch.
     */
    where?: FacebookPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPosts to fetch.
     */
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookPosts.
     */
    cursor?: FacebookPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookPosts.
     */
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookPost findMany
   */
  export type FacebookPostFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter, which FacebookPosts to fetch.
     */
    where?: FacebookPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookPosts to fetch.
     */
    orderBy?: Enumerable<FacebookPostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookPosts.
     */
    cursor?: FacebookPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookPosts.
     */
    skip?: number
    distinct?: Enumerable<FacebookPostScalarFieldEnum>
  }


  /**
   * FacebookPost create
   */
  export type FacebookPostCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * The data needed to create a FacebookPost.
     */
    data: XOR<FacebookPostCreateInput, FacebookPostUncheckedCreateInput>
  }


  /**
   * FacebookPost createMany
   */
  export type FacebookPostCreateManyArgs = {
    /**
     * The data used to create many FacebookPosts.
     */
    data: Enumerable<FacebookPostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookPost update
   */
  export type FacebookPostUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * The data needed to update a FacebookPost.
     */
    data: XOR<FacebookPostUpdateInput, FacebookPostUncheckedUpdateInput>
    /**
     * Choose, which FacebookPost to update.
     */
    where: FacebookPostWhereUniqueInput
  }


  /**
   * FacebookPost updateMany
   */
  export type FacebookPostUpdateManyArgs = {
    /**
     * The data used to update FacebookPosts.
     */
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyInput>
    /**
     * Filter which FacebookPosts to update
     */
    where?: FacebookPostWhereInput
  }


  /**
   * FacebookPost upsert
   */
  export type FacebookPostUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * The filter to search for the FacebookPost to update in case it exists.
     */
    where: FacebookPostWhereUniqueInput
    /**
     * In case the FacebookPost found by the `where` argument doesn't exist, create a new FacebookPost with this data.
     */
    create: XOR<FacebookPostCreateInput, FacebookPostUncheckedCreateInput>
    /**
     * In case the FacebookPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookPostUpdateInput, FacebookPostUncheckedUpdateInput>
  }


  /**
   * FacebookPost delete
   */
  export type FacebookPostDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
    /**
     * Filter which FacebookPost to delete.
     */
    where: FacebookPostWhereUniqueInput
  }


  /**
   * FacebookPost deleteMany
   */
  export type FacebookPostDeleteManyArgs = {
    /**
     * Filter which FacebookPosts to delete
     */
    where?: FacebookPostWhereInput
  }


  /**
   * FacebookPost.hashtags
   */
  export type FacebookPost$hashtagsArgs = {
    /**
     * Select specific fields to fetch from the FacebookHashtag
     */
    select?: FacebookHashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookHashtagInclude | null
    where?: FacebookHashtagWhereInput
    orderBy?: Enumerable<FacebookHashtagOrderByWithRelationInput>
    cursor?: FacebookHashtagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookHashtagScalarFieldEnum>
  }


  /**
   * FacebookPost.comments
   */
  export type FacebookPost$commentsArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    where?: FacebookCommentWhereInput
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    cursor?: FacebookCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookCommentScalarFieldEnum>
  }


  /**
   * FacebookPost.likePosts
   */
  export type FacebookPost$likePostsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    where?: FacebookLikePostWhereInput
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    cursor?: FacebookLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }


  /**
   * FacebookPost.likeComments
   */
  export type FacebookPost$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    where?: FacebookLikeCommentWhereInput
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    cursor?: FacebookLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }


  /**
   * FacebookPost without action
   */
  export type FacebookPostArgs = {
    /**
     * Select specific fields to fetch from the FacebookPost
     */
    select?: FacebookPostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookPostInclude | null
  }



  /**
   * Model FacebookComment
   */


  export type AggregateFacebookComment = {
    _count: FacebookCommentCountAggregateOutputType | null
    _avg: FacebookCommentAvgAggregateOutputType | null
    _sum: FacebookCommentSumAggregateOutputType | null
    _min: FacebookCommentMinAggregateOutputType | null
    _max: FacebookCommentMaxAggregateOutputType | null
  }

  export type FacebookCommentAvgAggregateOutputType = {
    id: number | null
    commentByUserId: number | null
    postId: number | null
    replyFromCommentId: number | null
  }

  export type FacebookCommentSumAggregateOutputType = {
    id: number | null
    commentByUserId: number | null
    postId: number | null
    replyFromCommentId: number | null
  }

  export type FacebookCommentMinAggregateOutputType = {
    id: number | null
    message: string | null
    commentByUserId: number | null
    postId: number | null
    isReplied: boolean | null
    replyFromCommentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookCommentMaxAggregateOutputType = {
    id: number | null
    message: string | null
    commentByUserId: number | null
    postId: number | null
    isReplied: boolean | null
    replyFromCommentId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookCommentCountAggregateOutputType = {
    id: number
    message: number
    commentByUserId: number
    postId: number
    isReplied: number
    replyFromCommentId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookCommentAvgAggregateInputType = {
    id?: true
    commentByUserId?: true
    postId?: true
    replyFromCommentId?: true
  }

  export type FacebookCommentSumAggregateInputType = {
    id?: true
    commentByUserId?: true
    postId?: true
    replyFromCommentId?: true
  }

  export type FacebookCommentMinAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    isReplied?: true
    replyFromCommentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookCommentMaxAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    isReplied?: true
    replyFromCommentId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookCommentCountAggregateInputType = {
    id?: true
    message?: true
    commentByUserId?: true
    postId?: true
    isReplied?: true
    replyFromCommentId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookCommentAggregateArgs = {
    /**
     * Filter which FacebookComment to aggregate.
     */
    where?: FacebookCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookComments to fetch.
     */
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookComments
    **/
    _count?: true | FacebookCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookCommentMaxAggregateInputType
  }

  export type GetFacebookCommentAggregateType<T extends FacebookCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookComment[P]>
      : GetScalarType<T[P], AggregateFacebookComment[P]>
  }




  export type FacebookCommentGroupByArgs = {
    where?: FacebookCommentWhereInput
    orderBy?: Enumerable<FacebookCommentOrderByWithAggregationInput>
    by: FacebookCommentScalarFieldEnum[]
    having?: FacebookCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookCommentCountAggregateInputType | true
    _avg?: FacebookCommentAvgAggregateInputType
    _sum?: FacebookCommentSumAggregateInputType
    _min?: FacebookCommentMinAggregateInputType
    _max?: FacebookCommentMaxAggregateInputType
  }


  export type FacebookCommentGroupByOutputType = {
    id: number
    message: string
    commentByUserId: number
    postId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookCommentCountAggregateOutputType | null
    _avg: FacebookCommentAvgAggregateOutputType | null
    _sum: FacebookCommentSumAggregateOutputType | null
    _min: FacebookCommentMinAggregateOutputType | null
    _max: FacebookCommentMaxAggregateOutputType | null
  }

  type GetFacebookCommentGroupByPayload<T extends FacebookCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookCommentGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookCommentGroupByOutputType[P]>
        }
      >
    >


  export type FacebookCommentSelect = {
    id?: boolean
    message?: boolean
    commentByUser?: boolean | FacebookUserArgs
    commentByUserId?: boolean
    post?: boolean | FacebookPostArgs
    postId?: boolean
    isReplied?: boolean
    replyFromCommentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookCommentInclude = {
    commentByUser?: boolean | FacebookUserArgs
    post?: boolean | FacebookPostArgs
  }

  export type FacebookCommentGetPayload<S extends boolean | null | undefined | FacebookCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookComment :
    S extends undefined ? never :
    S extends { include: any } & (FacebookCommentArgs | FacebookCommentFindManyArgs)
    ? FacebookComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'commentByUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'post' ? FacebookPostGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookCommentArgs | FacebookCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'commentByUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'post' ? FacebookPostGetPayload<S['select'][P]> :  P extends keyof FacebookComment ? FacebookComment[P] : never
  } 
      : FacebookComment


  type FacebookCommentCountArgs = 
    Omit<FacebookCommentFindManyArgs, 'select' | 'include'> & {
      select?: FacebookCommentCountAggregateInputType | true
    }

  export interface FacebookCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookComment that matches the filter.
     * @param {FacebookCommentFindUniqueArgs} args - Arguments to find a FacebookComment
     * @example
     * // Get one FacebookComment
     * const facebookComment = await prisma.facebookComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookComment'> extends True ? Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>> : Prisma__FacebookCommentClient<FacebookCommentGetPayload<T> | null, null>

    /**
     * Find one FacebookComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookCommentFindUniqueOrThrowArgs} args - Arguments to find a FacebookComment
     * @example
     * // Get one FacebookComment
     * const facebookComment = await prisma.facebookComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookCommentFindUniqueOrThrowArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Find the first FacebookComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentFindFirstArgs} args - Arguments to find a FacebookComment
     * @example
     * // Get one FacebookComment
     * const facebookComment = await prisma.facebookComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookComment'> extends True ? Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>> : Prisma__FacebookCommentClient<FacebookCommentGetPayload<T> | null, null>

    /**
     * Find the first FacebookComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentFindFirstOrThrowArgs} args - Arguments to find a FacebookComment
     * @example
     * // Get one FacebookComment
     * const facebookComment = await prisma.facebookComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookCommentFindFirstOrThrowArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Find zero or more FacebookComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookComments
     * const facebookComments = await prisma.facebookComment.findMany()
     * 
     * // Get first 10 FacebookComments
     * const facebookComments = await prisma.facebookComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookCommentWithIdOnly = await prisma.facebookComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookCommentFindManyArgs>(
      args?: SelectSubset<T, FacebookCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookCommentGetPayload<T>>>

    /**
     * Create a FacebookComment.
     * @param {FacebookCommentCreateArgs} args - Arguments to create a FacebookComment.
     * @example
     * // Create one FacebookComment
     * const FacebookComment = await prisma.facebookComment.create({
     *   data: {
     *     // ... data to create a FacebookComment
     *   }
     * })
     * 
    **/
    create<T extends FacebookCommentCreateArgs>(
      args: SelectSubset<T, FacebookCommentCreateArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Create many FacebookComments.
     *     @param {FacebookCommentCreateManyArgs} args - Arguments to create many FacebookComments.
     *     @example
     *     // Create many FacebookComments
     *     const facebookComment = await prisma.facebookComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookCommentCreateManyArgs>(
      args?: SelectSubset<T, FacebookCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookComment.
     * @param {FacebookCommentDeleteArgs} args - Arguments to delete one FacebookComment.
     * @example
     * // Delete one FacebookComment
     * const FacebookComment = await prisma.facebookComment.delete({
     *   where: {
     *     // ... filter to delete one FacebookComment
     *   }
     * })
     * 
    **/
    delete<T extends FacebookCommentDeleteArgs>(
      args: SelectSubset<T, FacebookCommentDeleteArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Update one FacebookComment.
     * @param {FacebookCommentUpdateArgs} args - Arguments to update one FacebookComment.
     * @example
     * // Update one FacebookComment
     * const facebookComment = await prisma.facebookComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookCommentUpdateArgs>(
      args: SelectSubset<T, FacebookCommentUpdateArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Delete zero or more FacebookComments.
     * @param {FacebookCommentDeleteManyArgs} args - Arguments to filter FacebookComments to delete.
     * @example
     * // Delete a few FacebookComments
     * const { count } = await prisma.facebookComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookCommentDeleteManyArgs>(
      args?: SelectSubset<T, FacebookCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookComments
     * const facebookComment = await prisma.facebookComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookCommentUpdateManyArgs>(
      args: SelectSubset<T, FacebookCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookComment.
     * @param {FacebookCommentUpsertArgs} args - Arguments to update or create a FacebookComment.
     * @example
     * // Update or create a FacebookComment
     * const facebookComment = await prisma.facebookComment.upsert({
     *   create: {
     *     // ... data to create a FacebookComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookComment we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookCommentUpsertArgs>(
      args: SelectSubset<T, FacebookCommentUpsertArgs>
    ): Prisma__FacebookCommentClient<FacebookCommentGetPayload<T>>

    /**
     * Count the number of FacebookComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentCountArgs} args - Arguments to filter FacebookComments to count.
     * @example
     * // Count the number of FacebookComments
     * const count = await prisma.facebookComment.count({
     *   where: {
     *     // ... the filter for the FacebookComments we want to count
     *   }
     * })
    **/
    count<T extends FacebookCommentCountArgs>(
      args?: Subset<T, FacebookCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookCommentAggregateArgs>(args: Subset<T, FacebookCommentAggregateArgs>): Prisma.PrismaPromise<GetFacebookCommentAggregateType<T>>

    /**
     * Group by FacebookComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookCommentGroupByArgs['orderBy'] }
        : { orderBy?: FacebookCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    commentByUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    post<T extends FacebookPostArgs= {}>(args?: Subset<T, FacebookPostArgs>): Prisma__FacebookPostClient<FacebookPostGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookComment base type for findUnique actions
   */
  export type FacebookCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter, which FacebookComment to fetch.
     */
    where: FacebookCommentWhereUniqueInput
  }

  /**
   * FacebookComment findUnique
   */
  export interface FacebookCommentFindUniqueArgs extends FacebookCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookComment findUniqueOrThrow
   */
  export type FacebookCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter, which FacebookComment to fetch.
     */
    where: FacebookCommentWhereUniqueInput
  }


  /**
   * FacebookComment base type for findFirst actions
   */
  export type FacebookCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter, which FacebookComment to fetch.
     */
    where?: FacebookCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookComments to fetch.
     */
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookComments.
     */
    cursor?: FacebookCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookComments.
     */
    distinct?: Enumerable<FacebookCommentScalarFieldEnum>
  }

  /**
   * FacebookComment findFirst
   */
  export interface FacebookCommentFindFirstArgs extends FacebookCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookComment findFirstOrThrow
   */
  export type FacebookCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter, which FacebookComment to fetch.
     */
    where?: FacebookCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookComments to fetch.
     */
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookComments.
     */
    cursor?: FacebookCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookComments.
     */
    distinct?: Enumerable<FacebookCommentScalarFieldEnum>
  }


  /**
   * FacebookComment findMany
   */
  export type FacebookCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter, which FacebookComments to fetch.
     */
    where?: FacebookCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookComments to fetch.
     */
    orderBy?: Enumerable<FacebookCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookComments.
     */
    cursor?: FacebookCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookComments.
     */
    skip?: number
    distinct?: Enumerable<FacebookCommentScalarFieldEnum>
  }


  /**
   * FacebookComment create
   */
  export type FacebookCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * The data needed to create a FacebookComment.
     */
    data: XOR<FacebookCommentCreateInput, FacebookCommentUncheckedCreateInput>
  }


  /**
   * FacebookComment createMany
   */
  export type FacebookCommentCreateManyArgs = {
    /**
     * The data used to create many FacebookComments.
     */
    data: Enumerable<FacebookCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookComment update
   */
  export type FacebookCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * The data needed to update a FacebookComment.
     */
    data: XOR<FacebookCommentUpdateInput, FacebookCommentUncheckedUpdateInput>
    /**
     * Choose, which FacebookComment to update.
     */
    where: FacebookCommentWhereUniqueInput
  }


  /**
   * FacebookComment updateMany
   */
  export type FacebookCommentUpdateManyArgs = {
    /**
     * The data used to update FacebookComments.
     */
    data: XOR<FacebookCommentUpdateManyMutationInput, FacebookCommentUncheckedUpdateManyInput>
    /**
     * Filter which FacebookComments to update
     */
    where?: FacebookCommentWhereInput
  }


  /**
   * FacebookComment upsert
   */
  export type FacebookCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * The filter to search for the FacebookComment to update in case it exists.
     */
    where: FacebookCommentWhereUniqueInput
    /**
     * In case the FacebookComment found by the `where` argument doesn't exist, create a new FacebookComment with this data.
     */
    create: XOR<FacebookCommentCreateInput, FacebookCommentUncheckedCreateInput>
    /**
     * In case the FacebookComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookCommentUpdateInput, FacebookCommentUncheckedUpdateInput>
  }


  /**
   * FacebookComment delete
   */
  export type FacebookCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
    /**
     * Filter which FacebookComment to delete.
     */
    where: FacebookCommentWhereUniqueInput
  }


  /**
   * FacebookComment deleteMany
   */
  export type FacebookCommentDeleteManyArgs = {
    /**
     * Filter which FacebookComments to delete
     */
    where?: FacebookCommentWhereInput
  }


  /**
   * FacebookComment without action
   */
  export type FacebookCommentArgs = {
    /**
     * Select specific fields to fetch from the FacebookComment
     */
    select?: FacebookCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookCommentInclude | null
  }



  /**
   * Model FacebookLikeType
   */


  export type AggregateFacebookLikeType = {
    _count: FacebookLikeTypeCountAggregateOutputType | null
    _avg: FacebookLikeTypeAvgAggregateOutputType | null
    _sum: FacebookLikeTypeSumAggregateOutputType | null
    _min: FacebookLikeTypeMinAggregateOutputType | null
    _max: FacebookLikeTypeMaxAggregateOutputType | null
  }

  export type FacebookLikeTypeAvgAggregateOutputType = {
    id: number | null
  }

  export type FacebookLikeTypeSumAggregateOutputType = {
    id: number | null
  }

  export type FacebookLikeTypeMinAggregateOutputType = {
    id: number | null
    emoji: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikeTypeMaxAggregateOutputType = {
    id: number | null
    emoji: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikeTypeCountAggregateOutputType = {
    id: number
    emoji: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookLikeTypeAvgAggregateInputType = {
    id?: true
  }

  export type FacebookLikeTypeSumAggregateInputType = {
    id?: true
  }

  export type FacebookLikeTypeMinAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikeTypeMaxAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikeTypeCountAggregateInputType = {
    id?: true
    emoji?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookLikeTypeAggregateArgs = {
    /**
     * Filter which FacebookLikeType to aggregate.
     */
    where?: FacebookLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeTypes to fetch.
     */
    orderBy?: Enumerable<FacebookLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookLikeTypes
    **/
    _count?: true | FacebookLikeTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookLikeTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookLikeTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookLikeTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookLikeTypeMaxAggregateInputType
  }

  export type GetFacebookLikeTypeAggregateType<T extends FacebookLikeTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookLikeType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookLikeType[P]>
      : GetScalarType<T[P], AggregateFacebookLikeType[P]>
  }




  export type FacebookLikeTypeGroupByArgs = {
    where?: FacebookLikeTypeWhereInput
    orderBy?: Enumerable<FacebookLikeTypeOrderByWithAggregationInput>
    by: FacebookLikeTypeScalarFieldEnum[]
    having?: FacebookLikeTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookLikeTypeCountAggregateInputType | true
    _avg?: FacebookLikeTypeAvgAggregateInputType
    _sum?: FacebookLikeTypeSumAggregateInputType
    _min?: FacebookLikeTypeMinAggregateInputType
    _max?: FacebookLikeTypeMaxAggregateInputType
  }


  export type FacebookLikeTypeGroupByOutputType = {
    id: number
    emoji: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: FacebookLikeTypeCountAggregateOutputType | null
    _avg: FacebookLikeTypeAvgAggregateOutputType | null
    _sum: FacebookLikeTypeSumAggregateOutputType | null
    _min: FacebookLikeTypeMinAggregateOutputType | null
    _max: FacebookLikeTypeMaxAggregateOutputType | null
  }

  type GetFacebookLikeTypeGroupByPayload<T extends FacebookLikeTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookLikeTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookLikeTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookLikeTypeGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookLikeTypeGroupByOutputType[P]>
        }
      >
    >


  export type FacebookLikeTypeSelect = {
    id?: boolean
    emoji?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    likePosts?: boolean | FacebookLikeType$likePostsArgs
    likeComments?: boolean | FacebookLikeType$likeCommentsArgs
    _count?: boolean | FacebookLikeTypeCountOutputTypeArgs
  }


  export type FacebookLikeTypeInclude = {
    likePosts?: boolean | FacebookLikeType$likePostsArgs
    likeComments?: boolean | FacebookLikeType$likeCommentsArgs
    _count?: boolean | FacebookLikeTypeCountOutputTypeArgs
  }

  export type FacebookLikeTypeGetPayload<S extends boolean | null | undefined | FacebookLikeTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLikeType :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLikeTypeArgs | FacebookLikeTypeFindManyArgs)
    ? FacebookLikeType  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['include'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['include'][P]>>  :
        P extends '_count' ? FacebookLikeTypeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookLikeTypeArgs | FacebookLikeTypeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'likePosts' ? Array < FacebookLikePostGetPayload<S['select'][P]>>  :
        P extends 'likeComments' ? Array < FacebookLikeCommentGetPayload<S['select'][P]>>  :
        P extends '_count' ? FacebookLikeTypeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof FacebookLikeType ? FacebookLikeType[P] : never
  } 
      : FacebookLikeType


  type FacebookLikeTypeCountArgs = 
    Omit<FacebookLikeTypeFindManyArgs, 'select' | 'include'> & {
      select?: FacebookLikeTypeCountAggregateInputType | true
    }

  export interface FacebookLikeTypeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookLikeType that matches the filter.
     * @param {FacebookLikeTypeFindUniqueArgs} args - Arguments to find a FacebookLikeType
     * @example
     * // Get one FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookLikeTypeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookLikeTypeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookLikeType'> extends True ? Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>> : Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T> | null, null>

    /**
     * Find one FacebookLikeType that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookLikeTypeFindUniqueOrThrowArgs} args - Arguments to find a FacebookLikeType
     * @example
     * // Get one FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookLikeTypeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikeTypeFindUniqueOrThrowArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Find the first FacebookLikeType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeFindFirstArgs} args - Arguments to find a FacebookLikeType
     * @example
     * // Get one FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookLikeTypeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookLikeTypeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookLikeType'> extends True ? Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>> : Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T> | null, null>

    /**
     * Find the first FacebookLikeType that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeFindFirstOrThrowArgs} args - Arguments to find a FacebookLikeType
     * @example
     * // Get one FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookLikeTypeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikeTypeFindFirstOrThrowArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Find zero or more FacebookLikeTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookLikeTypes
     * const facebookLikeTypes = await prisma.facebookLikeType.findMany()
     * 
     * // Get first 10 FacebookLikeTypes
     * const facebookLikeTypes = await prisma.facebookLikeType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookLikeTypeWithIdOnly = await prisma.facebookLikeType.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookLikeTypeFindManyArgs>(
      args?: SelectSubset<T, FacebookLikeTypeFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookLikeTypeGetPayload<T>>>

    /**
     * Create a FacebookLikeType.
     * @param {FacebookLikeTypeCreateArgs} args - Arguments to create a FacebookLikeType.
     * @example
     * // Create one FacebookLikeType
     * const FacebookLikeType = await prisma.facebookLikeType.create({
     *   data: {
     *     // ... data to create a FacebookLikeType
     *   }
     * })
     * 
    **/
    create<T extends FacebookLikeTypeCreateArgs>(
      args: SelectSubset<T, FacebookLikeTypeCreateArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Create many FacebookLikeTypes.
     *     @param {FacebookLikeTypeCreateManyArgs} args - Arguments to create many FacebookLikeTypes.
     *     @example
     *     // Create many FacebookLikeTypes
     *     const facebookLikeType = await prisma.facebookLikeType.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookLikeTypeCreateManyArgs>(
      args?: SelectSubset<T, FacebookLikeTypeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookLikeType.
     * @param {FacebookLikeTypeDeleteArgs} args - Arguments to delete one FacebookLikeType.
     * @example
     * // Delete one FacebookLikeType
     * const FacebookLikeType = await prisma.facebookLikeType.delete({
     *   where: {
     *     // ... filter to delete one FacebookLikeType
     *   }
     * })
     * 
    **/
    delete<T extends FacebookLikeTypeDeleteArgs>(
      args: SelectSubset<T, FacebookLikeTypeDeleteArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Update one FacebookLikeType.
     * @param {FacebookLikeTypeUpdateArgs} args - Arguments to update one FacebookLikeType.
     * @example
     * // Update one FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookLikeTypeUpdateArgs>(
      args: SelectSubset<T, FacebookLikeTypeUpdateArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Delete zero or more FacebookLikeTypes.
     * @param {FacebookLikeTypeDeleteManyArgs} args - Arguments to filter FacebookLikeTypes to delete.
     * @example
     * // Delete a few FacebookLikeTypes
     * const { count } = await prisma.facebookLikeType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookLikeTypeDeleteManyArgs>(
      args?: SelectSubset<T, FacebookLikeTypeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookLikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookLikeTypes
     * const facebookLikeType = await prisma.facebookLikeType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookLikeTypeUpdateManyArgs>(
      args: SelectSubset<T, FacebookLikeTypeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookLikeType.
     * @param {FacebookLikeTypeUpsertArgs} args - Arguments to update or create a FacebookLikeType.
     * @example
     * // Update or create a FacebookLikeType
     * const facebookLikeType = await prisma.facebookLikeType.upsert({
     *   create: {
     *     // ... data to create a FacebookLikeType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookLikeType we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookLikeTypeUpsertArgs>(
      args: SelectSubset<T, FacebookLikeTypeUpsertArgs>
    ): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T>>

    /**
     * Count the number of FacebookLikeTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeCountArgs} args - Arguments to filter FacebookLikeTypes to count.
     * @example
     * // Count the number of FacebookLikeTypes
     * const count = await prisma.facebookLikeType.count({
     *   where: {
     *     // ... the filter for the FacebookLikeTypes we want to count
     *   }
     * })
    **/
    count<T extends FacebookLikeTypeCountArgs>(
      args?: Subset<T, FacebookLikeTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookLikeTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookLikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookLikeTypeAggregateArgs>(args: Subset<T, FacebookLikeTypeAggregateArgs>): Prisma.PrismaPromise<GetFacebookLikeTypeAggregateType<T>>

    /**
     * Group by FacebookLikeType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookLikeTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookLikeTypeGroupByArgs['orderBy'] }
        : { orderBy?: FacebookLikeTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookLikeTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookLikeTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookLikeType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookLikeTypeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    likePosts<T extends FacebookLikeType$likePostsArgs= {}>(args?: Subset<T, FacebookLikeType$likePostsArgs>): Prisma.PrismaPromise<Array<FacebookLikePostGetPayload<T>>| Null>;

    likeComments<T extends FacebookLikeType$likeCommentsArgs= {}>(args?: Subset<T, FacebookLikeType$likeCommentsArgs>): Prisma.PrismaPromise<Array<FacebookLikeCommentGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookLikeType base type for findUnique actions
   */
  export type FacebookLikeTypeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter, which FacebookLikeType to fetch.
     */
    where: FacebookLikeTypeWhereUniqueInput
  }

  /**
   * FacebookLikeType findUnique
   */
  export interface FacebookLikeTypeFindUniqueArgs extends FacebookLikeTypeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikeType findUniqueOrThrow
   */
  export type FacebookLikeTypeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter, which FacebookLikeType to fetch.
     */
    where: FacebookLikeTypeWhereUniqueInput
  }


  /**
   * FacebookLikeType base type for findFirst actions
   */
  export type FacebookLikeTypeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter, which FacebookLikeType to fetch.
     */
    where?: FacebookLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeTypes to fetch.
     */
    orderBy?: Enumerable<FacebookLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikeTypes.
     */
    cursor?: FacebookLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikeTypes.
     */
    distinct?: Enumerable<FacebookLikeTypeScalarFieldEnum>
  }

  /**
   * FacebookLikeType findFirst
   */
  export interface FacebookLikeTypeFindFirstArgs extends FacebookLikeTypeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikeType findFirstOrThrow
   */
  export type FacebookLikeTypeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter, which FacebookLikeType to fetch.
     */
    where?: FacebookLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeTypes to fetch.
     */
    orderBy?: Enumerable<FacebookLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikeTypes.
     */
    cursor?: FacebookLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikeTypes.
     */
    distinct?: Enumerable<FacebookLikeTypeScalarFieldEnum>
  }


  /**
   * FacebookLikeType findMany
   */
  export type FacebookLikeTypeFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter, which FacebookLikeTypes to fetch.
     */
    where?: FacebookLikeTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeTypes to fetch.
     */
    orderBy?: Enumerable<FacebookLikeTypeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookLikeTypes.
     */
    cursor?: FacebookLikeTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeTypes.
     */
    skip?: number
    distinct?: Enumerable<FacebookLikeTypeScalarFieldEnum>
  }


  /**
   * FacebookLikeType create
   */
  export type FacebookLikeTypeCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * The data needed to create a FacebookLikeType.
     */
    data: XOR<FacebookLikeTypeCreateInput, FacebookLikeTypeUncheckedCreateInput>
  }


  /**
   * FacebookLikeType createMany
   */
  export type FacebookLikeTypeCreateManyArgs = {
    /**
     * The data used to create many FacebookLikeTypes.
     */
    data: Enumerable<FacebookLikeTypeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookLikeType update
   */
  export type FacebookLikeTypeUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * The data needed to update a FacebookLikeType.
     */
    data: XOR<FacebookLikeTypeUpdateInput, FacebookLikeTypeUncheckedUpdateInput>
    /**
     * Choose, which FacebookLikeType to update.
     */
    where: FacebookLikeTypeWhereUniqueInput
  }


  /**
   * FacebookLikeType updateMany
   */
  export type FacebookLikeTypeUpdateManyArgs = {
    /**
     * The data used to update FacebookLikeTypes.
     */
    data: XOR<FacebookLikeTypeUpdateManyMutationInput, FacebookLikeTypeUncheckedUpdateManyInput>
    /**
     * Filter which FacebookLikeTypes to update
     */
    where?: FacebookLikeTypeWhereInput
  }


  /**
   * FacebookLikeType upsert
   */
  export type FacebookLikeTypeUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * The filter to search for the FacebookLikeType to update in case it exists.
     */
    where: FacebookLikeTypeWhereUniqueInput
    /**
     * In case the FacebookLikeType found by the `where` argument doesn't exist, create a new FacebookLikeType with this data.
     */
    create: XOR<FacebookLikeTypeCreateInput, FacebookLikeTypeUncheckedCreateInput>
    /**
     * In case the FacebookLikeType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookLikeTypeUpdateInput, FacebookLikeTypeUncheckedUpdateInput>
  }


  /**
   * FacebookLikeType delete
   */
  export type FacebookLikeTypeDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
    /**
     * Filter which FacebookLikeType to delete.
     */
    where: FacebookLikeTypeWhereUniqueInput
  }


  /**
   * FacebookLikeType deleteMany
   */
  export type FacebookLikeTypeDeleteManyArgs = {
    /**
     * Filter which FacebookLikeTypes to delete
     */
    where?: FacebookLikeTypeWhereInput
  }


  /**
   * FacebookLikeType.likePosts
   */
  export type FacebookLikeType$likePostsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    where?: FacebookLikePostWhereInput
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    cursor?: FacebookLikePostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }


  /**
   * FacebookLikeType.likeComments
   */
  export type FacebookLikeType$likeCommentsArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    where?: FacebookLikeCommentWhereInput
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    cursor?: FacebookLikeCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }


  /**
   * FacebookLikeType without action
   */
  export type FacebookLikeTypeArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeType
     */
    select?: FacebookLikeTypeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeTypeInclude | null
  }



  /**
   * Model FacebookLikePost
   */


  export type AggregateFacebookLikePost = {
    _count: FacebookLikePostCountAggregateOutputType | null
    _avg: FacebookLikePostAvgAggregateOutputType | null
    _sum: FacebookLikePostSumAggregateOutputType | null
    _min: FacebookLikePostMinAggregateOutputType | null
    _max: FacebookLikePostMaxAggregateOutputType | null
  }

  export type FacebookLikePostAvgAggregateOutputType = {
    id: number | null
    postId: number | null
    posterUserId: number | null
    likeTypeId: number | null
  }

  export type FacebookLikePostSumAggregateOutputType = {
    id: number | null
    postId: number | null
    posterUserId: number | null
    likeTypeId: number | null
  }

  export type FacebookLikePostMinAggregateOutputType = {
    id: number | null
    postId: number | null
    posterUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikePostMaxAggregateOutputType = {
    id: number | null
    postId: number | null
    posterUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikePostCountAggregateOutputType = {
    id: number
    postId: number
    posterUserId: number
    likeTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookLikePostAvgAggregateInputType = {
    id?: true
    postId?: true
    posterUserId?: true
    likeTypeId?: true
  }

  export type FacebookLikePostSumAggregateInputType = {
    id?: true
    postId?: true
    posterUserId?: true
    likeTypeId?: true
  }

  export type FacebookLikePostMinAggregateInputType = {
    id?: true
    postId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikePostMaxAggregateInputType = {
    id?: true
    postId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikePostCountAggregateInputType = {
    id?: true
    postId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookLikePostAggregateArgs = {
    /**
     * Filter which FacebookLikePost to aggregate.
     */
    where?: FacebookLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikePosts to fetch.
     */
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookLikePosts
    **/
    _count?: true | FacebookLikePostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookLikePostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookLikePostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookLikePostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookLikePostMaxAggregateInputType
  }

  export type GetFacebookLikePostAggregateType<T extends FacebookLikePostAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookLikePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookLikePost[P]>
      : GetScalarType<T[P], AggregateFacebookLikePost[P]>
  }




  export type FacebookLikePostGroupByArgs = {
    where?: FacebookLikePostWhereInput
    orderBy?: Enumerable<FacebookLikePostOrderByWithAggregationInput>
    by: FacebookLikePostScalarFieldEnum[]
    having?: FacebookLikePostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookLikePostCountAggregateInputType | true
    _avg?: FacebookLikePostAvgAggregateInputType
    _sum?: FacebookLikePostSumAggregateInputType
    _min?: FacebookLikePostMinAggregateInputType
    _max?: FacebookLikePostMaxAggregateInputType
  }


  export type FacebookLikePostGroupByOutputType = {
    id: number
    postId: number
    posterUserId: number
    likeTypeId: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookLikePostCountAggregateOutputType | null
    _avg: FacebookLikePostAvgAggregateOutputType | null
    _sum: FacebookLikePostSumAggregateOutputType | null
    _min: FacebookLikePostMinAggregateOutputType | null
    _max: FacebookLikePostMaxAggregateOutputType | null
  }

  type GetFacebookLikePostGroupByPayload<T extends FacebookLikePostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookLikePostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookLikePostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookLikePostGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookLikePostGroupByOutputType[P]>
        }
      >
    >


  export type FacebookLikePostSelect = {
    id?: boolean
    post?: boolean | FacebookPostArgs
    postId?: boolean
    posterUser?: boolean | FacebookUserArgs
    posterUserId?: boolean
    likeType?: boolean | FacebookLikeTypeArgs
    likeTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookLikePostInclude = {
    post?: boolean | FacebookPostArgs
    posterUser?: boolean | FacebookUserArgs
    likeType?: boolean | FacebookLikeTypeArgs
  }

  export type FacebookLikePostGetPayload<S extends boolean | null | undefined | FacebookLikePostArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLikePost :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLikePostArgs | FacebookLikePostFindManyArgs)
    ? FacebookLikePost  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'post' ? FacebookPostGetPayload<S['include'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'likeType' ? FacebookLikeTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookLikePostArgs | FacebookLikePostFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'post' ? FacebookPostGetPayload<S['select'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'likeType' ? FacebookLikeTypeGetPayload<S['select'][P]> :  P extends keyof FacebookLikePost ? FacebookLikePost[P] : never
  } 
      : FacebookLikePost


  type FacebookLikePostCountArgs = 
    Omit<FacebookLikePostFindManyArgs, 'select' | 'include'> & {
      select?: FacebookLikePostCountAggregateInputType | true
    }

  export interface FacebookLikePostDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookLikePost that matches the filter.
     * @param {FacebookLikePostFindUniqueArgs} args - Arguments to find a FacebookLikePost
     * @example
     * // Get one FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookLikePostFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookLikePostFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookLikePost'> extends True ? Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>> : Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T> | null, null>

    /**
     * Find one FacebookLikePost that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookLikePostFindUniqueOrThrowArgs} args - Arguments to find a FacebookLikePost
     * @example
     * // Get one FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookLikePostFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikePostFindUniqueOrThrowArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Find the first FacebookLikePost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostFindFirstArgs} args - Arguments to find a FacebookLikePost
     * @example
     * // Get one FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookLikePostFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookLikePostFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookLikePost'> extends True ? Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>> : Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T> | null, null>

    /**
     * Find the first FacebookLikePost that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostFindFirstOrThrowArgs} args - Arguments to find a FacebookLikePost
     * @example
     * // Get one FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookLikePostFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikePostFindFirstOrThrowArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Find zero or more FacebookLikePosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookLikePosts
     * const facebookLikePosts = await prisma.facebookLikePost.findMany()
     * 
     * // Get first 10 FacebookLikePosts
     * const facebookLikePosts = await prisma.facebookLikePost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookLikePostWithIdOnly = await prisma.facebookLikePost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookLikePostFindManyArgs>(
      args?: SelectSubset<T, FacebookLikePostFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookLikePostGetPayload<T>>>

    /**
     * Create a FacebookLikePost.
     * @param {FacebookLikePostCreateArgs} args - Arguments to create a FacebookLikePost.
     * @example
     * // Create one FacebookLikePost
     * const FacebookLikePost = await prisma.facebookLikePost.create({
     *   data: {
     *     // ... data to create a FacebookLikePost
     *   }
     * })
     * 
    **/
    create<T extends FacebookLikePostCreateArgs>(
      args: SelectSubset<T, FacebookLikePostCreateArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Create many FacebookLikePosts.
     *     @param {FacebookLikePostCreateManyArgs} args - Arguments to create many FacebookLikePosts.
     *     @example
     *     // Create many FacebookLikePosts
     *     const facebookLikePost = await prisma.facebookLikePost.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookLikePostCreateManyArgs>(
      args?: SelectSubset<T, FacebookLikePostCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookLikePost.
     * @param {FacebookLikePostDeleteArgs} args - Arguments to delete one FacebookLikePost.
     * @example
     * // Delete one FacebookLikePost
     * const FacebookLikePost = await prisma.facebookLikePost.delete({
     *   where: {
     *     // ... filter to delete one FacebookLikePost
     *   }
     * })
     * 
    **/
    delete<T extends FacebookLikePostDeleteArgs>(
      args: SelectSubset<T, FacebookLikePostDeleteArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Update one FacebookLikePost.
     * @param {FacebookLikePostUpdateArgs} args - Arguments to update one FacebookLikePost.
     * @example
     * // Update one FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookLikePostUpdateArgs>(
      args: SelectSubset<T, FacebookLikePostUpdateArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Delete zero or more FacebookLikePosts.
     * @param {FacebookLikePostDeleteManyArgs} args - Arguments to filter FacebookLikePosts to delete.
     * @example
     * // Delete a few FacebookLikePosts
     * const { count } = await prisma.facebookLikePost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookLikePostDeleteManyArgs>(
      args?: SelectSubset<T, FacebookLikePostDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookLikePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookLikePosts
     * const facebookLikePost = await prisma.facebookLikePost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookLikePostUpdateManyArgs>(
      args: SelectSubset<T, FacebookLikePostUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookLikePost.
     * @param {FacebookLikePostUpsertArgs} args - Arguments to update or create a FacebookLikePost.
     * @example
     * // Update or create a FacebookLikePost
     * const facebookLikePost = await prisma.facebookLikePost.upsert({
     *   create: {
     *     // ... data to create a FacebookLikePost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookLikePost we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookLikePostUpsertArgs>(
      args: SelectSubset<T, FacebookLikePostUpsertArgs>
    ): Prisma__FacebookLikePostClient<FacebookLikePostGetPayload<T>>

    /**
     * Count the number of FacebookLikePosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostCountArgs} args - Arguments to filter FacebookLikePosts to count.
     * @example
     * // Count the number of FacebookLikePosts
     * const count = await prisma.facebookLikePost.count({
     *   where: {
     *     // ... the filter for the FacebookLikePosts we want to count
     *   }
     * })
    **/
    count<T extends FacebookLikePostCountArgs>(
      args?: Subset<T, FacebookLikePostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookLikePostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookLikePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookLikePostAggregateArgs>(args: Subset<T, FacebookLikePostAggregateArgs>): Prisma.PrismaPromise<GetFacebookLikePostAggregateType<T>>

    /**
     * Group by FacebookLikePost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikePostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookLikePostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookLikePostGroupByArgs['orderBy'] }
        : { orderBy?: FacebookLikePostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookLikePostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookLikePostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookLikePost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookLikePostClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    post<T extends FacebookPostArgs= {}>(args?: Subset<T, FacebookPostArgs>): Prisma__FacebookPostClient<FacebookPostGetPayload<T> | Null>;

    posterUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    likeType<T extends FacebookLikeTypeArgs= {}>(args?: Subset<T, FacebookLikeTypeArgs>): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookLikePost base type for findUnique actions
   */
  export type FacebookLikePostFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter, which FacebookLikePost to fetch.
     */
    where: FacebookLikePostWhereUniqueInput
  }

  /**
   * FacebookLikePost findUnique
   */
  export interface FacebookLikePostFindUniqueArgs extends FacebookLikePostFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikePost findUniqueOrThrow
   */
  export type FacebookLikePostFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter, which FacebookLikePost to fetch.
     */
    where: FacebookLikePostWhereUniqueInput
  }


  /**
   * FacebookLikePost base type for findFirst actions
   */
  export type FacebookLikePostFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter, which FacebookLikePost to fetch.
     */
    where?: FacebookLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikePosts to fetch.
     */
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikePosts.
     */
    cursor?: FacebookLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikePosts.
     */
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }

  /**
   * FacebookLikePost findFirst
   */
  export interface FacebookLikePostFindFirstArgs extends FacebookLikePostFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikePost findFirstOrThrow
   */
  export type FacebookLikePostFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter, which FacebookLikePost to fetch.
     */
    where?: FacebookLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikePosts to fetch.
     */
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikePosts.
     */
    cursor?: FacebookLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikePosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikePosts.
     */
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }


  /**
   * FacebookLikePost findMany
   */
  export type FacebookLikePostFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter, which FacebookLikePosts to fetch.
     */
    where?: FacebookLikePostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikePosts to fetch.
     */
    orderBy?: Enumerable<FacebookLikePostOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookLikePosts.
     */
    cursor?: FacebookLikePostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikePosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikePosts.
     */
    skip?: number
    distinct?: Enumerable<FacebookLikePostScalarFieldEnum>
  }


  /**
   * FacebookLikePost create
   */
  export type FacebookLikePostCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * The data needed to create a FacebookLikePost.
     */
    data: XOR<FacebookLikePostCreateInput, FacebookLikePostUncheckedCreateInput>
  }


  /**
   * FacebookLikePost createMany
   */
  export type FacebookLikePostCreateManyArgs = {
    /**
     * The data used to create many FacebookLikePosts.
     */
    data: Enumerable<FacebookLikePostCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookLikePost update
   */
  export type FacebookLikePostUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * The data needed to update a FacebookLikePost.
     */
    data: XOR<FacebookLikePostUpdateInput, FacebookLikePostUncheckedUpdateInput>
    /**
     * Choose, which FacebookLikePost to update.
     */
    where: FacebookLikePostWhereUniqueInput
  }


  /**
   * FacebookLikePost updateMany
   */
  export type FacebookLikePostUpdateManyArgs = {
    /**
     * The data used to update FacebookLikePosts.
     */
    data: XOR<FacebookLikePostUpdateManyMutationInput, FacebookLikePostUncheckedUpdateManyInput>
    /**
     * Filter which FacebookLikePosts to update
     */
    where?: FacebookLikePostWhereInput
  }


  /**
   * FacebookLikePost upsert
   */
  export type FacebookLikePostUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * The filter to search for the FacebookLikePost to update in case it exists.
     */
    where: FacebookLikePostWhereUniqueInput
    /**
     * In case the FacebookLikePost found by the `where` argument doesn't exist, create a new FacebookLikePost with this data.
     */
    create: XOR<FacebookLikePostCreateInput, FacebookLikePostUncheckedCreateInput>
    /**
     * In case the FacebookLikePost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookLikePostUpdateInput, FacebookLikePostUncheckedUpdateInput>
  }


  /**
   * FacebookLikePost delete
   */
  export type FacebookLikePostDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
    /**
     * Filter which FacebookLikePost to delete.
     */
    where: FacebookLikePostWhereUniqueInput
  }


  /**
   * FacebookLikePost deleteMany
   */
  export type FacebookLikePostDeleteManyArgs = {
    /**
     * Filter which FacebookLikePosts to delete
     */
    where?: FacebookLikePostWhereInput
  }


  /**
   * FacebookLikePost without action
   */
  export type FacebookLikePostArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikePost
     */
    select?: FacebookLikePostSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikePostInclude | null
  }



  /**
   * Model FacebookLikeComment
   */


  export type AggregateFacebookLikeComment = {
    _count: FacebookLikeCommentCountAggregateOutputType | null
    _avg: FacebookLikeCommentAvgAggregateOutputType | null
    _sum: FacebookLikeCommentSumAggregateOutputType | null
    _min: FacebookLikeCommentMinAggregateOutputType | null
    _max: FacebookLikeCommentMaxAggregateOutputType | null
  }

  export type FacebookLikeCommentAvgAggregateOutputType = {
    id: number | null
    commentId: number | null
    posterUserId: number | null
    likeTypeId: number | null
  }

  export type FacebookLikeCommentSumAggregateOutputType = {
    id: number | null
    commentId: number | null
    posterUserId: number | null
    likeTypeId: number | null
  }

  export type FacebookLikeCommentMinAggregateOutputType = {
    id: number | null
    commentId: number | null
    posterUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikeCommentMaxAggregateOutputType = {
    id: number | null
    commentId: number | null
    posterUserId: number | null
    likeTypeId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookLikeCommentCountAggregateOutputType = {
    id: number
    commentId: number
    posterUserId: number
    likeTypeId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookLikeCommentAvgAggregateInputType = {
    id?: true
    commentId?: true
    posterUserId?: true
    likeTypeId?: true
  }

  export type FacebookLikeCommentSumAggregateInputType = {
    id?: true
    commentId?: true
    posterUserId?: true
    likeTypeId?: true
  }

  export type FacebookLikeCommentMinAggregateInputType = {
    id?: true
    commentId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikeCommentMaxAggregateInputType = {
    id?: true
    commentId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookLikeCommentCountAggregateInputType = {
    id?: true
    commentId?: true
    posterUserId?: true
    likeTypeId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookLikeCommentAggregateArgs = {
    /**
     * Filter which FacebookLikeComment to aggregate.
     */
    where?: FacebookLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeComments to fetch.
     */
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookLikeComments
    **/
    _count?: true | FacebookLikeCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookLikeCommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookLikeCommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookLikeCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookLikeCommentMaxAggregateInputType
  }

  export type GetFacebookLikeCommentAggregateType<T extends FacebookLikeCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookLikeComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookLikeComment[P]>
      : GetScalarType<T[P], AggregateFacebookLikeComment[P]>
  }




  export type FacebookLikeCommentGroupByArgs = {
    where?: FacebookLikeCommentWhereInput
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithAggregationInput>
    by: FacebookLikeCommentScalarFieldEnum[]
    having?: FacebookLikeCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookLikeCommentCountAggregateInputType | true
    _avg?: FacebookLikeCommentAvgAggregateInputType
    _sum?: FacebookLikeCommentSumAggregateInputType
    _min?: FacebookLikeCommentMinAggregateInputType
    _max?: FacebookLikeCommentMaxAggregateInputType
  }


  export type FacebookLikeCommentGroupByOutputType = {
    id: number
    commentId: number
    posterUserId: number
    likeTypeId: number
    createdAt: Date
    updatedAt: Date
    _count: FacebookLikeCommentCountAggregateOutputType | null
    _avg: FacebookLikeCommentAvgAggregateOutputType | null
    _sum: FacebookLikeCommentSumAggregateOutputType | null
    _min: FacebookLikeCommentMinAggregateOutputType | null
    _max: FacebookLikeCommentMaxAggregateOutputType | null
  }

  type GetFacebookLikeCommentGroupByPayload<T extends FacebookLikeCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookLikeCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookLikeCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookLikeCommentGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookLikeCommentGroupByOutputType[P]>
        }
      >
    >


  export type FacebookLikeCommentSelect = {
    id?: boolean
    comment?: boolean | FacebookPostArgs
    commentId?: boolean
    posterUser?: boolean | FacebookUserArgs
    posterUserId?: boolean
    likeType?: boolean | FacebookLikeTypeArgs
    likeTypeId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookLikeCommentInclude = {
    comment?: boolean | FacebookPostArgs
    posterUser?: boolean | FacebookUserArgs
    likeType?: boolean | FacebookLikeTypeArgs
  }

  export type FacebookLikeCommentGetPayload<S extends boolean | null | undefined | FacebookLikeCommentArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookLikeComment :
    S extends undefined ? never :
    S extends { include: any } & (FacebookLikeCommentArgs | FacebookLikeCommentFindManyArgs)
    ? FacebookLikeComment  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comment' ? FacebookPostGetPayload<S['include'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'likeType' ? FacebookLikeTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookLikeCommentArgs | FacebookLikeCommentFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comment' ? FacebookPostGetPayload<S['select'][P]> :
        P extends 'posterUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'likeType' ? FacebookLikeTypeGetPayload<S['select'][P]> :  P extends keyof FacebookLikeComment ? FacebookLikeComment[P] : never
  } 
      : FacebookLikeComment


  type FacebookLikeCommentCountArgs = 
    Omit<FacebookLikeCommentFindManyArgs, 'select' | 'include'> & {
      select?: FacebookLikeCommentCountAggregateInputType | true
    }

  export interface FacebookLikeCommentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookLikeComment that matches the filter.
     * @param {FacebookLikeCommentFindUniqueArgs} args - Arguments to find a FacebookLikeComment
     * @example
     * // Get one FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookLikeCommentFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookLikeCommentFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookLikeComment'> extends True ? Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>> : Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T> | null, null>

    /**
     * Find one FacebookLikeComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookLikeCommentFindUniqueOrThrowArgs} args - Arguments to find a FacebookLikeComment
     * @example
     * // Get one FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookLikeCommentFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikeCommentFindUniqueOrThrowArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Find the first FacebookLikeComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentFindFirstArgs} args - Arguments to find a FacebookLikeComment
     * @example
     * // Get one FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookLikeCommentFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookLikeCommentFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookLikeComment'> extends True ? Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>> : Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T> | null, null>

    /**
     * Find the first FacebookLikeComment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentFindFirstOrThrowArgs} args - Arguments to find a FacebookLikeComment
     * @example
     * // Get one FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookLikeCommentFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookLikeCommentFindFirstOrThrowArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Find zero or more FacebookLikeComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookLikeComments
     * const facebookLikeComments = await prisma.facebookLikeComment.findMany()
     * 
     * // Get first 10 FacebookLikeComments
     * const facebookLikeComments = await prisma.facebookLikeComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookLikeCommentWithIdOnly = await prisma.facebookLikeComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookLikeCommentFindManyArgs>(
      args?: SelectSubset<T, FacebookLikeCommentFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookLikeCommentGetPayload<T>>>

    /**
     * Create a FacebookLikeComment.
     * @param {FacebookLikeCommentCreateArgs} args - Arguments to create a FacebookLikeComment.
     * @example
     * // Create one FacebookLikeComment
     * const FacebookLikeComment = await prisma.facebookLikeComment.create({
     *   data: {
     *     // ... data to create a FacebookLikeComment
     *   }
     * })
     * 
    **/
    create<T extends FacebookLikeCommentCreateArgs>(
      args: SelectSubset<T, FacebookLikeCommentCreateArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Create many FacebookLikeComments.
     *     @param {FacebookLikeCommentCreateManyArgs} args - Arguments to create many FacebookLikeComments.
     *     @example
     *     // Create many FacebookLikeComments
     *     const facebookLikeComment = await prisma.facebookLikeComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookLikeCommentCreateManyArgs>(
      args?: SelectSubset<T, FacebookLikeCommentCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookLikeComment.
     * @param {FacebookLikeCommentDeleteArgs} args - Arguments to delete one FacebookLikeComment.
     * @example
     * // Delete one FacebookLikeComment
     * const FacebookLikeComment = await prisma.facebookLikeComment.delete({
     *   where: {
     *     // ... filter to delete one FacebookLikeComment
     *   }
     * })
     * 
    **/
    delete<T extends FacebookLikeCommentDeleteArgs>(
      args: SelectSubset<T, FacebookLikeCommentDeleteArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Update one FacebookLikeComment.
     * @param {FacebookLikeCommentUpdateArgs} args - Arguments to update one FacebookLikeComment.
     * @example
     * // Update one FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookLikeCommentUpdateArgs>(
      args: SelectSubset<T, FacebookLikeCommentUpdateArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Delete zero or more FacebookLikeComments.
     * @param {FacebookLikeCommentDeleteManyArgs} args - Arguments to filter FacebookLikeComments to delete.
     * @example
     * // Delete a few FacebookLikeComments
     * const { count } = await prisma.facebookLikeComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookLikeCommentDeleteManyArgs>(
      args?: SelectSubset<T, FacebookLikeCommentDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookLikeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookLikeComments
     * const facebookLikeComment = await prisma.facebookLikeComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookLikeCommentUpdateManyArgs>(
      args: SelectSubset<T, FacebookLikeCommentUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookLikeComment.
     * @param {FacebookLikeCommentUpsertArgs} args - Arguments to update or create a FacebookLikeComment.
     * @example
     * // Update or create a FacebookLikeComment
     * const facebookLikeComment = await prisma.facebookLikeComment.upsert({
     *   create: {
     *     // ... data to create a FacebookLikeComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookLikeComment we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookLikeCommentUpsertArgs>(
      args: SelectSubset<T, FacebookLikeCommentUpsertArgs>
    ): Prisma__FacebookLikeCommentClient<FacebookLikeCommentGetPayload<T>>

    /**
     * Count the number of FacebookLikeComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentCountArgs} args - Arguments to filter FacebookLikeComments to count.
     * @example
     * // Count the number of FacebookLikeComments
     * const count = await prisma.facebookLikeComment.count({
     *   where: {
     *     // ... the filter for the FacebookLikeComments we want to count
     *   }
     * })
    **/
    count<T extends FacebookLikeCommentCountArgs>(
      args?: Subset<T, FacebookLikeCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookLikeCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookLikeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookLikeCommentAggregateArgs>(args: Subset<T, FacebookLikeCommentAggregateArgs>): Prisma.PrismaPromise<GetFacebookLikeCommentAggregateType<T>>

    /**
     * Group by FacebookLikeComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookLikeCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookLikeCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookLikeCommentGroupByArgs['orderBy'] }
        : { orderBy?: FacebookLikeCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookLikeCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookLikeCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookLikeComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookLikeCommentClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comment<T extends FacebookPostArgs= {}>(args?: Subset<T, FacebookPostArgs>): Prisma__FacebookPostClient<FacebookPostGetPayload<T> | Null>;

    posterUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    likeType<T extends FacebookLikeTypeArgs= {}>(args?: Subset<T, FacebookLikeTypeArgs>): Prisma__FacebookLikeTypeClient<FacebookLikeTypeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookLikeComment base type for findUnique actions
   */
  export type FacebookLikeCommentFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter, which FacebookLikeComment to fetch.
     */
    where: FacebookLikeCommentWhereUniqueInput
  }

  /**
   * FacebookLikeComment findUnique
   */
  export interface FacebookLikeCommentFindUniqueArgs extends FacebookLikeCommentFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikeComment findUniqueOrThrow
   */
  export type FacebookLikeCommentFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter, which FacebookLikeComment to fetch.
     */
    where: FacebookLikeCommentWhereUniqueInput
  }


  /**
   * FacebookLikeComment base type for findFirst actions
   */
  export type FacebookLikeCommentFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter, which FacebookLikeComment to fetch.
     */
    where?: FacebookLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeComments to fetch.
     */
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikeComments.
     */
    cursor?: FacebookLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikeComments.
     */
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }

  /**
   * FacebookLikeComment findFirst
   */
  export interface FacebookLikeCommentFindFirstArgs extends FacebookLikeCommentFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookLikeComment findFirstOrThrow
   */
  export type FacebookLikeCommentFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter, which FacebookLikeComment to fetch.
     */
    where?: FacebookLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeComments to fetch.
     */
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookLikeComments.
     */
    cursor?: FacebookLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookLikeComments.
     */
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }


  /**
   * FacebookLikeComment findMany
   */
  export type FacebookLikeCommentFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter, which FacebookLikeComments to fetch.
     */
    where?: FacebookLikeCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookLikeComments to fetch.
     */
    orderBy?: Enumerable<FacebookLikeCommentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookLikeComments.
     */
    cursor?: FacebookLikeCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookLikeComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookLikeComments.
     */
    skip?: number
    distinct?: Enumerable<FacebookLikeCommentScalarFieldEnum>
  }


  /**
   * FacebookLikeComment create
   */
  export type FacebookLikeCommentCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * The data needed to create a FacebookLikeComment.
     */
    data: XOR<FacebookLikeCommentCreateInput, FacebookLikeCommentUncheckedCreateInput>
  }


  /**
   * FacebookLikeComment createMany
   */
  export type FacebookLikeCommentCreateManyArgs = {
    /**
     * The data used to create many FacebookLikeComments.
     */
    data: Enumerable<FacebookLikeCommentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookLikeComment update
   */
  export type FacebookLikeCommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * The data needed to update a FacebookLikeComment.
     */
    data: XOR<FacebookLikeCommentUpdateInput, FacebookLikeCommentUncheckedUpdateInput>
    /**
     * Choose, which FacebookLikeComment to update.
     */
    where: FacebookLikeCommentWhereUniqueInput
  }


  /**
   * FacebookLikeComment updateMany
   */
  export type FacebookLikeCommentUpdateManyArgs = {
    /**
     * The data used to update FacebookLikeComments.
     */
    data: XOR<FacebookLikeCommentUpdateManyMutationInput, FacebookLikeCommentUncheckedUpdateManyInput>
    /**
     * Filter which FacebookLikeComments to update
     */
    where?: FacebookLikeCommentWhereInput
  }


  /**
   * FacebookLikeComment upsert
   */
  export type FacebookLikeCommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * The filter to search for the FacebookLikeComment to update in case it exists.
     */
    where: FacebookLikeCommentWhereUniqueInput
    /**
     * In case the FacebookLikeComment found by the `where` argument doesn't exist, create a new FacebookLikeComment with this data.
     */
    create: XOR<FacebookLikeCommentCreateInput, FacebookLikeCommentUncheckedCreateInput>
    /**
     * In case the FacebookLikeComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookLikeCommentUpdateInput, FacebookLikeCommentUncheckedUpdateInput>
  }


  /**
   * FacebookLikeComment delete
   */
  export type FacebookLikeCommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
    /**
     * Filter which FacebookLikeComment to delete.
     */
    where: FacebookLikeCommentWhereUniqueInput
  }


  /**
   * FacebookLikeComment deleteMany
   */
  export type FacebookLikeCommentDeleteManyArgs = {
    /**
     * Filter which FacebookLikeComments to delete
     */
    where?: FacebookLikeCommentWhereInput
  }


  /**
   * FacebookLikeComment without action
   */
  export type FacebookLikeCommentArgs = {
    /**
     * Select specific fields to fetch from the FacebookLikeComment
     */
    select?: FacebookLikeCommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookLikeCommentInclude | null
  }



  /**
   * Model FacebookFriendRequest
   */


  export type AggregateFacebookFriendRequest = {
    _count: FacebookFriendRequestCountAggregateOutputType | null
    _avg: FacebookFriendRequestAvgAggregateOutputType | null
    _sum: FacebookFriendRequestSumAggregateOutputType | null
    _min: FacebookFriendRequestMinAggregateOutputType | null
    _max: FacebookFriendRequestMaxAggregateOutputType | null
  }

  export type FacebookFriendRequestAvgAggregateOutputType = {
    id: number | null
    requestFromUserId: number | null
    requestToUserId: number | null
  }

  export type FacebookFriendRequestSumAggregateOutputType = {
    id: number | null
    requestFromUserId: number | null
    requestToUserId: number | null
  }

  export type FacebookFriendRequestMinAggregateOutputType = {
    id: number | null
    requestFromUserId: number | null
    requestToUserId: number | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookFriendRequestMaxAggregateOutputType = {
    id: number | null
    requestFromUserId: number | null
    requestToUserId: number | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookFriendRequestCountAggregateOutputType = {
    id: number
    requestFromUserId: number
    requestToUserId: number
    isAccepted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookFriendRequestAvgAggregateInputType = {
    id?: true
    requestFromUserId?: true
    requestToUserId?: true
  }

  export type FacebookFriendRequestSumAggregateInputType = {
    id?: true
    requestFromUserId?: true
    requestToUserId?: true
  }

  export type FacebookFriendRequestMinAggregateInputType = {
    id?: true
    requestFromUserId?: true
    requestToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookFriendRequestMaxAggregateInputType = {
    id?: true
    requestFromUserId?: true
    requestToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookFriendRequestCountAggregateInputType = {
    id?: true
    requestFromUserId?: true
    requestToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookFriendRequestAggregateArgs = {
    /**
     * Filter which FacebookFriendRequest to aggregate.
     */
    where?: FacebookFriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookFriendRequests to fetch.
     */
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookFriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookFriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookFriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookFriendRequests
    **/
    _count?: true | FacebookFriendRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookFriendRequestAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookFriendRequestSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookFriendRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookFriendRequestMaxAggregateInputType
  }

  export type GetFacebookFriendRequestAggregateType<T extends FacebookFriendRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookFriendRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookFriendRequest[P]>
      : GetScalarType<T[P], AggregateFacebookFriendRequest[P]>
  }




  export type FacebookFriendRequestGroupByArgs = {
    where?: FacebookFriendRequestWhereInput
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithAggregationInput>
    by: FacebookFriendRequestScalarFieldEnum[]
    having?: FacebookFriendRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookFriendRequestCountAggregateInputType | true
    _avg?: FacebookFriendRequestAvgAggregateInputType
    _sum?: FacebookFriendRequestSumAggregateInputType
    _min?: FacebookFriendRequestMinAggregateInputType
    _max?: FacebookFriendRequestMaxAggregateInputType
  }


  export type FacebookFriendRequestGroupByOutputType = {
    id: number
    requestFromUserId: number
    requestToUserId: number
    isAccepted: boolean
    createdAt: Date
    updatedAt: Date
    _count: FacebookFriendRequestCountAggregateOutputType | null
    _avg: FacebookFriendRequestAvgAggregateOutputType | null
    _sum: FacebookFriendRequestSumAggregateOutputType | null
    _min: FacebookFriendRequestMinAggregateOutputType | null
    _max: FacebookFriendRequestMaxAggregateOutputType | null
  }

  type GetFacebookFriendRequestGroupByPayload<T extends FacebookFriendRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookFriendRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookFriendRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookFriendRequestGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookFriendRequestGroupByOutputType[P]>
        }
      >
    >


  export type FacebookFriendRequestSelect = {
    id?: boolean
    requestFromUser?: boolean | FacebookUserArgs
    requestFromUserId?: boolean
    requestToUser?: boolean | FacebookUserArgs
    requestToUserId?: boolean
    isAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookFriendRequestInclude = {
    requestFromUser?: boolean | FacebookUserArgs
    requestToUser?: boolean | FacebookUserArgs
  }

  export type FacebookFriendRequestGetPayload<S extends boolean | null | undefined | FacebookFriendRequestArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookFriendRequest :
    S extends undefined ? never :
    S extends { include: any } & (FacebookFriendRequestArgs | FacebookFriendRequestFindManyArgs)
    ? FacebookFriendRequest  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'requestFromUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'requestToUser' ? FacebookUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookFriendRequestArgs | FacebookFriendRequestFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'requestFromUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'requestToUser' ? FacebookUserGetPayload<S['select'][P]> :  P extends keyof FacebookFriendRequest ? FacebookFriendRequest[P] : never
  } 
      : FacebookFriendRequest


  type FacebookFriendRequestCountArgs = 
    Omit<FacebookFriendRequestFindManyArgs, 'select' | 'include'> & {
      select?: FacebookFriendRequestCountAggregateInputType | true
    }

  export interface FacebookFriendRequestDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookFriendRequest that matches the filter.
     * @param {FacebookFriendRequestFindUniqueArgs} args - Arguments to find a FacebookFriendRequest
     * @example
     * // Get one FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookFriendRequestFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookFriendRequestFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookFriendRequest'> extends True ? Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>> : Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T> | null, null>

    /**
     * Find one FacebookFriendRequest that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookFriendRequestFindUniqueOrThrowArgs} args - Arguments to find a FacebookFriendRequest
     * @example
     * // Get one FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookFriendRequestFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookFriendRequestFindUniqueOrThrowArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Find the first FacebookFriendRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestFindFirstArgs} args - Arguments to find a FacebookFriendRequest
     * @example
     * // Get one FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookFriendRequestFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookFriendRequestFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookFriendRequest'> extends True ? Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>> : Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T> | null, null>

    /**
     * Find the first FacebookFriendRequest that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestFindFirstOrThrowArgs} args - Arguments to find a FacebookFriendRequest
     * @example
     * // Get one FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookFriendRequestFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookFriendRequestFindFirstOrThrowArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Find zero or more FacebookFriendRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookFriendRequests
     * const facebookFriendRequests = await prisma.facebookFriendRequest.findMany()
     * 
     * // Get first 10 FacebookFriendRequests
     * const facebookFriendRequests = await prisma.facebookFriendRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookFriendRequestWithIdOnly = await prisma.facebookFriendRequest.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookFriendRequestFindManyArgs>(
      args?: SelectSubset<T, FacebookFriendRequestFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookFriendRequestGetPayload<T>>>

    /**
     * Create a FacebookFriendRequest.
     * @param {FacebookFriendRequestCreateArgs} args - Arguments to create a FacebookFriendRequest.
     * @example
     * // Create one FacebookFriendRequest
     * const FacebookFriendRequest = await prisma.facebookFriendRequest.create({
     *   data: {
     *     // ... data to create a FacebookFriendRequest
     *   }
     * })
     * 
    **/
    create<T extends FacebookFriendRequestCreateArgs>(
      args: SelectSubset<T, FacebookFriendRequestCreateArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Create many FacebookFriendRequests.
     *     @param {FacebookFriendRequestCreateManyArgs} args - Arguments to create many FacebookFriendRequests.
     *     @example
     *     // Create many FacebookFriendRequests
     *     const facebookFriendRequest = await prisma.facebookFriendRequest.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookFriendRequestCreateManyArgs>(
      args?: SelectSubset<T, FacebookFriendRequestCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookFriendRequest.
     * @param {FacebookFriendRequestDeleteArgs} args - Arguments to delete one FacebookFriendRequest.
     * @example
     * // Delete one FacebookFriendRequest
     * const FacebookFriendRequest = await prisma.facebookFriendRequest.delete({
     *   where: {
     *     // ... filter to delete one FacebookFriendRequest
     *   }
     * })
     * 
    **/
    delete<T extends FacebookFriendRequestDeleteArgs>(
      args: SelectSubset<T, FacebookFriendRequestDeleteArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Update one FacebookFriendRequest.
     * @param {FacebookFriendRequestUpdateArgs} args - Arguments to update one FacebookFriendRequest.
     * @example
     * // Update one FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookFriendRequestUpdateArgs>(
      args: SelectSubset<T, FacebookFriendRequestUpdateArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Delete zero or more FacebookFriendRequests.
     * @param {FacebookFriendRequestDeleteManyArgs} args - Arguments to filter FacebookFriendRequests to delete.
     * @example
     * // Delete a few FacebookFriendRequests
     * const { count } = await prisma.facebookFriendRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookFriendRequestDeleteManyArgs>(
      args?: SelectSubset<T, FacebookFriendRequestDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookFriendRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookFriendRequests
     * const facebookFriendRequest = await prisma.facebookFriendRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookFriendRequestUpdateManyArgs>(
      args: SelectSubset<T, FacebookFriendRequestUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookFriendRequest.
     * @param {FacebookFriendRequestUpsertArgs} args - Arguments to update or create a FacebookFriendRequest.
     * @example
     * // Update or create a FacebookFriendRequest
     * const facebookFriendRequest = await prisma.facebookFriendRequest.upsert({
     *   create: {
     *     // ... data to create a FacebookFriendRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookFriendRequest we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookFriendRequestUpsertArgs>(
      args: SelectSubset<T, FacebookFriendRequestUpsertArgs>
    ): Prisma__FacebookFriendRequestClient<FacebookFriendRequestGetPayload<T>>

    /**
     * Count the number of FacebookFriendRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestCountArgs} args - Arguments to filter FacebookFriendRequests to count.
     * @example
     * // Count the number of FacebookFriendRequests
     * const count = await prisma.facebookFriendRequest.count({
     *   where: {
     *     // ... the filter for the FacebookFriendRequests we want to count
     *   }
     * })
    **/
    count<T extends FacebookFriendRequestCountArgs>(
      args?: Subset<T, FacebookFriendRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookFriendRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookFriendRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookFriendRequestAggregateArgs>(args: Subset<T, FacebookFriendRequestAggregateArgs>): Prisma.PrismaPromise<GetFacebookFriendRequestAggregateType<T>>

    /**
     * Group by FacebookFriendRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookFriendRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookFriendRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookFriendRequestGroupByArgs['orderBy'] }
        : { orderBy?: FacebookFriendRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookFriendRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookFriendRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookFriendRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookFriendRequestClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    requestFromUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    requestToUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookFriendRequest base type for findUnique actions
   */
  export type FacebookFriendRequestFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter, which FacebookFriendRequest to fetch.
     */
    where: FacebookFriendRequestWhereUniqueInput
  }

  /**
   * FacebookFriendRequest findUnique
   */
  export interface FacebookFriendRequestFindUniqueArgs extends FacebookFriendRequestFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookFriendRequest findUniqueOrThrow
   */
  export type FacebookFriendRequestFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter, which FacebookFriendRequest to fetch.
     */
    where: FacebookFriendRequestWhereUniqueInput
  }


  /**
   * FacebookFriendRequest base type for findFirst actions
   */
  export type FacebookFriendRequestFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter, which FacebookFriendRequest to fetch.
     */
    where?: FacebookFriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookFriendRequests to fetch.
     */
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookFriendRequests.
     */
    cursor?: FacebookFriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookFriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookFriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookFriendRequests.
     */
    distinct?: Enumerable<FacebookFriendRequestScalarFieldEnum>
  }

  /**
   * FacebookFriendRequest findFirst
   */
  export interface FacebookFriendRequestFindFirstArgs extends FacebookFriendRequestFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookFriendRequest findFirstOrThrow
   */
  export type FacebookFriendRequestFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter, which FacebookFriendRequest to fetch.
     */
    where?: FacebookFriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookFriendRequests to fetch.
     */
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookFriendRequests.
     */
    cursor?: FacebookFriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookFriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookFriendRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookFriendRequests.
     */
    distinct?: Enumerable<FacebookFriendRequestScalarFieldEnum>
  }


  /**
   * FacebookFriendRequest findMany
   */
  export type FacebookFriendRequestFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter, which FacebookFriendRequests to fetch.
     */
    where?: FacebookFriendRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookFriendRequests to fetch.
     */
    orderBy?: Enumerable<FacebookFriendRequestOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookFriendRequests.
     */
    cursor?: FacebookFriendRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookFriendRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookFriendRequests.
     */
    skip?: number
    distinct?: Enumerable<FacebookFriendRequestScalarFieldEnum>
  }


  /**
   * FacebookFriendRequest create
   */
  export type FacebookFriendRequestCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * The data needed to create a FacebookFriendRequest.
     */
    data: XOR<FacebookFriendRequestCreateInput, FacebookFriendRequestUncheckedCreateInput>
  }


  /**
   * FacebookFriendRequest createMany
   */
  export type FacebookFriendRequestCreateManyArgs = {
    /**
     * The data used to create many FacebookFriendRequests.
     */
    data: Enumerable<FacebookFriendRequestCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookFriendRequest update
   */
  export type FacebookFriendRequestUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * The data needed to update a FacebookFriendRequest.
     */
    data: XOR<FacebookFriendRequestUpdateInput, FacebookFriendRequestUncheckedUpdateInput>
    /**
     * Choose, which FacebookFriendRequest to update.
     */
    where: FacebookFriendRequestWhereUniqueInput
  }


  /**
   * FacebookFriendRequest updateMany
   */
  export type FacebookFriendRequestUpdateManyArgs = {
    /**
     * The data used to update FacebookFriendRequests.
     */
    data: XOR<FacebookFriendRequestUpdateManyMutationInput, FacebookFriendRequestUncheckedUpdateManyInput>
    /**
     * Filter which FacebookFriendRequests to update
     */
    where?: FacebookFriendRequestWhereInput
  }


  /**
   * FacebookFriendRequest upsert
   */
  export type FacebookFriendRequestUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * The filter to search for the FacebookFriendRequest to update in case it exists.
     */
    where: FacebookFriendRequestWhereUniqueInput
    /**
     * In case the FacebookFriendRequest found by the `where` argument doesn't exist, create a new FacebookFriendRequest with this data.
     */
    create: XOR<FacebookFriendRequestCreateInput, FacebookFriendRequestUncheckedCreateInput>
    /**
     * In case the FacebookFriendRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookFriendRequestUpdateInput, FacebookFriendRequestUncheckedUpdateInput>
  }


  /**
   * FacebookFriendRequest delete
   */
  export type FacebookFriendRequestDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
    /**
     * Filter which FacebookFriendRequest to delete.
     */
    where: FacebookFriendRequestWhereUniqueInput
  }


  /**
   * FacebookFriendRequest deleteMany
   */
  export type FacebookFriendRequestDeleteManyArgs = {
    /**
     * Filter which FacebookFriendRequests to delete
     */
    where?: FacebookFriendRequestWhereInput
  }


  /**
   * FacebookFriendRequest without action
   */
  export type FacebookFriendRequestArgs = {
    /**
     * Select specific fields to fetch from the FacebookFriendRequest
     */
    select?: FacebookFriendRequestSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookFriendRequestInclude | null
  }



  /**
   * Model FacebookUserRelation
   */


  export type AggregateFacebookUserRelation = {
    _count: FacebookUserRelationCountAggregateOutputType | null
    _avg: FacebookUserRelationAvgAggregateOutputType | null
    _sum: FacebookUserRelationSumAggregateOutputType | null
    _min: FacebookUserRelationMinAggregateOutputType | null
    _max: FacebookUserRelationMaxAggregateOutputType | null
  }

  export type FacebookUserRelationAvgAggregateOutputType = {
    id: number | null
    relationFromUserId: number | null
    relationToUserId: number | null
  }

  export type FacebookUserRelationSumAggregateOutputType = {
    id: number | null
    relationFromUserId: number | null
    relationToUserId: number | null
  }

  export type FacebookUserRelationMinAggregateOutputType = {
    id: number | null
    relationFromUserId: number | null
    relationToUserId: number | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookUserRelationMaxAggregateOutputType = {
    id: number | null
    relationFromUserId: number | null
    relationToUserId: number | null
    isAccepted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookUserRelationCountAggregateOutputType = {
    id: number
    relationFromUserId: number
    relationToUserId: number
    isAccepted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookUserRelationAvgAggregateInputType = {
    id?: true
    relationFromUserId?: true
    relationToUserId?: true
  }

  export type FacebookUserRelationSumAggregateInputType = {
    id?: true
    relationFromUserId?: true
    relationToUserId?: true
  }

  export type FacebookUserRelationMinAggregateInputType = {
    id?: true
    relationFromUserId?: true
    relationToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookUserRelationMaxAggregateInputType = {
    id?: true
    relationFromUserId?: true
    relationToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookUserRelationCountAggregateInputType = {
    id?: true
    relationFromUserId?: true
    relationToUserId?: true
    isAccepted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookUserRelationAggregateArgs = {
    /**
     * Filter which FacebookUserRelation to aggregate.
     */
    where?: FacebookUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUserRelations to fetch.
     */
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookUserRelations
    **/
    _count?: true | FacebookUserRelationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookUserRelationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookUserRelationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookUserRelationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookUserRelationMaxAggregateInputType
  }

  export type GetFacebookUserRelationAggregateType<T extends FacebookUserRelationAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookUserRelation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookUserRelation[P]>
      : GetScalarType<T[P], AggregateFacebookUserRelation[P]>
  }




  export type FacebookUserRelationGroupByArgs = {
    where?: FacebookUserRelationWhereInput
    orderBy?: Enumerable<FacebookUserRelationOrderByWithAggregationInput>
    by: FacebookUserRelationScalarFieldEnum[]
    having?: FacebookUserRelationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookUserRelationCountAggregateInputType | true
    _avg?: FacebookUserRelationAvgAggregateInputType
    _sum?: FacebookUserRelationSumAggregateInputType
    _min?: FacebookUserRelationMinAggregateInputType
    _max?: FacebookUserRelationMaxAggregateInputType
  }


  export type FacebookUserRelationGroupByOutputType = {
    id: number
    relationFromUserId: number
    relationToUserId: number
    isAccepted: boolean
    createdAt: Date
    updatedAt: Date
    _count: FacebookUserRelationCountAggregateOutputType | null
    _avg: FacebookUserRelationAvgAggregateOutputType | null
    _sum: FacebookUserRelationSumAggregateOutputType | null
    _min: FacebookUserRelationMinAggregateOutputType | null
    _max: FacebookUserRelationMaxAggregateOutputType | null
  }

  type GetFacebookUserRelationGroupByPayload<T extends FacebookUserRelationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookUserRelationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookUserRelationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookUserRelationGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookUserRelationGroupByOutputType[P]>
        }
      >
    >


  export type FacebookUserRelationSelect = {
    id?: boolean
    relationFromUser?: boolean | FacebookUserArgs
    relationFromUserId?: boolean
    relationToUser?: boolean | FacebookUserArgs
    relationToUserId?: boolean
    isAccepted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookUserRelationInclude = {
    relationFromUser?: boolean | FacebookUserArgs
    relationToUser?: boolean | FacebookUserArgs
  }

  export type FacebookUserRelationGetPayload<S extends boolean | null | undefined | FacebookUserRelationArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookUserRelation :
    S extends undefined ? never :
    S extends { include: any } & (FacebookUserRelationArgs | FacebookUserRelationFindManyArgs)
    ? FacebookUserRelation  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'relationFromUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'relationToUser' ? FacebookUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookUserRelationArgs | FacebookUserRelationFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'relationFromUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'relationToUser' ? FacebookUserGetPayload<S['select'][P]> :  P extends keyof FacebookUserRelation ? FacebookUserRelation[P] : never
  } 
      : FacebookUserRelation


  type FacebookUserRelationCountArgs = 
    Omit<FacebookUserRelationFindManyArgs, 'select' | 'include'> & {
      select?: FacebookUserRelationCountAggregateInputType | true
    }

  export interface FacebookUserRelationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookUserRelation that matches the filter.
     * @param {FacebookUserRelationFindUniqueArgs} args - Arguments to find a FacebookUserRelation
     * @example
     * // Get one FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookUserRelationFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookUserRelationFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookUserRelation'> extends True ? Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>> : Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T> | null, null>

    /**
     * Find one FacebookUserRelation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookUserRelationFindUniqueOrThrowArgs} args - Arguments to find a FacebookUserRelation
     * @example
     * // Get one FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookUserRelationFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookUserRelationFindUniqueOrThrowArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Find the first FacebookUserRelation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationFindFirstArgs} args - Arguments to find a FacebookUserRelation
     * @example
     * // Get one FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookUserRelationFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookUserRelationFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookUserRelation'> extends True ? Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>> : Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T> | null, null>

    /**
     * Find the first FacebookUserRelation that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationFindFirstOrThrowArgs} args - Arguments to find a FacebookUserRelation
     * @example
     * // Get one FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookUserRelationFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookUserRelationFindFirstOrThrowArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Find zero or more FacebookUserRelations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookUserRelations
     * const facebookUserRelations = await prisma.facebookUserRelation.findMany()
     * 
     * // Get first 10 FacebookUserRelations
     * const facebookUserRelations = await prisma.facebookUserRelation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookUserRelationWithIdOnly = await prisma.facebookUserRelation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookUserRelationFindManyArgs>(
      args?: SelectSubset<T, FacebookUserRelationFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookUserRelationGetPayload<T>>>

    /**
     * Create a FacebookUserRelation.
     * @param {FacebookUserRelationCreateArgs} args - Arguments to create a FacebookUserRelation.
     * @example
     * // Create one FacebookUserRelation
     * const FacebookUserRelation = await prisma.facebookUserRelation.create({
     *   data: {
     *     // ... data to create a FacebookUserRelation
     *   }
     * })
     * 
    **/
    create<T extends FacebookUserRelationCreateArgs>(
      args: SelectSubset<T, FacebookUserRelationCreateArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Create many FacebookUserRelations.
     *     @param {FacebookUserRelationCreateManyArgs} args - Arguments to create many FacebookUserRelations.
     *     @example
     *     // Create many FacebookUserRelations
     *     const facebookUserRelation = await prisma.facebookUserRelation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookUserRelationCreateManyArgs>(
      args?: SelectSubset<T, FacebookUserRelationCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookUserRelation.
     * @param {FacebookUserRelationDeleteArgs} args - Arguments to delete one FacebookUserRelation.
     * @example
     * // Delete one FacebookUserRelation
     * const FacebookUserRelation = await prisma.facebookUserRelation.delete({
     *   where: {
     *     // ... filter to delete one FacebookUserRelation
     *   }
     * })
     * 
    **/
    delete<T extends FacebookUserRelationDeleteArgs>(
      args: SelectSubset<T, FacebookUserRelationDeleteArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Update one FacebookUserRelation.
     * @param {FacebookUserRelationUpdateArgs} args - Arguments to update one FacebookUserRelation.
     * @example
     * // Update one FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookUserRelationUpdateArgs>(
      args: SelectSubset<T, FacebookUserRelationUpdateArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Delete zero or more FacebookUserRelations.
     * @param {FacebookUserRelationDeleteManyArgs} args - Arguments to filter FacebookUserRelations to delete.
     * @example
     * // Delete a few FacebookUserRelations
     * const { count } = await prisma.facebookUserRelation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookUserRelationDeleteManyArgs>(
      args?: SelectSubset<T, FacebookUserRelationDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookUserRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookUserRelations
     * const facebookUserRelation = await prisma.facebookUserRelation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookUserRelationUpdateManyArgs>(
      args: SelectSubset<T, FacebookUserRelationUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookUserRelation.
     * @param {FacebookUserRelationUpsertArgs} args - Arguments to update or create a FacebookUserRelation.
     * @example
     * // Update or create a FacebookUserRelation
     * const facebookUserRelation = await prisma.facebookUserRelation.upsert({
     *   create: {
     *     // ... data to create a FacebookUserRelation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookUserRelation we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookUserRelationUpsertArgs>(
      args: SelectSubset<T, FacebookUserRelationUpsertArgs>
    ): Prisma__FacebookUserRelationClient<FacebookUserRelationGetPayload<T>>

    /**
     * Count the number of FacebookUserRelations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationCountArgs} args - Arguments to filter FacebookUserRelations to count.
     * @example
     * // Count the number of FacebookUserRelations
     * const count = await prisma.facebookUserRelation.count({
     *   where: {
     *     // ... the filter for the FacebookUserRelations we want to count
     *   }
     * })
    **/
    count<T extends FacebookUserRelationCountArgs>(
      args?: Subset<T, FacebookUserRelationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookUserRelationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookUserRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookUserRelationAggregateArgs>(args: Subset<T, FacebookUserRelationAggregateArgs>): Prisma.PrismaPromise<GetFacebookUserRelationAggregateType<T>>

    /**
     * Group by FacebookUserRelation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookUserRelationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookUserRelationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookUserRelationGroupByArgs['orderBy'] }
        : { orderBy?: FacebookUserRelationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookUserRelationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookUserRelationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookUserRelation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookUserRelationClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    relationFromUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    relationToUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookUserRelation base type for findUnique actions
   */
  export type FacebookUserRelationFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter, which FacebookUserRelation to fetch.
     */
    where: FacebookUserRelationWhereUniqueInput
  }

  /**
   * FacebookUserRelation findUnique
   */
  export interface FacebookUserRelationFindUniqueArgs extends FacebookUserRelationFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookUserRelation findUniqueOrThrow
   */
  export type FacebookUserRelationFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter, which FacebookUserRelation to fetch.
     */
    where: FacebookUserRelationWhereUniqueInput
  }


  /**
   * FacebookUserRelation base type for findFirst actions
   */
  export type FacebookUserRelationFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter, which FacebookUserRelation to fetch.
     */
    where?: FacebookUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUserRelations to fetch.
     */
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookUserRelations.
     */
    cursor?: FacebookUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookUserRelations.
     */
    distinct?: Enumerable<FacebookUserRelationScalarFieldEnum>
  }

  /**
   * FacebookUserRelation findFirst
   */
  export interface FacebookUserRelationFindFirstArgs extends FacebookUserRelationFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookUserRelation findFirstOrThrow
   */
  export type FacebookUserRelationFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter, which FacebookUserRelation to fetch.
     */
    where?: FacebookUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUserRelations to fetch.
     */
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookUserRelations.
     */
    cursor?: FacebookUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUserRelations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookUserRelations.
     */
    distinct?: Enumerable<FacebookUserRelationScalarFieldEnum>
  }


  /**
   * FacebookUserRelation findMany
   */
  export type FacebookUserRelationFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter, which FacebookUserRelations to fetch.
     */
    where?: FacebookUserRelationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookUserRelations to fetch.
     */
    orderBy?: Enumerable<FacebookUserRelationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookUserRelations.
     */
    cursor?: FacebookUserRelationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookUserRelations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookUserRelations.
     */
    skip?: number
    distinct?: Enumerable<FacebookUserRelationScalarFieldEnum>
  }


  /**
   * FacebookUserRelation create
   */
  export type FacebookUserRelationCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * The data needed to create a FacebookUserRelation.
     */
    data: XOR<FacebookUserRelationCreateInput, FacebookUserRelationUncheckedCreateInput>
  }


  /**
   * FacebookUserRelation createMany
   */
  export type FacebookUserRelationCreateManyArgs = {
    /**
     * The data used to create many FacebookUserRelations.
     */
    data: Enumerable<FacebookUserRelationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookUserRelation update
   */
  export type FacebookUserRelationUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * The data needed to update a FacebookUserRelation.
     */
    data: XOR<FacebookUserRelationUpdateInput, FacebookUserRelationUncheckedUpdateInput>
    /**
     * Choose, which FacebookUserRelation to update.
     */
    where: FacebookUserRelationWhereUniqueInput
  }


  /**
   * FacebookUserRelation updateMany
   */
  export type FacebookUserRelationUpdateManyArgs = {
    /**
     * The data used to update FacebookUserRelations.
     */
    data: XOR<FacebookUserRelationUpdateManyMutationInput, FacebookUserRelationUncheckedUpdateManyInput>
    /**
     * Filter which FacebookUserRelations to update
     */
    where?: FacebookUserRelationWhereInput
  }


  /**
   * FacebookUserRelation upsert
   */
  export type FacebookUserRelationUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * The filter to search for the FacebookUserRelation to update in case it exists.
     */
    where: FacebookUserRelationWhereUniqueInput
    /**
     * In case the FacebookUserRelation found by the `where` argument doesn't exist, create a new FacebookUserRelation with this data.
     */
    create: XOR<FacebookUserRelationCreateInput, FacebookUserRelationUncheckedCreateInput>
    /**
     * In case the FacebookUserRelation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookUserRelationUpdateInput, FacebookUserRelationUncheckedUpdateInput>
  }


  /**
   * FacebookUserRelation delete
   */
  export type FacebookUserRelationDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
    /**
     * Filter which FacebookUserRelation to delete.
     */
    where: FacebookUserRelationWhereUniqueInput
  }


  /**
   * FacebookUserRelation deleteMany
   */
  export type FacebookUserRelationDeleteManyArgs = {
    /**
     * Filter which FacebookUserRelations to delete
     */
    where?: FacebookUserRelationWhereInput
  }


  /**
   * FacebookUserRelation without action
   */
  export type FacebookUserRelationArgs = {
    /**
     * Select specific fields to fetch from the FacebookUserRelation
     */
    select?: FacebookUserRelationSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookUserRelationInclude | null
  }



  /**
   * Model FacebookMessenger
   */


  export type AggregateFacebookMessenger = {
    _count: FacebookMessengerCountAggregateOutputType | null
    _avg: FacebookMessengerAvgAggregateOutputType | null
    _sum: FacebookMessengerSumAggregateOutputType | null
    _min: FacebookMessengerMinAggregateOutputType | null
    _max: FacebookMessengerMaxAggregateOutputType | null
  }

  export type FacebookMessengerAvgAggregateOutputType = {
    id: number | null
    messageFromUserId: number | null
    messageToUserId: number | null
  }

  export type FacebookMessengerSumAggregateOutputType = {
    id: number | null
    messageFromUserId: number | null
    messageToUserId: number | null
  }

  export type FacebookMessengerMinAggregateOutputType = {
    id: number | null
    message: string | null
    messageFromUserId: number | null
    messageToUserId: number | null
    isRead: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMessengerMaxAggregateOutputType = {
    id: number | null
    message: string | null
    messageFromUserId: number | null
    messageToUserId: number | null
    isRead: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FacebookMessengerCountAggregateOutputType = {
    id: number
    message: number
    messageFromUserId: number
    messageToUserId: number
    isRead: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FacebookMessengerAvgAggregateInputType = {
    id?: true
    messageFromUserId?: true
    messageToUserId?: true
  }

  export type FacebookMessengerSumAggregateInputType = {
    id?: true
    messageFromUserId?: true
    messageToUserId?: true
  }

  export type FacebookMessengerMinAggregateInputType = {
    id?: true
    message?: true
    messageFromUserId?: true
    messageToUserId?: true
    isRead?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMessengerMaxAggregateInputType = {
    id?: true
    message?: true
    messageFromUserId?: true
    messageToUserId?: true
    isRead?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FacebookMessengerCountAggregateInputType = {
    id?: true
    message?: true
    messageFromUserId?: true
    messageToUserId?: true
    isRead?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FacebookMessengerAggregateArgs = {
    /**
     * Filter which FacebookMessenger to aggregate.
     */
    where?: FacebookMessengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMessengers to fetch.
     */
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FacebookMessengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMessengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMessengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FacebookMessengers
    **/
    _count?: true | FacebookMessengerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FacebookMessengerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FacebookMessengerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FacebookMessengerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FacebookMessengerMaxAggregateInputType
  }

  export type GetFacebookMessengerAggregateType<T extends FacebookMessengerAggregateArgs> = {
        [P in keyof T & keyof AggregateFacebookMessenger]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacebookMessenger[P]>
      : GetScalarType<T[P], AggregateFacebookMessenger[P]>
  }




  export type FacebookMessengerGroupByArgs = {
    where?: FacebookMessengerWhereInput
    orderBy?: Enumerable<FacebookMessengerOrderByWithAggregationInput>
    by: FacebookMessengerScalarFieldEnum[]
    having?: FacebookMessengerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FacebookMessengerCountAggregateInputType | true
    _avg?: FacebookMessengerAvgAggregateInputType
    _sum?: FacebookMessengerSumAggregateInputType
    _min?: FacebookMessengerMinAggregateInputType
    _max?: FacebookMessengerMaxAggregateInputType
  }


  export type FacebookMessengerGroupByOutputType = {
    id: number
    message: string
    messageFromUserId: number
    messageToUserId: number
    isRead: boolean
    createdAt: Date
    updatedAt: Date
    _count: FacebookMessengerCountAggregateOutputType | null
    _avg: FacebookMessengerAvgAggregateOutputType | null
    _sum: FacebookMessengerSumAggregateOutputType | null
    _min: FacebookMessengerMinAggregateOutputType | null
    _max: FacebookMessengerMaxAggregateOutputType | null
  }

  type GetFacebookMessengerGroupByPayload<T extends FacebookMessengerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<FacebookMessengerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FacebookMessengerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FacebookMessengerGroupByOutputType[P]>
            : GetScalarType<T[P], FacebookMessengerGroupByOutputType[P]>
        }
      >
    >


  export type FacebookMessengerSelect = {
    id?: boolean
    message?: boolean
    messageFromUser?: boolean | FacebookUserArgs
    messageFromUserId?: boolean
    messageToUser?: boolean | FacebookUserArgs
    messageToUserId?: boolean
    isRead?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type FacebookMessengerInclude = {
    messageFromUser?: boolean | FacebookUserArgs
    messageToUser?: boolean | FacebookUserArgs
  }

  export type FacebookMessengerGetPayload<S extends boolean | null | undefined | FacebookMessengerArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? FacebookMessenger :
    S extends undefined ? never :
    S extends { include: any } & (FacebookMessengerArgs | FacebookMessengerFindManyArgs)
    ? FacebookMessenger  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'messageFromUser' ? FacebookUserGetPayload<S['include'][P]> :
        P extends 'messageToUser' ? FacebookUserGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (FacebookMessengerArgs | FacebookMessengerFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'messageFromUser' ? FacebookUserGetPayload<S['select'][P]> :
        P extends 'messageToUser' ? FacebookUserGetPayload<S['select'][P]> :  P extends keyof FacebookMessenger ? FacebookMessenger[P] : never
  } 
      : FacebookMessenger


  type FacebookMessengerCountArgs = 
    Omit<FacebookMessengerFindManyArgs, 'select' | 'include'> & {
      select?: FacebookMessengerCountAggregateInputType | true
    }

  export interface FacebookMessengerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one FacebookMessenger that matches the filter.
     * @param {FacebookMessengerFindUniqueArgs} args - Arguments to find a FacebookMessenger
     * @example
     * // Get one FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FacebookMessengerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FacebookMessengerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'FacebookMessenger'> extends True ? Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>> : Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T> | null, null>

    /**
     * Find one FacebookMessenger that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FacebookMessengerFindUniqueOrThrowArgs} args - Arguments to find a FacebookMessenger
     * @example
     * // Get one FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FacebookMessengerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FacebookMessengerFindUniqueOrThrowArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Find the first FacebookMessenger that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerFindFirstArgs} args - Arguments to find a FacebookMessenger
     * @example
     * // Get one FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FacebookMessengerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FacebookMessengerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'FacebookMessenger'> extends True ? Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>> : Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T> | null, null>

    /**
     * Find the first FacebookMessenger that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerFindFirstOrThrowArgs} args - Arguments to find a FacebookMessenger
     * @example
     * // Get one FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FacebookMessengerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FacebookMessengerFindFirstOrThrowArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Find zero or more FacebookMessengers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FacebookMessengers
     * const facebookMessengers = await prisma.facebookMessenger.findMany()
     * 
     * // Get first 10 FacebookMessengers
     * const facebookMessengers = await prisma.facebookMessenger.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const facebookMessengerWithIdOnly = await prisma.facebookMessenger.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FacebookMessengerFindManyArgs>(
      args?: SelectSubset<T, FacebookMessengerFindManyArgs>
    ): Prisma.PrismaPromise<Array<FacebookMessengerGetPayload<T>>>

    /**
     * Create a FacebookMessenger.
     * @param {FacebookMessengerCreateArgs} args - Arguments to create a FacebookMessenger.
     * @example
     * // Create one FacebookMessenger
     * const FacebookMessenger = await prisma.facebookMessenger.create({
     *   data: {
     *     // ... data to create a FacebookMessenger
     *   }
     * })
     * 
    **/
    create<T extends FacebookMessengerCreateArgs>(
      args: SelectSubset<T, FacebookMessengerCreateArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Create many FacebookMessengers.
     *     @param {FacebookMessengerCreateManyArgs} args - Arguments to create many FacebookMessengers.
     *     @example
     *     // Create many FacebookMessengers
     *     const facebookMessenger = await prisma.facebookMessenger.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FacebookMessengerCreateManyArgs>(
      args?: SelectSubset<T, FacebookMessengerCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FacebookMessenger.
     * @param {FacebookMessengerDeleteArgs} args - Arguments to delete one FacebookMessenger.
     * @example
     * // Delete one FacebookMessenger
     * const FacebookMessenger = await prisma.facebookMessenger.delete({
     *   where: {
     *     // ... filter to delete one FacebookMessenger
     *   }
     * })
     * 
    **/
    delete<T extends FacebookMessengerDeleteArgs>(
      args: SelectSubset<T, FacebookMessengerDeleteArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Update one FacebookMessenger.
     * @param {FacebookMessengerUpdateArgs} args - Arguments to update one FacebookMessenger.
     * @example
     * // Update one FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FacebookMessengerUpdateArgs>(
      args: SelectSubset<T, FacebookMessengerUpdateArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Delete zero or more FacebookMessengers.
     * @param {FacebookMessengerDeleteManyArgs} args - Arguments to filter FacebookMessengers to delete.
     * @example
     * // Delete a few FacebookMessengers
     * const { count } = await prisma.facebookMessenger.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FacebookMessengerDeleteManyArgs>(
      args?: SelectSubset<T, FacebookMessengerDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FacebookMessengers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FacebookMessengers
     * const facebookMessenger = await prisma.facebookMessenger.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FacebookMessengerUpdateManyArgs>(
      args: SelectSubset<T, FacebookMessengerUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FacebookMessenger.
     * @param {FacebookMessengerUpsertArgs} args - Arguments to update or create a FacebookMessenger.
     * @example
     * // Update or create a FacebookMessenger
     * const facebookMessenger = await prisma.facebookMessenger.upsert({
     *   create: {
     *     // ... data to create a FacebookMessenger
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FacebookMessenger we want to update
     *   }
     * })
    **/
    upsert<T extends FacebookMessengerUpsertArgs>(
      args: SelectSubset<T, FacebookMessengerUpsertArgs>
    ): Prisma__FacebookMessengerClient<FacebookMessengerGetPayload<T>>

    /**
     * Count the number of FacebookMessengers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerCountArgs} args - Arguments to filter FacebookMessengers to count.
     * @example
     * // Count the number of FacebookMessengers
     * const count = await prisma.facebookMessenger.count({
     *   where: {
     *     // ... the filter for the FacebookMessengers we want to count
     *   }
     * })
    **/
    count<T extends FacebookMessengerCountArgs>(
      args?: Subset<T, FacebookMessengerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FacebookMessengerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FacebookMessenger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FacebookMessengerAggregateArgs>(args: Subset<T, FacebookMessengerAggregateArgs>): Prisma.PrismaPromise<GetFacebookMessengerAggregateType<T>>

    /**
     * Group by FacebookMessenger.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FacebookMessengerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FacebookMessengerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FacebookMessengerGroupByArgs['orderBy'] }
        : { orderBy?: FacebookMessengerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FacebookMessengerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFacebookMessengerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for FacebookMessenger.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FacebookMessengerClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    messageFromUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    messageToUser<T extends FacebookUserArgs= {}>(args?: Subset<T, FacebookUserArgs>): Prisma__FacebookUserClient<FacebookUserGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * FacebookMessenger base type for findUnique actions
   */
  export type FacebookMessengerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter, which FacebookMessenger to fetch.
     */
    where: FacebookMessengerWhereUniqueInput
  }

  /**
   * FacebookMessenger findUnique
   */
  export interface FacebookMessengerFindUniqueArgs extends FacebookMessengerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookMessenger findUniqueOrThrow
   */
  export type FacebookMessengerFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter, which FacebookMessenger to fetch.
     */
    where: FacebookMessengerWhereUniqueInput
  }


  /**
   * FacebookMessenger base type for findFirst actions
   */
  export type FacebookMessengerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter, which FacebookMessenger to fetch.
     */
    where?: FacebookMessengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMessengers to fetch.
     */
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMessengers.
     */
    cursor?: FacebookMessengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMessengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMessengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMessengers.
     */
    distinct?: Enumerable<FacebookMessengerScalarFieldEnum>
  }

  /**
   * FacebookMessenger findFirst
   */
  export interface FacebookMessengerFindFirstArgs extends FacebookMessengerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * FacebookMessenger findFirstOrThrow
   */
  export type FacebookMessengerFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter, which FacebookMessenger to fetch.
     */
    where?: FacebookMessengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMessengers to fetch.
     */
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FacebookMessengers.
     */
    cursor?: FacebookMessengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMessengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMessengers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FacebookMessengers.
     */
    distinct?: Enumerable<FacebookMessengerScalarFieldEnum>
  }


  /**
   * FacebookMessenger findMany
   */
  export type FacebookMessengerFindManyArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter, which FacebookMessengers to fetch.
     */
    where?: FacebookMessengerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FacebookMessengers to fetch.
     */
    orderBy?: Enumerable<FacebookMessengerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FacebookMessengers.
     */
    cursor?: FacebookMessengerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FacebookMessengers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FacebookMessengers.
     */
    skip?: number
    distinct?: Enumerable<FacebookMessengerScalarFieldEnum>
  }


  /**
   * FacebookMessenger create
   */
  export type FacebookMessengerCreateArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * The data needed to create a FacebookMessenger.
     */
    data: XOR<FacebookMessengerCreateInput, FacebookMessengerUncheckedCreateInput>
  }


  /**
   * FacebookMessenger createMany
   */
  export type FacebookMessengerCreateManyArgs = {
    /**
     * The data used to create many FacebookMessengers.
     */
    data: Enumerable<FacebookMessengerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * FacebookMessenger update
   */
  export type FacebookMessengerUpdateArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * The data needed to update a FacebookMessenger.
     */
    data: XOR<FacebookMessengerUpdateInput, FacebookMessengerUncheckedUpdateInput>
    /**
     * Choose, which FacebookMessenger to update.
     */
    where: FacebookMessengerWhereUniqueInput
  }


  /**
   * FacebookMessenger updateMany
   */
  export type FacebookMessengerUpdateManyArgs = {
    /**
     * The data used to update FacebookMessengers.
     */
    data: XOR<FacebookMessengerUpdateManyMutationInput, FacebookMessengerUncheckedUpdateManyInput>
    /**
     * Filter which FacebookMessengers to update
     */
    where?: FacebookMessengerWhereInput
  }


  /**
   * FacebookMessenger upsert
   */
  export type FacebookMessengerUpsertArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * The filter to search for the FacebookMessenger to update in case it exists.
     */
    where: FacebookMessengerWhereUniqueInput
    /**
     * In case the FacebookMessenger found by the `where` argument doesn't exist, create a new FacebookMessenger with this data.
     */
    create: XOR<FacebookMessengerCreateInput, FacebookMessengerUncheckedCreateInput>
    /**
     * In case the FacebookMessenger was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FacebookMessengerUpdateInput, FacebookMessengerUncheckedUpdateInput>
  }


  /**
   * FacebookMessenger delete
   */
  export type FacebookMessengerDeleteArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
    /**
     * Filter which FacebookMessenger to delete.
     */
    where: FacebookMessengerWhereUniqueInput
  }


  /**
   * FacebookMessenger deleteMany
   */
  export type FacebookMessengerDeleteManyArgs = {
    /**
     * Filter which FacebookMessengers to delete
     */
    where?: FacebookMessengerWhereInput
  }


  /**
   * FacebookMessenger without action
   */
  export type FacebookMessengerArgs = {
    /**
     * Select specific fields to fetch from the FacebookMessenger
     */
    select?: FacebookMessengerSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FacebookMessengerInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BinKitchenCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenCategoryScalarFieldEnum = (typeof BinKitchenCategoryScalarFieldEnum)[keyof typeof BinKitchenCategoryScalarFieldEnum]


  export const BinKitchenMenuScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    price: 'price',
    categoryName: 'categoryName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenMenuScalarFieldEnum = (typeof BinKitchenMenuScalarFieldEnum)[keyof typeof BinKitchenMenuScalarFieldEnum]


  export const BinKitchenOrderItemScalarFieldEnum: {
    id: 'id',
    menuId: 'menuId',
    orderId: 'orderId',
    quantity: 'quantity',
    totalPrice: 'totalPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenOrderItemScalarFieldEnum = (typeof BinKitchenOrderItemScalarFieldEnum)[keyof typeof BinKitchenOrderItemScalarFieldEnum]


  export const BinKitchenOrderScalarFieldEnum: {
    id: 'id',
    status: 'status',
    tableId: 'tableId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BinKitchenOrderScalarFieldEnum = (typeof BinKitchenOrderScalarFieldEnum)[keyof typeof BinKitchenOrderScalarFieldEnum]


  export const FacebookCommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    commentByUserId: 'commentByUserId',
    postId: 'postId',
    isReplied: 'isReplied',
    replyFromCommentId: 'replyFromCommentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookCommentScalarFieldEnum = (typeof FacebookCommentScalarFieldEnum)[keyof typeof FacebookCommentScalarFieldEnum]


  export const FacebookFriendRequestScalarFieldEnum: {
    id: 'id',
    requestFromUserId: 'requestFromUserId',
    requestToUserId: 'requestToUserId',
    isAccepted: 'isAccepted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookFriendRequestScalarFieldEnum = (typeof FacebookFriendRequestScalarFieldEnum)[keyof typeof FacebookFriendRequestScalarFieldEnum]


  export const FacebookGroupScalarFieldEnum: {
    id: 'id',
    GroupImage: 'GroupImage',
    coverImage: 'coverImage',
    name: 'name',
    createrUserId: 'createrUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookGroupScalarFieldEnum = (typeof FacebookGroupScalarFieldEnum)[keyof typeof FacebookGroupScalarFieldEnum]


  export const FacebookHashtagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookHashtagScalarFieldEnum = (typeof FacebookHashtagScalarFieldEnum)[keyof typeof FacebookHashtagScalarFieldEnum]


  export const FacebookLikeCommentScalarFieldEnum: {
    id: 'id',
    commentId: 'commentId',
    posterUserId: 'posterUserId',
    likeTypeId: 'likeTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookLikeCommentScalarFieldEnum = (typeof FacebookLikeCommentScalarFieldEnum)[keyof typeof FacebookLikeCommentScalarFieldEnum]


  export const FacebookLikePostScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    posterUserId: 'posterUserId',
    likeTypeId: 'likeTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookLikePostScalarFieldEnum = (typeof FacebookLikePostScalarFieldEnum)[keyof typeof FacebookLikePostScalarFieldEnum]


  export const FacebookLikeTypeScalarFieldEnum: {
    id: 'id',
    emoji: 'emoji',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookLikeTypeScalarFieldEnum = (typeof FacebookLikeTypeScalarFieldEnum)[keyof typeof FacebookLikeTypeScalarFieldEnum]


  export const FacebookLocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookLocationScalarFieldEnum = (typeof FacebookLocationScalarFieldEnum)[keyof typeof FacebookLocationScalarFieldEnum]


  export const FacebookMessengerScalarFieldEnum: {
    id: 'id',
    message: 'message',
    messageFromUserId: 'messageFromUserId',
    messageToUserId: 'messageToUserId',
    isRead: 'isRead',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookMessengerScalarFieldEnum = (typeof FacebookMessengerScalarFieldEnum)[keyof typeof FacebookMessengerScalarFieldEnum]


  export const FacebookPostDestinationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookPostDestinationScalarFieldEnum = (typeof FacebookPostDestinationScalarFieldEnum)[keyof typeof FacebookPostDestinationScalarFieldEnum]


  export const FacebookPostScalarFieldEnum: {
    id: 'id',
    message: 'message',
    postTypeId: 'postTypeId',
    posterUserId: 'posterUserId',
    locationId: 'locationId',
    destinationId: 'destinationId',
    destinationRelateId: 'destinationRelateId',
    isShared: 'isShared',
    shareFromPostId: 'shareFromPostId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookPostScalarFieldEnum = (typeof FacebookPostScalarFieldEnum)[keyof typeof FacebookPostScalarFieldEnum]


  export const FacebookPostTypeScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookPostTypeScalarFieldEnum = (typeof FacebookPostTypeScalarFieldEnum)[keyof typeof FacebookPostTypeScalarFieldEnum]


  export const FacebookUserRelationScalarFieldEnum: {
    id: 'id',
    relationFromUserId: 'relationFromUserId',
    relationToUserId: 'relationToUserId',
    isAccepted: 'isAccepted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookUserRelationScalarFieldEnum = (typeof FacebookUserRelationScalarFieldEnum)[keyof typeof FacebookUserRelationScalarFieldEnum]


  export const FacebookUserScalarFieldEnum: {
    id: 'id',
    profileImage: 'profileImage',
    coverImage: 'coverImage',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FacebookUserScalarFieldEnum = (typeof FacebookUserScalarFieldEnum)[keyof typeof FacebookUserScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TodoListScalarFieldEnum: {
    id: 'id',
    task: 'task',
    status: 'status',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TodoListScalarFieldEnum = (typeof TodoListScalarFieldEnum)[keyof typeof TodoListScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TriviaCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaCategoryScalarFieldEnum = (typeof TriviaCategoryScalarFieldEnum)[keyof typeof TriviaCategoryScalarFieldEnum]


  export const TriviaChoiceScalarFieldEnum: {
    id: 'id',
    choice: 'choice',
    quizId: 'quizId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaChoiceScalarFieldEnum = (typeof TriviaChoiceScalarFieldEnum)[keyof typeof TriviaChoiceScalarFieldEnum]


  export const TriviaQuizScalarFieldEnum: {
    id: 'id',
    quiz: 'quiz',
    categoryName: 'categoryName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    answerId: 'answerId'
  };

  export type TriviaQuizScalarFieldEnum = (typeof TriviaQuizScalarFieldEnum)[keyof typeof TriviaQuizScalarFieldEnum]


  export const TriviaRoundQuizScalarFieldEnum: {
    id: 'id',
    roundId: 'roundId',
    quizId: 'quizId',
    userChoiceId: 'userChoiceId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaRoundQuizScalarFieldEnum = (typeof TriviaRoundQuizScalarFieldEnum)[keyof typeof TriviaRoundQuizScalarFieldEnum]


  export const TriviaRoundScalarFieldEnum: {
    id: 'id',
    round: 'round',
    categoryId: 'categoryId',
    score: 'score',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TriviaRoundScalarFieldEnum = (typeof TriviaRoundScalarFieldEnum)[keyof typeof TriviaRoundScalarFieldEnum]


  export const TwitterDMScalarFieldEnum: {
    id: 'id',
    message: 'message',
    directFromId: 'directFromId',
    directToId: 'directToId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterDMScalarFieldEnum = (typeof TwitterDMScalarFieldEnum)[keyof typeof TwitterDMScalarFieldEnum]


  export const TwitterHashTagScalarFieldEnum: {
    id: 'id',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterHashTagScalarFieldEnum = (typeof TwitterHashTagScalarFieldEnum)[keyof typeof TwitterHashTagScalarFieldEnum]


  export const TwitterPostScalarFieldEnum: {
    id: 'id',
    message: 'message',
    postByUserId: 'postByUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterPostScalarFieldEnum = (typeof TwitterPostScalarFieldEnum)[keyof typeof TwitterPostScalarFieldEnum]


  export const TwitterReplyScalarFieldEnum: {
    id: 'id',
    message: 'message',
    postId: 'postId',
    postByUserId: 'postByUserId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterReplyScalarFieldEnum = (typeof TwitterReplyScalarFieldEnum)[keyof typeof TwitterReplyScalarFieldEnum]


  export const TwitterUserRelationScalarFieldEnum: {
    id: 'id',
    followerId: 'followerId',
    followingId: 'followingId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterUserRelationScalarFieldEnum = (typeof TwitterUserRelationScalarFieldEnum)[keyof typeof TwitterUserRelationScalarFieldEnum]


  export const TwitterUserScalarFieldEnum: {
    id: 'id',
    image: 'image',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TwitterUserScalarFieldEnum = (typeof TwitterUserScalarFieldEnum)[keyof typeof TwitterUserScalarFieldEnum]


  export const YoutubeChanelPermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeChanelPermissionScalarFieldEnum = (typeof YoutubeChanelPermissionScalarFieldEnum)[keyof typeof YoutubeChanelPermissionScalarFieldEnum]


  export const YoutubeChanelScalarFieldEnum: {
    id: 'id',
    ChanelImage: 'ChanelImage',
    coverImage: 'coverImage',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeChanelScalarFieldEnum = (typeof YoutubeChanelScalarFieldEnum)[keyof typeof YoutubeChanelScalarFieldEnum]


  export const YoutubeChanelToUserPermissionScalarFieldEnum: {
    id: 'id',
    chanelId: 'chanelId',
    UserId: 'UserId',
    permissionId: 'permissionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeChanelToUserPermissionScalarFieldEnum = (typeof YoutubeChanelToUserPermissionScalarFieldEnum)[keyof typeof YoutubeChanelToUserPermissionScalarFieldEnum]


  export const YoutubeCommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    commentByUserId: 'commentByUserId',
    postId: 'postId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeCommentScalarFieldEnum = (typeof YoutubeCommentScalarFieldEnum)[keyof typeof YoutubeCommentScalarFieldEnum]


  export const YoutubeHashtagScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeHashtagScalarFieldEnum = (typeof YoutubeHashtagScalarFieldEnum)[keyof typeof YoutubeHashtagScalarFieldEnum]


  export const YoutubeLikeCommentScalarFieldEnum: {
    id: 'id',
    commentId: 'commentId',
    likeByUserId: 'likeByUserId',
    likeTypeId: 'likeTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeLikeCommentScalarFieldEnum = (typeof YoutubeLikeCommentScalarFieldEnum)[keyof typeof YoutubeLikeCommentScalarFieldEnum]


  export const YoutubeLikePostScalarFieldEnum: {
    id: 'id',
    postId: 'postId',
    likeByUserId: 'likeByUserId',
    likeTypeId: 'likeTypeId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeLikePostScalarFieldEnum = (typeof YoutubeLikePostScalarFieldEnum)[keyof typeof YoutubeLikePostScalarFieldEnum]


  export const YoutubeLikeTypeScalarFieldEnum: {
    id: 'id',
    emoji: 'emoji',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeLikeTypeScalarFieldEnum = (typeof YoutubeLikeTypeScalarFieldEnum)[keyof typeof YoutubeLikeTypeScalarFieldEnum]


  export const YoutubePostScalarFieldEnum: {
    id: 'id',
    video: 'video',
    name: 'name',
    description: 'description',
    posterUserId: 'posterUserId',
    chanelId: 'chanelId',
    isShared: 'isShared',
    shareFromPostId: 'shareFromPostId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubePostScalarFieldEnum = (typeof YoutubePostScalarFieldEnum)[keyof typeof YoutubePostScalarFieldEnum]


  export const YoutubeSubcriberScalarFieldEnum: {
    id: 'id',
    fromUserId: 'fromUserId',
    toChanelId: 'toChanelId',
    isSupported: 'isSupported',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeSubcriberScalarFieldEnum = (typeof YoutubeSubcriberScalarFieldEnum)[keyof typeof YoutubeSubcriberScalarFieldEnum]


  export const YoutubeUserScalarFieldEnum: {
    id: 'id',
    profileImage: 'profileImage',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YoutubeUserScalarFieldEnum = (typeof YoutubeUserScalarFieldEnum)[keyof typeof YoutubeUserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type BinKitchenCategoryWhereInput = {
    AND?: Enumerable<BinKitchenCategoryWhereInput>
    OR?: Enumerable<BinKitchenCategoryWhereInput>
    NOT?: Enumerable<BinKitchenCategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    menus?: BinKitchenMenuListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    menus?: BinKitchenMenuOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategoryWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type BinKitchenCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenCategoryCountOrderByAggregateInput
    _avg?: BinKitchenCategoryAvgOrderByAggregateInput
    _max?: BinKitchenCategoryMaxOrderByAggregateInput
    _min?: BinKitchenCategoryMinOrderByAggregateInput
    _sum?: BinKitchenCategorySumOrderByAggregateInput
  }

  export type BinKitchenCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenMenuWhereInput = {
    AND?: Enumerable<BinKitchenMenuWhereInput>
    OR?: Enumerable<BinKitchenMenuWhereInput>
    NOT?: Enumerable<BinKitchenMenuWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    category?: XOR<BinKitchenCategoryRelationFilter, BinKitchenCategoryWhereInput> | null
    categoryName?: StringNullableFilter | string | null
    orderItems?: BinKitchenOrderItemListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenMenuOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    category?: BinKitchenCategoryOrderByWithRelationInput
    categoryName?: SortOrder
    orderItems?: BinKitchenOrderItemOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenMenuOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenMenuCountOrderByAggregateInput
    _avg?: BinKitchenMenuAvgOrderByAggregateInput
    _max?: BinKitchenMenuMaxOrderByAggregateInput
    _min?: BinKitchenMenuMinOrderByAggregateInput
    _sum?: BinKitchenMenuSumOrderByAggregateInput
  }

  export type BinKitchenMenuScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenMenuScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    price?: FloatWithAggregatesFilter | number
    categoryName?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenOrderWhereInput = {
    AND?: Enumerable<BinKitchenOrderWhereInput>
    OR?: Enumerable<BinKitchenOrderWhereInput>
    NOT?: Enumerable<BinKitchenOrderWhereInput>
    id?: IntFilter | number
    status?: StringFilter | string
    tableId?: IntFilter | number
    orderItems?: BinKitchenOrderItemListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenOrderOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    orderItems?: BinKitchenOrderItemOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenOrderOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenOrderCountOrderByAggregateInput
    _avg?: BinKitchenOrderAvgOrderByAggregateInput
    _max?: BinKitchenOrderMaxOrderByAggregateInput
    _min?: BinKitchenOrderMinOrderByAggregateInput
    _sum?: BinKitchenOrderSumOrderByAggregateInput
  }

  export type BinKitchenOrderScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenOrderScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    status?: StringWithAggregatesFilter | string
    tableId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenOrderItemWhereInput = {
    AND?: Enumerable<BinKitchenOrderItemWhereInput>
    OR?: Enumerable<BinKitchenOrderItemWhereInput>
    NOT?: Enumerable<BinKitchenOrderItemWhereInput>
    id?: IntFilter | number
    menu?: XOR<BinKitchenMenuRelationFilter, BinKitchenMenuWhereInput>
    menuId?: IntFilter | number
    order?: XOR<BinKitchenOrderRelationFilter, BinKitchenOrderWhereInput> | null
    orderId?: IntNullableFilter | number | null
    quantity?: IntFilter | number
    totalPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenOrderItemOrderByWithRelationInput = {
    id?: SortOrder
    menu?: BinKitchenMenuOrderByWithRelationInput
    menuId?: SortOrder
    order?: BinKitchenOrderOrderByWithRelationInput
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemWhereUniqueInput = {
    id?: number
  }

  export type BinKitchenOrderItemOrderByWithAggregationInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BinKitchenOrderItemCountOrderByAggregateInput
    _avg?: BinKitchenOrderItemAvgOrderByAggregateInput
    _max?: BinKitchenOrderItemMaxOrderByAggregateInput
    _min?: BinKitchenOrderItemMinOrderByAggregateInput
    _sum?: BinKitchenOrderItemSumOrderByAggregateInput
  }

  export type BinKitchenOrderItemScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    OR?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BinKitchenOrderItemScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    menuId?: IntWithAggregatesFilter | number
    orderId?: IntNullableWithAggregatesFilter | number | null
    quantity?: IntWithAggregatesFilter | number
    totalPrice?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TodoListWhereInput = {
    AND?: Enumerable<TodoListWhereInput>
    OR?: Enumerable<TodoListWhereInput>
    NOT?: Enumerable<TodoListWhereInput>
    id?: IntFilter | number
    task?: StringFilter | string
    status?: StringFilter | string
    note?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TodoListOrderByWithRelationInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListWhereUniqueInput = {
    id?: number
  }

  export type TodoListOrderByWithAggregationInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TodoListCountOrderByAggregateInput
    _avg?: TodoListAvgOrderByAggregateInput
    _max?: TodoListMaxOrderByAggregateInput
    _min?: TodoListMinOrderByAggregateInput
    _sum?: TodoListSumOrderByAggregateInput
  }

  export type TodoListScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    OR?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TodoListScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    task?: StringWithAggregatesFilter | string
    status?: StringWithAggregatesFilter | string
    note?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaCategoryWhereInput = {
    AND?: Enumerable<TriviaCategoryWhereInput>
    OR?: Enumerable<TriviaCategoryWhereInput>
    NOT?: Enumerable<TriviaCategoryWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    triviaQuizes?: TriviaQuizListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    rounds?: TriviaRoundListRelationFilter
  }

  export type TriviaCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    triviaQuizes?: TriviaQuizOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    rounds?: TriviaRoundOrderByRelationAggregateInput
  }

  export type TriviaCategoryWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type TriviaCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaCategoryCountOrderByAggregateInput
    _avg?: TriviaCategoryAvgOrderByAggregateInput
    _max?: TriviaCategoryMaxOrderByAggregateInput
    _min?: TriviaCategoryMinOrderByAggregateInput
    _sum?: TriviaCategorySumOrderByAggregateInput
  }

  export type TriviaCategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaCategoryScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaQuizWhereInput = {
    AND?: Enumerable<TriviaQuizWhereInput>
    OR?: Enumerable<TriviaQuizWhereInput>
    NOT?: Enumerable<TriviaQuizWhereInput>
    id?: IntFilter | number
    quiz?: StringFilter | string
    category?: XOR<TriviaCategoryRelationFilter, TriviaCategoryWhereInput> | null
    categoryName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    choices?: TriviaChoiceListRelationFilter
    answerId?: IntFilter | number
    roundQuizes?: TriviaRoundQuizListRelationFilter
  }

  export type TriviaQuizOrderByWithRelationInput = {
    id?: SortOrder
    quiz?: SortOrder
    category?: TriviaCategoryOrderByWithRelationInput
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    choices?: TriviaChoiceOrderByRelationAggregateInput
    answerId?: SortOrder
    roundQuizes?: TriviaRoundQuizOrderByRelationAggregateInput
  }

  export type TriviaQuizWhereUniqueInput = {
    id?: number
  }

  export type TriviaQuizOrderByWithAggregationInput = {
    id?: SortOrder
    quiz?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answerId?: SortOrder
    _count?: TriviaQuizCountOrderByAggregateInput
    _avg?: TriviaQuizAvgOrderByAggregateInput
    _max?: TriviaQuizMaxOrderByAggregateInput
    _min?: TriviaQuizMinOrderByAggregateInput
    _sum?: TriviaQuizSumOrderByAggregateInput
  }

  export type TriviaQuizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaQuizScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    quiz?: StringWithAggregatesFilter | string
    categoryName?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    answerId?: IntWithAggregatesFilter | number
  }

  export type TriviaChoiceWhereInput = {
    AND?: Enumerable<TriviaChoiceWhereInput>
    OR?: Enumerable<TriviaChoiceWhereInput>
    NOT?: Enumerable<TriviaChoiceWhereInput>
    id?: IntFilter | number
    choice?: StringFilter | string
    quiz?: XOR<TriviaQuizRelationFilter, TriviaQuizWhereInput> | null
    quizId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    roundQuizes?: TriviaRoundQuizListRelationFilter
  }

  export type TriviaChoiceOrderByWithRelationInput = {
    id?: SortOrder
    choice?: SortOrder
    quiz?: TriviaQuizOrderByWithRelationInput
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roundQuizes?: TriviaRoundQuizOrderByRelationAggregateInput
  }

  export type TriviaChoiceWhereUniqueInput = {
    id?: number
  }

  export type TriviaChoiceOrderByWithAggregationInput = {
    id?: SortOrder
    choice?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaChoiceCountOrderByAggregateInput
    _avg?: TriviaChoiceAvgOrderByAggregateInput
    _max?: TriviaChoiceMaxOrderByAggregateInput
    _min?: TriviaChoiceMinOrderByAggregateInput
    _sum?: TriviaChoiceSumOrderByAggregateInput
  }

  export type TriviaChoiceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaChoiceScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    choice?: StringWithAggregatesFilter | string
    quizId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaRoundWhereInput = {
    AND?: Enumerable<TriviaRoundWhereInput>
    OR?: Enumerable<TriviaRoundWhereInput>
    NOT?: Enumerable<TriviaRoundWhereInput>
    id?: IntFilter | number
    round?: StringFilter | string
    category?: XOR<TriviaCategoryRelationFilter, TriviaCategoryWhereInput> | null
    categoryId?: IntFilter | number
    score?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    roundQuizes?: TriviaRoundQuizListRelationFilter
  }

  export type TriviaRoundOrderByWithRelationInput = {
    id?: SortOrder
    round?: SortOrder
    category?: TriviaCategoryOrderByWithRelationInput
    categoryId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    roundQuizes?: TriviaRoundQuizOrderByRelationAggregateInput
  }

  export type TriviaRoundWhereUniqueInput = {
    id?: number
  }

  export type TriviaRoundOrderByWithAggregationInput = {
    id?: SortOrder
    round?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaRoundCountOrderByAggregateInput
    _avg?: TriviaRoundAvgOrderByAggregateInput
    _max?: TriviaRoundMaxOrderByAggregateInput
    _min?: TriviaRoundMinOrderByAggregateInput
    _sum?: TriviaRoundSumOrderByAggregateInput
  }

  export type TriviaRoundScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaRoundScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    round?: StringWithAggregatesFilter | string
    categoryId?: IntWithAggregatesFilter | number
    score?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TriviaRoundQuizWhereInput = {
    AND?: Enumerable<TriviaRoundQuizWhereInput>
    OR?: Enumerable<TriviaRoundQuizWhereInput>
    NOT?: Enumerable<TriviaRoundQuizWhereInput>
    id?: IntFilter | number
    round?: XOR<TriviaRoundRelationFilter, TriviaRoundWhereInput> | null
    roundId?: IntFilter | number
    quiz?: XOR<TriviaQuizRelationFilter, TriviaQuizWhereInput> | null
    quizId?: IntFilter | number
    userChoice?: XOR<TriviaChoiceRelationFilter, TriviaChoiceWhereInput> | null
    userChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaRoundQuizOrderByWithRelationInput = {
    id?: SortOrder
    round?: TriviaRoundOrderByWithRelationInput
    roundId?: SortOrder
    quiz?: TriviaQuizOrderByWithRelationInput
    quizId?: SortOrder
    userChoice?: TriviaChoiceOrderByWithRelationInput
    userChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizWhereUniqueInput = {
    id?: number
  }

  export type TriviaRoundQuizOrderByWithAggregationInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TriviaRoundQuizCountOrderByAggregateInput
    _avg?: TriviaRoundQuizAvgOrderByAggregateInput
    _max?: TriviaRoundQuizMaxOrderByAggregateInput
    _min?: TriviaRoundQuizMinOrderByAggregateInput
    _sum?: TriviaRoundQuizSumOrderByAggregateInput
  }

  export type TriviaRoundQuizScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    OR?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TriviaRoundQuizScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    roundId?: IntWithAggregatesFilter | number
    quizId?: IntWithAggregatesFilter | number
    userChoiceId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterUserWhereInput = {
    AND?: Enumerable<TwitterUserWhereInput>
    OR?: Enumerable<TwitterUserWhereInput>
    NOT?: Enumerable<TwitterUserWhereInput>
    id?: IntFilter | number
    image?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    follwers?: TwitterUserRelationListRelationFilter
    followings?: TwitterUserRelationListRelationFilter
    twitterPosts?: TwitterPostListRelationFilter
    twitterReplies?: TwitterReplyListRelationFilter
    directFroms?: TwitterDMListRelationFilter
    directToes?: TwitterDMListRelationFilter
  }

  export type TwitterUserOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    follwers?: TwitterUserRelationOrderByRelationAggregateInput
    followings?: TwitterUserRelationOrderByRelationAggregateInput
    twitterPosts?: TwitterPostOrderByRelationAggregateInput
    twitterReplies?: TwitterReplyOrderByRelationAggregateInput
    directFroms?: TwitterDMOrderByRelationAggregateInput
    directToes?: TwitterDMOrderByRelationAggregateInput
  }

  export type TwitterUserWhereUniqueInput = {
    id?: number
    image?: string
    name?: string
  }

  export type TwitterUserOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterUserCountOrderByAggregateInput
    _avg?: TwitterUserAvgOrderByAggregateInput
    _max?: TwitterUserMaxOrderByAggregateInput
    _min?: TwitterUserMinOrderByAggregateInput
    _sum?: TwitterUserSumOrderByAggregateInput
  }

  export type TwitterUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterUserRelationWhereInput = {
    AND?: Enumerable<TwitterUserRelationWhereInput>
    OR?: Enumerable<TwitterUserRelationWhereInput>
    NOT?: Enumerable<TwitterUserRelationWhereInput>
    id?: IntFilter | number
    follwer?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    followerId?: IntFilter | number
    following?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    followingId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterUserRelationOrderByWithRelationInput = {
    id?: SortOrder
    follwer?: TwitterUserOrderByWithRelationInput
    followerId?: SortOrder
    following?: TwitterUserOrderByWithRelationInput
    followingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserRelationWhereUniqueInput = {
    id?: number
  }

  export type TwitterUserRelationOrderByWithAggregationInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterUserRelationCountOrderByAggregateInput
    _avg?: TwitterUserRelationAvgOrderByAggregateInput
    _max?: TwitterUserRelationMaxOrderByAggregateInput
    _min?: TwitterUserRelationMinOrderByAggregateInput
    _sum?: TwitterUserRelationSumOrderByAggregateInput
  }

  export type TwitterUserRelationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterUserRelationScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterUserRelationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterUserRelationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    followerId?: IntWithAggregatesFilter | number
    followingId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterPostWhereInput = {
    AND?: Enumerable<TwitterPostWhereInput>
    OR?: Enumerable<TwitterPostWhereInput>
    NOT?: Enumerable<TwitterPostWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    user?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    postByUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    twitterReplies?: TwitterReplyListRelationFilter
    hashTags?: TwitterHashTagListRelationFilter
  }

  export type TwitterPostOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    user?: TwitterUserOrderByWithRelationInput
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    twitterReplies?: TwitterReplyOrderByRelationAggregateInput
    hashTags?: TwitterHashTagOrderByRelationAggregateInput
  }

  export type TwitterPostWhereUniqueInput = {
    id?: number
  }

  export type TwitterPostOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterPostCountOrderByAggregateInput
    _avg?: TwitterPostAvgOrderByAggregateInput
    _max?: TwitterPostMaxOrderByAggregateInput
    _min?: TwitterPostMinOrderByAggregateInput
    _sum?: TwitterPostSumOrderByAggregateInput
  }

  export type TwitterPostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterPostScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterPostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterPostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    postByUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterHashTagWhereInput = {
    AND?: Enumerable<TwitterHashTagWhereInput>
    OR?: Enumerable<TwitterHashTagWhereInput>
    NOT?: Enumerable<TwitterHashTagWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    posts?: TwitterPostListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterHashTagOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    posts?: TwitterPostOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterHashTagWhereUniqueInput = {
    id?: number
  }

  export type TwitterHashTagOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterHashTagCountOrderByAggregateInput
    _avg?: TwitterHashTagAvgOrderByAggregateInput
    _max?: TwitterHashTagMaxOrderByAggregateInput
    _min?: TwitterHashTagMinOrderByAggregateInput
    _sum?: TwitterHashTagSumOrderByAggregateInput
  }

  export type TwitterHashTagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterHashTagScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterHashTagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterHashTagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterReplyWhereInput = {
    AND?: Enumerable<TwitterReplyWhereInput>
    OR?: Enumerable<TwitterReplyWhereInput>
    NOT?: Enumerable<TwitterReplyWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    post?: XOR<TwitterPostRelationFilter, TwitterPostWhereInput>
    postId?: IntFilter | number
    user?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    postByUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterReplyOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    post?: TwitterPostOrderByWithRelationInput
    postId?: SortOrder
    user?: TwitterUserOrderByWithRelationInput
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterReplyWhereUniqueInput = {
    id?: number
  }

  export type TwitterReplyOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterReplyCountOrderByAggregateInput
    _avg?: TwitterReplyAvgOrderByAggregateInput
    _max?: TwitterReplyMaxOrderByAggregateInput
    _min?: TwitterReplyMinOrderByAggregateInput
    _sum?: TwitterReplySumOrderByAggregateInput
  }

  export type TwitterReplyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterReplyScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterReplyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterReplyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    postId?: IntWithAggregatesFilter | number
    postByUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TwitterDMWhereInput = {
    AND?: Enumerable<TwitterDMWhereInput>
    OR?: Enumerable<TwitterDMWhereInput>
    NOT?: Enumerable<TwitterDMWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    directFrom?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    directFromId?: IntFilter | number
    directTo?: XOR<TwitterUserRelationFilter, TwitterUserWhereInput>
    directToId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterDMOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    directFrom?: TwitterUserOrderByWithRelationInput
    directFromId?: SortOrder
    directTo?: TwitterUserOrderByWithRelationInput
    directToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterDMWhereUniqueInput = {
    id?: number
  }

  export type TwitterDMOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TwitterDMCountOrderByAggregateInput
    _avg?: TwitterDMAvgOrderByAggregateInput
    _max?: TwitterDMMaxOrderByAggregateInput
    _min?: TwitterDMMinOrderByAggregateInput
    _sum?: TwitterDMSumOrderByAggregateInput
  }

  export type TwitterDMScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TwitterDMScalarWhereWithAggregatesInput>
    OR?: Enumerable<TwitterDMScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TwitterDMScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    directFromId?: IntWithAggregatesFilter | number
    directToId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeUserWhereInput = {
    AND?: Enumerable<YoutubeUserWhereInput>
    OR?: Enumerable<YoutubeUserWhereInput>
    NOT?: Enumerable<YoutubeUserWhereInput>
    id?: IntFilter | number
    profileImage?: StringFilter | string
    email?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionListRelationFilter
    posts?: YoutubePostListRelationFilter
    comments?: YoutubeCommentListRelationFilter
    likePosts?: YoutubeLikePostListRelationFilter
    likeComments?: YoutubeLikeCommentListRelationFilter
    subcribers?: YoutubeSubcriberListRelationFilter
  }

  export type YoutubeUserOrderByWithRelationInput = {
    id?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chanelToUserPermissions?: YoutubeChanelToUserPermissionOrderByRelationAggregateInput
    posts?: YoutubePostOrderByRelationAggregateInput
    comments?: YoutubeCommentOrderByRelationAggregateInput
    likePosts?: YoutubeLikePostOrderByRelationAggregateInput
    likeComments?: YoutubeLikeCommentOrderByRelationAggregateInput
    subcribers?: YoutubeSubcriberOrderByRelationAggregateInput
  }

  export type YoutubeUserWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type YoutubeUserOrderByWithAggregationInput = {
    id?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeUserCountOrderByAggregateInput
    _avg?: YoutubeUserAvgOrderByAggregateInput
    _max?: YoutubeUserMaxOrderByAggregateInput
    _min?: YoutubeUserMinOrderByAggregateInput
    _sum?: YoutubeUserSumOrderByAggregateInput
  }

  export type YoutubeUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    profileImage?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeChanelPermissionWhereInput = {
    AND?: Enumerable<YoutubeChanelPermissionWhereInput>
    OR?: Enumerable<YoutubeChanelPermissionWhereInput>
    NOT?: Enumerable<YoutubeChanelPermissionWhereInput>
    id?: IntFilter | number
    name?: EnumYoutubePermissionEnumFilter | YoutubePermissionEnum
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionListRelationFilter
  }

  export type YoutubeChanelPermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chanelToUserPermissions?: YoutubeChanelToUserPermissionOrderByRelationAggregateInput
  }

  export type YoutubeChanelPermissionWhereUniqueInput = {
    id?: number
  }

  export type YoutubeChanelPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeChanelPermissionCountOrderByAggregateInput
    _avg?: YoutubeChanelPermissionAvgOrderByAggregateInput
    _max?: YoutubeChanelPermissionMaxOrderByAggregateInput
    _min?: YoutubeChanelPermissionMinOrderByAggregateInput
    _sum?: YoutubeChanelPermissionSumOrderByAggregateInput
  }

  export type YoutubeChanelPermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeChanelPermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeChanelPermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeChanelPermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: EnumYoutubePermissionEnumWithAggregatesFilter | YoutubePermissionEnum
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeChanelWhereInput = {
    AND?: Enumerable<YoutubeChanelWhereInput>
    OR?: Enumerable<YoutubeChanelWhereInput>
    NOT?: Enumerable<YoutubeChanelWhereInput>
    id?: IntFilter | number
    ChanelImage?: StringFilter | string
    coverImage?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionListRelationFilter
    posts?: YoutubePostListRelationFilter
    subcribers?: YoutubeSubcriberListRelationFilter
  }

  export type YoutubeChanelOrderByWithRelationInput = {
    id?: SortOrder
    ChanelImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    chanelToUserPermissions?: YoutubeChanelToUserPermissionOrderByRelationAggregateInput
    posts?: YoutubePostOrderByRelationAggregateInput
    subcribers?: YoutubeSubcriberOrderByRelationAggregateInput
  }

  export type YoutubeChanelWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type YoutubeChanelOrderByWithAggregationInput = {
    id?: SortOrder
    ChanelImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeChanelCountOrderByAggregateInput
    _avg?: YoutubeChanelAvgOrderByAggregateInput
    _max?: YoutubeChanelMaxOrderByAggregateInput
    _min?: YoutubeChanelMinOrderByAggregateInput
    _sum?: YoutubeChanelSumOrderByAggregateInput
  }

  export type YoutubeChanelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeChanelScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeChanelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeChanelScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ChanelImage?: StringWithAggregatesFilter | string
    coverImage?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeChanelToUserPermissionWhereInput = {
    AND?: Enumerable<YoutubeChanelToUserPermissionWhereInput>
    OR?: Enumerable<YoutubeChanelToUserPermissionWhereInput>
    NOT?: Enumerable<YoutubeChanelToUserPermissionWhereInput>
    id?: IntFilter | number
    chanel?: XOR<YoutubeChanelRelationFilter, YoutubeChanelWhereInput>
    chanelId?: IntFilter | number
    User?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    UserId?: IntFilter | number
    permission?: XOR<YoutubeChanelPermissionRelationFilter, YoutubeChanelPermissionWhereInput>
    permissionId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeChanelToUserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    chanel?: YoutubeChanelOrderByWithRelationInput
    chanelId?: SortOrder
    User?: YoutubeUserOrderByWithRelationInput
    UserId?: SortOrder
    permission?: YoutubeChanelPermissionOrderByWithRelationInput
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelToUserPermissionWhereUniqueInput = {
    id?: number
  }

  export type YoutubeChanelToUserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeChanelToUserPermissionCountOrderByAggregateInput
    _avg?: YoutubeChanelToUserPermissionAvgOrderByAggregateInput
    _max?: YoutubeChanelToUserPermissionMaxOrderByAggregateInput
    _min?: YoutubeChanelToUserPermissionMinOrderByAggregateInput
    _sum?: YoutubeChanelToUserPermissionSumOrderByAggregateInput
  }

  export type YoutubeChanelToUserPermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeChanelToUserPermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeChanelToUserPermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeChanelToUserPermissionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    UserId?: IntWithAggregatesFilter | number
    permissionId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeHashtagWhereInput = {
    AND?: Enumerable<YoutubeHashtagWhereInput>
    OR?: Enumerable<YoutubeHashtagWhereInput>
    NOT?: Enumerable<YoutubeHashtagWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: YoutubePostListRelationFilter
  }

  export type YoutubeHashtagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: YoutubePostOrderByRelationAggregateInput
  }

  export type YoutubeHashtagWhereUniqueInput = {
    id?: number
  }

  export type YoutubeHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeHashtagCountOrderByAggregateInput
    _avg?: YoutubeHashtagAvgOrderByAggregateInput
    _max?: YoutubeHashtagMaxOrderByAggregateInput
    _min?: YoutubeHashtagMinOrderByAggregateInput
    _sum?: YoutubeHashtagSumOrderByAggregateInput
  }

  export type YoutubeHashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeHashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeHashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeHashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubePostWhereInput = {
    AND?: Enumerable<YoutubePostWhereInput>
    OR?: Enumerable<YoutubePostWhereInput>
    NOT?: Enumerable<YoutubePostWhereInput>
    id?: IntFilter | number
    video?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    posterUser?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    posterUserId?: IntFilter | number
    chanel?: XOR<YoutubeChanelRelationFilter, YoutubeChanelWhereInput>
    chanelId?: IntFilter | number
    isShared?: BoolFilter | boolean
    shareFromPostId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    hashtags?: YoutubeHashtagListRelationFilter
    comments?: YoutubeCommentListRelationFilter
    likePosts?: YoutubeLikePostListRelationFilter
    likeComments?: YoutubeLikeCommentListRelationFilter
  }

  export type YoutubePostOrderByWithRelationInput = {
    id?: SortOrder
    video?: SortOrder
    name?: SortOrder
    description?: SortOrder
    posterUser?: YoutubeUserOrderByWithRelationInput
    posterUserId?: SortOrder
    chanel?: YoutubeChanelOrderByWithRelationInput
    chanelId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashtags?: YoutubeHashtagOrderByRelationAggregateInput
    comments?: YoutubeCommentOrderByRelationAggregateInput
    likePosts?: YoutubeLikePostOrderByRelationAggregateInput
    likeComments?: YoutubeLikeCommentOrderByRelationAggregateInput
  }

  export type YoutubePostWhereUniqueInput = {
    id?: number
  }

  export type YoutubePostOrderByWithAggregationInput = {
    id?: SortOrder
    video?: SortOrder
    name?: SortOrder
    description?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubePostCountOrderByAggregateInput
    _avg?: YoutubePostAvgOrderByAggregateInput
    _max?: YoutubePostMaxOrderByAggregateInput
    _min?: YoutubePostMinOrderByAggregateInput
    _sum?: YoutubePostSumOrderByAggregateInput
  }

  export type YoutubePostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubePostScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubePostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubePostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    video?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    posterUserId?: IntWithAggregatesFilter | number
    chanelId?: IntWithAggregatesFilter | number
    isShared?: BoolWithAggregatesFilter | boolean
    shareFromPostId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeCommentWhereInput = {
    AND?: Enumerable<YoutubeCommentWhereInput>
    OR?: Enumerable<YoutubeCommentWhereInput>
    NOT?: Enumerable<YoutubeCommentWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    commentByUser?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    commentByUserId?: IntFilter | number
    post?: XOR<YoutubePostRelationFilter, YoutubePostWhereInput>
    postId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeCommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUser?: YoutubeUserOrderByWithRelationInput
    commentByUserId?: SortOrder
    post?: YoutubePostOrderByWithRelationInput
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeCommentWhereUniqueInput = {
    id?: number
  }

  export type YoutubeCommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeCommentCountOrderByAggregateInput
    _avg?: YoutubeCommentAvgOrderByAggregateInput
    _max?: YoutubeCommentMaxOrderByAggregateInput
    _min?: YoutubeCommentMinOrderByAggregateInput
    _sum?: YoutubeCommentSumOrderByAggregateInput
  }

  export type YoutubeCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    commentByUserId?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeLikeTypeWhereInput = {
    AND?: Enumerable<YoutubeLikeTypeWhereInput>
    OR?: Enumerable<YoutubeLikeTypeWhereInput>
    NOT?: Enumerable<YoutubeLikeTypeWhereInput>
    id?: IntFilter | number
    emoji?: StringFilter | string
    name?: EnumYoutubeLikeTypeEnumFilter | YoutubeLikeTypeEnum
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    likePosts?: YoutubeLikePostListRelationFilter
    likeComments?: YoutubeLikeCommentListRelationFilter
  }

  export type YoutubeLikeTypeOrderByWithRelationInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likePosts?: YoutubeLikePostOrderByRelationAggregateInput
    likeComments?: YoutubeLikeCommentOrderByRelationAggregateInput
  }

  export type YoutubeLikeTypeWhereUniqueInput = {
    id?: number
  }

  export type YoutubeLikeTypeOrderByWithAggregationInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeLikeTypeCountOrderByAggregateInput
    _avg?: YoutubeLikeTypeAvgOrderByAggregateInput
    _max?: YoutubeLikeTypeMaxOrderByAggregateInput
    _min?: YoutubeLikeTypeMinOrderByAggregateInput
    _sum?: YoutubeLikeTypeSumOrderByAggregateInput
  }

  export type YoutubeLikeTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeLikeTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeLikeTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeLikeTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    emoji?: StringWithAggregatesFilter | string
    name?: EnumYoutubeLikeTypeEnumWithAggregatesFilter | YoutubeLikeTypeEnum
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeLikePostWhereInput = {
    AND?: Enumerable<YoutubeLikePostWhereInput>
    OR?: Enumerable<YoutubeLikePostWhereInput>
    NOT?: Enumerable<YoutubeLikePostWhereInput>
    id?: IntFilter | number
    post?: XOR<YoutubePostRelationFilter, YoutubePostWhereInput>
    postId?: IntFilter | number
    likeByUser?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    likeByUserId?: IntFilter | number
    likeType?: XOR<YoutubeLikeTypeRelationFilter, YoutubeLikeTypeWhereInput>
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeLikePostOrderByWithRelationInput = {
    id?: SortOrder
    post?: YoutubePostOrderByWithRelationInput
    postId?: SortOrder
    likeByUser?: YoutubeUserOrderByWithRelationInput
    likeByUserId?: SortOrder
    likeType?: YoutubeLikeTypeOrderByWithRelationInput
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikePostWhereUniqueInput = {
    id?: number
  }

  export type YoutubeLikePostOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeLikePostCountOrderByAggregateInput
    _avg?: YoutubeLikePostAvgOrderByAggregateInput
    _max?: YoutubeLikePostMaxOrderByAggregateInput
    _min?: YoutubeLikePostMinOrderByAggregateInput
    _sum?: YoutubeLikePostSumOrderByAggregateInput
  }

  export type YoutubeLikePostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeLikePostScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeLikePostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeLikePostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    likeByUserId?: IntWithAggregatesFilter | number
    likeTypeId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeLikeCommentWhereInput = {
    AND?: Enumerable<YoutubeLikeCommentWhereInput>
    OR?: Enumerable<YoutubeLikeCommentWhereInput>
    NOT?: Enumerable<YoutubeLikeCommentWhereInput>
    id?: IntFilter | number
    comment?: XOR<YoutubePostRelationFilter, YoutubePostWhereInput>
    commentId?: IntFilter | number
    likeByUser?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    likeByUserId?: IntFilter | number
    likeType?: XOR<YoutubeLikeTypeRelationFilter, YoutubeLikeTypeWhereInput>
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeLikeCommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: YoutubePostOrderByWithRelationInput
    commentId?: SortOrder
    likeByUser?: YoutubeUserOrderByWithRelationInput
    likeByUserId?: SortOrder
    likeType?: YoutubeLikeTypeOrderByWithRelationInput
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeCommentWhereUniqueInput = {
    id?: number
  }

  export type YoutubeLikeCommentOrderByWithAggregationInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeLikeCommentCountOrderByAggregateInput
    _avg?: YoutubeLikeCommentAvgOrderByAggregateInput
    _max?: YoutubeLikeCommentMaxOrderByAggregateInput
    _min?: YoutubeLikeCommentMinOrderByAggregateInput
    _sum?: YoutubeLikeCommentSumOrderByAggregateInput
  }

  export type YoutubeLikeCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeLikeCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeLikeCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeLikeCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentId?: IntWithAggregatesFilter | number
    likeByUserId?: IntWithAggregatesFilter | number
    likeTypeId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type YoutubeSubcriberWhereInput = {
    AND?: Enumerable<YoutubeSubcriberWhereInput>
    OR?: Enumerable<YoutubeSubcriberWhereInput>
    NOT?: Enumerable<YoutubeSubcriberWhereInput>
    id?: IntFilter | number
    fromUser?: XOR<YoutubeUserRelationFilter, YoutubeUserWhereInput>
    fromUserId?: IntFilter | number
    toChanel?: XOR<YoutubeChanelRelationFilter, YoutubeChanelWhereInput>
    toChanelId?: IntFilter | number
    isSupported?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeSubcriberOrderByWithRelationInput = {
    id?: SortOrder
    fromUser?: YoutubeUserOrderByWithRelationInput
    fromUserId?: SortOrder
    toChanel?: YoutubeChanelOrderByWithRelationInput
    toChanelId?: SortOrder
    isSupported?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeSubcriberWhereUniqueInput = {
    id?: number
  }

  export type YoutubeSubcriberOrderByWithAggregationInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
    isSupported?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YoutubeSubcriberCountOrderByAggregateInput
    _avg?: YoutubeSubcriberAvgOrderByAggregateInput
    _max?: YoutubeSubcriberMaxOrderByAggregateInput
    _min?: YoutubeSubcriberMinOrderByAggregateInput
    _sum?: YoutubeSubcriberSumOrderByAggregateInput
  }

  export type YoutubeSubcriberScalarWhereWithAggregatesInput = {
    AND?: Enumerable<YoutubeSubcriberScalarWhereWithAggregatesInput>
    OR?: Enumerable<YoutubeSubcriberScalarWhereWithAggregatesInput>
    NOT?: Enumerable<YoutubeSubcriberScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    fromUserId?: IntWithAggregatesFilter | number
    toChanelId?: IntWithAggregatesFilter | number
    isSupported?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookUserWhereInput = {
    AND?: Enumerable<FacebookUserWhereInput>
    OR?: Enumerable<FacebookUserWhereInput>
    NOT?: Enumerable<FacebookUserWhereInput>
    id?: IntFilter | number
    profileImage?: StringFilter | string
    coverImage?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: FacebookPostListRelationFilter
    groupcreater?: FacebookGroupListRelationFilter
    groupMember?: FacebookGroupListRelationFilter
    comments?: FacebookCommentListRelationFilter
    likePosts?: FacebookLikePostListRelationFilter
    likeComments?: FacebookLikeCommentListRelationFilter
    friendRequestFroms?: FacebookFriendRequestListRelationFilter
    friendRequestToes?: FacebookFriendRequestListRelationFilter
    friendRelationFroms?: FacebookUserRelationListRelationFilter
    friendRelationToes?: FacebookUserRelationListRelationFilter
    messengeFroms?: FacebookMessengerListRelationFilter
    messengeToes?: FacebookMessengerListRelationFilter
  }

  export type FacebookUserOrderByWithRelationInput = {
    id?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: FacebookPostOrderByRelationAggregateInput
    groupcreater?: FacebookGroupOrderByRelationAggregateInput
    groupMember?: FacebookGroupOrderByRelationAggregateInput
    comments?: FacebookCommentOrderByRelationAggregateInput
    likePosts?: FacebookLikePostOrderByRelationAggregateInput
    likeComments?: FacebookLikeCommentOrderByRelationAggregateInput
    friendRequestFroms?: FacebookFriendRequestOrderByRelationAggregateInput
    friendRequestToes?: FacebookFriendRequestOrderByRelationAggregateInput
    friendRelationFroms?: FacebookUserRelationOrderByRelationAggregateInput
    friendRelationToes?: FacebookUserRelationOrderByRelationAggregateInput
    messengeFroms?: FacebookMessengerOrderByRelationAggregateInput
    messengeToes?: FacebookMessengerOrderByRelationAggregateInput
  }

  export type FacebookUserWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type FacebookUserOrderByWithAggregationInput = {
    id?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookUserCountOrderByAggregateInput
    _avg?: FacebookUserAvgOrderByAggregateInput
    _max?: FacebookUserMaxOrderByAggregateInput
    _min?: FacebookUserMinOrderByAggregateInput
    _sum?: FacebookUserSumOrderByAggregateInput
  }

  export type FacebookUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookUserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    profileImage?: StringWithAggregatesFilter | string
    coverImage?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookGroupWhereInput = {
    AND?: Enumerable<FacebookGroupWhereInput>
    OR?: Enumerable<FacebookGroupWhereInput>
    NOT?: Enumerable<FacebookGroupWhereInput>
    id?: IntFilter | number
    GroupImage?: StringFilter | string
    coverImage?: StringFilter | string
    name?: StringFilter | string
    createrUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    createrUserId?: IntFilter | number
    memberUsers?: FacebookUserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookGroupOrderByWithRelationInput = {
    id?: SortOrder
    GroupImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createrUser?: FacebookUserOrderByWithRelationInput
    createrUserId?: SortOrder
    memberUsers?: FacebookUserOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookGroupWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type FacebookGroupOrderByWithAggregationInput = {
    id?: SortOrder
    GroupImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createrUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookGroupCountOrderByAggregateInput
    _avg?: FacebookGroupAvgOrderByAggregateInput
    _max?: FacebookGroupMaxOrderByAggregateInput
    _min?: FacebookGroupMinOrderByAggregateInput
    _sum?: FacebookGroupSumOrderByAggregateInput
  }

  export type FacebookGroupScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookGroupScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookGroupScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookGroupScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    GroupImage?: StringWithAggregatesFilter | string
    coverImage?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createrUserId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookPostDestinationWhereInput = {
    AND?: Enumerable<FacebookPostDestinationWhereInput>
    OR?: Enumerable<FacebookPostDestinationWhereInput>
    NOT?: Enumerable<FacebookPostDestinationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: FacebookPostListRelationFilter
  }

  export type FacebookPostDestinationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: FacebookPostOrderByRelationAggregateInput
  }

  export type FacebookPostDestinationWhereUniqueInput = {
    id?: number
  }

  export type FacebookPostDestinationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookPostDestinationCountOrderByAggregateInput
    _avg?: FacebookPostDestinationAvgOrderByAggregateInput
    _max?: FacebookPostDestinationMaxOrderByAggregateInput
    _min?: FacebookPostDestinationMinOrderByAggregateInput
    _sum?: FacebookPostDestinationSumOrderByAggregateInput
  }

  export type FacebookPostDestinationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookPostDestinationScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookPostDestinationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookPostDestinationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookPostTypeWhereInput = {
    AND?: Enumerable<FacebookPostTypeWhereInput>
    OR?: Enumerable<FacebookPostTypeWhereInput>
    NOT?: Enumerable<FacebookPostTypeWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: FacebookPostListRelationFilter
  }

  export type FacebookPostTypeOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: FacebookPostOrderByRelationAggregateInput
  }

  export type FacebookPostTypeWhereUniqueInput = {
    id?: number
  }

  export type FacebookPostTypeOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookPostTypeCountOrderByAggregateInput
    _avg?: FacebookPostTypeAvgOrderByAggregateInput
    _max?: FacebookPostTypeMaxOrderByAggregateInput
    _min?: FacebookPostTypeMinOrderByAggregateInput
    _sum?: FacebookPostTypeSumOrderByAggregateInput
  }

  export type FacebookPostTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookPostTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookPostTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookPostTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookLocationWhereInput = {
    AND?: Enumerable<FacebookLocationWhereInput>
    OR?: Enumerable<FacebookLocationWhereInput>
    NOT?: Enumerable<FacebookLocationWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: FacebookPostListRelationFilter
  }

  export type FacebookLocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: FacebookPostOrderByRelationAggregateInput
  }

  export type FacebookLocationWhereUniqueInput = {
    id?: number
  }

  export type FacebookLocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookLocationCountOrderByAggregateInput
    _avg?: FacebookLocationAvgOrderByAggregateInput
    _max?: FacebookLocationMaxOrderByAggregateInput
    _min?: FacebookLocationMinOrderByAggregateInput
    _sum?: FacebookLocationSumOrderByAggregateInput
  }

  export type FacebookLocationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookLocationScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookLocationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookLocationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookHashtagWhereInput = {
    AND?: Enumerable<FacebookHashtagWhereInput>
    OR?: Enumerable<FacebookHashtagWhereInput>
    NOT?: Enumerable<FacebookHashtagWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    posts?: FacebookPostListRelationFilter
  }

  export type FacebookHashtagOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    posts?: FacebookPostOrderByRelationAggregateInput
  }

  export type FacebookHashtagWhereUniqueInput = {
    id?: number
  }

  export type FacebookHashtagOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookHashtagCountOrderByAggregateInput
    _avg?: FacebookHashtagAvgOrderByAggregateInput
    _max?: FacebookHashtagMaxOrderByAggregateInput
    _min?: FacebookHashtagMinOrderByAggregateInput
    _sum?: FacebookHashtagSumOrderByAggregateInput
  }

  export type FacebookHashtagScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookHashtagScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookHashtagScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookHashtagScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookPostWhereInput = {
    AND?: Enumerable<FacebookPostWhereInput>
    OR?: Enumerable<FacebookPostWhereInput>
    NOT?: Enumerable<FacebookPostWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    postType?: XOR<FacebookPostTypeRelationFilter, FacebookPostTypeWhereInput>
    postTypeId?: IntFilter | number
    posterUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    posterUserId?: IntFilter | number
    location?: XOR<FacebookLocationRelationFilter, FacebookLocationWhereInput>
    locationId?: IntFilter | number
    destination?: XOR<FacebookPostDestinationRelationFilter, FacebookPostDestinationWhereInput>
    destinationId?: IntFilter | number
    destinationRelateId?: IntFilter | number
    isShared?: BoolFilter | boolean
    shareFromPostId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    hashtags?: FacebookHashtagListRelationFilter
    comments?: FacebookCommentListRelationFilter
    likePosts?: FacebookLikePostListRelationFilter
    likeComments?: FacebookLikeCommentListRelationFilter
  }

  export type FacebookPostOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    postType?: FacebookPostTypeOrderByWithRelationInput
    postTypeId?: SortOrder
    posterUser?: FacebookUserOrderByWithRelationInput
    posterUserId?: SortOrder
    location?: FacebookLocationOrderByWithRelationInput
    locationId?: SortOrder
    destination?: FacebookPostDestinationOrderByWithRelationInput
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    hashtags?: FacebookHashtagOrderByRelationAggregateInput
    comments?: FacebookCommentOrderByRelationAggregateInput
    likePosts?: FacebookLikePostOrderByRelationAggregateInput
    likeComments?: FacebookLikeCommentOrderByRelationAggregateInput
  }

  export type FacebookPostWhereUniqueInput = {
    id?: number
  }

  export type FacebookPostOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookPostCountOrderByAggregateInput
    _avg?: FacebookPostAvgOrderByAggregateInput
    _max?: FacebookPostMaxOrderByAggregateInput
    _min?: FacebookPostMinOrderByAggregateInput
    _sum?: FacebookPostSumOrderByAggregateInput
  }

  export type FacebookPostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookPostScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookPostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookPostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    postTypeId?: IntWithAggregatesFilter | number
    posterUserId?: IntWithAggregatesFilter | number
    locationId?: IntWithAggregatesFilter | number
    destinationId?: IntWithAggregatesFilter | number
    destinationRelateId?: IntWithAggregatesFilter | number
    isShared?: BoolWithAggregatesFilter | boolean
    shareFromPostId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookCommentWhereInput = {
    AND?: Enumerable<FacebookCommentWhereInput>
    OR?: Enumerable<FacebookCommentWhereInput>
    NOT?: Enumerable<FacebookCommentWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    commentByUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    commentByUserId?: IntFilter | number
    post?: XOR<FacebookPostRelationFilter, FacebookPostWhereInput>
    postId?: IntFilter | number
    isReplied?: BoolFilter | boolean
    replyFromCommentId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookCommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUser?: FacebookUserOrderByWithRelationInput
    commentByUserId?: SortOrder
    post?: FacebookPostOrderByWithRelationInput
    postId?: SortOrder
    isReplied?: SortOrder
    replyFromCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookCommentWhereUniqueInput = {
    id?: number
  }

  export type FacebookCommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    isReplied?: SortOrder
    replyFromCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookCommentCountOrderByAggregateInput
    _avg?: FacebookCommentAvgOrderByAggregateInput
    _max?: FacebookCommentMaxOrderByAggregateInput
    _min?: FacebookCommentMinOrderByAggregateInput
    _sum?: FacebookCommentSumOrderByAggregateInput
  }

  export type FacebookCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    commentByUserId?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    isReplied?: BoolWithAggregatesFilter | boolean
    replyFromCommentId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookLikeTypeWhereInput = {
    AND?: Enumerable<FacebookLikeTypeWhereInput>
    OR?: Enumerable<FacebookLikeTypeWhereInput>
    NOT?: Enumerable<FacebookLikeTypeWhereInput>
    id?: IntFilter | number
    emoji?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    likePosts?: FacebookLikePostListRelationFilter
    likeComments?: FacebookLikeCommentListRelationFilter
  }

  export type FacebookLikeTypeOrderByWithRelationInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    likePosts?: FacebookLikePostOrderByRelationAggregateInput
    likeComments?: FacebookLikeCommentOrderByRelationAggregateInput
  }

  export type FacebookLikeTypeWhereUniqueInput = {
    id?: number
  }

  export type FacebookLikeTypeOrderByWithAggregationInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookLikeTypeCountOrderByAggregateInput
    _avg?: FacebookLikeTypeAvgOrderByAggregateInput
    _max?: FacebookLikeTypeMaxOrderByAggregateInput
    _min?: FacebookLikeTypeMinOrderByAggregateInput
    _sum?: FacebookLikeTypeSumOrderByAggregateInput
  }

  export type FacebookLikeTypeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookLikeTypeScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookLikeTypeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookLikeTypeScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    emoji?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookLikePostWhereInput = {
    AND?: Enumerable<FacebookLikePostWhereInput>
    OR?: Enumerable<FacebookLikePostWhereInput>
    NOT?: Enumerable<FacebookLikePostWhereInput>
    id?: IntFilter | number
    post?: XOR<FacebookPostRelationFilter, FacebookPostWhereInput>
    postId?: IntFilter | number
    posterUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    posterUserId?: IntFilter | number
    likeType?: XOR<FacebookLikeTypeRelationFilter, FacebookLikeTypeWhereInput>
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookLikePostOrderByWithRelationInput = {
    id?: SortOrder
    post?: FacebookPostOrderByWithRelationInput
    postId?: SortOrder
    posterUser?: FacebookUserOrderByWithRelationInput
    posterUserId?: SortOrder
    likeType?: FacebookLikeTypeOrderByWithRelationInput
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikePostWhereUniqueInput = {
    id?: number
  }

  export type FacebookLikePostOrderByWithAggregationInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookLikePostCountOrderByAggregateInput
    _avg?: FacebookLikePostAvgOrderByAggregateInput
    _max?: FacebookLikePostMaxOrderByAggregateInput
    _min?: FacebookLikePostMinOrderByAggregateInput
    _sum?: FacebookLikePostSumOrderByAggregateInput
  }

  export type FacebookLikePostScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookLikePostScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookLikePostScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookLikePostScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    postId?: IntWithAggregatesFilter | number
    posterUserId?: IntWithAggregatesFilter | number
    likeTypeId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookLikeCommentWhereInput = {
    AND?: Enumerable<FacebookLikeCommentWhereInput>
    OR?: Enumerable<FacebookLikeCommentWhereInput>
    NOT?: Enumerable<FacebookLikeCommentWhereInput>
    id?: IntFilter | number
    comment?: XOR<FacebookPostRelationFilter, FacebookPostWhereInput>
    commentId?: IntFilter | number
    posterUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    posterUserId?: IntFilter | number
    likeType?: XOR<FacebookLikeTypeRelationFilter, FacebookLikeTypeWhereInput>
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookLikeCommentOrderByWithRelationInput = {
    id?: SortOrder
    comment?: FacebookPostOrderByWithRelationInput
    commentId?: SortOrder
    posterUser?: FacebookUserOrderByWithRelationInput
    posterUserId?: SortOrder
    likeType?: FacebookLikeTypeOrderByWithRelationInput
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeCommentWhereUniqueInput = {
    id?: number
  }

  export type FacebookLikeCommentOrderByWithAggregationInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookLikeCommentCountOrderByAggregateInput
    _avg?: FacebookLikeCommentAvgOrderByAggregateInput
    _max?: FacebookLikeCommentMaxOrderByAggregateInput
    _min?: FacebookLikeCommentMinOrderByAggregateInput
    _sum?: FacebookLikeCommentSumOrderByAggregateInput
  }

  export type FacebookLikeCommentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookLikeCommentScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookLikeCommentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookLikeCommentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    commentId?: IntWithAggregatesFilter | number
    posterUserId?: IntWithAggregatesFilter | number
    likeTypeId?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookFriendRequestWhereInput = {
    AND?: Enumerable<FacebookFriendRequestWhereInput>
    OR?: Enumerable<FacebookFriendRequestWhereInput>
    NOT?: Enumerable<FacebookFriendRequestWhereInput>
    id?: IntFilter | number
    requestFromUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    requestFromUserId?: IntFilter | number
    requestToUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    requestToUserId?: IntFilter | number
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookFriendRequestOrderByWithRelationInput = {
    id?: SortOrder
    requestFromUser?: FacebookUserOrderByWithRelationInput
    requestFromUserId?: SortOrder
    requestToUser?: FacebookUserOrderByWithRelationInput
    requestToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookFriendRequestWhereUniqueInput = {
    id?: number
  }

  export type FacebookFriendRequestOrderByWithAggregationInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookFriendRequestCountOrderByAggregateInput
    _avg?: FacebookFriendRequestAvgOrderByAggregateInput
    _max?: FacebookFriendRequestMaxOrderByAggregateInput
    _min?: FacebookFriendRequestMinOrderByAggregateInput
    _sum?: FacebookFriendRequestSumOrderByAggregateInput
  }

  export type FacebookFriendRequestScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookFriendRequestScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookFriendRequestScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookFriendRequestScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    requestFromUserId?: IntWithAggregatesFilter | number
    requestToUserId?: IntWithAggregatesFilter | number
    isAccepted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookUserRelationWhereInput = {
    AND?: Enumerable<FacebookUserRelationWhereInput>
    OR?: Enumerable<FacebookUserRelationWhereInput>
    NOT?: Enumerable<FacebookUserRelationWhereInput>
    id?: IntFilter | number
    relationFromUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    relationFromUserId?: IntFilter | number
    relationToUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    relationToUserId?: IntFilter | number
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookUserRelationOrderByWithRelationInput = {
    id?: SortOrder
    relationFromUser?: FacebookUserOrderByWithRelationInput
    relationFromUserId?: SortOrder
    relationToUser?: FacebookUserOrderByWithRelationInput
    relationToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserRelationWhereUniqueInput = {
    id?: number
  }

  export type FacebookUserRelationOrderByWithAggregationInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookUserRelationCountOrderByAggregateInput
    _avg?: FacebookUserRelationAvgOrderByAggregateInput
    _max?: FacebookUserRelationMaxOrderByAggregateInput
    _min?: FacebookUserRelationMinOrderByAggregateInput
    _sum?: FacebookUserRelationSumOrderByAggregateInput
  }

  export type FacebookUserRelationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookUserRelationScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookUserRelationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookUserRelationScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    relationFromUserId?: IntWithAggregatesFilter | number
    relationToUserId?: IntWithAggregatesFilter | number
    isAccepted?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FacebookMessengerWhereInput = {
    AND?: Enumerable<FacebookMessengerWhereInput>
    OR?: Enumerable<FacebookMessengerWhereInput>
    NOT?: Enumerable<FacebookMessengerWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    messageFromUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    messageFromUserId?: IntFilter | number
    messageToUser?: XOR<FacebookUserRelationFilter, FacebookUserWhereInput>
    messageToUserId?: IntFilter | number
    isRead?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookMessengerOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    messageFromUser?: FacebookUserOrderByWithRelationInput
    messageFromUserId?: SortOrder
    messageToUser?: FacebookUserOrderByWithRelationInput
    messageToUserId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMessengerWhereUniqueInput = {
    id?: number
  }

  export type FacebookMessengerOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FacebookMessengerCountOrderByAggregateInput
    _avg?: FacebookMessengerAvgOrderByAggregateInput
    _max?: FacebookMessengerMaxOrderByAggregateInput
    _min?: FacebookMessengerMinOrderByAggregateInput
    _sum?: FacebookMessengerSumOrderByAggregateInput
  }

  export type FacebookMessengerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FacebookMessengerScalarWhereWithAggregatesInput>
    OR?: Enumerable<FacebookMessengerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FacebookMessengerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    message?: StringWithAggregatesFilter | string
    messageFromUserId?: IntWithAggregatesFilter | number
    messageToUserId?: IntWithAggregatesFilter | number
    isRead?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type BinKitchenCategoryCreateInput = {
    name: string
    menus?: BinKitchenMenuCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUncheckedCreateInput = {
    id?: number
    name: string
    menus?: BinKitchenMenuUncheckedCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    menus?: BinKitchenMenuUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    menus?: BinKitchenMenuUncheckedUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuCreateInput = {
    name: string
    image: string
    price: number
    category?: BinKitchenCategoryCreateNestedOneWithoutMenusInput
    orderItems?: BinKitchenOrderItemCreateNestedManyWithoutMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUncheckedCreateInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    orderItems?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    category?: BinKitchenCategoryUpdateOneWithoutMenusNestedInput
    orderItems?: BinKitchenOrderItemUpdateManyWithoutMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    orderItems?: BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuCreateManyInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderCreateInput = {
    status?: string
    tableId: number
    orderItems?: BinKitchenOrderItemCreateNestedManyWithoutOrderInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUncheckedCreateInput = {
    id?: number
    status?: string
    tableId: number
    orderItems?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutOrderInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    orderItems?: BinKitchenOrderItemUpdateManyWithoutOrderNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    orderItems?: BinKitchenOrderItemUncheckedUpdateManyWithoutOrderNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderCreateManyInput = {
    id?: number
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateInput = {
    menu: BinKitchenMenuCreateNestedOneWithoutOrderItemsInput
    order?: BinKitchenOrderCreateNestedOneWithoutOrderItemsInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateInput = {
    id?: number
    menuId: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateInput = {
    menu?: BinKitchenMenuUpdateOneRequiredWithoutOrderItemsNestedInput
    order?: BinKitchenOrderUpdateOneWithoutOrderItemsNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyInput = {
    id?: number
    menuId: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListCreateInput = {
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUncheckedCreateInput = {
    id?: number
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUpdateInput = {
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListCreateManyInput = {
    id?: number
    task: string
    status?: string
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TodoListUpdateManyMutationInput = {
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TodoListUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    task?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaCategoryCreateInput = {
    name: string
    triviaQuizes?: TriviaQuizCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
    rounds?: TriviaRoundCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUncheckedCreateInput = {
    id?: number
    name: string
    triviaQuizes?: TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
    rounds?: TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    triviaQuizes?: TriviaQuizUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rounds?: TriviaRoundUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    triviaQuizes?: TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rounds?: TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizCreateInput = {
    quiz: string
    category?: TriviaCategoryCreateNestedOneWithoutTriviaQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceCreateNestedManyWithoutQuizInput
    answerId: number
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateInput = {
    id?: number
    quiz: string
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
    answerId: number
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUpdateInput = {
    quiz?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneWithoutTriviaQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizCreateManyInput = {
    id?: number
    quiz: string
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answerId: number
  }

  export type TriviaQuizUpdateManyMutationInput = {
    quiz?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriviaQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriviaChoiceCreateInput = {
    choice: string
    quiz?: TriviaQuizCreateNestedOneWithoutChoicesInput
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutUserChoiceInput
  }

  export type TriviaChoiceUncheckedCreateInput = {
    id?: number
    choice: string
    quizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutUserChoiceInput
  }

  export type TriviaChoiceUpdateInput = {
    choice?: StringFieldUpdateOperationsInput | string
    quiz?: TriviaQuizUpdateOneWithoutChoicesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutUserChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutUserChoiceNestedInput
  }

  export type TriviaChoiceCreateManyInput = {
    id?: number
    choice: string
    quizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceUpdateManyMutationInput = {
    choice?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundCreateInput = {
    round: string
    category?: TriviaCategoryCreateNestedOneWithoutRoundsInput
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUncheckedCreateInput = {
    id?: number
    round: string
    categoryId: number
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUpdateInput = {
    round?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneWithoutRoundsNestedInput
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundCreateManyInput = {
    id?: number
    round: string
    categoryId: number
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundUpdateManyMutationInput = {
    round?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateInput = {
    round?: TriviaRoundCreateNestedOneWithoutRoundQuizesInput
    quiz?: TriviaQuizCreateNestedOneWithoutRoundQuizesInput
    userChoice?: TriviaChoiceCreateNestedOneWithoutRoundQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUncheckedCreateInput = {
    id?: number
    roundId: number
    quizId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateInput = {
    round?: TriviaRoundUpdateOneWithoutRoundQuizesNestedInput
    quiz?: TriviaQuizUpdateOneWithoutRoundQuizesNestedInput
    userChoice?: TriviaChoiceUpdateOneWithoutRoundQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    userChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateManyInput = {
    id?: number
    roundId: number
    quizId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    userChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserCreateInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUpdateInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserCreateManyInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserUpdateManyMutationInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationCreateInput = {
    follwer: TwitterUserCreateNestedOneWithoutFollwersInput
    following: TwitterUserCreateNestedOneWithoutFollowingsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUncheckedCreateInput = {
    id?: number
    followerId: number
    followingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUpdateInput = {
    follwer?: TwitterUserUpdateOneRequiredWithoutFollwersNestedInput
    following?: TwitterUserUpdateOneRequiredWithoutFollowingsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationCreateManyInput = {
    id?: number
    followerId: number
    followingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterPostCreateInput = {
    message: string
    user: TwitterUserCreateNestedOneWithoutTwitterPostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyCreateNestedManyWithoutPostInput
    hashTags?: TwitterHashTagCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostUncheckedCreateInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutPostInput
    hashTags?: TwitterHashTagUncheckedCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: TwitterUserUpdateOneRequiredWithoutTwitterPostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUpdateManyWithoutPostNestedInput
    hashTags?: TwitterHashTagUpdateManyWithoutPostsNestedInput
  }

  export type TwitterPostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutPostNestedInput
    hashTags?: TwitterHashTagUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type TwitterPostCreateManyInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterPostUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterPostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagCreateInput = {
    message: string
    posts?: TwitterPostCreateNestedManyWithoutHashTagsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterHashTagUncheckedCreateInput = {
    id?: number
    message: string
    posts?: TwitterPostUncheckedCreateNestedManyWithoutHashTagsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterHashTagUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    posts?: TwitterPostUpdateManyWithoutHashTagsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    posts?: TwitterPostUncheckedUpdateManyWithoutHashTagsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagCreateManyInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterHashTagUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyCreateInput = {
    message: string
    post: TwitterPostCreateNestedOneWithoutTwitterRepliesInput
    user: TwitterUserCreateNestedOneWithoutTwitterRepliesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUncheckedCreateInput = {
    id?: number
    message: string
    postId: number
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: TwitterPostUpdateOneRequiredWithoutTwitterRepliesNestedInput
    user?: TwitterUserUpdateOneRequiredWithoutTwitterRepliesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyCreateManyInput = {
    id?: number
    message: string
    postId: number
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMCreateInput = {
    message: string
    directFrom: TwitterUserCreateNestedOneWithoutDirectFromsInput
    directTo: TwitterUserCreateNestedOneWithoutDirectToesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMUncheckedCreateInput = {
    id?: number
    message: string
    directFromId: number
    directToId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    directFrom?: TwitterUserUpdateOneRequiredWithoutDirectFromsNestedInput
    directTo?: TwitterUserUpdateOneRequiredWithoutDirectToesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directFromId?: IntFieldUpdateOperationsInput | number
    directToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMCreateManyInput = {
    id?: number
    message: string
    directFromId: number
    directToId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directFromId?: IntFieldUpdateOperationsInput | number
    directToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeUserCreateInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUpdateInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserCreateManyInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeUserUpdateManyMutationInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelPermissionCreateInput = {
    name: YoutubePermissionEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type YoutubeChanelPermissionUncheckedCreateInput = {
    id?: number
    name: YoutubePermissionEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type YoutubeChanelPermissionUpdateInput = {
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type YoutubeChanelPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type YoutubeChanelPermissionCreateManyInput = {
    id?: number
    name: YoutubePermissionEnum
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelPermissionUpdateManyMutationInput = {
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelCreateInput = {
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutChanelInput
    posts?: YoutubePostCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelUncheckedCreateInput = {
    id?: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutChanelInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelUpdateInput = {
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutChanelNestedInput
    posts?: YoutubePostUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeChanelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeChanelCreateManyInput = {
    id?: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelUpdateManyMutationInput = {
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateInput = {
    chanel: YoutubeChanelCreateNestedOneWithoutChanelToUserPermissionsInput
    User: YoutubeUserCreateNestedOneWithoutChanelToUserPermissionsInput
    permission: YoutubeChanelPermissionCreateNestedOneWithoutChanelToUserPermissionsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateInput = {
    id?: number
    chanelId: number
    UserId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUpdateInput = {
    chanel?: YoutubeChanelUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    User?: YoutubeUserUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    permission?: YoutubeChanelPermissionUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateManyInput = {
    id?: number
    chanelId: number
    UserId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeHashtagCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostCreateNestedManyWithoutHashtagsInput
  }

  export type YoutubeHashtagUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostUncheckedCreateNestedManyWithoutHashtagsInput
  }

  export type YoutubeHashtagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUpdateManyWithoutHashtagsNestedInput
  }

  export type YoutubeHashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUncheckedUpdateManyWithoutHashtagsNestedInput
  }

  export type YoutubeHashtagCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeHashtagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeHashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostCreateInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUpdateInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostCreateManyInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubePostUpdateManyMutationInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentCreateInput = {
    message: string
    commentByUser: YoutubeUserCreateNestedOneWithoutCommentsInput
    post: YoutubePostCreateNestedOneWithoutCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentUncheckedCreateInput = {
    id?: number
    message: string
    commentByUserId: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    commentByUser?: YoutubeUserUpdateOneRequiredWithoutCommentsNestedInput
    post?: YoutubePostUpdateOneRequiredWithoutCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentCreateManyInput = {
    id?: number
    message: string
    commentByUserId: number
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeTypeCreateInput = {
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeTypeInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeUncheckedCreateInput = {
    id?: number
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeTypeInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeUpdateInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeTypeNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubeLikeTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubeLikeTypeCreateManyInput = {
    id?: number
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeTypeUpdateManyMutationInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostCreateInput = {
    post: YoutubePostCreateNestedOneWithoutLikePostsInput
    likeByUser: YoutubeUserCreateNestedOneWithoutLikePostsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUncheckedCreateInput = {
    id?: number
    postId: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUpdateInput = {
    post?: YoutubePostUpdateOneRequiredWithoutLikePostsNestedInput
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostCreateManyInput = {
    id?: number
    postId: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentCreateInput = {
    comment: YoutubePostCreateNestedOneWithoutLikeCommentsInput
    likeByUser: YoutubeUserCreateNestedOneWithoutLikeCommentsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUncheckedCreateInput = {
    id?: number
    commentId: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUpdateInput = {
    comment?: YoutubePostUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentCreateManyInput = {
    id?: number
    commentId: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberCreateInput = {
    fromUser: YoutubeUserCreateNestedOneWithoutSubcribersInput
    toChanel: YoutubeChanelCreateNestedOneWithoutSubcribersInput
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberUncheckedCreateInput = {
    id?: number
    fromUserId: number
    toChanelId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberUpdateInput = {
    fromUser?: YoutubeUserUpdateOneRequiredWithoutSubcribersNestedInput
    toChanel?: YoutubeChanelUpdateOneRequiredWithoutSubcribersNestedInput
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toChanelId?: IntFieldUpdateOperationsInput | number
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberCreateManyInput = {
    id?: number
    fromUserId: number
    toChanelId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberUpdateManyMutationInput = {
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    toChanelId?: IntFieldUpdateOperationsInput | number
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserCreateInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUpdateInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserCreateManyInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserUpdateManyMutationInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupCreateInput = {
    GroupImage: string
    coverImage: string
    name: string
    createrUser: FacebookUserCreateNestedOneWithoutGroupcreaterInput
    memberUsers?: FacebookUserCreateNestedManyWithoutGroupMemberInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupUncheckedCreateInput = {
    id?: number
    GroupImage: string
    coverImage: string
    name: string
    createrUserId: number
    memberUsers?: FacebookUserUncheckedCreateNestedManyWithoutGroupMemberInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupUpdateInput = {
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUser?: FacebookUserUpdateOneRequiredWithoutGroupcreaterNestedInput
    memberUsers?: FacebookUserUpdateManyWithoutGroupMemberNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUserId?: IntFieldUpdateOperationsInput | number
    memberUsers?: FacebookUserUncheckedUpdateManyWithoutGroupMemberNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupCreateManyInput = {
    id?: number
    GroupImage: string
    coverImage: string
    name: string
    createrUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupUpdateManyMutationInput = {
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostDestinationCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutDestinationInput
  }

  export type FacebookPostDestinationUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutDestinationInput
  }

  export type FacebookPostDestinationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutDestinationNestedInput
  }

  export type FacebookPostDestinationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutDestinationNestedInput
  }

  export type FacebookPostDestinationCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostDestinationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostDestinationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostTypeCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPostTypeInput
  }

  export type FacebookPostTypeUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPostTypeInput
  }

  export type FacebookPostTypeUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPostTypeNestedInput
  }

  export type FacebookPostTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPostTypeNestedInput
  }

  export type FacebookPostTypeCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostTypeUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLocationCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutLocationInput
  }

  export type FacebookLocationUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutLocationInput
  }

  export type FacebookLocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutLocationNestedInput
  }

  export type FacebookLocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type FacebookLocationCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookHashtagCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutHashtagsInput
  }

  export type FacebookHashtagUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutHashtagsInput
  }

  export type FacebookHashtagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutHashtagsNestedInput
  }

  export type FacebookHashtagUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutHashtagsNestedInput
  }

  export type FacebookHashtagCreateManyInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookHashtagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookHashtagUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostCreateInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostCreateManyInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentCreateInput = {
    message: string
    commentByUser: FacebookUserCreateNestedOneWithoutCommentsInput
    post: FacebookPostCreateNestedOneWithoutCommentsInput
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentUncheckedCreateInput = {
    id?: number
    message: string
    commentByUserId: number
    postId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    commentByUser?: FacebookUserUpdateOneRequiredWithoutCommentsNestedInput
    post?: FacebookPostUpdateOneRequiredWithoutCommentsNestedInput
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentCreateManyInput = {
    id?: number
    message: string
    commentByUserId: number
    postId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeTypeCreateInput = {
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: FacebookLikePostCreateNestedManyWithoutLikeTypeInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeUncheckedCreateInput = {
    id?: number
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutLikeTypeInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeUpdateInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: FacebookLikePostUpdateManyWithoutLikeTypeNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookLikeTypeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookLikeTypeCreateManyInput = {
    id?: number
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeTypeUpdateManyMutationInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeTypeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostCreateInput = {
    post: FacebookPostCreateNestedOneWithoutLikePostsInput
    posterUser: FacebookUserCreateNestedOneWithoutLikePostsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUncheckedCreateInput = {
    id?: number
    postId: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUpdateInput = {
    post?: FacebookPostUpdateOneRequiredWithoutLikePostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostCreateManyInput = {
    id?: number
    postId: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentCreateInput = {
    comment: FacebookPostCreateNestedOneWithoutLikeCommentsInput
    posterUser: FacebookUserCreateNestedOneWithoutLikeCommentsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUncheckedCreateInput = {
    id?: number
    commentId: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUpdateInput = {
    comment?: FacebookPostUpdateOneRequiredWithoutLikeCommentsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentCreateManyInput = {
    id?: number
    commentId: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestCreateInput = {
    requestFromUser: FacebookUserCreateNestedOneWithoutFriendRequestFromsInput
    requestToUser: FacebookUserCreateNestedOneWithoutFriendRequestToesInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestUncheckedCreateInput = {
    id?: number
    requestFromUserId: number
    requestToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestUpdateInput = {
    requestFromUser?: FacebookUserUpdateOneRequiredWithoutFriendRequestFromsNestedInput
    requestToUser?: FacebookUserUpdateOneRequiredWithoutFriendRequestToesNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestFromUserId?: IntFieldUpdateOperationsInput | number
    requestToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestCreateManyInput = {
    id?: number
    requestFromUserId: number
    requestToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestUpdateManyMutationInput = {
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestFromUserId?: IntFieldUpdateOperationsInput | number
    requestToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationCreateInput = {
    relationFromUser: FacebookUserCreateNestedOneWithoutFriendRelationFromsInput
    relationToUser: FacebookUserCreateNestedOneWithoutFriendRelationToesInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationUncheckedCreateInput = {
    id?: number
    relationFromUserId: number
    relationToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationUpdateInput = {
    relationFromUser?: FacebookUserUpdateOneRequiredWithoutFriendRelationFromsNestedInput
    relationToUser?: FacebookUserUpdateOneRequiredWithoutFriendRelationToesNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationFromUserId?: IntFieldUpdateOperationsInput | number
    relationToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationCreateManyInput = {
    id?: number
    relationFromUserId: number
    relationToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationUpdateManyMutationInput = {
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationFromUserId?: IntFieldUpdateOperationsInput | number
    relationToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerCreateInput = {
    message: string
    messageFromUser: FacebookUserCreateNestedOneWithoutMessengeFromsInput
    messageToUser: FacebookUserCreateNestedOneWithoutMessengeToesInput
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerUncheckedCreateInput = {
    id?: number
    message: string
    messageFromUserId: number
    messageToUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    messageFromUser?: FacebookUserUpdateOneRequiredWithoutMessengeFromsNestedInput
    messageToUser?: FacebookUserUpdateOneRequiredWithoutMessengeToesNestedInput
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageFromUserId?: IntFieldUpdateOperationsInput | number
    messageToUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerCreateManyInput = {
    id?: number
    message: string
    messageFromUserId: number
    messageToUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageFromUserId?: IntFieldUpdateOperationsInput | number
    messageToUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type BinKitchenMenuListRelationFilter = {
    every?: BinKitchenMenuWhereInput
    some?: BinKitchenMenuWhereInput
    none?: BinKitchenMenuWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type BinKitchenMenuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BinKitchenCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BinKitchenCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type BinKitchenCategoryRelationFilter = {
    is?: BinKitchenCategoryWhereInput | null
    isNot?: BinKitchenCategoryWhereInput | null
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BinKitchenOrderItemListRelationFilter = {
    every?: BinKitchenOrderItemWhereInput
    some?: BinKitchenOrderItemWhereInput
    none?: BinKitchenOrderItemWhereInput
  }

  export type BinKitchenOrderItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BinKitchenMenuCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type BinKitchenMenuMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    price?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenMenuSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BinKitchenOrderCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderAvgOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
  }

  export type BinKitchenOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    tableId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderSumOrderByAggregateInput = {
    id?: SortOrder
    tableId?: SortOrder
  }

  export type BinKitchenMenuRelationFilter = {
    is?: BinKitchenMenuWhereInput
    isNot?: BinKitchenMenuWhereInput
  }

  export type BinKitchenOrderRelationFilter = {
    is?: BinKitchenOrderWhereInput | null
    isNot?: BinKitchenOrderWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type BinKitchenOrderItemCountOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemAvgOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type BinKitchenOrderItemMaxOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemMinOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BinKitchenOrderItemSumOrderByAggregateInput = {
    id?: SortOrder
    menuId?: SortOrder
    orderId?: SortOrder
    quantity?: SortOrder
    totalPrice?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type TodoListCountOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TodoListMaxOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListMinOrderByAggregateInput = {
    id?: SortOrder
    task?: SortOrder
    status?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TodoListSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaQuizListRelationFilter = {
    every?: TriviaQuizWhereInput
    some?: TriviaQuizWhereInput
    none?: TriviaQuizWhereInput
  }

  export type TriviaRoundListRelationFilter = {
    every?: TriviaRoundWhereInput
    some?: TriviaRoundWhereInput
    none?: TriviaRoundWhereInput
  }

  export type TriviaQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TriviaCategoryRelationFilter = {
    is?: TriviaCategoryWhereInput | null
    isNot?: TriviaCategoryWhereInput | null
  }

  export type TriviaChoiceListRelationFilter = {
    every?: TriviaChoiceWhereInput
    some?: TriviaChoiceWhereInput
    none?: TriviaChoiceWhereInput
  }

  export type TriviaRoundQuizListRelationFilter = {
    every?: TriviaRoundQuizWhereInput
    some?: TriviaRoundQuizWhereInput
    none?: TriviaRoundQuizWhereInput
  }

  export type TriviaChoiceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaRoundQuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TriviaQuizCountOrderByAggregateInput = {
    id?: SortOrder
    quiz?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answerId?: SortOrder
  }

  export type TriviaQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    answerId?: SortOrder
  }

  export type TriviaQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    quiz?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answerId?: SortOrder
  }

  export type TriviaQuizMinOrderByAggregateInput = {
    id?: SortOrder
    quiz?: SortOrder
    categoryName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    answerId?: SortOrder
  }

  export type TriviaQuizSumOrderByAggregateInput = {
    id?: SortOrder
    answerId?: SortOrder
  }

  export type TriviaQuizRelationFilter = {
    is?: TriviaQuizWhereInput | null
    isNot?: TriviaQuizWhereInput | null
  }

  export type TriviaChoiceCountOrderByAggregateInput = {
    id?: SortOrder
    choice?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceAvgOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type TriviaChoiceMaxOrderByAggregateInput = {
    id?: SortOrder
    choice?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceMinOrderByAggregateInput = {
    id?: SortOrder
    choice?: SortOrder
    quizId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaChoiceSumOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
  }

  export type TriviaRoundCountOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
  }

  export type TriviaRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundMinOrderByAggregateInput = {
    id?: SortOrder
    round?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    score?: SortOrder
  }

  export type TriviaRoundRelationFilter = {
    is?: TriviaRoundWhereInput | null
    isNot?: TriviaRoundWhereInput | null
  }

  export type TriviaChoiceRelationFilter = {
    is?: TriviaChoiceWhereInput | null
    isNot?: TriviaChoiceWhereInput | null
  }

  export type TriviaRoundQuizCountOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizAvgOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
  }

  export type TriviaRoundQuizMaxOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizMinOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TriviaRoundQuizSumOrderByAggregateInput = {
    id?: SortOrder
    roundId?: SortOrder
    quizId?: SortOrder
    userChoiceId?: SortOrder
  }

  export type TwitterUserRelationListRelationFilter = {
    every?: TwitterUserRelationWhereInput
    some?: TwitterUserRelationWhereInput
    none?: TwitterUserRelationWhereInput
  }

  export type TwitterPostListRelationFilter = {
    every?: TwitterPostWhereInput
    some?: TwitterPostWhereInput
    none?: TwitterPostWhereInput
  }

  export type TwitterReplyListRelationFilter = {
    every?: TwitterReplyWhereInput
    some?: TwitterReplyWhereInput
    none?: TwitterReplyWhereInput
  }

  export type TwitterDMListRelationFilter = {
    every?: TwitterDMWhereInput
    some?: TwitterDMWhereInput
    none?: TwitterDMWhereInput
  }

  export type TwitterUserRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwitterPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwitterReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwitterDMOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwitterUserCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TwitterUserMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TwitterUserRelationFilter = {
    is?: TwitterUserWhereInput
    isNot?: TwitterUserWhereInput
  }

  export type TwitterUserRelationCountOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserRelationAvgOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type TwitterUserRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserRelationMinOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterUserRelationSumOrderByAggregateInput = {
    id?: SortOrder
    followerId?: SortOrder
    followingId?: SortOrder
  }

  export type TwitterHashTagListRelationFilter = {
    every?: TwitterHashTagWhereInput
    some?: TwitterHashTagWhereInput
    none?: TwitterHashTagWhereInput
  }

  export type TwitterHashTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TwitterPostCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterPostAvgOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
  }

  export type TwitterPostMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterPostMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterPostSumOrderByAggregateInput = {
    id?: SortOrder
    postByUserId?: SortOrder
  }

  export type TwitterHashTagCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterHashTagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TwitterHashTagMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterHashTagMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterHashTagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TwitterPostRelationFilter = {
    is?: TwitterPostWhereInput
    isNot?: TwitterPostWhereInput
  }

  export type TwitterReplyCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterReplyAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
  }

  export type TwitterReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterReplyMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterReplySumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    postByUserId?: SortOrder
  }

  export type TwitterDMCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterDMAvgOrderByAggregateInput = {
    id?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
  }

  export type TwitterDMMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterDMMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TwitterDMSumOrderByAggregateInput = {
    id?: SortOrder
    directFromId?: SortOrder
    directToId?: SortOrder
  }

  export type YoutubeChanelToUserPermissionListRelationFilter = {
    every?: YoutubeChanelToUserPermissionWhereInput
    some?: YoutubeChanelToUserPermissionWhereInput
    none?: YoutubeChanelToUserPermissionWhereInput
  }

  export type YoutubePostListRelationFilter = {
    every?: YoutubePostWhereInput
    some?: YoutubePostWhereInput
    none?: YoutubePostWhereInput
  }

  export type YoutubeCommentListRelationFilter = {
    every?: YoutubeCommentWhereInput
    some?: YoutubeCommentWhereInput
    none?: YoutubeCommentWhereInput
  }

  export type YoutubeLikePostListRelationFilter = {
    every?: YoutubeLikePostWhereInput
    some?: YoutubeLikePostWhereInput
    none?: YoutubeLikePostWhereInput
  }

  export type YoutubeLikeCommentListRelationFilter = {
    every?: YoutubeLikeCommentWhereInput
    some?: YoutubeLikeCommentWhereInput
    none?: YoutubeLikeCommentWhereInput
  }

  export type YoutubeSubcriberListRelationFilter = {
    every?: YoutubeSubcriberWhereInput
    some?: YoutubeSubcriberWhereInput
    none?: YoutubeSubcriberWhereInput
  }

  export type YoutubeChanelToUserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubePostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubeCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubeLikePostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubeLikeCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubeSubcriberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubeUserCountOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeUserMaxOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeUserMinOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumYoutubePermissionEnumFilter = {
    equals?: YoutubePermissionEnum
    in?: Enumerable<YoutubePermissionEnum>
    notIn?: Enumerable<YoutubePermissionEnum>
    not?: NestedEnumYoutubePermissionEnumFilter | YoutubePermissionEnum
  }

  export type YoutubeChanelPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeChanelPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelPermissionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumYoutubePermissionEnumWithAggregatesFilter = {
    equals?: YoutubePermissionEnum
    in?: Enumerable<YoutubePermissionEnum>
    notIn?: Enumerable<YoutubePermissionEnum>
    not?: NestedEnumYoutubePermissionEnumWithAggregatesFilter | YoutubePermissionEnum
    _count?: NestedIntFilter
    _min?: NestedEnumYoutubePermissionEnumFilter
    _max?: NestedEnumYoutubePermissionEnumFilter
  }

  export type YoutubeChanelCountOrderByAggregateInput = {
    id?: SortOrder
    ChanelImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeChanelMaxOrderByAggregateInput = {
    id?: SortOrder
    ChanelImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelMinOrderByAggregateInput = {
    id?: SortOrder
    ChanelImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeChanelRelationFilter = {
    is?: YoutubeChanelWhereInput
    isNot?: YoutubeChanelWhereInput
  }

  export type YoutubeUserRelationFilter = {
    is?: YoutubeUserWhereInput
    isNot?: YoutubeUserWhereInput
  }

  export type YoutubeChanelPermissionRelationFilter = {
    is?: YoutubeChanelPermissionWhereInput
    isNot?: YoutubeChanelPermissionWhereInput
  }

  export type YoutubeChanelToUserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelToUserPermissionAvgOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
  }

  export type YoutubeChanelToUserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelToUserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeChanelToUserPermissionSumOrderByAggregateInput = {
    id?: SortOrder
    chanelId?: SortOrder
    UserId?: SortOrder
    permissionId?: SortOrder
  }

  export type YoutubeHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeHashtagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeHashtagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type YoutubeHashtagListRelationFilter = {
    every?: YoutubeHashtagWhereInput
    some?: YoutubeHashtagWhereInput
    none?: YoutubeHashtagWhereInput
  }

  export type YoutubeHashtagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YoutubePostCountOrderByAggregateInput = {
    id?: SortOrder
    video?: SortOrder
    name?: SortOrder
    description?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubePostAvgOrderByAggregateInput = {
    id?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    shareFromPostId?: SortOrder
  }

  export type YoutubePostMaxOrderByAggregateInput = {
    id?: SortOrder
    video?: SortOrder
    name?: SortOrder
    description?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubePostMinOrderByAggregateInput = {
    id?: SortOrder
    video?: SortOrder
    name?: SortOrder
    description?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubePostSumOrderByAggregateInput = {
    id?: SortOrder
    posterUserId?: SortOrder
    chanelId?: SortOrder
    shareFromPostId?: SortOrder
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type YoutubePostRelationFilter = {
    is?: YoutubePostWhereInput
    isNot?: YoutubePostWhereInput
  }

  export type YoutubeCommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
  }

  export type YoutubeCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeCommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
  }

  export type EnumYoutubeLikeTypeEnumFilter = {
    equals?: YoutubeLikeTypeEnum
    in?: Enumerable<YoutubeLikeTypeEnum>
    notIn?: Enumerable<YoutubeLikeTypeEnum>
    not?: NestedEnumYoutubeLikeTypeEnumFilter | YoutubeLikeTypeEnum
  }

  export type YoutubeLikeTypeCountOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type YoutubeLikeTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeTypeMinOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumYoutubeLikeTypeEnumWithAggregatesFilter = {
    equals?: YoutubeLikeTypeEnum
    in?: Enumerable<YoutubeLikeTypeEnum>
    notIn?: Enumerable<YoutubeLikeTypeEnum>
    not?: NestedEnumYoutubeLikeTypeEnumWithAggregatesFilter | YoutubeLikeTypeEnum
    _count?: NestedIntFilter
    _min?: NestedEnumYoutubeLikeTypeEnumFilter
    _max?: NestedEnumYoutubeLikeTypeEnumFilter
  }

  export type YoutubeLikeTypeRelationFilter = {
    is?: YoutubeLikeTypeWhereInput
    isNot?: YoutubeLikeTypeWhereInput
  }

  export type YoutubeLikePostCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikePostAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type YoutubeLikePostMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikePostMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikePostSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type YoutubeLikeCommentCountOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type YoutubeLikeCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeCommentMinOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeLikeCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    likeByUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type YoutubeSubcriberCountOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
    isSupported?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeSubcriberAvgOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
  }

  export type YoutubeSubcriberMaxOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
    isSupported?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeSubcriberMinOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
    isSupported?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YoutubeSubcriberSumOrderByAggregateInput = {
    id?: SortOrder
    fromUserId?: SortOrder
    toChanelId?: SortOrder
  }

  export type FacebookPostListRelationFilter = {
    every?: FacebookPostWhereInput
    some?: FacebookPostWhereInput
    none?: FacebookPostWhereInput
  }

  export type FacebookGroupListRelationFilter = {
    every?: FacebookGroupWhereInput
    some?: FacebookGroupWhereInput
    none?: FacebookGroupWhereInput
  }

  export type FacebookCommentListRelationFilter = {
    every?: FacebookCommentWhereInput
    some?: FacebookCommentWhereInput
    none?: FacebookCommentWhereInput
  }

  export type FacebookLikePostListRelationFilter = {
    every?: FacebookLikePostWhereInput
    some?: FacebookLikePostWhereInput
    none?: FacebookLikePostWhereInput
  }

  export type FacebookLikeCommentListRelationFilter = {
    every?: FacebookLikeCommentWhereInput
    some?: FacebookLikeCommentWhereInput
    none?: FacebookLikeCommentWhereInput
  }

  export type FacebookFriendRequestListRelationFilter = {
    every?: FacebookFriendRequestWhereInput
    some?: FacebookFriendRequestWhereInput
    none?: FacebookFriendRequestWhereInput
  }

  export type FacebookUserRelationListRelationFilter = {
    every?: FacebookUserRelationWhereInput
    some?: FacebookUserRelationWhereInput
    none?: FacebookUserRelationWhereInput
  }

  export type FacebookMessengerListRelationFilter = {
    every?: FacebookMessengerWhereInput
    some?: FacebookMessengerWhereInput
    none?: FacebookMessengerWhereInput
  }

  export type FacebookPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookGroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookLikePostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookLikeCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookFriendRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookUserRelationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookMessengerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookUserCountOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookUserMaxOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserMinOrderByAggregateInput = {
    id?: SortOrder
    profileImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookUserRelationFilter = {
    is?: FacebookUserWhereInput
    isNot?: FacebookUserWhereInput
  }

  export type FacebookUserListRelationFilter = {
    every?: FacebookUserWhereInput
    some?: FacebookUserWhereInput
    none?: FacebookUserWhereInput
  }

  export type FacebookUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookGroupCountOrderByAggregateInput = {
    id?: SortOrder
    GroupImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createrUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookGroupAvgOrderByAggregateInput = {
    id?: SortOrder
    createrUserId?: SortOrder
  }

  export type FacebookGroupMaxOrderByAggregateInput = {
    id?: SortOrder
    GroupImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createrUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookGroupMinOrderByAggregateInput = {
    id?: SortOrder
    GroupImage?: SortOrder
    coverImage?: SortOrder
    name?: SortOrder
    createrUserId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookGroupSumOrderByAggregateInput = {
    id?: SortOrder
    createrUserId?: SortOrder
  }

  export type FacebookPostDestinationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostDestinationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookPostDestinationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostDestinationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostDestinationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookPostTypeCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookPostTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostTypeMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookLocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookLocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookHashtagCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookHashtagAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookHashtagMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookHashtagMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookHashtagSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookPostTypeRelationFilter = {
    is?: FacebookPostTypeWhereInput
    isNot?: FacebookPostTypeWhereInput
  }

  export type FacebookLocationRelationFilter = {
    is?: FacebookLocationWhereInput
    isNot?: FacebookLocationWhereInput
  }

  export type FacebookPostDestinationRelationFilter = {
    is?: FacebookPostDestinationWhereInput
    isNot?: FacebookPostDestinationWhereInput
  }

  export type FacebookHashtagListRelationFilter = {
    every?: FacebookHashtagWhereInput
    some?: FacebookHashtagWhereInput
    none?: FacebookHashtagWhereInput
  }

  export type FacebookHashtagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FacebookPostCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostAvgOrderByAggregateInput = {
    id?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    shareFromPostId?: SortOrder
  }

  export type FacebookPostMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    isShared?: SortOrder
    shareFromPostId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookPostSumOrderByAggregateInput = {
    id?: SortOrder
    postTypeId?: SortOrder
    posterUserId?: SortOrder
    locationId?: SortOrder
    destinationId?: SortOrder
    destinationRelateId?: SortOrder
    shareFromPostId?: SortOrder
  }

  export type FacebookPostRelationFilter = {
    is?: FacebookPostWhereInput
    isNot?: FacebookPostWhereInput
  }

  export type FacebookCommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    isReplied?: SortOrder
    replyFromCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    replyFromCommentId?: SortOrder
  }

  export type FacebookCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    isReplied?: SortOrder
    replyFromCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookCommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    isReplied?: SortOrder
    replyFromCommentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentByUserId?: SortOrder
    postId?: SortOrder
    replyFromCommentId?: SortOrder
  }

  export type FacebookLikeTypeCountOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeTypeAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookLikeTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeTypeMinOrderByAggregateInput = {
    id?: SortOrder
    emoji?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeTypeSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FacebookLikeTypeRelationFilter = {
    is?: FacebookLikeTypeWhereInput
    isNot?: FacebookLikeTypeWhereInput
  }

  export type FacebookLikePostCountOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikePostAvgOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type FacebookLikePostMaxOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikePostMinOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikePostSumOrderByAggregateInput = {
    id?: SortOrder
    postId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type FacebookLikeCommentCountOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeCommentAvgOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type FacebookLikeCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeCommentMinOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookLikeCommentSumOrderByAggregateInput = {
    id?: SortOrder
    commentId?: SortOrder
    posterUserId?: SortOrder
    likeTypeId?: SortOrder
  }

  export type FacebookFriendRequestCountOrderByAggregateInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookFriendRequestAvgOrderByAggregateInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
  }

  export type FacebookFriendRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookFriendRequestMinOrderByAggregateInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookFriendRequestSumOrderByAggregateInput = {
    id?: SortOrder
    requestFromUserId?: SortOrder
    requestToUserId?: SortOrder
  }

  export type FacebookUserRelationCountOrderByAggregateInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserRelationAvgOrderByAggregateInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
  }

  export type FacebookUserRelationMaxOrderByAggregateInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserRelationMinOrderByAggregateInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
    isAccepted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookUserRelationSumOrderByAggregateInput = {
    id?: SortOrder
    relationFromUserId?: SortOrder
    relationToUserId?: SortOrder
  }

  export type FacebookMessengerCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMessengerAvgOrderByAggregateInput = {
    id?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
  }

  export type FacebookMessengerMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMessengerMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FacebookMessengerSumOrderByAggregateInput = {
    id?: SortOrder
    messageFromUserId?: SortOrder
    messageToUserId?: SortOrder
  }

  export type BinKitchenMenuCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
  }

  export type BinKitchenMenuUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BinKitchenMenuUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    set?: Enumerable<BinKitchenMenuWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    delete?: Enumerable<BinKitchenMenuWhereUniqueInput>
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    update?: Enumerable<BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BinKitchenMenuScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BinKitchenMenuUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<BinKitchenMenuCreateWithoutCategoryInput>, Enumerable<BinKitchenMenuUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BinKitchenMenuCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BinKitchenMenuCreateManyCategoryInputEnvelope
    set?: Enumerable<BinKitchenMenuWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    delete?: Enumerable<BinKitchenMenuWhereUniqueInput>
    connect?: Enumerable<BinKitchenMenuWhereUniqueInput>
    update?: Enumerable<BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BinKitchenMenuScalarWhereInput>
  }

  export type BinKitchenCategoryCreateNestedOneWithoutMenusInput = {
    create?: XOR<BinKitchenCategoryCreateWithoutMenusInput, BinKitchenCategoryUncheckedCreateWithoutMenusInput>
    connectOrCreate?: BinKitchenCategoryCreateOrConnectWithoutMenusInput
    connect?: BinKitchenCategoryWhereUniqueInput
  }

  export type BinKitchenOrderItemCreateNestedManyWithoutMenuInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BinKitchenCategoryUpdateOneWithoutMenusNestedInput = {
    create?: XOR<BinKitchenCategoryCreateWithoutMenusInput, BinKitchenCategoryUncheckedCreateWithoutMenusInput>
    connectOrCreate?: BinKitchenCategoryCreateOrConnectWithoutMenusInput
    upsert?: BinKitchenCategoryUpsertWithoutMenusInput
    disconnect?: boolean
    delete?: boolean
    connect?: BinKitchenCategoryWhereUniqueInput
    update?: XOR<BinKitchenCategoryUpdateWithoutMenusInput, BinKitchenCategoryUncheckedUpdateWithoutMenusInput>
  }

  export type BinKitchenOrderItemUpdateManyWithoutMenuNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutMenuInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutMenuInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutMenuInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput>
    createMany?: BinKitchenOrderItemCreateManyMenuInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenOrderItemCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUncheckedCreateNestedManyWithoutOrderInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
  }

  export type BinKitchenOrderItemUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutOrderNestedInput = {
    create?: XOR<Enumerable<BinKitchenOrderItemCreateWithoutOrderInput>, Enumerable<BinKitchenOrderItemUncheckedCreateWithoutOrderInput>>
    connectOrCreate?: Enumerable<BinKitchenOrderItemCreateOrConnectWithoutOrderInput>
    upsert?: Enumerable<BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput>
    createMany?: BinKitchenOrderItemCreateManyOrderInputEnvelope
    set?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    disconnect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    delete?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    connect?: Enumerable<BinKitchenOrderItemWhereUniqueInput>
    update?: Enumerable<BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput>
    updateMany?: Enumerable<BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput>
    deleteMany?: Enumerable<BinKitchenOrderItemScalarWhereInput>
  }

  export type BinKitchenMenuCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<BinKitchenMenuCreateWithoutOrderItemsInput, BinKitchenMenuUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: BinKitchenMenuCreateOrConnectWithoutOrderItemsInput
    connect?: BinKitchenMenuWhereUniqueInput
  }

  export type BinKitchenOrderCreateNestedOneWithoutOrderItemsInput = {
    create?: XOR<BinKitchenOrderCreateWithoutOrderItemsInput, BinKitchenOrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: BinKitchenOrderCreateOrConnectWithoutOrderItemsInput
    connect?: BinKitchenOrderWhereUniqueInput
  }

  export type BinKitchenMenuUpdateOneRequiredWithoutOrderItemsNestedInput = {
    create?: XOR<BinKitchenMenuCreateWithoutOrderItemsInput, BinKitchenMenuUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: BinKitchenMenuCreateOrConnectWithoutOrderItemsInput
    upsert?: BinKitchenMenuUpsertWithoutOrderItemsInput
    connect?: BinKitchenMenuWhereUniqueInput
    update?: XOR<BinKitchenMenuUpdateWithoutOrderItemsInput, BinKitchenMenuUncheckedUpdateWithoutOrderItemsInput>
  }

  export type BinKitchenOrderUpdateOneWithoutOrderItemsNestedInput = {
    create?: XOR<BinKitchenOrderCreateWithoutOrderItemsInput, BinKitchenOrderUncheckedCreateWithoutOrderItemsInput>
    connectOrCreate?: BinKitchenOrderCreateOrConnectWithoutOrderItemsInput
    upsert?: BinKitchenOrderUpsertWithoutOrderItemsInput
    disconnect?: boolean
    delete?: boolean
    connect?: BinKitchenOrderWhereUniqueInput
    update?: XOR<BinKitchenOrderUpdateWithoutOrderItemsInput, BinKitchenOrderUncheckedUpdateWithoutOrderItemsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TriviaQuizCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
  }

  export type TriviaRoundCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
  }

  export type TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
  }

  export type TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
  }

  export type TriviaQuizUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaQuizWhereUniqueInput>
    delete?: Enumerable<TriviaQuizWhereUniqueInput>
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
    update?: Enumerable<TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaQuizUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaQuizScalarWhereInput>
  }

  export type TriviaRoundUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaRoundWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundWhereUniqueInput>
    delete?: Enumerable<TriviaRoundWhereUniqueInput>
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
    update?: Enumerable<TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaRoundUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaRoundScalarWhereInput>
  }

  export type TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaQuizCreateWithoutCategoryInput>, Enumerable<TriviaQuizUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaQuizCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaQuizCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaQuizWhereUniqueInput>
    delete?: Enumerable<TriviaQuizWhereUniqueInput>
    connect?: Enumerable<TriviaQuizWhereUniqueInput>
    update?: Enumerable<TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaQuizUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaQuizScalarWhereInput>
  }

  export type TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<TriviaRoundCreateWithoutCategoryInput>, Enumerable<TriviaRoundUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TriviaRoundCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TriviaRoundCreateManyCategoryInputEnvelope
    set?: Enumerable<TriviaRoundWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundWhereUniqueInput>
    delete?: Enumerable<TriviaRoundWhereUniqueInput>
    connect?: Enumerable<TriviaRoundWhereUniqueInput>
    update?: Enumerable<TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TriviaRoundUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TriviaRoundScalarWhereInput>
  }

  export type TriviaCategoryCreateNestedOneWithoutTriviaQuizesInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaQuizesInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizesInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaQuizesInput
    connect?: TriviaCategoryWhereUniqueInput
  }

  export type TriviaChoiceCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
  }

  export type TriviaRoundQuizCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
  }

  export type TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaCategoryUpdateOneWithoutTriviaQuizesNestedInput = {
    create?: XOR<TriviaCategoryCreateWithoutTriviaQuizesInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizesInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutTriviaQuizesInput
    upsert?: TriviaCategoryUpsertWithoutTriviaQuizesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaCategoryWhereUniqueInput
    update?: XOR<TriviaCategoryUpdateWithoutTriviaQuizesInput, TriviaCategoryUncheckedUpdateWithoutTriviaQuizesInput>
  }

  export type TriviaChoiceUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
    update?: Enumerable<TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaChoiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaChoiceScalarWhereInput>
  }

  export type TriviaRoundQuizUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaChoiceCreateWithoutQuizInput>, Enumerable<TriviaChoiceUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaChoiceCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaChoiceCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaChoiceWhereUniqueInput>
    disconnect?: Enumerable<TriviaChoiceWhereUniqueInput>
    delete?: Enumerable<TriviaChoiceWhereUniqueInput>
    connect?: Enumerable<TriviaChoiceWhereUniqueInput>
    update?: Enumerable<TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaChoiceUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaChoiceScalarWhereInput>
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutQuizInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutQuizInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutQuizInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput>
    createMany?: TriviaRoundQuizCreateManyQuizInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaQuizCreateNestedOneWithoutChoicesInput = {
    create?: XOR<TriviaQuizCreateWithoutChoicesInput, TriviaQuizUncheckedCreateWithoutChoicesInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutChoicesInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaRoundQuizCreateNestedManyWithoutUserChoiceInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutUserChoiceInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutUserChoiceInput>
    createMany?: TriviaRoundQuizCreateManyUserChoiceInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaRoundQuizUncheckedCreateNestedManyWithoutUserChoiceInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutUserChoiceInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutUserChoiceInput>
    createMany?: TriviaRoundQuizCreateManyUserChoiceInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaQuizUpdateOneWithoutChoicesNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutChoicesInput, TriviaQuizUncheckedCreateWithoutChoicesInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutChoicesInput
    upsert?: TriviaQuizUpsertWithoutChoicesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutChoicesInput, TriviaQuizUncheckedUpdateWithoutChoicesInput>
  }

  export type TriviaRoundQuizUpdateManyWithoutUserChoiceNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutUserChoiceInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutUserChoiceInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutUserChoiceInput>
    createMany?: TriviaRoundQuizCreateManyUserChoiceInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutUserChoiceInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutUserChoiceInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutUserChoiceNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutUserChoiceInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutUserChoiceInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutUserChoiceInput>
    createMany?: TriviaRoundQuizCreateManyUserChoiceInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutUserChoiceInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutUserChoiceInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaCategoryCreateNestedOneWithoutRoundsInput = {
    create?: XOR<TriviaCategoryCreateWithoutRoundsInput, TriviaCategoryUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutRoundsInput
    connect?: TriviaCategoryWhereUniqueInput
  }

  export type TriviaRoundQuizCreateNestedManyWithoutRoundInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
  }

  export type TriviaCategoryUpdateOneWithoutRoundsNestedInput = {
    create?: XOR<TriviaCategoryCreateWithoutRoundsInput, TriviaCategoryUncheckedCreateWithoutRoundsInput>
    connectOrCreate?: TriviaCategoryCreateOrConnectWithoutRoundsInput
    upsert?: TriviaCategoryUpsertWithoutRoundsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaCategoryWhereUniqueInput
    update?: XOR<TriviaCategoryUpdateWithoutRoundsInput, TriviaCategoryUncheckedUpdateWithoutRoundsInput>
  }

  export type TriviaRoundQuizUpdateManyWithoutRoundNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput = {
    create?: XOR<Enumerable<TriviaRoundQuizCreateWithoutRoundInput>, Enumerable<TriviaRoundQuizUncheckedCreateWithoutRoundInput>>
    connectOrCreate?: Enumerable<TriviaRoundQuizCreateOrConnectWithoutRoundInput>
    upsert?: Enumerable<TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput>
    createMany?: TriviaRoundQuizCreateManyRoundInputEnvelope
    set?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    disconnect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    delete?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    connect?: Enumerable<TriviaRoundQuizWhereUniqueInput>
    update?: Enumerable<TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput>
    updateMany?: Enumerable<TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput>
    deleteMany?: Enumerable<TriviaRoundQuizScalarWhereInput>
  }

  export type TriviaRoundCreateNestedOneWithoutRoundQuizesInput = {
    create?: XOR<TriviaRoundCreateWithoutRoundQuizesInput, TriviaRoundUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaRoundCreateOrConnectWithoutRoundQuizesInput
    connect?: TriviaRoundWhereUniqueInput
  }

  export type TriviaQuizCreateNestedOneWithoutRoundQuizesInput = {
    create?: XOR<TriviaQuizCreateWithoutRoundQuizesInput, TriviaQuizUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutRoundQuizesInput
    connect?: TriviaQuizWhereUniqueInput
  }

  export type TriviaChoiceCreateNestedOneWithoutRoundQuizesInput = {
    create?: XOR<TriviaChoiceCreateWithoutRoundQuizesInput, TriviaChoiceUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutRoundQuizesInput
    connect?: TriviaChoiceWhereUniqueInput
  }

  export type TriviaRoundUpdateOneWithoutRoundQuizesNestedInput = {
    create?: XOR<TriviaRoundCreateWithoutRoundQuizesInput, TriviaRoundUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaRoundCreateOrConnectWithoutRoundQuizesInput
    upsert?: TriviaRoundUpsertWithoutRoundQuizesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaRoundWhereUniqueInput
    update?: XOR<TriviaRoundUpdateWithoutRoundQuizesInput, TriviaRoundUncheckedUpdateWithoutRoundQuizesInput>
  }

  export type TriviaQuizUpdateOneWithoutRoundQuizesNestedInput = {
    create?: XOR<TriviaQuizCreateWithoutRoundQuizesInput, TriviaQuizUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaQuizCreateOrConnectWithoutRoundQuizesInput
    upsert?: TriviaQuizUpsertWithoutRoundQuizesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaQuizWhereUniqueInput
    update?: XOR<TriviaQuizUpdateWithoutRoundQuizesInput, TriviaQuizUncheckedUpdateWithoutRoundQuizesInput>
  }

  export type TriviaChoiceUpdateOneWithoutRoundQuizesNestedInput = {
    create?: XOR<TriviaChoiceCreateWithoutRoundQuizesInput, TriviaChoiceUncheckedCreateWithoutRoundQuizesInput>
    connectOrCreate?: TriviaChoiceCreateOrConnectWithoutRoundQuizesInput
    upsert?: TriviaChoiceUpsertWithoutRoundQuizesInput
    disconnect?: boolean
    delete?: boolean
    connect?: TriviaChoiceWhereUniqueInput
    update?: XOR<TriviaChoiceUpdateWithoutRoundQuizesInput, TriviaChoiceUncheckedUpdateWithoutRoundQuizesInput>
  }

  export type TwitterUserRelationCreateNestedManyWithoutFollwerInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollwerInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollwerInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollwerInput>
    createMany?: TwitterUserRelationCreateManyFollwerInputEnvelope
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
  }

  export type TwitterUserRelationCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollowingInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollowingInput>
    createMany?: TwitterUserRelationCreateManyFollowingInputEnvelope
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
  }

  export type TwitterPostCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutUserInput>, Enumerable<TwitterPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutUserInput>
    createMany?: TwitterPostCreateManyUserInputEnvelope
    connect?: Enumerable<TwitterPostWhereUniqueInput>
  }

  export type TwitterReplyCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutUserInput>, Enumerable<TwitterReplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutUserInput>
    createMany?: TwitterReplyCreateManyUserInputEnvelope
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
  }

  export type TwitterDMCreateNestedManyWithoutDirectFromInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectFromInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectFromInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectFromInput>
    createMany?: TwitterDMCreateManyDirectFromInputEnvelope
    connect?: Enumerable<TwitterDMWhereUniqueInput>
  }

  export type TwitterDMCreateNestedManyWithoutDirectToInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectToInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectToInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectToInput>
    createMany?: TwitterDMCreateManyDirectToInputEnvelope
    connect?: Enumerable<TwitterDMWhereUniqueInput>
  }

  export type TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollwerInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollwerInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollwerInput>
    createMany?: TwitterUserRelationCreateManyFollwerInputEnvelope
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
  }

  export type TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollowingInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollowingInput>
    createMany?: TwitterUserRelationCreateManyFollowingInputEnvelope
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
  }

  export type TwitterPostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutUserInput>, Enumerable<TwitterPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutUserInput>
    createMany?: TwitterPostCreateManyUserInputEnvelope
    connect?: Enumerable<TwitterPostWhereUniqueInput>
  }

  export type TwitterReplyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutUserInput>, Enumerable<TwitterReplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutUserInput>
    createMany?: TwitterReplyCreateManyUserInputEnvelope
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
  }

  export type TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectFromInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectFromInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectFromInput>
    createMany?: TwitterDMCreateManyDirectFromInputEnvelope
    connect?: Enumerable<TwitterDMWhereUniqueInput>
  }

  export type TwitterDMUncheckedCreateNestedManyWithoutDirectToInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectToInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectToInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectToInput>
    createMany?: TwitterDMCreateManyDirectToInputEnvelope
    connect?: Enumerable<TwitterDMWhereUniqueInput>
  }

  export type TwitterUserRelationUpdateManyWithoutFollwerNestedInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollwerInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollwerInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollwerInput>
    upsert?: Enumerable<TwitterUserRelationUpsertWithWhereUniqueWithoutFollwerInput>
    createMany?: TwitterUserRelationCreateManyFollwerInputEnvelope
    set?: Enumerable<TwitterUserRelationWhereUniqueInput>
    disconnect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    delete?: Enumerable<TwitterUserRelationWhereUniqueInput>
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    update?: Enumerable<TwitterUserRelationUpdateWithWhereUniqueWithoutFollwerInput>
    updateMany?: Enumerable<TwitterUserRelationUpdateManyWithWhereWithoutFollwerInput>
    deleteMany?: Enumerable<TwitterUserRelationScalarWhereInput>
  }

  export type TwitterUserRelationUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollowingInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<TwitterUserRelationUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: TwitterUserRelationCreateManyFollowingInputEnvelope
    set?: Enumerable<TwitterUserRelationWhereUniqueInput>
    disconnect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    delete?: Enumerable<TwitterUserRelationWhereUniqueInput>
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    update?: Enumerable<TwitterUserRelationUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<TwitterUserRelationUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<TwitterUserRelationScalarWhereInput>
  }

  export type TwitterPostUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutUserInput>, Enumerable<TwitterPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TwitterPostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TwitterPostCreateManyUserInputEnvelope
    set?: Enumerable<TwitterPostWhereUniqueInput>
    disconnect?: Enumerable<TwitterPostWhereUniqueInput>
    delete?: Enumerable<TwitterPostWhereUniqueInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
    update?: Enumerable<TwitterPostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TwitterPostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TwitterPostScalarWhereInput>
  }

  export type TwitterReplyUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutUserInput>, Enumerable<TwitterReplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TwitterReplyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TwitterReplyCreateManyUserInputEnvelope
    set?: Enumerable<TwitterReplyWhereUniqueInput>
    disconnect?: Enumerable<TwitterReplyWhereUniqueInput>
    delete?: Enumerable<TwitterReplyWhereUniqueInput>
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
    update?: Enumerable<TwitterReplyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TwitterReplyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TwitterReplyScalarWhereInput>
  }

  export type TwitterDMUpdateManyWithoutDirectFromNestedInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectFromInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectFromInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectFromInput>
    upsert?: Enumerable<TwitterDMUpsertWithWhereUniqueWithoutDirectFromInput>
    createMany?: TwitterDMCreateManyDirectFromInputEnvelope
    set?: Enumerable<TwitterDMWhereUniqueInput>
    disconnect?: Enumerable<TwitterDMWhereUniqueInput>
    delete?: Enumerable<TwitterDMWhereUniqueInput>
    connect?: Enumerable<TwitterDMWhereUniqueInput>
    update?: Enumerable<TwitterDMUpdateWithWhereUniqueWithoutDirectFromInput>
    updateMany?: Enumerable<TwitterDMUpdateManyWithWhereWithoutDirectFromInput>
    deleteMany?: Enumerable<TwitterDMScalarWhereInput>
  }

  export type TwitterDMUpdateManyWithoutDirectToNestedInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectToInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectToInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectToInput>
    upsert?: Enumerable<TwitterDMUpsertWithWhereUniqueWithoutDirectToInput>
    createMany?: TwitterDMCreateManyDirectToInputEnvelope
    set?: Enumerable<TwitterDMWhereUniqueInput>
    disconnect?: Enumerable<TwitterDMWhereUniqueInput>
    delete?: Enumerable<TwitterDMWhereUniqueInput>
    connect?: Enumerable<TwitterDMWhereUniqueInput>
    update?: Enumerable<TwitterDMUpdateWithWhereUniqueWithoutDirectToInput>
    updateMany?: Enumerable<TwitterDMUpdateManyWithWhereWithoutDirectToInput>
    deleteMany?: Enumerable<TwitterDMScalarWhereInput>
  }

  export type TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollwerInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollwerInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollwerInput>
    upsert?: Enumerable<TwitterUserRelationUpsertWithWhereUniqueWithoutFollwerInput>
    createMany?: TwitterUserRelationCreateManyFollwerInputEnvelope
    set?: Enumerable<TwitterUserRelationWhereUniqueInput>
    disconnect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    delete?: Enumerable<TwitterUserRelationWhereUniqueInput>
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    update?: Enumerable<TwitterUserRelationUpdateWithWhereUniqueWithoutFollwerInput>
    updateMany?: Enumerable<TwitterUserRelationUpdateManyWithWhereWithoutFollwerInput>
    deleteMany?: Enumerable<TwitterUserRelationScalarWhereInput>
  }

  export type TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<Enumerable<TwitterUserRelationCreateWithoutFollowingInput>, Enumerable<TwitterUserRelationUncheckedCreateWithoutFollowingInput>>
    connectOrCreate?: Enumerable<TwitterUserRelationCreateOrConnectWithoutFollowingInput>
    upsert?: Enumerable<TwitterUserRelationUpsertWithWhereUniqueWithoutFollowingInput>
    createMany?: TwitterUserRelationCreateManyFollowingInputEnvelope
    set?: Enumerable<TwitterUserRelationWhereUniqueInput>
    disconnect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    delete?: Enumerable<TwitterUserRelationWhereUniqueInput>
    connect?: Enumerable<TwitterUserRelationWhereUniqueInput>
    update?: Enumerable<TwitterUserRelationUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<TwitterUserRelationUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<TwitterUserRelationScalarWhereInput>
  }

  export type TwitterPostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutUserInput>, Enumerable<TwitterPostUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TwitterPostUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TwitterPostCreateManyUserInputEnvelope
    set?: Enumerable<TwitterPostWhereUniqueInput>
    disconnect?: Enumerable<TwitterPostWhereUniqueInput>
    delete?: Enumerable<TwitterPostWhereUniqueInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
    update?: Enumerable<TwitterPostUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TwitterPostUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TwitterPostScalarWhereInput>
  }

  export type TwitterReplyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutUserInput>, Enumerable<TwitterReplyUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TwitterReplyUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TwitterReplyCreateManyUserInputEnvelope
    set?: Enumerable<TwitterReplyWhereUniqueInput>
    disconnect?: Enumerable<TwitterReplyWhereUniqueInput>
    delete?: Enumerable<TwitterReplyWhereUniqueInput>
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
    update?: Enumerable<TwitterReplyUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TwitterReplyUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TwitterReplyScalarWhereInput>
  }

  export type TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectFromInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectFromInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectFromInput>
    upsert?: Enumerable<TwitterDMUpsertWithWhereUniqueWithoutDirectFromInput>
    createMany?: TwitterDMCreateManyDirectFromInputEnvelope
    set?: Enumerable<TwitterDMWhereUniqueInput>
    disconnect?: Enumerable<TwitterDMWhereUniqueInput>
    delete?: Enumerable<TwitterDMWhereUniqueInput>
    connect?: Enumerable<TwitterDMWhereUniqueInput>
    update?: Enumerable<TwitterDMUpdateWithWhereUniqueWithoutDirectFromInput>
    updateMany?: Enumerable<TwitterDMUpdateManyWithWhereWithoutDirectFromInput>
    deleteMany?: Enumerable<TwitterDMScalarWhereInput>
  }

  export type TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput = {
    create?: XOR<Enumerable<TwitterDMCreateWithoutDirectToInput>, Enumerable<TwitterDMUncheckedCreateWithoutDirectToInput>>
    connectOrCreate?: Enumerable<TwitterDMCreateOrConnectWithoutDirectToInput>
    upsert?: Enumerable<TwitterDMUpsertWithWhereUniqueWithoutDirectToInput>
    createMany?: TwitterDMCreateManyDirectToInputEnvelope
    set?: Enumerable<TwitterDMWhereUniqueInput>
    disconnect?: Enumerable<TwitterDMWhereUniqueInput>
    delete?: Enumerable<TwitterDMWhereUniqueInput>
    connect?: Enumerable<TwitterDMWhereUniqueInput>
    update?: Enumerable<TwitterDMUpdateWithWhereUniqueWithoutDirectToInput>
    updateMany?: Enumerable<TwitterDMUpdateManyWithWhereWithoutDirectToInput>
    deleteMany?: Enumerable<TwitterDMScalarWhereInput>
  }

  export type TwitterUserCreateNestedOneWithoutFollwersInput = {
    create?: XOR<TwitterUserCreateWithoutFollwersInput, TwitterUserUncheckedCreateWithoutFollwersInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutFollwersInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterUserCreateNestedOneWithoutFollowingsInput = {
    create?: XOR<TwitterUserCreateWithoutFollowingsInput, TwitterUserUncheckedCreateWithoutFollowingsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutFollowingsInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterUserUpdateOneRequiredWithoutFollwersNestedInput = {
    create?: XOR<TwitterUserCreateWithoutFollwersInput, TwitterUserUncheckedCreateWithoutFollwersInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutFollwersInput
    upsert?: TwitterUserUpsertWithoutFollwersInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutFollwersInput, TwitterUserUncheckedUpdateWithoutFollwersInput>
  }

  export type TwitterUserUpdateOneRequiredWithoutFollowingsNestedInput = {
    create?: XOR<TwitterUserCreateWithoutFollowingsInput, TwitterUserUncheckedCreateWithoutFollowingsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutFollowingsInput
    upsert?: TwitterUserUpsertWithoutFollowingsInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutFollowingsInput, TwitterUserUncheckedUpdateWithoutFollowingsInput>
  }

  export type TwitterUserCreateNestedOneWithoutTwitterPostsInput = {
    create?: XOR<TwitterUserCreateWithoutTwitterPostsInput, TwitterUserUncheckedCreateWithoutTwitterPostsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutTwitterPostsInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterReplyCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutPostInput>, Enumerable<TwitterReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutPostInput>
    createMany?: TwitterReplyCreateManyPostInputEnvelope
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
  }

  export type TwitterHashTagCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<TwitterHashTagCreateWithoutPostsInput>, Enumerable<TwitterHashTagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<TwitterHashTagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<TwitterHashTagWhereUniqueInput>
  }

  export type TwitterReplyUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutPostInput>, Enumerable<TwitterReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutPostInput>
    createMany?: TwitterReplyCreateManyPostInputEnvelope
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
  }

  export type TwitterHashTagUncheckedCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<TwitterHashTagCreateWithoutPostsInput>, Enumerable<TwitterHashTagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<TwitterHashTagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<TwitterHashTagWhereUniqueInput>
  }

  export type TwitterUserUpdateOneRequiredWithoutTwitterPostsNestedInput = {
    create?: XOR<TwitterUserCreateWithoutTwitterPostsInput, TwitterUserUncheckedCreateWithoutTwitterPostsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutTwitterPostsInput
    upsert?: TwitterUserUpsertWithoutTwitterPostsInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutTwitterPostsInput, TwitterUserUncheckedUpdateWithoutTwitterPostsInput>
  }

  export type TwitterReplyUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutPostInput>, Enumerable<TwitterReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<TwitterReplyUpsertWithWhereUniqueWithoutPostInput>
    createMany?: TwitterReplyCreateManyPostInputEnvelope
    set?: Enumerable<TwitterReplyWhereUniqueInput>
    disconnect?: Enumerable<TwitterReplyWhereUniqueInput>
    delete?: Enumerable<TwitterReplyWhereUniqueInput>
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
    update?: Enumerable<TwitterReplyUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<TwitterReplyUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<TwitterReplyScalarWhereInput>
  }

  export type TwitterHashTagUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<TwitterHashTagCreateWithoutPostsInput>, Enumerable<TwitterHashTagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<TwitterHashTagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<TwitterHashTagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<TwitterHashTagWhereUniqueInput>
    disconnect?: Enumerable<TwitterHashTagWhereUniqueInput>
    delete?: Enumerable<TwitterHashTagWhereUniqueInput>
    connect?: Enumerable<TwitterHashTagWhereUniqueInput>
    update?: Enumerable<TwitterHashTagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<TwitterHashTagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<TwitterHashTagScalarWhereInput>
  }

  export type TwitterReplyUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<TwitterReplyCreateWithoutPostInput>, Enumerable<TwitterReplyUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<TwitterReplyCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<TwitterReplyUpsertWithWhereUniqueWithoutPostInput>
    createMany?: TwitterReplyCreateManyPostInputEnvelope
    set?: Enumerable<TwitterReplyWhereUniqueInput>
    disconnect?: Enumerable<TwitterReplyWhereUniqueInput>
    delete?: Enumerable<TwitterReplyWhereUniqueInput>
    connect?: Enumerable<TwitterReplyWhereUniqueInput>
    update?: Enumerable<TwitterReplyUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<TwitterReplyUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<TwitterReplyScalarWhereInput>
  }

  export type TwitterHashTagUncheckedUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<TwitterHashTagCreateWithoutPostsInput>, Enumerable<TwitterHashTagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<TwitterHashTagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<TwitterHashTagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<TwitterHashTagWhereUniqueInput>
    disconnect?: Enumerable<TwitterHashTagWhereUniqueInput>
    delete?: Enumerable<TwitterHashTagWhereUniqueInput>
    connect?: Enumerable<TwitterHashTagWhereUniqueInput>
    update?: Enumerable<TwitterHashTagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<TwitterHashTagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<TwitterHashTagScalarWhereInput>
  }

  export type TwitterPostCreateNestedManyWithoutHashTagsInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutHashTagsInput>, Enumerable<TwitterPostUncheckedCreateWithoutHashTagsInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutHashTagsInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
  }

  export type TwitterPostUncheckedCreateNestedManyWithoutHashTagsInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutHashTagsInput>, Enumerable<TwitterPostUncheckedCreateWithoutHashTagsInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutHashTagsInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
  }

  export type TwitterPostUpdateManyWithoutHashTagsNestedInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutHashTagsInput>, Enumerable<TwitterPostUncheckedCreateWithoutHashTagsInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutHashTagsInput>
    upsert?: Enumerable<TwitterPostUpsertWithWhereUniqueWithoutHashTagsInput>
    set?: Enumerable<TwitterPostWhereUniqueInput>
    disconnect?: Enumerable<TwitterPostWhereUniqueInput>
    delete?: Enumerable<TwitterPostWhereUniqueInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
    update?: Enumerable<TwitterPostUpdateWithWhereUniqueWithoutHashTagsInput>
    updateMany?: Enumerable<TwitterPostUpdateManyWithWhereWithoutHashTagsInput>
    deleteMany?: Enumerable<TwitterPostScalarWhereInput>
  }

  export type TwitterPostUncheckedUpdateManyWithoutHashTagsNestedInput = {
    create?: XOR<Enumerable<TwitterPostCreateWithoutHashTagsInput>, Enumerable<TwitterPostUncheckedCreateWithoutHashTagsInput>>
    connectOrCreate?: Enumerable<TwitterPostCreateOrConnectWithoutHashTagsInput>
    upsert?: Enumerable<TwitterPostUpsertWithWhereUniqueWithoutHashTagsInput>
    set?: Enumerable<TwitterPostWhereUniqueInput>
    disconnect?: Enumerable<TwitterPostWhereUniqueInput>
    delete?: Enumerable<TwitterPostWhereUniqueInput>
    connect?: Enumerable<TwitterPostWhereUniqueInput>
    update?: Enumerable<TwitterPostUpdateWithWhereUniqueWithoutHashTagsInput>
    updateMany?: Enumerable<TwitterPostUpdateManyWithWhereWithoutHashTagsInput>
    deleteMany?: Enumerable<TwitterPostScalarWhereInput>
  }

  export type TwitterPostCreateNestedOneWithoutTwitterRepliesInput = {
    create?: XOR<TwitterPostCreateWithoutTwitterRepliesInput, TwitterPostUncheckedCreateWithoutTwitterRepliesInput>
    connectOrCreate?: TwitterPostCreateOrConnectWithoutTwitterRepliesInput
    connect?: TwitterPostWhereUniqueInput
  }

  export type TwitterUserCreateNestedOneWithoutTwitterRepliesInput = {
    create?: XOR<TwitterUserCreateWithoutTwitterRepliesInput, TwitterUserUncheckedCreateWithoutTwitterRepliesInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutTwitterRepliesInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterPostUpdateOneRequiredWithoutTwitterRepliesNestedInput = {
    create?: XOR<TwitterPostCreateWithoutTwitterRepliesInput, TwitterPostUncheckedCreateWithoutTwitterRepliesInput>
    connectOrCreate?: TwitterPostCreateOrConnectWithoutTwitterRepliesInput
    upsert?: TwitterPostUpsertWithoutTwitterRepliesInput
    connect?: TwitterPostWhereUniqueInput
    update?: XOR<TwitterPostUpdateWithoutTwitterRepliesInput, TwitterPostUncheckedUpdateWithoutTwitterRepliesInput>
  }

  export type TwitterUserUpdateOneRequiredWithoutTwitterRepliesNestedInput = {
    create?: XOR<TwitterUserCreateWithoutTwitterRepliesInput, TwitterUserUncheckedCreateWithoutTwitterRepliesInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutTwitterRepliesInput
    upsert?: TwitterUserUpsertWithoutTwitterRepliesInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutTwitterRepliesInput, TwitterUserUncheckedUpdateWithoutTwitterRepliesInput>
  }

  export type TwitterUserCreateNestedOneWithoutDirectFromsInput = {
    create?: XOR<TwitterUserCreateWithoutDirectFromsInput, TwitterUserUncheckedCreateWithoutDirectFromsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutDirectFromsInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterUserCreateNestedOneWithoutDirectToesInput = {
    create?: XOR<TwitterUserCreateWithoutDirectToesInput, TwitterUserUncheckedCreateWithoutDirectToesInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutDirectToesInput
    connect?: TwitterUserWhereUniqueInput
  }

  export type TwitterUserUpdateOneRequiredWithoutDirectFromsNestedInput = {
    create?: XOR<TwitterUserCreateWithoutDirectFromsInput, TwitterUserUncheckedCreateWithoutDirectFromsInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutDirectFromsInput
    upsert?: TwitterUserUpsertWithoutDirectFromsInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutDirectFromsInput, TwitterUserUncheckedUpdateWithoutDirectFromsInput>
  }

  export type TwitterUserUpdateOneRequiredWithoutDirectToesNestedInput = {
    create?: XOR<TwitterUserCreateWithoutDirectToesInput, TwitterUserUncheckedCreateWithoutDirectToesInput>
    connectOrCreate?: TwitterUserCreateOrConnectWithoutDirectToesInput
    upsert?: TwitterUserUpsertWithoutDirectToesInput
    connect?: TwitterUserWhereUniqueInput
    update?: XOR<TwitterUserUpdateWithoutDirectToesInput, TwitterUserUncheckedUpdateWithoutDirectToesInput>
  }

  export type YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutUserInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutUserInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyUserInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type YoutubePostCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutPosterUserInput>, Enumerable<YoutubePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutPosterUserInput>
    createMany?: YoutubePostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubeCommentCreateNestedManyWithoutCommentByUserInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutCommentByUserInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutCommentByUserInput>
    createMany?: YoutubeCommentCreateManyCommentByUserInputEnvelope
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
  }

  export type YoutubeLikePostCreateNestedManyWithoutLikeByUserInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeByUserInput>
    createMany?: YoutubeLikePostCreateManyLikeByUserInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeByUserInput>
    createMany?: YoutubeLikeCommentCreateManyLikeByUserInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type YoutubeSubcriberCreateNestedManyWithoutFromUserInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutFromUserInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutFromUserInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutFromUserInput>
    createMany?: YoutubeSubcriberCreateManyFromUserInputEnvelope
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutUserInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutUserInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyUserInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutPosterUserInput>, Enumerable<YoutubePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutPosterUserInput>
    createMany?: YoutubePostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutCommentByUserInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutCommentByUserInput>
    createMany?: YoutubeCommentCreateManyCommentByUserInputEnvelope
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
  }

  export type YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeByUserInput>
    createMany?: YoutubeLikePostCreateManyLikeByUserInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeByUserInput>
    createMany?: YoutubeLikeCommentCreateManyLikeByUserInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutFromUserInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutFromUserInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutFromUserInput>
    createMany?: YoutubeSubcriberCreateManyFromUserInputEnvelope
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutUserInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyUserInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubePostUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutPosterUserInput>, Enumerable<YoutubePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: YoutubePostCreateManyPosterUserInputEnvelope
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubeCommentUpdateManyWithoutCommentByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutCommentByUserInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutCommentByUserInput>
    upsert?: Enumerable<YoutubeCommentUpsertWithWhereUniqueWithoutCommentByUserInput>
    createMany?: YoutubeCommentCreateManyCommentByUserInputEnvelope
    set?: Enumerable<YoutubeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeCommentUpdateWithWhereUniqueWithoutCommentByUserInput>
    updateMany?: Enumerable<YoutubeCommentUpdateManyWithWhereWithoutCommentByUserInput>
    deleteMany?: Enumerable<YoutubeCommentScalarWhereInput>
  }

  export type YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeByUserInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutLikeByUserInput>
    createMany?: YoutubeLikePostCreateManyLikeByUserInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutLikeByUserInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutLikeByUserInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeByUserInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeByUserInput>
    createMany?: YoutubeLikeCommentCreateManyLikeByUserInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeByUserInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutLikeByUserInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubeSubcriberUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutFromUserInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutFromUserInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutFromUserInput>
    upsert?: Enumerable<YoutubeSubcriberUpsertWithWhereUniqueWithoutFromUserInput>
    createMany?: YoutubeSubcriberCreateManyFromUserInputEnvelope
    set?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    disconnect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    delete?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    update?: Enumerable<YoutubeSubcriberUpdateWithWhereUniqueWithoutFromUserInput>
    updateMany?: Enumerable<YoutubeSubcriberUpdateManyWithWhereWithoutFromUserInput>
    deleteMany?: Enumerable<YoutubeSubcriberScalarWhereInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutUserInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyUserInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutPosterUserInput>, Enumerable<YoutubePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: YoutubePostCreateManyPosterUserInputEnvelope
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutCommentByUserInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutCommentByUserInput>
    upsert?: Enumerable<YoutubeCommentUpsertWithWhereUniqueWithoutCommentByUserInput>
    createMany?: YoutubeCommentCreateManyCommentByUserInputEnvelope
    set?: Enumerable<YoutubeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeCommentUpdateWithWhereUniqueWithoutCommentByUserInput>
    updateMany?: Enumerable<YoutubeCommentUpdateManyWithWhereWithoutCommentByUserInput>
    deleteMany?: Enumerable<YoutubeCommentScalarWhereInput>
  }

  export type YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeByUserInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutLikeByUserInput>
    createMany?: YoutubeLikePostCreateManyLikeByUserInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutLikeByUserInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutLikeByUserInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeByUserInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeByUserInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeByUserInput>
    createMany?: YoutubeLikeCommentCreateManyLikeByUserInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeByUserInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutLikeByUserInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutFromUserInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutFromUserInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutFromUserInput>
    upsert?: Enumerable<YoutubeSubcriberUpsertWithWhereUniqueWithoutFromUserInput>
    createMany?: YoutubeSubcriberCreateManyFromUserInputEnvelope
    set?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    disconnect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    delete?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    update?: Enumerable<YoutubeSubcriberUpdateWithWhereUniqueWithoutFromUserInput>
    updateMany?: Enumerable<YoutubeSubcriberUpdateManyWithWhereWithoutFromUserInput>
    deleteMany?: Enumerable<YoutubeSubcriberScalarWhereInput>
  }

  export type YoutubeChanelToUserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutPermissionInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutPermissionInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyPermissionInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutPermissionInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutPermissionInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyPermissionInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type EnumYoutubePermissionEnumFieldUpdateOperationsInput = {
    set?: YoutubePermissionEnum
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutPermissionInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyPermissionInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutPermissionInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutPermissionInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutPermissionInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyPermissionInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutPermissionInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutPermissionInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubeChanelToUserPermissionCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutChanelInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutChanelInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyChanelInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type YoutubePostCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutChanelInput>, Enumerable<YoutubePostUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutChanelInput>
    createMany?: YoutubePostCreateManyChanelInputEnvelope
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubeSubcriberCreateNestedManyWithoutToChanelInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutToChanelInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutToChanelInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutToChanelInput>
    createMany?: YoutubeSubcriberCreateManyToChanelInputEnvelope
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutChanelInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutChanelInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyChanelInputEnvelope
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
  }

  export type YoutubePostUncheckedCreateNestedManyWithoutChanelInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutChanelInput>, Enumerable<YoutubePostUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutChanelInput>
    createMany?: YoutubePostCreateManyChanelInputEnvelope
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubeSubcriberUncheckedCreateNestedManyWithoutToChanelInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutToChanelInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutToChanelInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutToChanelInput>
    createMany?: YoutubeSubcriberCreateManyToChanelInputEnvelope
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutChanelInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyChanelInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubePostUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutChanelInput>, Enumerable<YoutubePostUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YoutubePostCreateManyChanelInputEnvelope
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubeSubcriberUpdateManyWithoutToChanelNestedInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutToChanelInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutToChanelInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutToChanelInput>
    upsert?: Enumerable<YoutubeSubcriberUpsertWithWhereUniqueWithoutToChanelInput>
    createMany?: YoutubeSubcriberCreateManyToChanelInputEnvelope
    set?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    disconnect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    delete?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    update?: Enumerable<YoutubeSubcriberUpdateWithWhereUniqueWithoutToChanelInput>
    updateMany?: Enumerable<YoutubeSubcriberUpdateManyWithWhereWithoutToChanelInput>
    deleteMany?: Enumerable<YoutubeSubcriberScalarWhereInput>
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YoutubeChanelToUserPermissionCreateWithoutChanelInput>, Enumerable<YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubeChanelToUserPermissionCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YoutubeChanelToUserPermissionCreateManyChanelInputEnvelope
    set?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    disconnect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    delete?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    connect?: Enumerable<YoutubeChanelToUserPermissionWhereUniqueInput>
    update?: Enumerable<YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
  }

  export type YoutubePostUncheckedUpdateManyWithoutChanelNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutChanelInput>, Enumerable<YoutubePostUncheckedCreateWithoutChanelInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutChanelInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutChanelInput>
    createMany?: YoutubePostCreateManyChanelInputEnvelope
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutChanelInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutChanelInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubeSubcriberUncheckedUpdateManyWithoutToChanelNestedInput = {
    create?: XOR<Enumerable<YoutubeSubcriberCreateWithoutToChanelInput>, Enumerable<YoutubeSubcriberUncheckedCreateWithoutToChanelInput>>
    connectOrCreate?: Enumerable<YoutubeSubcriberCreateOrConnectWithoutToChanelInput>
    upsert?: Enumerable<YoutubeSubcriberUpsertWithWhereUniqueWithoutToChanelInput>
    createMany?: YoutubeSubcriberCreateManyToChanelInputEnvelope
    set?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    disconnect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    delete?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    connect?: Enumerable<YoutubeSubcriberWhereUniqueInput>
    update?: Enumerable<YoutubeSubcriberUpdateWithWhereUniqueWithoutToChanelInput>
    updateMany?: Enumerable<YoutubeSubcriberUpdateManyWithWhereWithoutToChanelInput>
    deleteMany?: Enumerable<YoutubeSubcriberScalarWhereInput>
  }

  export type YoutubeChanelCreateNestedOneWithoutChanelToUserPermissionsInput = {
    create?: XOR<YoutubeChanelCreateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutChanelToUserPermissionsInput
    connect?: YoutubeChanelWhereUniqueInput
  }

  export type YoutubeUserCreateNestedOneWithoutChanelToUserPermissionsInput = {
    create?: XOR<YoutubeUserCreateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutChanelToUserPermissionsInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubeChanelPermissionCreateNestedOneWithoutChanelToUserPermissionsInput = {
    create?: XOR<YoutubeChanelPermissionCreateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeChanelPermissionCreateOrConnectWithoutChanelToUserPermissionsInput
    connect?: YoutubeChanelPermissionWhereUniqueInput
  }

  export type YoutubeChanelUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput = {
    create?: XOR<YoutubeChanelCreateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutChanelToUserPermissionsInput
    upsert?: YoutubeChanelUpsertWithoutChanelToUserPermissionsInput
    connect?: YoutubeChanelWhereUniqueInput
    update?: XOR<YoutubeChanelUpdateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedUpdateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeUserUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutChanelToUserPermissionsInput
    upsert?: YoutubeUserUpsertWithoutChanelToUserPermissionsInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedUpdateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelPermissionUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput = {
    create?: XOR<YoutubeChanelPermissionCreateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedCreateWithoutChanelToUserPermissionsInput>
    connectOrCreate?: YoutubeChanelPermissionCreateOrConnectWithoutChanelToUserPermissionsInput
    upsert?: YoutubeChanelPermissionUpsertWithoutChanelToUserPermissionsInput
    connect?: YoutubeChanelPermissionWhereUniqueInput
    update?: XOR<YoutubeChanelPermissionUpdateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedUpdateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubePostCreateNestedManyWithoutHashtagsInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutHashtagsInput>, Enumerable<YoutubePostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutHashtagsInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubePostUncheckedCreateNestedManyWithoutHashtagsInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutHashtagsInput>, Enumerable<YoutubePostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutHashtagsInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
  }

  export type YoutubePostUpdateManyWithoutHashtagsNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutHashtagsInput>, Enumerable<YoutubePostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutHashtagsInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutHashtagsInput>
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutHashtagsInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutHashtagsInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubePostUncheckedUpdateManyWithoutHashtagsNestedInput = {
    create?: XOR<Enumerable<YoutubePostCreateWithoutHashtagsInput>, Enumerable<YoutubePostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<YoutubePostCreateOrConnectWithoutHashtagsInput>
    upsert?: Enumerable<YoutubePostUpsertWithWhereUniqueWithoutHashtagsInput>
    set?: Enumerable<YoutubePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubePostWhereUniqueInput>
    delete?: Enumerable<YoutubePostWhereUniqueInput>
    connect?: Enumerable<YoutubePostWhereUniqueInput>
    update?: Enumerable<YoutubePostUpdateWithWhereUniqueWithoutHashtagsInput>
    updateMany?: Enumerable<YoutubePostUpdateManyWithWhereWithoutHashtagsInput>
    deleteMany?: Enumerable<YoutubePostScalarWhereInput>
  }

  export type YoutubeUserCreateNestedOneWithoutPostsInput = {
    create?: XOR<YoutubeUserCreateWithoutPostsInput, YoutubeUserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutPostsInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubeChanelCreateNestedOneWithoutPostsInput = {
    create?: XOR<YoutubeChanelCreateWithoutPostsInput, YoutubeChanelUncheckedCreateWithoutPostsInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutPostsInput
    connect?: YoutubeChanelWhereUniqueInput
  }

  export type YoutubeHashtagCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<YoutubeHashtagCreateWithoutPostsInput>, Enumerable<YoutubeHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<YoutubeHashtagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<YoutubeHashtagWhereUniqueInput>
  }

  export type YoutubeCommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutPostInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutPostInput>
    createMany?: YoutubeCommentCreateManyPostInputEnvelope
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
  }

  export type YoutubeLikePostCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutPostInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutPostInput>
    createMany?: YoutubeLikePostCreateManyPostInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutCommentInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutCommentInput>
    createMany?: YoutubeLikeCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<YoutubeHashtagCreateWithoutPostsInput>, Enumerable<YoutubeHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<YoutubeHashtagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<YoutubeHashtagWhereUniqueInput>
  }

  export type YoutubeCommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutPostInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutPostInput>
    createMany?: YoutubeCommentCreateManyPostInputEnvelope
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
  }

  export type YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutPostInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutPostInput>
    createMany?: YoutubeLikePostCreateManyPostInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutCommentInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutCommentInput>
    createMany?: YoutubeLikeCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type YoutubeUserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutPostsInput, YoutubeUserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutPostsInput
    upsert?: YoutubeUserUpsertWithoutPostsInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutPostsInput, YoutubeUserUncheckedUpdateWithoutPostsInput>
  }

  export type YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<YoutubeChanelCreateWithoutPostsInput, YoutubeChanelUncheckedCreateWithoutPostsInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutPostsInput
    upsert?: YoutubeChanelUpsertWithoutPostsInput
    connect?: YoutubeChanelWhereUniqueInput
    update?: XOR<YoutubeChanelUpdateWithoutPostsInput, YoutubeChanelUncheckedUpdateWithoutPostsInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type YoutubeHashtagUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<YoutubeHashtagCreateWithoutPostsInput>, Enumerable<YoutubeHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<YoutubeHashtagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<YoutubeHashtagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<YoutubeHashtagWhereUniqueInput>
    disconnect?: Enumerable<YoutubeHashtagWhereUniqueInput>
    delete?: Enumerable<YoutubeHashtagWhereUniqueInput>
    connect?: Enumerable<YoutubeHashtagWhereUniqueInput>
    update?: Enumerable<YoutubeHashtagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<YoutubeHashtagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<YoutubeHashtagScalarWhereInput>
  }

  export type YoutubeCommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutPostInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<YoutubeCommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: YoutubeCommentCreateManyPostInputEnvelope
    set?: Enumerable<YoutubeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeCommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<YoutubeCommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<YoutubeCommentScalarWhereInput>
  }

  export type YoutubeLikePostUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutPostInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutPostInput>
    createMany?: YoutubeLikePostCreateManyPostInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutCommentInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: YoutubeLikeCommentCreateManyCommentInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<YoutubeHashtagCreateWithoutPostsInput>, Enumerable<YoutubeHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<YoutubeHashtagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<YoutubeHashtagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<YoutubeHashtagWhereUniqueInput>
    disconnect?: Enumerable<YoutubeHashtagWhereUniqueInput>
    delete?: Enumerable<YoutubeHashtagWhereUniqueInput>
    connect?: Enumerable<YoutubeHashtagWhereUniqueInput>
    update?: Enumerable<YoutubeHashtagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<YoutubeHashtagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<YoutubeHashtagScalarWhereInput>
  }

  export type YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<YoutubeCommentCreateWithoutPostInput>, Enumerable<YoutubeCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeCommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<YoutubeCommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: YoutubeCommentCreateManyPostInputEnvelope
    set?: Enumerable<YoutubeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeCommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<YoutubeCommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<YoutubeCommentScalarWhereInput>
  }

  export type YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutPostInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutPostInput>
    createMany?: YoutubeLikePostCreateManyPostInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutCommentInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: YoutubeLikeCommentCreateManyCommentInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubeUserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<YoutubeUserCreateWithoutCommentsInput, YoutubeUserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutCommentsInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubePostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<YoutubePostCreateWithoutCommentsInput, YoutubePostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutCommentsInput
    connect?: YoutubePostWhereUniqueInput
  }

  export type YoutubeUserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutCommentsInput, YoutubeUserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutCommentsInput
    upsert?: YoutubeUserUpsertWithoutCommentsInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutCommentsInput, YoutubeUserUncheckedUpdateWithoutCommentsInput>
  }

  export type YoutubePostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<YoutubePostCreateWithoutCommentsInput, YoutubePostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutCommentsInput
    upsert?: YoutubePostUpsertWithoutCommentsInput
    connect?: YoutubePostWhereUniqueInput
    update?: XOR<YoutubePostUpdateWithoutCommentsInput, YoutubePostUncheckedUpdateWithoutCommentsInput>
  }

  export type YoutubeLikePostCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeTypeInput>
    createMany?: YoutubeLikePostCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeTypeInput>
    createMany?: YoutubeLikeCommentCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type YoutubeLikePostUncheckedCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeTypeInput>
    createMany?: YoutubeLikePostCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
  }

  export type YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeTypeInput>
    createMany?: YoutubeLikeCommentCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
  }

  export type EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput = {
    set?: YoutubeLikeTypeEnum
  }

  export type YoutubeLikePostUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: YoutubeLikePostCreateManyLikeTypeInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: YoutubeLikeCommentCreateManyLikeTypeInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubeLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<YoutubeLikePostCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikePostCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<YoutubeLikePostUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: YoutubeLikePostCreateManyLikeTypeInputEnvelope
    set?: Enumerable<YoutubeLikePostWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    delete?: Enumerable<YoutubeLikePostWhereUniqueInput>
    connect?: Enumerable<YoutubeLikePostWhereUniqueInput>
    update?: Enumerable<YoutubeLikePostUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<YoutubeLikePostUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<YoutubeLikePostScalarWhereInput>
  }

  export type YoutubeLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<YoutubeLikeCommentCreateWithoutLikeTypeInput>, Enumerable<YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<YoutubeLikeCommentCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: YoutubeLikeCommentCreateManyLikeTypeInputEnvelope
    set?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    delete?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    connect?: Enumerable<YoutubeLikeCommentWhereUniqueInput>
    update?: Enumerable<YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<YoutubeLikeCommentUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<YoutubeLikeCommentScalarWhereInput>
  }

  export type YoutubePostCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<YoutubePostCreateWithoutLikePostsInput, YoutubePostUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutLikePostsInput
    connect?: YoutubePostWhereUniqueInput
  }

  export type YoutubeUserCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<YoutubeUserCreateWithoutLikePostsInput, YoutubeUserUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutLikePostsInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubeLikeTypeCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<YoutubeLikeTypeCreateWithoutLikePostsInput, YoutubeLikeTypeUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubeLikeTypeCreateOrConnectWithoutLikePostsInput
    connect?: YoutubeLikeTypeWhereUniqueInput
  }

  export type YoutubePostUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<YoutubePostCreateWithoutLikePostsInput, YoutubePostUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutLikePostsInput
    upsert?: YoutubePostUpsertWithoutLikePostsInput
    connect?: YoutubePostWhereUniqueInput
    update?: XOR<YoutubePostUpdateWithoutLikePostsInput, YoutubePostUncheckedUpdateWithoutLikePostsInput>
  }

  export type YoutubeUserUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutLikePostsInput, YoutubeUserUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutLikePostsInput
    upsert?: YoutubeUserUpsertWithoutLikePostsInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutLikePostsInput, YoutubeUserUncheckedUpdateWithoutLikePostsInput>
  }

  export type YoutubeLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<YoutubeLikeTypeCreateWithoutLikePostsInput, YoutubeLikeTypeUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: YoutubeLikeTypeCreateOrConnectWithoutLikePostsInput
    upsert?: YoutubeLikeTypeUpsertWithoutLikePostsInput
    connect?: YoutubeLikeTypeWhereUniqueInput
    update?: XOR<YoutubeLikeTypeUpdateWithoutLikePostsInput, YoutubeLikeTypeUncheckedUpdateWithoutLikePostsInput>
  }

  export type YoutubePostCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<YoutubePostCreateWithoutLikeCommentsInput, YoutubePostUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutLikeCommentsInput
    connect?: YoutubePostWhereUniqueInput
  }

  export type YoutubeUserCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<YoutubeUserCreateWithoutLikeCommentsInput, YoutubeUserUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutLikeCommentsInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubeLikeTypeCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<YoutubeLikeTypeCreateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubeLikeTypeCreateOrConnectWithoutLikeCommentsInput
    connect?: YoutubeLikeTypeWhereUniqueInput
  }

  export type YoutubePostUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<YoutubePostCreateWithoutLikeCommentsInput, YoutubePostUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubePostCreateOrConnectWithoutLikeCommentsInput
    upsert?: YoutubePostUpsertWithoutLikeCommentsInput
    connect?: YoutubePostWhereUniqueInput
    update?: XOR<YoutubePostUpdateWithoutLikeCommentsInput, YoutubePostUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type YoutubeUserUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutLikeCommentsInput, YoutubeUserUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutLikeCommentsInput
    upsert?: YoutubeUserUpsertWithoutLikeCommentsInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutLikeCommentsInput, YoutubeUserUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type YoutubeLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<YoutubeLikeTypeCreateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: YoutubeLikeTypeCreateOrConnectWithoutLikeCommentsInput
    upsert?: YoutubeLikeTypeUpsertWithoutLikeCommentsInput
    connect?: YoutubeLikeTypeWhereUniqueInput
    update?: XOR<YoutubeLikeTypeUpdateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type YoutubeUserCreateNestedOneWithoutSubcribersInput = {
    create?: XOR<YoutubeUserCreateWithoutSubcribersInput, YoutubeUserUncheckedCreateWithoutSubcribersInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutSubcribersInput
    connect?: YoutubeUserWhereUniqueInput
  }

  export type YoutubeChanelCreateNestedOneWithoutSubcribersInput = {
    create?: XOR<YoutubeChanelCreateWithoutSubcribersInput, YoutubeChanelUncheckedCreateWithoutSubcribersInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutSubcribersInput
    connect?: YoutubeChanelWhereUniqueInput
  }

  export type YoutubeUserUpdateOneRequiredWithoutSubcribersNestedInput = {
    create?: XOR<YoutubeUserCreateWithoutSubcribersInput, YoutubeUserUncheckedCreateWithoutSubcribersInput>
    connectOrCreate?: YoutubeUserCreateOrConnectWithoutSubcribersInput
    upsert?: YoutubeUserUpsertWithoutSubcribersInput
    connect?: YoutubeUserWhereUniqueInput
    update?: XOR<YoutubeUserUpdateWithoutSubcribersInput, YoutubeUserUncheckedUpdateWithoutSubcribersInput>
  }

  export type YoutubeChanelUpdateOneRequiredWithoutSubcribersNestedInput = {
    create?: XOR<YoutubeChanelCreateWithoutSubcribersInput, YoutubeChanelUncheckedCreateWithoutSubcribersInput>
    connectOrCreate?: YoutubeChanelCreateOrConnectWithoutSubcribersInput
    upsert?: YoutubeChanelUpsertWithoutSubcribersInput
    connect?: YoutubeChanelWhereUniqueInput
    update?: XOR<YoutubeChanelUpdateWithoutSubcribersInput, YoutubeChanelUncheckedUpdateWithoutSubcribersInput>
  }

  export type FacebookPostCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPosterUserInput>, Enumerable<FacebookPostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookPostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookGroupCreateNestedManyWithoutCreaterUserInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutCreaterUserInput>, Enumerable<FacebookGroupUncheckedCreateWithoutCreaterUserInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutCreaterUserInput>
    createMany?: FacebookGroupCreateManyCreaterUserInputEnvelope
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
  }

  export type FacebookGroupCreateNestedManyWithoutMemberUsersInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutMemberUsersInput>, Enumerable<FacebookGroupUncheckedCreateWithoutMemberUsersInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutMemberUsersInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
  }

  export type FacebookCommentCreateNestedManyWithoutCommentByUserInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutCommentByUserInput>, Enumerable<FacebookCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutCommentByUserInput>
    createMany?: FacebookCommentCreateManyCommentByUserInputEnvelope
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
  }

  export type FacebookLikePostCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPosterUserInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookLikePostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutPosterUserInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookLikeCommentCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestFromUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestFromUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestFromUserInputEnvelope
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
  }

  export type FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestToUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestToUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestToUserInputEnvelope
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
  }

  export type FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationFromUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationFromUserInput>
    createMany?: FacebookUserRelationCreateManyRelationFromUserInputEnvelope
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
  }

  export type FacebookUserRelationCreateNestedManyWithoutRelationToUserInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationToUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationToUserInput>
    createMany?: FacebookUserRelationCreateManyRelationToUserInputEnvelope
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
  }

  export type FacebookMessengerCreateNestedManyWithoutMessageFromUserInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageFromUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageFromUserInput>
    createMany?: FacebookMessengerCreateManyMessageFromUserInputEnvelope
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
  }

  export type FacebookMessengerCreateNestedManyWithoutMessageToUserInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageToUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageToUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageToUserInput>
    createMany?: FacebookMessengerCreateManyMessageToUserInputEnvelope
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
  }

  export type FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPosterUserInput>, Enumerable<FacebookPostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookPostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutCreaterUserInput>, Enumerable<FacebookGroupUncheckedCreateWithoutCreaterUserInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutCreaterUserInput>
    createMany?: FacebookGroupCreateManyCreaterUserInputEnvelope
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
  }

  export type FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutMemberUsersInput>, Enumerable<FacebookGroupUncheckedCreateWithoutMemberUsersInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutMemberUsersInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
  }

  export type FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutCommentByUserInput>, Enumerable<FacebookCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutCommentByUserInput>
    createMany?: FacebookCommentCreateManyCommentByUserInputEnvelope
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
  }

  export type FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPosterUserInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookLikePostCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutPosterUserInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutPosterUserInput>
    createMany?: FacebookLikeCommentCreateManyPosterUserInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestFromUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestFromUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestFromUserInputEnvelope
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
  }

  export type FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestToUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestToUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestToUserInputEnvelope
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
  }

  export type FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationFromUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationFromUserInput>
    createMany?: FacebookUserRelationCreateManyRelationFromUserInputEnvelope
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
  }

  export type FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationToUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationToUserInput>
    createMany?: FacebookUserRelationCreateManyRelationToUserInputEnvelope
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
  }

  export type FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageFromUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageFromUserInput>
    createMany?: FacebookMessengerCreateManyMessageFromUserInputEnvelope
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
  }

  export type FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageToUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageToUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageToUserInput>
    createMany?: FacebookMessengerCreateManyMessageToUserInputEnvelope
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
  }

  export type FacebookPostUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPosterUserInput>, Enumerable<FacebookPostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookPostCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookGroupUpdateManyWithoutCreaterUserNestedInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutCreaterUserInput>, Enumerable<FacebookGroupUncheckedCreateWithoutCreaterUserInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutCreaterUserInput>
    upsert?: Enumerable<FacebookGroupUpsertWithWhereUniqueWithoutCreaterUserInput>
    createMany?: FacebookGroupCreateManyCreaterUserInputEnvelope
    set?: Enumerable<FacebookGroupWhereUniqueInput>
    disconnect?: Enumerable<FacebookGroupWhereUniqueInput>
    delete?: Enumerable<FacebookGroupWhereUniqueInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
    update?: Enumerable<FacebookGroupUpdateWithWhereUniqueWithoutCreaterUserInput>
    updateMany?: Enumerable<FacebookGroupUpdateManyWithWhereWithoutCreaterUserInput>
    deleteMany?: Enumerable<FacebookGroupScalarWhereInput>
  }

  export type FacebookGroupUpdateManyWithoutMemberUsersNestedInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutMemberUsersInput>, Enumerable<FacebookGroupUncheckedCreateWithoutMemberUsersInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutMemberUsersInput>
    upsert?: Enumerable<FacebookGroupUpsertWithWhereUniqueWithoutMemberUsersInput>
    set?: Enumerable<FacebookGroupWhereUniqueInput>
    disconnect?: Enumerable<FacebookGroupWhereUniqueInput>
    delete?: Enumerable<FacebookGroupWhereUniqueInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
    update?: Enumerable<FacebookGroupUpdateWithWhereUniqueWithoutMemberUsersInput>
    updateMany?: Enumerable<FacebookGroupUpdateManyWithWhereWithoutMemberUsersInput>
    deleteMany?: Enumerable<FacebookGroupScalarWhereInput>
  }

  export type FacebookCommentUpdateManyWithoutCommentByUserNestedInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutCommentByUserInput>, Enumerable<FacebookCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutCommentByUserInput>
    upsert?: Enumerable<FacebookCommentUpsertWithWhereUniqueWithoutCommentByUserInput>
    createMany?: FacebookCommentCreateManyCommentByUserInputEnvelope
    set?: Enumerable<FacebookCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookCommentWhereUniqueInput>
    delete?: Enumerable<FacebookCommentWhereUniqueInput>
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
    update?: Enumerable<FacebookCommentUpdateWithWhereUniqueWithoutCommentByUserInput>
    updateMany?: Enumerable<FacebookCommentUpdateManyWithWhereWithoutCommentByUserInput>
    deleteMany?: Enumerable<FacebookCommentScalarWhereInput>
  }

  export type FacebookLikePostUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPosterUserInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookLikePostCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutPosterUserInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookLikeCommentCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestFromUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestFromUserInput>
    upsert?: Enumerable<FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestFromUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestFromUserInputEnvelope
    set?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    disconnect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    delete?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    update?: Enumerable<FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestFromUserInput>
    updateMany?: Enumerable<FacebookFriendRequestUpdateManyWithWhereWithoutRequestFromUserInput>
    deleteMany?: Enumerable<FacebookFriendRequestScalarWhereInput>
  }

  export type FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestToUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestToUserInput>
    upsert?: Enumerable<FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestToUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestToUserInputEnvelope
    set?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    disconnect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    delete?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    update?: Enumerable<FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestToUserInput>
    updateMany?: Enumerable<FacebookFriendRequestUpdateManyWithWhereWithoutRequestToUserInput>
    deleteMany?: Enumerable<FacebookFriendRequestScalarWhereInput>
  }

  export type FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationFromUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationFromUserInput>
    upsert?: Enumerable<FacebookUserRelationUpsertWithWhereUniqueWithoutRelationFromUserInput>
    createMany?: FacebookUserRelationCreateManyRelationFromUserInputEnvelope
    set?: Enumerable<FacebookUserRelationWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    delete?: Enumerable<FacebookUserRelationWhereUniqueInput>
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    update?: Enumerable<FacebookUserRelationUpdateWithWhereUniqueWithoutRelationFromUserInput>
    updateMany?: Enumerable<FacebookUserRelationUpdateManyWithWhereWithoutRelationFromUserInput>
    deleteMany?: Enumerable<FacebookUserRelationScalarWhereInput>
  }

  export type FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationToUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationToUserInput>
    upsert?: Enumerable<FacebookUserRelationUpsertWithWhereUniqueWithoutRelationToUserInput>
    createMany?: FacebookUserRelationCreateManyRelationToUserInputEnvelope
    set?: Enumerable<FacebookUserRelationWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    delete?: Enumerable<FacebookUserRelationWhereUniqueInput>
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    update?: Enumerable<FacebookUserRelationUpdateWithWhereUniqueWithoutRelationToUserInput>
    updateMany?: Enumerable<FacebookUserRelationUpdateManyWithWhereWithoutRelationToUserInput>
    deleteMany?: Enumerable<FacebookUserRelationScalarWhereInput>
  }

  export type FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageFromUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageFromUserInput>
    upsert?: Enumerable<FacebookMessengerUpsertWithWhereUniqueWithoutMessageFromUserInput>
    createMany?: FacebookMessengerCreateManyMessageFromUserInputEnvelope
    set?: Enumerable<FacebookMessengerWhereUniqueInput>
    disconnect?: Enumerable<FacebookMessengerWhereUniqueInput>
    delete?: Enumerable<FacebookMessengerWhereUniqueInput>
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
    update?: Enumerable<FacebookMessengerUpdateWithWhereUniqueWithoutMessageFromUserInput>
    updateMany?: Enumerable<FacebookMessengerUpdateManyWithWhereWithoutMessageFromUserInput>
    deleteMany?: Enumerable<FacebookMessengerScalarWhereInput>
  }

  export type FacebookMessengerUpdateManyWithoutMessageToUserNestedInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageToUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageToUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageToUserInput>
    upsert?: Enumerable<FacebookMessengerUpsertWithWhereUniqueWithoutMessageToUserInput>
    createMany?: FacebookMessengerCreateManyMessageToUserInputEnvelope
    set?: Enumerable<FacebookMessengerWhereUniqueInput>
    disconnect?: Enumerable<FacebookMessengerWhereUniqueInput>
    delete?: Enumerable<FacebookMessengerWhereUniqueInput>
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
    update?: Enumerable<FacebookMessengerUpdateWithWhereUniqueWithoutMessageToUserInput>
    updateMany?: Enumerable<FacebookMessengerUpdateManyWithWhereWithoutMessageToUserInput>
    deleteMany?: Enumerable<FacebookMessengerScalarWhereInput>
  }

  export type FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPosterUserInput>, Enumerable<FacebookPostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookPostCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutCreaterUserInput>, Enumerable<FacebookGroupUncheckedCreateWithoutCreaterUserInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutCreaterUserInput>
    upsert?: Enumerable<FacebookGroupUpsertWithWhereUniqueWithoutCreaterUserInput>
    createMany?: FacebookGroupCreateManyCreaterUserInputEnvelope
    set?: Enumerable<FacebookGroupWhereUniqueInput>
    disconnect?: Enumerable<FacebookGroupWhereUniqueInput>
    delete?: Enumerable<FacebookGroupWhereUniqueInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
    update?: Enumerable<FacebookGroupUpdateWithWhereUniqueWithoutCreaterUserInput>
    updateMany?: Enumerable<FacebookGroupUpdateManyWithWhereWithoutCreaterUserInput>
    deleteMany?: Enumerable<FacebookGroupScalarWhereInput>
  }

  export type FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput = {
    create?: XOR<Enumerable<FacebookGroupCreateWithoutMemberUsersInput>, Enumerable<FacebookGroupUncheckedCreateWithoutMemberUsersInput>>
    connectOrCreate?: Enumerable<FacebookGroupCreateOrConnectWithoutMemberUsersInput>
    upsert?: Enumerable<FacebookGroupUpsertWithWhereUniqueWithoutMemberUsersInput>
    set?: Enumerable<FacebookGroupWhereUniqueInput>
    disconnect?: Enumerable<FacebookGroupWhereUniqueInput>
    delete?: Enumerable<FacebookGroupWhereUniqueInput>
    connect?: Enumerable<FacebookGroupWhereUniqueInput>
    update?: Enumerable<FacebookGroupUpdateWithWhereUniqueWithoutMemberUsersInput>
    updateMany?: Enumerable<FacebookGroupUpdateManyWithWhereWithoutMemberUsersInput>
    deleteMany?: Enumerable<FacebookGroupScalarWhereInput>
  }

  export type FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutCommentByUserInput>, Enumerable<FacebookCommentUncheckedCreateWithoutCommentByUserInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutCommentByUserInput>
    upsert?: Enumerable<FacebookCommentUpsertWithWhereUniqueWithoutCommentByUserInput>
    createMany?: FacebookCommentCreateManyCommentByUserInputEnvelope
    set?: Enumerable<FacebookCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookCommentWhereUniqueInput>
    delete?: Enumerable<FacebookCommentWhereUniqueInput>
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
    update?: Enumerable<FacebookCommentUpdateWithWhereUniqueWithoutCommentByUserInput>
    updateMany?: Enumerable<FacebookCommentUpdateManyWithWhereWithoutCommentByUserInput>
    deleteMany?: Enumerable<FacebookCommentScalarWhereInput>
  }

  export type FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPosterUserInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookLikePostCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutPosterUserInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutPosterUserInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutPosterUserInput>
    createMany?: FacebookLikeCommentCreateManyPosterUserInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutPosterUserInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutPosterUserInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestFromUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestFromUserInput>
    upsert?: Enumerable<FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestFromUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestFromUserInputEnvelope
    set?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    disconnect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    delete?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    update?: Enumerable<FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestFromUserInput>
    updateMany?: Enumerable<FacebookFriendRequestUpdateManyWithWhereWithoutRequestFromUserInput>
    deleteMany?: Enumerable<FacebookFriendRequestScalarWhereInput>
  }

  export type FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput = {
    create?: XOR<Enumerable<FacebookFriendRequestCreateWithoutRequestToUserInput>, Enumerable<FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>>
    connectOrCreate?: Enumerable<FacebookFriendRequestCreateOrConnectWithoutRequestToUserInput>
    upsert?: Enumerable<FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestToUserInput>
    createMany?: FacebookFriendRequestCreateManyRequestToUserInputEnvelope
    set?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    disconnect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    delete?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    connect?: Enumerable<FacebookFriendRequestWhereUniqueInput>
    update?: Enumerable<FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestToUserInput>
    updateMany?: Enumerable<FacebookFriendRequestUpdateManyWithWhereWithoutRequestToUserInput>
    deleteMany?: Enumerable<FacebookFriendRequestScalarWhereInput>
  }

  export type FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationFromUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationFromUserInput>
    upsert?: Enumerable<FacebookUserRelationUpsertWithWhereUniqueWithoutRelationFromUserInput>
    createMany?: FacebookUserRelationCreateManyRelationFromUserInputEnvelope
    set?: Enumerable<FacebookUserRelationWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    delete?: Enumerable<FacebookUserRelationWhereUniqueInput>
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    update?: Enumerable<FacebookUserRelationUpdateWithWhereUniqueWithoutRelationFromUserInput>
    updateMany?: Enumerable<FacebookUserRelationUpdateManyWithWhereWithoutRelationFromUserInput>
    deleteMany?: Enumerable<FacebookUserRelationScalarWhereInput>
  }

  export type FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput = {
    create?: XOR<Enumerable<FacebookUserRelationCreateWithoutRelationToUserInput>, Enumerable<FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>>
    connectOrCreate?: Enumerable<FacebookUserRelationCreateOrConnectWithoutRelationToUserInput>
    upsert?: Enumerable<FacebookUserRelationUpsertWithWhereUniqueWithoutRelationToUserInput>
    createMany?: FacebookUserRelationCreateManyRelationToUserInputEnvelope
    set?: Enumerable<FacebookUserRelationWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    delete?: Enumerable<FacebookUserRelationWhereUniqueInput>
    connect?: Enumerable<FacebookUserRelationWhereUniqueInput>
    update?: Enumerable<FacebookUserRelationUpdateWithWhereUniqueWithoutRelationToUserInput>
    updateMany?: Enumerable<FacebookUserRelationUpdateManyWithWhereWithoutRelationToUserInput>
    deleteMany?: Enumerable<FacebookUserRelationScalarWhereInput>
  }

  export type FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageFromUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageFromUserInput>
    upsert?: Enumerable<FacebookMessengerUpsertWithWhereUniqueWithoutMessageFromUserInput>
    createMany?: FacebookMessengerCreateManyMessageFromUserInputEnvelope
    set?: Enumerable<FacebookMessengerWhereUniqueInput>
    disconnect?: Enumerable<FacebookMessengerWhereUniqueInput>
    delete?: Enumerable<FacebookMessengerWhereUniqueInput>
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
    update?: Enumerable<FacebookMessengerUpdateWithWhereUniqueWithoutMessageFromUserInput>
    updateMany?: Enumerable<FacebookMessengerUpdateManyWithWhereWithoutMessageFromUserInput>
    deleteMany?: Enumerable<FacebookMessengerScalarWhereInput>
  }

  export type FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput = {
    create?: XOR<Enumerable<FacebookMessengerCreateWithoutMessageToUserInput>, Enumerable<FacebookMessengerUncheckedCreateWithoutMessageToUserInput>>
    connectOrCreate?: Enumerable<FacebookMessengerCreateOrConnectWithoutMessageToUserInput>
    upsert?: Enumerable<FacebookMessengerUpsertWithWhereUniqueWithoutMessageToUserInput>
    createMany?: FacebookMessengerCreateManyMessageToUserInputEnvelope
    set?: Enumerable<FacebookMessengerWhereUniqueInput>
    disconnect?: Enumerable<FacebookMessengerWhereUniqueInput>
    delete?: Enumerable<FacebookMessengerWhereUniqueInput>
    connect?: Enumerable<FacebookMessengerWhereUniqueInput>
    update?: Enumerable<FacebookMessengerUpdateWithWhereUniqueWithoutMessageToUserInput>
    updateMany?: Enumerable<FacebookMessengerUpdateManyWithWhereWithoutMessageToUserInput>
    deleteMany?: Enumerable<FacebookMessengerScalarWhereInput>
  }

  export type FacebookUserCreateNestedOneWithoutGroupcreaterInput = {
    create?: XOR<FacebookUserCreateWithoutGroupcreaterInput, FacebookUserUncheckedCreateWithoutGroupcreaterInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutGroupcreaterInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserCreateNestedManyWithoutGroupMemberInput = {
    create?: XOR<Enumerable<FacebookUserCreateWithoutGroupMemberInput>, Enumerable<FacebookUserUncheckedCreateWithoutGroupMemberInput>>
    connectOrCreate?: Enumerable<FacebookUserCreateOrConnectWithoutGroupMemberInput>
    connect?: Enumerable<FacebookUserWhereUniqueInput>
  }

  export type FacebookUserUncheckedCreateNestedManyWithoutGroupMemberInput = {
    create?: XOR<Enumerable<FacebookUserCreateWithoutGroupMemberInput>, Enumerable<FacebookUserUncheckedCreateWithoutGroupMemberInput>>
    connectOrCreate?: Enumerable<FacebookUserCreateOrConnectWithoutGroupMemberInput>
    connect?: Enumerable<FacebookUserWhereUniqueInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutGroupcreaterNestedInput = {
    create?: XOR<FacebookUserCreateWithoutGroupcreaterInput, FacebookUserUncheckedCreateWithoutGroupcreaterInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutGroupcreaterInput
    upsert?: FacebookUserUpsertWithoutGroupcreaterInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutGroupcreaterInput, FacebookUserUncheckedUpdateWithoutGroupcreaterInput>
  }

  export type FacebookUserUpdateManyWithoutGroupMemberNestedInput = {
    create?: XOR<Enumerable<FacebookUserCreateWithoutGroupMemberInput>, Enumerable<FacebookUserUncheckedCreateWithoutGroupMemberInput>>
    connectOrCreate?: Enumerable<FacebookUserCreateOrConnectWithoutGroupMemberInput>
    upsert?: Enumerable<FacebookUserUpsertWithWhereUniqueWithoutGroupMemberInput>
    set?: Enumerable<FacebookUserWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserWhereUniqueInput>
    delete?: Enumerable<FacebookUserWhereUniqueInput>
    connect?: Enumerable<FacebookUserWhereUniqueInput>
    update?: Enumerable<FacebookUserUpdateWithWhereUniqueWithoutGroupMemberInput>
    updateMany?: Enumerable<FacebookUserUpdateManyWithWhereWithoutGroupMemberInput>
    deleteMany?: Enumerable<FacebookUserScalarWhereInput>
  }

  export type FacebookUserUncheckedUpdateManyWithoutGroupMemberNestedInput = {
    create?: XOR<Enumerable<FacebookUserCreateWithoutGroupMemberInput>, Enumerable<FacebookUserUncheckedCreateWithoutGroupMemberInput>>
    connectOrCreate?: Enumerable<FacebookUserCreateOrConnectWithoutGroupMemberInput>
    upsert?: Enumerable<FacebookUserUpsertWithWhereUniqueWithoutGroupMemberInput>
    set?: Enumerable<FacebookUserWhereUniqueInput>
    disconnect?: Enumerable<FacebookUserWhereUniqueInput>
    delete?: Enumerable<FacebookUserWhereUniqueInput>
    connect?: Enumerable<FacebookUserWhereUniqueInput>
    update?: Enumerable<FacebookUserUpdateWithWhereUniqueWithoutGroupMemberInput>
    updateMany?: Enumerable<FacebookUserUpdateManyWithWhereWithoutGroupMemberInput>
    deleteMany?: Enumerable<FacebookUserScalarWhereInput>
  }

  export type FacebookPostCreateNestedManyWithoutDestinationInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutDestinationInput>, Enumerable<FacebookPostUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutDestinationInput>
    createMany?: FacebookPostCreateManyDestinationInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUncheckedCreateNestedManyWithoutDestinationInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutDestinationInput>, Enumerable<FacebookPostUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutDestinationInput>
    createMany?: FacebookPostCreateManyDestinationInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutDestinationInput>, Enumerable<FacebookPostUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutDestinationInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutDestinationInput>
    createMany?: FacebookPostCreateManyDestinationInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutDestinationInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutDestinationInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostUncheckedUpdateManyWithoutDestinationNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutDestinationInput>, Enumerable<FacebookPostUncheckedCreateWithoutDestinationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutDestinationInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutDestinationInput>
    createMany?: FacebookPostCreateManyDestinationInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutDestinationInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutDestinationInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostCreateNestedManyWithoutPostTypeInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPostTypeInput>, Enumerable<FacebookPostUncheckedCreateWithoutPostTypeInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPostTypeInput>
    createMany?: FacebookPostCreateManyPostTypeInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUncheckedCreateNestedManyWithoutPostTypeInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPostTypeInput>, Enumerable<FacebookPostUncheckedCreateWithoutPostTypeInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPostTypeInput>
    createMany?: FacebookPostCreateManyPostTypeInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUpdateManyWithoutPostTypeNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPostTypeInput>, Enumerable<FacebookPostUncheckedCreateWithoutPostTypeInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPostTypeInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutPostTypeInput>
    createMany?: FacebookPostCreateManyPostTypeInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutPostTypeInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutPostTypeInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostUncheckedUpdateManyWithoutPostTypeNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutPostTypeInput>, Enumerable<FacebookPostUncheckedCreateWithoutPostTypeInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutPostTypeInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutPostTypeInput>
    createMany?: FacebookPostCreateManyPostTypeInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutPostTypeInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutPostTypeInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostCreateNestedManyWithoutLocationInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutLocationInput>, Enumerable<FacebookPostUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutLocationInput>
    createMany?: FacebookPostCreateManyLocationInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutLocationInput>, Enumerable<FacebookPostUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutLocationInput>
    createMany?: FacebookPostCreateManyLocationInputEnvelope
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUpdateManyWithoutLocationNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutLocationInput>, Enumerable<FacebookPostUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutLocationInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutLocationInput>
    createMany?: FacebookPostCreateManyLocationInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutLocationInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutLocationInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutLocationInput>, Enumerable<FacebookPostUncheckedCreateWithoutLocationInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutLocationInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutLocationInput>
    createMany?: FacebookPostCreateManyLocationInputEnvelope
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutLocationInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutLocationInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostCreateNestedManyWithoutHashtagsInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutHashtagsInput>, Enumerable<FacebookPostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutHashtagsInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUncheckedCreateNestedManyWithoutHashtagsInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutHashtagsInput>, Enumerable<FacebookPostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutHashtagsInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
  }

  export type FacebookPostUpdateManyWithoutHashtagsNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutHashtagsInput>, Enumerable<FacebookPostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutHashtagsInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutHashtagsInput>
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutHashtagsInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutHashtagsInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostUncheckedUpdateManyWithoutHashtagsNestedInput = {
    create?: XOR<Enumerable<FacebookPostCreateWithoutHashtagsInput>, Enumerable<FacebookPostUncheckedCreateWithoutHashtagsInput>>
    connectOrCreate?: Enumerable<FacebookPostCreateOrConnectWithoutHashtagsInput>
    upsert?: Enumerable<FacebookPostUpsertWithWhereUniqueWithoutHashtagsInput>
    set?: Enumerable<FacebookPostWhereUniqueInput>
    disconnect?: Enumerable<FacebookPostWhereUniqueInput>
    delete?: Enumerable<FacebookPostWhereUniqueInput>
    connect?: Enumerable<FacebookPostWhereUniqueInput>
    update?: Enumerable<FacebookPostUpdateWithWhereUniqueWithoutHashtagsInput>
    updateMany?: Enumerable<FacebookPostUpdateManyWithWhereWithoutHashtagsInput>
    deleteMany?: Enumerable<FacebookPostScalarWhereInput>
  }

  export type FacebookPostTypeCreateNestedOneWithoutPostsInput = {
    create?: XOR<FacebookPostTypeCreateWithoutPostsInput, FacebookPostTypeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookPostTypeCreateOrConnectWithoutPostsInput
    connect?: FacebookPostTypeWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutPostsInput = {
    create?: XOR<FacebookUserCreateWithoutPostsInput, FacebookUserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutPostsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookLocationCreateNestedOneWithoutPostsInput = {
    create?: XOR<FacebookLocationCreateWithoutPostsInput, FacebookLocationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookLocationCreateOrConnectWithoutPostsInput
    connect?: FacebookLocationWhereUniqueInput
  }

  export type FacebookPostDestinationCreateNestedOneWithoutPostsInput = {
    create?: XOR<FacebookPostDestinationCreateWithoutPostsInput, FacebookPostDestinationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookPostDestinationCreateOrConnectWithoutPostsInput
    connect?: FacebookPostDestinationWhereUniqueInput
  }

  export type FacebookHashtagCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<FacebookHashtagCreateWithoutPostsInput>, Enumerable<FacebookHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<FacebookHashtagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<FacebookHashtagWhereUniqueInput>
  }

  export type FacebookCommentCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutPostInput>, Enumerable<FacebookCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutPostInput>
    createMany?: FacebookCommentCreateManyPostInputEnvelope
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
  }

  export type FacebookLikePostCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPostInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPostInput>
    createMany?: FacebookLikePostCreateManyPostInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutCommentInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutCommentInput>
    createMany?: FacebookLikeCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput = {
    create?: XOR<Enumerable<FacebookHashtagCreateWithoutPostsInput>, Enumerable<FacebookHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<FacebookHashtagCreateOrConnectWithoutPostsInput>
    connect?: Enumerable<FacebookHashtagWhereUniqueInput>
  }

  export type FacebookCommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutPostInput>, Enumerable<FacebookCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutPostInput>
    createMany?: FacebookCommentCreateManyPostInputEnvelope
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
  }

  export type FacebookLikePostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPostInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPostInput>
    createMany?: FacebookLikePostCreateManyPostInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutCommentInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutCommentInput>
    createMany?: FacebookLikeCommentCreateManyCommentInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<FacebookPostTypeCreateWithoutPostsInput, FacebookPostTypeUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookPostTypeCreateOrConnectWithoutPostsInput
    upsert?: FacebookPostTypeUpsertWithoutPostsInput
    connect?: FacebookPostTypeWhereUniqueInput
    update?: XOR<FacebookPostTypeUpdateWithoutPostsInput, FacebookPostTypeUncheckedUpdateWithoutPostsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutPostsInput, FacebookUserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutPostsInput
    upsert?: FacebookUserUpsertWithoutPostsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutPostsInput, FacebookUserUncheckedUpdateWithoutPostsInput>
  }

  export type FacebookLocationUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<FacebookLocationCreateWithoutPostsInput, FacebookLocationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookLocationCreateOrConnectWithoutPostsInput
    upsert?: FacebookLocationUpsertWithoutPostsInput
    connect?: FacebookLocationWhereUniqueInput
    update?: XOR<FacebookLocationUpdateWithoutPostsInput, FacebookLocationUncheckedUpdateWithoutPostsInput>
  }

  export type FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<FacebookPostDestinationCreateWithoutPostsInput, FacebookPostDestinationUncheckedCreateWithoutPostsInput>
    connectOrCreate?: FacebookPostDestinationCreateOrConnectWithoutPostsInput
    upsert?: FacebookPostDestinationUpsertWithoutPostsInput
    connect?: FacebookPostDestinationWhereUniqueInput
    update?: XOR<FacebookPostDestinationUpdateWithoutPostsInput, FacebookPostDestinationUncheckedUpdateWithoutPostsInput>
  }

  export type FacebookHashtagUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<FacebookHashtagCreateWithoutPostsInput>, Enumerable<FacebookHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<FacebookHashtagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<FacebookHashtagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<FacebookHashtagWhereUniqueInput>
    disconnect?: Enumerable<FacebookHashtagWhereUniqueInput>
    delete?: Enumerable<FacebookHashtagWhereUniqueInput>
    connect?: Enumerable<FacebookHashtagWhereUniqueInput>
    update?: Enumerable<FacebookHashtagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<FacebookHashtagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<FacebookHashtagScalarWhereInput>
  }

  export type FacebookCommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutPostInput>, Enumerable<FacebookCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FacebookCommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FacebookCommentCreateManyPostInputEnvelope
    set?: Enumerable<FacebookCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookCommentWhereUniqueInput>
    delete?: Enumerable<FacebookCommentWhereUniqueInput>
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
    update?: Enumerable<FacebookCommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FacebookCommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FacebookCommentScalarWhereInput>
  }

  export type FacebookLikePostUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPostInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FacebookLikePostCreateManyPostInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutCommentInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: FacebookLikeCommentCreateManyCommentInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput = {
    create?: XOR<Enumerable<FacebookHashtagCreateWithoutPostsInput>, Enumerable<FacebookHashtagUncheckedCreateWithoutPostsInput>>
    connectOrCreate?: Enumerable<FacebookHashtagCreateOrConnectWithoutPostsInput>
    upsert?: Enumerable<FacebookHashtagUpsertWithWhereUniqueWithoutPostsInput>
    set?: Enumerable<FacebookHashtagWhereUniqueInput>
    disconnect?: Enumerable<FacebookHashtagWhereUniqueInput>
    delete?: Enumerable<FacebookHashtagWhereUniqueInput>
    connect?: Enumerable<FacebookHashtagWhereUniqueInput>
    update?: Enumerable<FacebookHashtagUpdateWithWhereUniqueWithoutPostsInput>
    updateMany?: Enumerable<FacebookHashtagUpdateManyWithWhereWithoutPostsInput>
    deleteMany?: Enumerable<FacebookHashtagScalarWhereInput>
  }

  export type FacebookCommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FacebookCommentCreateWithoutPostInput>, Enumerable<FacebookCommentUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookCommentCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FacebookCommentUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FacebookCommentCreateManyPostInputEnvelope
    set?: Enumerable<FacebookCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookCommentWhereUniqueInput>
    delete?: Enumerable<FacebookCommentWhereUniqueInput>
    connect?: Enumerable<FacebookCommentWhereUniqueInput>
    update?: Enumerable<FacebookCommentUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FacebookCommentUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FacebookCommentScalarWhereInput>
  }

  export type FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutPostInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutPostInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutPostInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutPostInput>
    createMany?: FacebookLikePostCreateManyPostInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutPostInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutPostInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutCommentInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutCommentInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutCommentInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutCommentInput>
    createMany?: FacebookLikeCommentCreateManyCommentInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutCommentInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutCommentInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookUserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FacebookUserCreateWithoutCommentsInput, FacebookUserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutCommentsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookPostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<FacebookPostCreateWithoutCommentsInput, FacebookPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutCommentsInput
    connect?: FacebookPostWhereUniqueInput
  }

  export type FacebookUserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutCommentsInput, FacebookUserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutCommentsInput
    upsert?: FacebookUserUpsertWithoutCommentsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutCommentsInput, FacebookUserUncheckedUpdateWithoutCommentsInput>
  }

  export type FacebookPostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<FacebookPostCreateWithoutCommentsInput, FacebookPostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutCommentsInput
    upsert?: FacebookPostUpsertWithoutCommentsInput
    connect?: FacebookPostWhereUniqueInput
    update?: XOR<FacebookPostUpdateWithoutCommentsInput, FacebookPostUncheckedUpdateWithoutCommentsInput>
  }

  export type FacebookLikePostCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutLikeTypeInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutLikeTypeInput>
    createMany?: FacebookLikePostCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutLikeTypeInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutLikeTypeInput>
    createMany?: FacebookLikeCommentCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookLikePostUncheckedCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutLikeTypeInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutLikeTypeInput>
    createMany?: FacebookLikePostCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
  }

  export type FacebookLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutLikeTypeInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutLikeTypeInput>
    createMany?: FacebookLikeCommentCreateManyLikeTypeInputEnvelope
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
  }

  export type FacebookLikePostUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutLikeTypeInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: FacebookLikePostCreateManyLikeTypeInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutLikeTypeInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: FacebookLikeCommentCreateManyLikeTypeInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<FacebookLikePostCreateWithoutLikeTypeInput>, Enumerable<FacebookLikePostUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikePostCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<FacebookLikePostUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: FacebookLikePostCreateManyLikeTypeInputEnvelope
    set?: Enumerable<FacebookLikePostWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikePostWhereUniqueInput>
    delete?: Enumerable<FacebookLikePostWhereUniqueInput>
    connect?: Enumerable<FacebookLikePostWhereUniqueInput>
    update?: Enumerable<FacebookLikePostUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<FacebookLikePostUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<FacebookLikePostScalarWhereInput>
  }

  export type FacebookLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput = {
    create?: XOR<Enumerable<FacebookLikeCommentCreateWithoutLikeTypeInput>, Enumerable<FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>>
    connectOrCreate?: Enumerable<FacebookLikeCommentCreateOrConnectWithoutLikeTypeInput>
    upsert?: Enumerable<FacebookLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput>
    createMany?: FacebookLikeCommentCreateManyLikeTypeInputEnvelope
    set?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    disconnect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    delete?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    connect?: Enumerable<FacebookLikeCommentWhereUniqueInput>
    update?: Enumerable<FacebookLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput>
    updateMany?: Enumerable<FacebookLikeCommentUpdateManyWithWhereWithoutLikeTypeInput>
    deleteMany?: Enumerable<FacebookLikeCommentScalarWhereInput>
  }

  export type FacebookPostCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<FacebookPostCreateWithoutLikePostsInput, FacebookPostUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutLikePostsInput
    connect?: FacebookPostWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<FacebookUserCreateWithoutLikePostsInput, FacebookUserUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutLikePostsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookLikeTypeCreateNestedOneWithoutLikePostsInput = {
    create?: XOR<FacebookLikeTypeCreateWithoutLikePostsInput, FacebookLikeTypeUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookLikeTypeCreateOrConnectWithoutLikePostsInput
    connect?: FacebookLikeTypeWhereUniqueInput
  }

  export type FacebookPostUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<FacebookPostCreateWithoutLikePostsInput, FacebookPostUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutLikePostsInput
    upsert?: FacebookPostUpsertWithoutLikePostsInput
    connect?: FacebookPostWhereUniqueInput
    update?: XOR<FacebookPostUpdateWithoutLikePostsInput, FacebookPostUncheckedUpdateWithoutLikePostsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutLikePostsInput, FacebookUserUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutLikePostsInput
    upsert?: FacebookUserUpsertWithoutLikePostsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutLikePostsInput, FacebookUserUncheckedUpdateWithoutLikePostsInput>
  }

  export type FacebookLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput = {
    create?: XOR<FacebookLikeTypeCreateWithoutLikePostsInput, FacebookLikeTypeUncheckedCreateWithoutLikePostsInput>
    connectOrCreate?: FacebookLikeTypeCreateOrConnectWithoutLikePostsInput
    upsert?: FacebookLikeTypeUpsertWithoutLikePostsInput
    connect?: FacebookLikeTypeWhereUniqueInput
    update?: XOR<FacebookLikeTypeUpdateWithoutLikePostsInput, FacebookLikeTypeUncheckedUpdateWithoutLikePostsInput>
  }

  export type FacebookPostCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<FacebookPostCreateWithoutLikeCommentsInput, FacebookPostUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutLikeCommentsInput
    connect?: FacebookPostWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<FacebookUserCreateWithoutLikeCommentsInput, FacebookUserUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutLikeCommentsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookLikeTypeCreateNestedOneWithoutLikeCommentsInput = {
    create?: XOR<FacebookLikeTypeCreateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookLikeTypeCreateOrConnectWithoutLikeCommentsInput
    connect?: FacebookLikeTypeWhereUniqueInput
  }

  export type FacebookPostUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<FacebookPostCreateWithoutLikeCommentsInput, FacebookPostUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookPostCreateOrConnectWithoutLikeCommentsInput
    upsert?: FacebookPostUpsertWithoutLikeCommentsInput
    connect?: FacebookPostWhereUniqueInput
    update?: XOR<FacebookPostUpdateWithoutLikeCommentsInput, FacebookPostUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutLikeCommentsInput, FacebookUserUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutLikeCommentsInput
    upsert?: FacebookUserUpsertWithoutLikeCommentsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutLikeCommentsInput, FacebookUserUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type FacebookLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput = {
    create?: XOR<FacebookLikeTypeCreateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedCreateWithoutLikeCommentsInput>
    connectOrCreate?: FacebookLikeTypeCreateOrConnectWithoutLikeCommentsInput
    upsert?: FacebookLikeTypeUpsertWithoutLikeCommentsInput
    connect?: FacebookLikeTypeWhereUniqueInput
    update?: XOR<FacebookLikeTypeUpdateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedUpdateWithoutLikeCommentsInput>
  }

  export type FacebookUserCreateNestedOneWithoutFriendRequestFromsInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRequestFromsInput, FacebookUserUncheckedCreateWithoutFriendRequestFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRequestFromsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutFriendRequestToesInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRequestToesInput, FacebookUserUncheckedCreateWithoutFriendRequestToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRequestToesInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserUpdateOneRequiredWithoutFriendRequestFromsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRequestFromsInput, FacebookUserUncheckedCreateWithoutFriendRequestFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRequestFromsInput
    upsert?: FacebookUserUpsertWithoutFriendRequestFromsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutFriendRequestFromsInput, FacebookUserUncheckedUpdateWithoutFriendRequestFromsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutFriendRequestToesNestedInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRequestToesInput, FacebookUserUncheckedCreateWithoutFriendRequestToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRequestToesInput
    upsert?: FacebookUserUpsertWithoutFriendRequestToesInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutFriendRequestToesInput, FacebookUserUncheckedUpdateWithoutFriendRequestToesInput>
  }

  export type FacebookUserCreateNestedOneWithoutFriendRelationFromsInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRelationFromsInput, FacebookUserUncheckedCreateWithoutFriendRelationFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRelationFromsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutFriendRelationToesInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRelationToesInput, FacebookUserUncheckedCreateWithoutFriendRelationToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRelationToesInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserUpdateOneRequiredWithoutFriendRelationFromsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRelationFromsInput, FacebookUserUncheckedCreateWithoutFriendRelationFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRelationFromsInput
    upsert?: FacebookUserUpsertWithoutFriendRelationFromsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutFriendRelationFromsInput, FacebookUserUncheckedUpdateWithoutFriendRelationFromsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutFriendRelationToesNestedInput = {
    create?: XOR<FacebookUserCreateWithoutFriendRelationToesInput, FacebookUserUncheckedCreateWithoutFriendRelationToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutFriendRelationToesInput
    upsert?: FacebookUserUpsertWithoutFriendRelationToesInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutFriendRelationToesInput, FacebookUserUncheckedUpdateWithoutFriendRelationToesInput>
  }

  export type FacebookUserCreateNestedOneWithoutMessengeFromsInput = {
    create?: XOR<FacebookUserCreateWithoutMessengeFromsInput, FacebookUserUncheckedCreateWithoutMessengeFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutMessengeFromsInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserCreateNestedOneWithoutMessengeToesInput = {
    create?: XOR<FacebookUserCreateWithoutMessengeToesInput, FacebookUserUncheckedCreateWithoutMessengeToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutMessengeToesInput
    connect?: FacebookUserWhereUniqueInput
  }

  export type FacebookUserUpdateOneRequiredWithoutMessengeFromsNestedInput = {
    create?: XOR<FacebookUserCreateWithoutMessengeFromsInput, FacebookUserUncheckedCreateWithoutMessengeFromsInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutMessengeFromsInput
    upsert?: FacebookUserUpsertWithoutMessengeFromsInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutMessengeFromsInput, FacebookUserUncheckedUpdateWithoutMessengeFromsInput>
  }

  export type FacebookUserUpdateOneRequiredWithoutMessengeToesNestedInput = {
    create?: XOR<FacebookUserCreateWithoutMessengeToesInput, FacebookUserUncheckedCreateWithoutMessengeToesInput>
    connectOrCreate?: FacebookUserCreateOrConnectWithoutMessengeToesInput
    upsert?: FacebookUserUpsertWithoutMessengeToesInput
    connect?: FacebookUserWhereUniqueInput
    update?: XOR<FacebookUserUpdateWithoutMessengeToesInput, FacebookUserUncheckedUpdateWithoutMessengeToesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumYoutubePermissionEnumFilter = {
    equals?: YoutubePermissionEnum
    in?: Enumerable<YoutubePermissionEnum>
    notIn?: Enumerable<YoutubePermissionEnum>
    not?: NestedEnumYoutubePermissionEnumFilter | YoutubePermissionEnum
  }

  export type NestedEnumYoutubePermissionEnumWithAggregatesFilter = {
    equals?: YoutubePermissionEnum
    in?: Enumerable<YoutubePermissionEnum>
    notIn?: Enumerable<YoutubePermissionEnum>
    not?: NestedEnumYoutubePermissionEnumWithAggregatesFilter | YoutubePermissionEnum
    _count?: NestedIntFilter
    _min?: NestedEnumYoutubePermissionEnumFilter
    _max?: NestedEnumYoutubePermissionEnumFilter
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumYoutubeLikeTypeEnumFilter = {
    equals?: YoutubeLikeTypeEnum
    in?: Enumerable<YoutubeLikeTypeEnum>
    notIn?: Enumerable<YoutubeLikeTypeEnum>
    not?: NestedEnumYoutubeLikeTypeEnumFilter | YoutubeLikeTypeEnum
  }

  export type NestedEnumYoutubeLikeTypeEnumWithAggregatesFilter = {
    equals?: YoutubeLikeTypeEnum
    in?: Enumerable<YoutubeLikeTypeEnum>
    notIn?: Enumerable<YoutubeLikeTypeEnum>
    not?: NestedEnumYoutubeLikeTypeEnumWithAggregatesFilter | YoutubeLikeTypeEnum
    _count?: NestedIntFilter
    _min?: NestedEnumYoutubeLikeTypeEnumFilter
    _max?: NestedEnumYoutubeLikeTypeEnumFilter
  }

  export type BinKitchenMenuCreateWithoutCategoryInput = {
    name: string
    image: string
    price: number
    orderItems?: BinKitchenOrderItemCreateNestedManyWithoutMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUncheckedCreateWithoutCategoryInput = {
    id?: number
    name: string
    image: string
    price: number
    orderItems?: BinKitchenOrderItemUncheckedCreateNestedManyWithoutMenuInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuCreateOrConnectWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    create: XOR<BinKitchenMenuCreateWithoutCategoryInput, BinKitchenMenuUncheckedCreateWithoutCategoryInput>
  }

  export type BinKitchenMenuCreateManyCategoryInputEnvelope = {
    data: Enumerable<BinKitchenMenuCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenMenuUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    update: XOR<BinKitchenMenuUpdateWithoutCategoryInput, BinKitchenMenuUncheckedUpdateWithoutCategoryInput>
    create: XOR<BinKitchenMenuCreateWithoutCategoryInput, BinKitchenMenuUncheckedCreateWithoutCategoryInput>
  }

  export type BinKitchenMenuUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BinKitchenMenuWhereUniqueInput
    data: XOR<BinKitchenMenuUpdateWithoutCategoryInput, BinKitchenMenuUncheckedUpdateWithoutCategoryInput>
  }

  export type BinKitchenMenuUpdateManyWithWhereWithoutCategoryInput = {
    where: BinKitchenMenuScalarWhereInput
    data: XOR<BinKitchenMenuUpdateManyMutationInput, BinKitchenMenuUncheckedUpdateManyWithoutMenusInput>
  }

  export type BinKitchenMenuScalarWhereInput = {
    AND?: Enumerable<BinKitchenMenuScalarWhereInput>
    OR?: Enumerable<BinKitchenMenuScalarWhereInput>
    NOT?: Enumerable<BinKitchenMenuScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    image?: StringFilter | string
    price?: FloatFilter | number
    categoryName?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenCategoryCreateWithoutMenusInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryUncheckedCreateWithoutMenusInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenCategoryCreateOrConnectWithoutMenusInput = {
    where: BinKitchenCategoryWhereUniqueInput
    create: XOR<BinKitchenCategoryCreateWithoutMenusInput, BinKitchenCategoryUncheckedCreateWithoutMenusInput>
  }

  export type BinKitchenOrderItemCreateWithoutMenuInput = {
    order?: BinKitchenOrderCreateNestedOneWithoutOrderItemsInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateWithoutMenuInput = {
    id?: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemCreateOrConnectWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    create: XOR<BinKitchenOrderItemCreateWithoutMenuInput, BinKitchenOrderItemUncheckedCreateWithoutMenuInput>
  }

  export type BinKitchenOrderItemCreateManyMenuInputEnvelope = {
    data: Enumerable<BinKitchenOrderItemCreateManyMenuInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenCategoryUpsertWithoutMenusInput = {
    update: XOR<BinKitchenCategoryUpdateWithoutMenusInput, BinKitchenCategoryUncheckedUpdateWithoutMenusInput>
    create: XOR<BinKitchenCategoryCreateWithoutMenusInput, BinKitchenCategoryUncheckedCreateWithoutMenusInput>
  }

  export type BinKitchenCategoryUpdateWithoutMenusInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenCategoryUncheckedUpdateWithoutMenusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUpsertWithWhereUniqueWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    update: XOR<BinKitchenOrderItemUpdateWithoutMenuInput, BinKitchenOrderItemUncheckedUpdateWithoutMenuInput>
    create: XOR<BinKitchenOrderItemCreateWithoutMenuInput, BinKitchenOrderItemUncheckedCreateWithoutMenuInput>
  }

  export type BinKitchenOrderItemUpdateWithWhereUniqueWithoutMenuInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    data: XOR<BinKitchenOrderItemUpdateWithoutMenuInput, BinKitchenOrderItemUncheckedUpdateWithoutMenuInput>
  }

  export type BinKitchenOrderItemUpdateManyWithWhereWithoutMenuInput = {
    where: BinKitchenOrderItemScalarWhereInput
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyWithoutOrderItemsInput>
  }

  export type BinKitchenOrderItemScalarWhereInput = {
    AND?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    OR?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    NOT?: Enumerable<BinKitchenOrderItemScalarWhereInput>
    id?: IntFilter | number
    menuId?: IntFilter | number
    orderId?: IntNullableFilter | number | null
    quantity?: IntFilter | number
    totalPrice?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BinKitchenOrderItemCreateWithoutOrderInput = {
    menu: BinKitchenMenuCreateNestedOneWithoutOrderItemsInput
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUncheckedCreateWithoutOrderInput = {
    id?: number
    menuId: number
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemCreateOrConnectWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    create: XOR<BinKitchenOrderItemCreateWithoutOrderInput, BinKitchenOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type BinKitchenOrderItemCreateManyOrderInputEnvelope = {
    data: Enumerable<BinKitchenOrderItemCreateManyOrderInput>
    skipDuplicates?: boolean
  }

  export type BinKitchenOrderItemUpsertWithWhereUniqueWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    update: XOR<BinKitchenOrderItemUpdateWithoutOrderInput, BinKitchenOrderItemUncheckedUpdateWithoutOrderInput>
    create: XOR<BinKitchenOrderItemCreateWithoutOrderInput, BinKitchenOrderItemUncheckedCreateWithoutOrderInput>
  }

  export type BinKitchenOrderItemUpdateWithWhereUniqueWithoutOrderInput = {
    where: BinKitchenOrderItemWhereUniqueInput
    data: XOR<BinKitchenOrderItemUpdateWithoutOrderInput, BinKitchenOrderItemUncheckedUpdateWithoutOrderInput>
  }

  export type BinKitchenOrderItemUpdateManyWithWhereWithoutOrderInput = {
    where: BinKitchenOrderItemScalarWhereInput
    data: XOR<BinKitchenOrderItemUpdateManyMutationInput, BinKitchenOrderItemUncheckedUpdateManyWithoutOrderItemsInput>
  }

  export type BinKitchenMenuCreateWithoutOrderItemsInput = {
    name: string
    image: string
    price: number
    category?: BinKitchenCategoryCreateNestedOneWithoutMenusInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    name: string
    image: string
    price: number
    categoryName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuCreateOrConnectWithoutOrderItemsInput = {
    where: BinKitchenMenuWhereUniqueInput
    create: XOR<BinKitchenMenuCreateWithoutOrderItemsInput, BinKitchenMenuUncheckedCreateWithoutOrderItemsInput>
  }

  export type BinKitchenOrderCreateWithoutOrderItemsInput = {
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderUncheckedCreateWithoutOrderItemsInput = {
    id?: number
    status?: string
    tableId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderCreateOrConnectWithoutOrderItemsInput = {
    where: BinKitchenOrderWhereUniqueInput
    create: XOR<BinKitchenOrderCreateWithoutOrderItemsInput, BinKitchenOrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type BinKitchenMenuUpsertWithoutOrderItemsInput = {
    update: XOR<BinKitchenMenuUpdateWithoutOrderItemsInput, BinKitchenMenuUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<BinKitchenMenuCreateWithoutOrderItemsInput, BinKitchenMenuUncheckedCreateWithoutOrderItemsInput>
  }

  export type BinKitchenMenuUpdateWithoutOrderItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    category?: BinKitchenCategoryUpdateOneWithoutMenusNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUpsertWithoutOrderItemsInput = {
    update: XOR<BinKitchenOrderUpdateWithoutOrderItemsInput, BinKitchenOrderUncheckedUpdateWithoutOrderItemsInput>
    create: XOR<BinKitchenOrderCreateWithoutOrderItemsInput, BinKitchenOrderUncheckedCreateWithoutOrderItemsInput>
  }

  export type BinKitchenOrderUpdateWithoutOrderItemsInput = {
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderUncheckedUpdateWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    tableId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizCreateWithoutCategoryInput = {
    quiz: string
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceCreateNestedManyWithoutQuizInput
    answerId: number
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutCategoryInput = {
    id?: number
    quiz: string
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
    answerId: number
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutCategoryInput, TriviaQuizUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaQuizCreateManyCategoryInputEnvelope = {
    data: Enumerable<TriviaQuizCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TriviaRoundCreateWithoutCategoryInput = {
    round: string
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundUncheckedCreateWithoutCategoryInput = {
    id?: number
    round: string
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutRoundInput
  }

  export type TriviaRoundCreateOrConnectWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    create: XOR<TriviaRoundCreateWithoutCategoryInput, TriviaRoundUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaRoundCreateManyCategoryInputEnvelope = {
    data: Enumerable<TriviaRoundCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TriviaQuizUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    update: XOR<TriviaQuizUpdateWithoutCategoryInput, TriviaQuizUncheckedUpdateWithoutCategoryInput>
    create: XOR<TriviaQuizCreateWithoutCategoryInput, TriviaQuizUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaQuizUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TriviaQuizWhereUniqueInput
    data: XOR<TriviaQuizUpdateWithoutCategoryInput, TriviaQuizUncheckedUpdateWithoutCategoryInput>
  }

  export type TriviaQuizUpdateManyWithWhereWithoutCategoryInput = {
    where: TriviaQuizScalarWhereInput
    data: XOR<TriviaQuizUpdateManyMutationInput, TriviaQuizUncheckedUpdateManyWithoutTriviaQuizesInput>
  }

  export type TriviaQuizScalarWhereInput = {
    AND?: Enumerable<TriviaQuizScalarWhereInput>
    OR?: Enumerable<TriviaQuizScalarWhereInput>
    NOT?: Enumerable<TriviaQuizScalarWhereInput>
    id?: IntFilter | number
    quiz?: StringFilter | string
    categoryName?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    answerId?: IntFilter | number
  }

  export type TriviaRoundUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    update: XOR<TriviaRoundUpdateWithoutCategoryInput, TriviaRoundUncheckedUpdateWithoutCategoryInput>
    create: XOR<TriviaRoundCreateWithoutCategoryInput, TriviaRoundUncheckedCreateWithoutCategoryInput>
  }

  export type TriviaRoundUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TriviaRoundWhereUniqueInput
    data: XOR<TriviaRoundUpdateWithoutCategoryInput, TriviaRoundUncheckedUpdateWithoutCategoryInput>
  }

  export type TriviaRoundUpdateManyWithWhereWithoutCategoryInput = {
    where: TriviaRoundScalarWhereInput
    data: XOR<TriviaRoundUpdateManyMutationInput, TriviaRoundUncheckedUpdateManyWithoutRoundsInput>
  }

  export type TriviaRoundScalarWhereInput = {
    AND?: Enumerable<TriviaRoundScalarWhereInput>
    OR?: Enumerable<TriviaRoundScalarWhereInput>
    NOT?: Enumerable<TriviaRoundScalarWhereInput>
    id?: IntFilter | number
    round?: StringFilter | string
    categoryId?: IntFilter | number
    score?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaCategoryCreateWithoutTriviaQuizesInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rounds?: TriviaRoundCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryUncheckedCreateWithoutTriviaQuizesInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    rounds?: TriviaRoundUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type TriviaCategoryCreateOrConnectWithoutTriviaQuizesInput = {
    where: TriviaCategoryWhereUniqueInput
    create: XOR<TriviaCategoryCreateWithoutTriviaQuizesInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizesInput>
  }

  export type TriviaChoiceCreateWithoutQuizInput = {
    choice: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutUserChoiceInput
  }

  export type TriviaChoiceUncheckedCreateWithoutQuizInput = {
    id?: number
    choice: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutUserChoiceInput
  }

  export type TriviaChoiceCreateOrConnectWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    create: XOR<TriviaChoiceCreateWithoutQuizInput, TriviaChoiceUncheckedCreateWithoutQuizInput>
  }

  export type TriviaChoiceCreateManyQuizInputEnvelope = {
    data: Enumerable<TriviaChoiceCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type TriviaRoundQuizCreateWithoutQuizInput = {
    round?: TriviaRoundCreateNestedOneWithoutRoundQuizesInput
    userChoice?: TriviaChoiceCreateNestedOneWithoutRoundQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUncheckedCreateWithoutQuizInput = {
    id?: number
    roundId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizCreateOrConnectWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutQuizInput, TriviaRoundQuizUncheckedCreateWithoutQuizInput>
  }

  export type TriviaRoundQuizCreateManyQuizInputEnvelope = {
    data: Enumerable<TriviaRoundQuizCreateManyQuizInput>
    skipDuplicates?: boolean
  }

  export type TriviaCategoryUpsertWithoutTriviaQuizesInput = {
    update: XOR<TriviaCategoryUpdateWithoutTriviaQuizesInput, TriviaCategoryUncheckedUpdateWithoutTriviaQuizesInput>
    create: XOR<TriviaCategoryCreateWithoutTriviaQuizesInput, TriviaCategoryUncheckedCreateWithoutTriviaQuizesInput>
  }

  export type TriviaCategoryUpdateWithoutTriviaQuizesInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rounds?: TriviaRoundUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaCategoryUncheckedUpdateWithoutTriviaQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rounds?: TriviaRoundUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type TriviaChoiceUpsertWithWhereUniqueWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    update: XOR<TriviaChoiceUpdateWithoutQuizInput, TriviaChoiceUncheckedUpdateWithoutQuizInput>
    create: XOR<TriviaChoiceCreateWithoutQuizInput, TriviaChoiceUncheckedCreateWithoutQuizInput>
  }

  export type TriviaChoiceUpdateWithWhereUniqueWithoutQuizInput = {
    where: TriviaChoiceWhereUniqueInput
    data: XOR<TriviaChoiceUpdateWithoutQuizInput, TriviaChoiceUncheckedUpdateWithoutQuizInput>
  }

  export type TriviaChoiceUpdateManyWithWhereWithoutQuizInput = {
    where: TriviaChoiceScalarWhereInput
    data: XOR<TriviaChoiceUpdateManyMutationInput, TriviaChoiceUncheckedUpdateManyWithoutChoicesInput>
  }

  export type TriviaChoiceScalarWhereInput = {
    AND?: Enumerable<TriviaChoiceScalarWhereInput>
    OR?: Enumerable<TriviaChoiceScalarWhereInput>
    NOT?: Enumerable<TriviaChoiceScalarWhereInput>
    id?: IntFilter | number
    choice?: StringFilter | string
    quizId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaRoundQuizUpsertWithWhereUniqueWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    update: XOR<TriviaRoundQuizUpdateWithoutQuizInput, TriviaRoundQuizUncheckedUpdateWithoutQuizInput>
    create: XOR<TriviaRoundQuizCreateWithoutQuizInput, TriviaRoundQuizUncheckedCreateWithoutQuizInput>
  }

  export type TriviaRoundQuizUpdateWithWhereUniqueWithoutQuizInput = {
    where: TriviaRoundQuizWhereUniqueInput
    data: XOR<TriviaRoundQuizUpdateWithoutQuizInput, TriviaRoundQuizUncheckedUpdateWithoutQuizInput>
  }

  export type TriviaRoundQuizUpdateManyWithWhereWithoutQuizInput = {
    where: TriviaRoundQuizScalarWhereInput
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyWithoutRoundQuizesInput>
  }

  export type TriviaRoundQuizScalarWhereInput = {
    AND?: Enumerable<TriviaRoundQuizScalarWhereInput>
    OR?: Enumerable<TriviaRoundQuizScalarWhereInput>
    NOT?: Enumerable<TriviaRoundQuizScalarWhereInput>
    id?: IntFilter | number
    roundId?: IntFilter | number
    quizId?: IntFilter | number
    userChoiceId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TriviaQuizCreateWithoutChoicesInput = {
    quiz: string
    category?: TriviaCategoryCreateNestedOneWithoutTriviaQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
    answerId: number
    roundQuizes?: TriviaRoundQuizCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizUncheckedCreateWithoutChoicesInput = {
    id?: number
    quiz: string
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answerId: number
    roundQuizes?: TriviaRoundQuizUncheckedCreateNestedManyWithoutQuizInput
  }

  export type TriviaQuizCreateOrConnectWithoutChoicesInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutChoicesInput, TriviaQuizUncheckedCreateWithoutChoicesInput>
  }

  export type TriviaRoundQuizCreateWithoutUserChoiceInput = {
    round?: TriviaRoundCreateNestedOneWithoutRoundQuizesInput
    quiz?: TriviaQuizCreateNestedOneWithoutRoundQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput = {
    id?: number
    roundId: number
    quizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizCreateOrConnectWithoutUserChoiceInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutUserChoiceInput, TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>
  }

  export type TriviaRoundQuizCreateManyUserChoiceInputEnvelope = {
    data: Enumerable<TriviaRoundQuizCreateManyUserChoiceInput>
    skipDuplicates?: boolean
  }

  export type TriviaQuizUpsertWithoutChoicesInput = {
    update: XOR<TriviaQuizUpdateWithoutChoicesInput, TriviaQuizUncheckedUpdateWithoutChoicesInput>
    create: XOR<TriviaQuizCreateWithoutChoicesInput, TriviaQuizUncheckedCreateWithoutChoicesInput>
  }

  export type TriviaQuizUpdateWithoutChoicesInput = {
    quiz?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneWithoutTriviaQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutChoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaRoundQuizUpsertWithWhereUniqueWithoutUserChoiceInput = {
    where: TriviaRoundQuizWhereUniqueInput
    update: XOR<TriviaRoundQuizUpdateWithoutUserChoiceInput, TriviaRoundQuizUncheckedUpdateWithoutUserChoiceInput>
    create: XOR<TriviaRoundQuizCreateWithoutUserChoiceInput, TriviaRoundQuizUncheckedCreateWithoutUserChoiceInput>
  }

  export type TriviaRoundQuizUpdateWithWhereUniqueWithoutUserChoiceInput = {
    where: TriviaRoundQuizWhereUniqueInput
    data: XOR<TriviaRoundQuizUpdateWithoutUserChoiceInput, TriviaRoundQuizUncheckedUpdateWithoutUserChoiceInput>
  }

  export type TriviaRoundQuizUpdateManyWithWhereWithoutUserChoiceInput = {
    where: TriviaRoundQuizScalarWhereInput
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyWithoutRoundQuizesInput>
  }

  export type TriviaCategoryCreateWithoutRoundsInput = {
    name: string
    triviaQuizes?: TriviaQuizCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaCategoryUncheckedCreateWithoutRoundsInput = {
    id?: number
    name: string
    triviaQuizes?: TriviaQuizUncheckedCreateNestedManyWithoutCategoryInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaCategoryCreateOrConnectWithoutRoundsInput = {
    where: TriviaCategoryWhereUniqueInput
    create: XOR<TriviaCategoryCreateWithoutRoundsInput, TriviaCategoryUncheckedCreateWithoutRoundsInput>
  }

  export type TriviaRoundQuizCreateWithoutRoundInput = {
    quiz?: TriviaQuizCreateNestedOneWithoutRoundQuizesInput
    userChoice?: TriviaChoiceCreateNestedOneWithoutRoundQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUncheckedCreateWithoutRoundInput = {
    id?: number
    quizId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizCreateOrConnectWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    create: XOR<TriviaRoundQuizCreateWithoutRoundInput, TriviaRoundQuizUncheckedCreateWithoutRoundInput>
  }

  export type TriviaRoundQuizCreateManyRoundInputEnvelope = {
    data: Enumerable<TriviaRoundQuizCreateManyRoundInput>
    skipDuplicates?: boolean
  }

  export type TriviaCategoryUpsertWithoutRoundsInput = {
    update: XOR<TriviaCategoryUpdateWithoutRoundsInput, TriviaCategoryUncheckedUpdateWithoutRoundsInput>
    create: XOR<TriviaCategoryCreateWithoutRoundsInput, TriviaCategoryUncheckedCreateWithoutRoundsInput>
  }

  export type TriviaCategoryUpdateWithoutRoundsInput = {
    name?: StringFieldUpdateOperationsInput | string
    triviaQuizes?: TriviaQuizUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaCategoryUncheckedUpdateWithoutRoundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    triviaQuizes?: TriviaQuizUncheckedUpdateManyWithoutCategoryNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUpsertWithWhereUniqueWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    update: XOR<TriviaRoundQuizUpdateWithoutRoundInput, TriviaRoundQuizUncheckedUpdateWithoutRoundInput>
    create: XOR<TriviaRoundQuizCreateWithoutRoundInput, TriviaRoundQuizUncheckedCreateWithoutRoundInput>
  }

  export type TriviaRoundQuizUpdateWithWhereUniqueWithoutRoundInput = {
    where: TriviaRoundQuizWhereUniqueInput
    data: XOR<TriviaRoundQuizUpdateWithoutRoundInput, TriviaRoundQuizUncheckedUpdateWithoutRoundInput>
  }

  export type TriviaRoundQuizUpdateManyWithWhereWithoutRoundInput = {
    where: TriviaRoundQuizScalarWhereInput
    data: XOR<TriviaRoundQuizUpdateManyMutationInput, TriviaRoundQuizUncheckedUpdateManyWithoutRoundQuizesInput>
  }

  export type TriviaRoundCreateWithoutRoundQuizesInput = {
    round: string
    category?: TriviaCategoryCreateNestedOneWithoutRoundsInput
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundUncheckedCreateWithoutRoundQuizesInput = {
    id?: number
    round: string
    categoryId: number
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundCreateOrConnectWithoutRoundQuizesInput = {
    where: TriviaRoundWhereUniqueInput
    create: XOR<TriviaRoundCreateWithoutRoundQuizesInput, TriviaRoundUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaQuizCreateWithoutRoundQuizesInput = {
    quiz: string
    category?: TriviaCategoryCreateNestedOneWithoutTriviaQuizesInput
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceCreateNestedManyWithoutQuizInput
    answerId: number
  }

  export type TriviaQuizUncheckedCreateWithoutRoundQuizesInput = {
    id?: number
    quiz: string
    categoryName: string
    createdAt?: Date | string
    updatedAt?: Date | string
    choices?: TriviaChoiceUncheckedCreateNestedManyWithoutQuizInput
    answerId: number
  }

  export type TriviaQuizCreateOrConnectWithoutRoundQuizesInput = {
    where: TriviaQuizWhereUniqueInput
    create: XOR<TriviaQuizCreateWithoutRoundQuizesInput, TriviaQuizUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaChoiceCreateWithoutRoundQuizesInput = {
    choice: string
    quiz?: TriviaQuizCreateNestedOneWithoutChoicesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceUncheckedCreateWithoutRoundQuizesInput = {
    id?: number
    choice: string
    quizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceCreateOrConnectWithoutRoundQuizesInput = {
    where: TriviaChoiceWhereUniqueInput
    create: XOR<TriviaChoiceCreateWithoutRoundQuizesInput, TriviaChoiceUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaRoundUpsertWithoutRoundQuizesInput = {
    update: XOR<TriviaRoundUpdateWithoutRoundQuizesInput, TriviaRoundUncheckedUpdateWithoutRoundQuizesInput>
    create: XOR<TriviaRoundCreateWithoutRoundQuizesInput, TriviaRoundUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaRoundUpdateWithoutRoundQuizesInput = {
    round?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneWithoutRoundsNestedInput
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundUncheckedUpdateWithoutRoundQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizUpsertWithoutRoundQuizesInput = {
    update: XOR<TriviaQuizUpdateWithoutRoundQuizesInput, TriviaQuizUncheckedUpdateWithoutRoundQuizesInput>
    create: XOR<TriviaQuizCreateWithoutRoundQuizesInput, TriviaQuizUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaQuizUpdateWithoutRoundQuizesInput = {
    quiz?: StringFieldUpdateOperationsInput | string
    category?: TriviaCategoryUpdateOneWithoutTriviaQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriviaQuizUncheckedUpdateWithoutRoundQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    categoryName?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriviaChoiceUpsertWithoutRoundQuizesInput = {
    update: XOR<TriviaChoiceUpdateWithoutRoundQuizesInput, TriviaChoiceUncheckedUpdateWithoutRoundQuizesInput>
    create: XOR<TriviaChoiceCreateWithoutRoundQuizesInput, TriviaChoiceUncheckedCreateWithoutRoundQuizesInput>
  }

  export type TriviaChoiceUpdateWithoutRoundQuizesInput = {
    choice?: StringFieldUpdateOperationsInput | string
    quiz?: TriviaQuizUpdateOneWithoutChoicesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceUncheckedUpdateWithoutRoundQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationCreateWithoutFollwerInput = {
    following: TwitterUserCreateNestedOneWithoutFollowingsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUncheckedCreateWithoutFollwerInput = {
    id?: number
    followingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationCreateOrConnectWithoutFollwerInput = {
    where: TwitterUserRelationWhereUniqueInput
    create: XOR<TwitterUserRelationCreateWithoutFollwerInput, TwitterUserRelationUncheckedCreateWithoutFollwerInput>
  }

  export type TwitterUserRelationCreateManyFollwerInputEnvelope = {
    data: Enumerable<TwitterUserRelationCreateManyFollwerInput>
    skipDuplicates?: boolean
  }

  export type TwitterUserRelationCreateWithoutFollowingInput = {
    follwer: TwitterUserCreateNestedOneWithoutFollwersInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUncheckedCreateWithoutFollowingInput = {
    id?: number
    followerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationCreateOrConnectWithoutFollowingInput = {
    where: TwitterUserRelationWhereUniqueInput
    create: XOR<TwitterUserRelationCreateWithoutFollowingInput, TwitterUserRelationUncheckedCreateWithoutFollowingInput>
  }

  export type TwitterUserRelationCreateManyFollowingInputEnvelope = {
    data: Enumerable<TwitterUserRelationCreateManyFollowingInput>
    skipDuplicates?: boolean
  }

  export type TwitterPostCreateWithoutUserInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyCreateNestedManyWithoutPostInput
    hashTags?: TwitterHashTagCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutPostInput
    hashTags?: TwitterHashTagUncheckedCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostCreateOrConnectWithoutUserInput = {
    where: TwitterPostWhereUniqueInput
    create: XOR<TwitterPostCreateWithoutUserInput, TwitterPostUncheckedCreateWithoutUserInput>
  }

  export type TwitterPostCreateManyUserInputEnvelope = {
    data: Enumerable<TwitterPostCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TwitterReplyCreateWithoutUserInput = {
    message: string
    post: TwitterPostCreateNestedOneWithoutTwitterRepliesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUncheckedCreateWithoutUserInput = {
    id?: number
    message: string
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyCreateOrConnectWithoutUserInput = {
    where: TwitterReplyWhereUniqueInput
    create: XOR<TwitterReplyCreateWithoutUserInput, TwitterReplyUncheckedCreateWithoutUserInput>
  }

  export type TwitterReplyCreateManyUserInputEnvelope = {
    data: Enumerable<TwitterReplyCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TwitterDMCreateWithoutDirectFromInput = {
    message: string
    directTo: TwitterUserCreateNestedOneWithoutDirectToesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMUncheckedCreateWithoutDirectFromInput = {
    id?: number
    message: string
    directToId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMCreateOrConnectWithoutDirectFromInput = {
    where: TwitterDMWhereUniqueInput
    create: XOR<TwitterDMCreateWithoutDirectFromInput, TwitterDMUncheckedCreateWithoutDirectFromInput>
  }

  export type TwitterDMCreateManyDirectFromInputEnvelope = {
    data: Enumerable<TwitterDMCreateManyDirectFromInput>
    skipDuplicates?: boolean
  }

  export type TwitterDMCreateWithoutDirectToInput = {
    message: string
    directFrom: TwitterUserCreateNestedOneWithoutDirectFromsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMUncheckedCreateWithoutDirectToInput = {
    id?: number
    message: string
    directFromId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMCreateOrConnectWithoutDirectToInput = {
    where: TwitterDMWhereUniqueInput
    create: XOR<TwitterDMCreateWithoutDirectToInput, TwitterDMUncheckedCreateWithoutDirectToInput>
  }

  export type TwitterDMCreateManyDirectToInputEnvelope = {
    data: Enumerable<TwitterDMCreateManyDirectToInput>
    skipDuplicates?: boolean
  }

  export type TwitterUserRelationUpsertWithWhereUniqueWithoutFollwerInput = {
    where: TwitterUserRelationWhereUniqueInput
    update: XOR<TwitterUserRelationUpdateWithoutFollwerInput, TwitterUserRelationUncheckedUpdateWithoutFollwerInput>
    create: XOR<TwitterUserRelationCreateWithoutFollwerInput, TwitterUserRelationUncheckedCreateWithoutFollwerInput>
  }

  export type TwitterUserRelationUpdateWithWhereUniqueWithoutFollwerInput = {
    where: TwitterUserRelationWhereUniqueInput
    data: XOR<TwitterUserRelationUpdateWithoutFollwerInput, TwitterUserRelationUncheckedUpdateWithoutFollwerInput>
  }

  export type TwitterUserRelationUpdateManyWithWhereWithoutFollwerInput = {
    where: TwitterUserRelationScalarWhereInput
    data: XOR<TwitterUserRelationUpdateManyMutationInput, TwitterUserRelationUncheckedUpdateManyWithoutFollwersInput>
  }

  export type TwitterUserRelationScalarWhereInput = {
    AND?: Enumerable<TwitterUserRelationScalarWhereInput>
    OR?: Enumerable<TwitterUserRelationScalarWhereInput>
    NOT?: Enumerable<TwitterUserRelationScalarWhereInput>
    id?: IntFilter | number
    followerId?: IntFilter | number
    followingId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterUserRelationUpsertWithWhereUniqueWithoutFollowingInput = {
    where: TwitterUserRelationWhereUniqueInput
    update: XOR<TwitterUserRelationUpdateWithoutFollowingInput, TwitterUserRelationUncheckedUpdateWithoutFollowingInput>
    create: XOR<TwitterUserRelationCreateWithoutFollowingInput, TwitterUserRelationUncheckedCreateWithoutFollowingInput>
  }

  export type TwitterUserRelationUpdateWithWhereUniqueWithoutFollowingInput = {
    where: TwitterUserRelationWhereUniqueInput
    data: XOR<TwitterUserRelationUpdateWithoutFollowingInput, TwitterUserRelationUncheckedUpdateWithoutFollowingInput>
  }

  export type TwitterUserRelationUpdateManyWithWhereWithoutFollowingInput = {
    where: TwitterUserRelationScalarWhereInput
    data: XOR<TwitterUserRelationUpdateManyMutationInput, TwitterUserRelationUncheckedUpdateManyWithoutFollowingsInput>
  }

  export type TwitterPostUpsertWithWhereUniqueWithoutUserInput = {
    where: TwitterPostWhereUniqueInput
    update: XOR<TwitterPostUpdateWithoutUserInput, TwitterPostUncheckedUpdateWithoutUserInput>
    create: XOR<TwitterPostCreateWithoutUserInput, TwitterPostUncheckedCreateWithoutUserInput>
  }

  export type TwitterPostUpdateWithWhereUniqueWithoutUserInput = {
    where: TwitterPostWhereUniqueInput
    data: XOR<TwitterPostUpdateWithoutUserInput, TwitterPostUncheckedUpdateWithoutUserInput>
  }

  export type TwitterPostUpdateManyWithWhereWithoutUserInput = {
    where: TwitterPostScalarWhereInput
    data: XOR<TwitterPostUpdateManyMutationInput, TwitterPostUncheckedUpdateManyWithoutTwitterPostsInput>
  }

  export type TwitterPostScalarWhereInput = {
    AND?: Enumerable<TwitterPostScalarWhereInput>
    OR?: Enumerable<TwitterPostScalarWhereInput>
    NOT?: Enumerable<TwitterPostScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    postByUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterReplyUpsertWithWhereUniqueWithoutUserInput = {
    where: TwitterReplyWhereUniqueInput
    update: XOR<TwitterReplyUpdateWithoutUserInput, TwitterReplyUncheckedUpdateWithoutUserInput>
    create: XOR<TwitterReplyCreateWithoutUserInput, TwitterReplyUncheckedCreateWithoutUserInput>
  }

  export type TwitterReplyUpdateWithWhereUniqueWithoutUserInput = {
    where: TwitterReplyWhereUniqueInput
    data: XOR<TwitterReplyUpdateWithoutUserInput, TwitterReplyUncheckedUpdateWithoutUserInput>
  }

  export type TwitterReplyUpdateManyWithWhereWithoutUserInput = {
    where: TwitterReplyScalarWhereInput
    data: XOR<TwitterReplyUpdateManyMutationInput, TwitterReplyUncheckedUpdateManyWithoutTwitterRepliesInput>
  }

  export type TwitterReplyScalarWhereInput = {
    AND?: Enumerable<TwitterReplyScalarWhereInput>
    OR?: Enumerable<TwitterReplyScalarWhereInput>
    NOT?: Enumerable<TwitterReplyScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    postId?: IntFilter | number
    postByUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterDMUpsertWithWhereUniqueWithoutDirectFromInput = {
    where: TwitterDMWhereUniqueInput
    update: XOR<TwitterDMUpdateWithoutDirectFromInput, TwitterDMUncheckedUpdateWithoutDirectFromInput>
    create: XOR<TwitterDMCreateWithoutDirectFromInput, TwitterDMUncheckedCreateWithoutDirectFromInput>
  }

  export type TwitterDMUpdateWithWhereUniqueWithoutDirectFromInput = {
    where: TwitterDMWhereUniqueInput
    data: XOR<TwitterDMUpdateWithoutDirectFromInput, TwitterDMUncheckedUpdateWithoutDirectFromInput>
  }

  export type TwitterDMUpdateManyWithWhereWithoutDirectFromInput = {
    where: TwitterDMScalarWhereInput
    data: XOR<TwitterDMUpdateManyMutationInput, TwitterDMUncheckedUpdateManyWithoutDirectFromsInput>
  }

  export type TwitterDMScalarWhereInput = {
    AND?: Enumerable<TwitterDMScalarWhereInput>
    OR?: Enumerable<TwitterDMScalarWhereInput>
    NOT?: Enumerable<TwitterDMScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    directFromId?: IntFilter | number
    directToId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterDMUpsertWithWhereUniqueWithoutDirectToInput = {
    where: TwitterDMWhereUniqueInput
    update: XOR<TwitterDMUpdateWithoutDirectToInput, TwitterDMUncheckedUpdateWithoutDirectToInput>
    create: XOR<TwitterDMCreateWithoutDirectToInput, TwitterDMUncheckedCreateWithoutDirectToInput>
  }

  export type TwitterDMUpdateWithWhereUniqueWithoutDirectToInput = {
    where: TwitterDMWhereUniqueInput
    data: XOR<TwitterDMUpdateWithoutDirectToInput, TwitterDMUncheckedUpdateWithoutDirectToInput>
  }

  export type TwitterDMUpdateManyWithWhereWithoutDirectToInput = {
    where: TwitterDMScalarWhereInput
    data: XOR<TwitterDMUpdateManyMutationInput, TwitterDMUncheckedUpdateManyWithoutDirectToesInput>
  }

  export type TwitterUserCreateWithoutFollwersInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateWithoutFollwersInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserCreateOrConnectWithoutFollwersInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutFollwersInput, TwitterUserUncheckedCreateWithoutFollwersInput>
  }

  export type TwitterUserCreateWithoutFollowingsInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateWithoutFollowingsInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserCreateOrConnectWithoutFollowingsInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutFollowingsInput, TwitterUserUncheckedCreateWithoutFollowingsInput>
  }

  export type TwitterUserUpsertWithoutFollwersInput = {
    update: XOR<TwitterUserUpdateWithoutFollwersInput, TwitterUserUncheckedUpdateWithoutFollwersInput>
    create: XOR<TwitterUserCreateWithoutFollwersInput, TwitterUserUncheckedCreateWithoutFollwersInput>
  }

  export type TwitterUserUpdateWithoutFollwersInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutFollwersInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUpsertWithoutFollowingsInput = {
    update: XOR<TwitterUserUpdateWithoutFollowingsInput, TwitterUserUncheckedUpdateWithoutFollowingsInput>
    create: XOR<TwitterUserCreateWithoutFollowingsInput, TwitterUserUncheckedCreateWithoutFollowingsInput>
  }

  export type TwitterUserUpdateWithoutFollowingsInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutFollowingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserCreateWithoutTwitterPostsInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateWithoutTwitterPostsInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserCreateOrConnectWithoutTwitterPostsInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutTwitterPostsInput, TwitterUserUncheckedCreateWithoutTwitterPostsInput>
  }

  export type TwitterReplyCreateWithoutPostInput = {
    message: string
    user: TwitterUserCreateNestedOneWithoutTwitterRepliesInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUncheckedCreateWithoutPostInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyCreateOrConnectWithoutPostInput = {
    where: TwitterReplyWhereUniqueInput
    create: XOR<TwitterReplyCreateWithoutPostInput, TwitterReplyUncheckedCreateWithoutPostInput>
  }

  export type TwitterReplyCreateManyPostInputEnvelope = {
    data: Enumerable<TwitterReplyCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type TwitterHashTagCreateWithoutPostsInput = {
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterHashTagUncheckedCreateWithoutPostsInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterHashTagCreateOrConnectWithoutPostsInput = {
    where: TwitterHashTagWhereUniqueInput
    create: XOR<TwitterHashTagCreateWithoutPostsInput, TwitterHashTagUncheckedCreateWithoutPostsInput>
  }

  export type TwitterUserUpsertWithoutTwitterPostsInput = {
    update: XOR<TwitterUserUpdateWithoutTwitterPostsInput, TwitterUserUncheckedUpdateWithoutTwitterPostsInput>
    create: XOR<TwitterUserCreateWithoutTwitterPostsInput, TwitterUserUncheckedCreateWithoutTwitterPostsInput>
  }

  export type TwitterUserUpdateWithoutTwitterPostsInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutTwitterPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterReplyUpsertWithWhereUniqueWithoutPostInput = {
    where: TwitterReplyWhereUniqueInput
    update: XOR<TwitterReplyUpdateWithoutPostInput, TwitterReplyUncheckedUpdateWithoutPostInput>
    create: XOR<TwitterReplyCreateWithoutPostInput, TwitterReplyUncheckedCreateWithoutPostInput>
  }

  export type TwitterReplyUpdateWithWhereUniqueWithoutPostInput = {
    where: TwitterReplyWhereUniqueInput
    data: XOR<TwitterReplyUpdateWithoutPostInput, TwitterReplyUncheckedUpdateWithoutPostInput>
  }

  export type TwitterReplyUpdateManyWithWhereWithoutPostInput = {
    where: TwitterReplyScalarWhereInput
    data: XOR<TwitterReplyUpdateManyMutationInput, TwitterReplyUncheckedUpdateManyWithoutTwitterRepliesInput>
  }

  export type TwitterHashTagUpsertWithWhereUniqueWithoutPostsInput = {
    where: TwitterHashTagWhereUniqueInput
    update: XOR<TwitterHashTagUpdateWithoutPostsInput, TwitterHashTagUncheckedUpdateWithoutPostsInput>
    create: XOR<TwitterHashTagCreateWithoutPostsInput, TwitterHashTagUncheckedCreateWithoutPostsInput>
  }

  export type TwitterHashTagUpdateWithWhereUniqueWithoutPostsInput = {
    where: TwitterHashTagWhereUniqueInput
    data: XOR<TwitterHashTagUpdateWithoutPostsInput, TwitterHashTagUncheckedUpdateWithoutPostsInput>
  }

  export type TwitterHashTagUpdateManyWithWhereWithoutPostsInput = {
    where: TwitterHashTagScalarWhereInput
    data: XOR<TwitterHashTagUpdateManyMutationInput, TwitterHashTagUncheckedUpdateManyWithoutHashTagsInput>
  }

  export type TwitterHashTagScalarWhereInput = {
    AND?: Enumerable<TwitterHashTagScalarWhereInput>
    OR?: Enumerable<TwitterHashTagScalarWhereInput>
    NOT?: Enumerable<TwitterHashTagScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type TwitterPostCreateWithoutHashTagsInput = {
    message: string
    user: TwitterUserCreateNestedOneWithoutTwitterPostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyCreateNestedManyWithoutPostInput
  }

  export type TwitterPostUncheckedCreateWithoutHashTagsInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutPostInput
  }

  export type TwitterPostCreateOrConnectWithoutHashTagsInput = {
    where: TwitterPostWhereUniqueInput
    create: XOR<TwitterPostCreateWithoutHashTagsInput, TwitterPostUncheckedCreateWithoutHashTagsInput>
  }

  export type TwitterPostUpsertWithWhereUniqueWithoutHashTagsInput = {
    where: TwitterPostWhereUniqueInput
    update: XOR<TwitterPostUpdateWithoutHashTagsInput, TwitterPostUncheckedUpdateWithoutHashTagsInput>
    create: XOR<TwitterPostCreateWithoutHashTagsInput, TwitterPostUncheckedCreateWithoutHashTagsInput>
  }

  export type TwitterPostUpdateWithWhereUniqueWithoutHashTagsInput = {
    where: TwitterPostWhereUniqueInput
    data: XOR<TwitterPostUpdateWithoutHashTagsInput, TwitterPostUncheckedUpdateWithoutHashTagsInput>
  }

  export type TwitterPostUpdateManyWithWhereWithoutHashTagsInput = {
    where: TwitterPostScalarWhereInput
    data: XOR<TwitterPostUpdateManyMutationInput, TwitterPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type TwitterPostCreateWithoutTwitterRepliesInput = {
    message: string
    user: TwitterUserCreateNestedOneWithoutTwitterPostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
    hashTags?: TwitterHashTagCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostUncheckedCreateWithoutTwitterRepliesInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashTags?: TwitterHashTagUncheckedCreateNestedManyWithoutPostsInput
  }

  export type TwitterPostCreateOrConnectWithoutTwitterRepliesInput = {
    where: TwitterPostWhereUniqueInput
    create: XOR<TwitterPostCreateWithoutTwitterRepliesInput, TwitterPostUncheckedCreateWithoutTwitterRepliesInput>
  }

  export type TwitterUserCreateWithoutTwitterRepliesInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateWithoutTwitterRepliesInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserCreateOrConnectWithoutTwitterRepliesInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutTwitterRepliesInput, TwitterUserUncheckedCreateWithoutTwitterRepliesInput>
  }

  export type TwitterPostUpsertWithoutTwitterRepliesInput = {
    update: XOR<TwitterPostUpdateWithoutTwitterRepliesInput, TwitterPostUncheckedUpdateWithoutTwitterRepliesInput>
    create: XOR<TwitterPostCreateWithoutTwitterRepliesInput, TwitterPostUncheckedCreateWithoutTwitterRepliesInput>
  }

  export type TwitterPostUpdateWithoutTwitterRepliesInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: TwitterUserUpdateOneRequiredWithoutTwitterPostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTags?: TwitterHashTagUpdateManyWithoutPostsNestedInput
  }

  export type TwitterPostUncheckedUpdateWithoutTwitterRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashTags?: TwitterHashTagUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type TwitterUserUpsertWithoutTwitterRepliesInput = {
    update: XOR<TwitterUserUpdateWithoutTwitterRepliesInput, TwitterUserUncheckedUpdateWithoutTwitterRepliesInput>
    create: XOR<TwitterUserCreateWithoutTwitterRepliesInput, TwitterUserUncheckedCreateWithoutTwitterRepliesInput>
  }

  export type TwitterUserUpdateWithoutTwitterRepliesInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutTwitterRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserCreateWithoutDirectFromsInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directToes?: TwitterDMCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserUncheckedCreateWithoutDirectFromsInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directToes?: TwitterDMUncheckedCreateNestedManyWithoutDirectToInput
  }

  export type TwitterUserCreateOrConnectWithoutDirectFromsInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutDirectFromsInput, TwitterUserUncheckedCreateWithoutDirectFromsInput>
  }

  export type TwitterUserCreateWithoutDirectToesInput = {
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMCreateNestedManyWithoutDirectFromInput
  }

  export type TwitterUserUncheckedCreateWithoutDirectToesInput = {
    id?: number
    image: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    follwers?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollwerInput
    followings?: TwitterUserRelationUncheckedCreateNestedManyWithoutFollowingInput
    twitterPosts?: TwitterPostUncheckedCreateNestedManyWithoutUserInput
    twitterReplies?: TwitterReplyUncheckedCreateNestedManyWithoutUserInput
    directFroms?: TwitterDMUncheckedCreateNestedManyWithoutDirectFromInput
  }

  export type TwitterUserCreateOrConnectWithoutDirectToesInput = {
    where: TwitterUserWhereUniqueInput
    create: XOR<TwitterUserCreateWithoutDirectToesInput, TwitterUserUncheckedCreateWithoutDirectToesInput>
  }

  export type TwitterUserUpsertWithoutDirectFromsInput = {
    update: XOR<TwitterUserUpdateWithoutDirectFromsInput, TwitterUserUncheckedUpdateWithoutDirectFromsInput>
    create: XOR<TwitterUserCreateWithoutDirectFromsInput, TwitterUserUncheckedCreateWithoutDirectFromsInput>
  }

  export type TwitterUserUpdateWithoutDirectFromsInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directToes?: TwitterDMUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutDirectFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directToes?: TwitterDMUncheckedUpdateManyWithoutDirectToNestedInput
  }

  export type TwitterUserUpsertWithoutDirectToesInput = {
    update: XOR<TwitterUserUpdateWithoutDirectToesInput, TwitterUserUncheckedUpdateWithoutDirectToesInput>
    create: XOR<TwitterUserCreateWithoutDirectToesInput, TwitterUserUncheckedCreateWithoutDirectToesInput>
  }

  export type TwitterUserUpdateWithoutDirectToesInput = {
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUpdateManyWithoutDirectFromNestedInput
  }

  export type TwitterUserUncheckedUpdateWithoutDirectToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    follwers?: TwitterUserRelationUncheckedUpdateManyWithoutFollwerNestedInput
    followings?: TwitterUserRelationUncheckedUpdateManyWithoutFollowingNestedInput
    twitterPosts?: TwitterPostUncheckedUpdateManyWithoutUserNestedInput
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutUserNestedInput
    directFroms?: TwitterDMUncheckedUpdateManyWithoutDirectFromNestedInput
  }

  export type YoutubeChanelToUserPermissionCreateWithoutUserInput = {
    chanel: YoutubeChanelCreateNestedOneWithoutChanelToUserPermissionsInput
    permission: YoutubeChanelPermissionCreateNestedOneWithoutChanelToUserPermissionsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput = {
    id?: number
    chanelId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionCreateOrConnectWithoutUserInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutUserInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>
  }

  export type YoutubeChanelToUserPermissionCreateManyUserInputEnvelope = {
    data: Enumerable<YoutubeChanelToUserPermissionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubePostCreateWithoutPosterUserInput = {
    video: string
    name: string
    description: string
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateWithoutPosterUserInput = {
    id?: number
    video: string
    name: string
    description: string
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostCreateOrConnectWithoutPosterUserInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutPosterUserInput, YoutubePostUncheckedCreateWithoutPosterUserInput>
  }

  export type YoutubePostCreateManyPosterUserInputEnvelope = {
    data: Enumerable<YoutubePostCreateManyPosterUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubeCommentCreateWithoutCommentByUserInput = {
    message: string
    post: YoutubePostCreateNestedOneWithoutCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentUncheckedCreateWithoutCommentByUserInput = {
    id?: number
    message: string
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentCreateOrConnectWithoutCommentByUserInput = {
    where: YoutubeCommentWhereUniqueInput
    create: XOR<YoutubeCommentCreateWithoutCommentByUserInput, YoutubeCommentUncheckedCreateWithoutCommentByUserInput>
  }

  export type YoutubeCommentCreateManyCommentByUserInputEnvelope = {
    data: Enumerable<YoutubeCommentCreateManyCommentByUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikePostCreateWithoutLikeByUserInput = {
    post: YoutubePostCreateNestedOneWithoutLikePostsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUncheckedCreateWithoutLikeByUserInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostCreateOrConnectWithoutLikeByUserInput = {
    where: YoutubeLikePostWhereUniqueInput
    create: XOR<YoutubeLikePostCreateWithoutLikeByUserInput, YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>
  }

  export type YoutubeLikePostCreateManyLikeByUserInputEnvelope = {
    data: Enumerable<YoutubeLikePostCreateManyLikeByUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikeCommentCreateWithoutLikeByUserInput = {
    comment: YoutubePostCreateNestedOneWithoutLikeCommentsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput = {
    id?: number
    commentId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateOrConnectWithoutLikeByUserInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    create: XOR<YoutubeLikeCommentCreateWithoutLikeByUserInput, YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>
  }

  export type YoutubeLikeCommentCreateManyLikeByUserInputEnvelope = {
    data: Enumerable<YoutubeLikeCommentCreateManyLikeByUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubeSubcriberCreateWithoutFromUserInput = {
    toChanel: YoutubeChanelCreateNestedOneWithoutSubcribersInput
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberUncheckedCreateWithoutFromUserInput = {
    id?: number
    toChanelId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberCreateOrConnectWithoutFromUserInput = {
    where: YoutubeSubcriberWhereUniqueInput
    create: XOR<YoutubeSubcriberCreateWithoutFromUserInput, YoutubeSubcriberUncheckedCreateWithoutFromUserInput>
  }

  export type YoutubeSubcriberCreateManyFromUserInputEnvelope = {
    data: Enumerable<YoutubeSubcriberCreateManyFromUserInput>
    skipDuplicates?: boolean
  }

  export type YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    update: XOR<YoutubeChanelToUserPermissionUpdateWithoutUserInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutUserInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutUserInput>
  }

  export type YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    data: XOR<YoutubeChanelToUserPermissionUpdateWithoutUserInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: YoutubeChanelToUserPermissionScalarWhereInput
    data: XOR<YoutubeChanelToUserPermissionUpdateManyMutationInput, YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelToUserPermissionScalarWhereInput = {
    AND?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
    OR?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
    NOT?: Enumerable<YoutubeChanelToUserPermissionScalarWhereInput>
    id?: IntFilter | number
    chanelId?: IntFilter | number
    UserId?: IntFilter | number
    permissionId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubePostUpsertWithWhereUniqueWithoutPosterUserInput = {
    where: YoutubePostWhereUniqueInput
    update: XOR<YoutubePostUpdateWithoutPosterUserInput, YoutubePostUncheckedUpdateWithoutPosterUserInput>
    create: XOR<YoutubePostCreateWithoutPosterUserInput, YoutubePostUncheckedCreateWithoutPosterUserInput>
  }

  export type YoutubePostUpdateWithWhereUniqueWithoutPosterUserInput = {
    where: YoutubePostWhereUniqueInput
    data: XOR<YoutubePostUpdateWithoutPosterUserInput, YoutubePostUncheckedUpdateWithoutPosterUserInput>
  }

  export type YoutubePostUpdateManyWithWhereWithoutPosterUserInput = {
    where: YoutubePostScalarWhereInput
    data: XOR<YoutubePostUpdateManyMutationInput, YoutubePostUncheckedUpdateManyWithoutPostsInput>
  }

  export type YoutubePostScalarWhereInput = {
    AND?: Enumerable<YoutubePostScalarWhereInput>
    OR?: Enumerable<YoutubePostScalarWhereInput>
    NOT?: Enumerable<YoutubePostScalarWhereInput>
    id?: IntFilter | number
    video?: StringFilter | string
    name?: StringFilter | string
    description?: StringFilter | string
    posterUserId?: IntFilter | number
    chanelId?: IntFilter | number
    isShared?: BoolFilter | boolean
    shareFromPostId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeCommentUpsertWithWhereUniqueWithoutCommentByUserInput = {
    where: YoutubeCommentWhereUniqueInput
    update: XOR<YoutubeCommentUpdateWithoutCommentByUserInput, YoutubeCommentUncheckedUpdateWithoutCommentByUserInput>
    create: XOR<YoutubeCommentCreateWithoutCommentByUserInput, YoutubeCommentUncheckedCreateWithoutCommentByUserInput>
  }

  export type YoutubeCommentUpdateWithWhereUniqueWithoutCommentByUserInput = {
    where: YoutubeCommentWhereUniqueInput
    data: XOR<YoutubeCommentUpdateWithoutCommentByUserInput, YoutubeCommentUncheckedUpdateWithoutCommentByUserInput>
  }

  export type YoutubeCommentUpdateManyWithWhereWithoutCommentByUserInput = {
    where: YoutubeCommentScalarWhereInput
    data: XOR<YoutubeCommentUpdateManyMutationInput, YoutubeCommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type YoutubeCommentScalarWhereInput = {
    AND?: Enumerable<YoutubeCommentScalarWhereInput>
    OR?: Enumerable<YoutubeCommentScalarWhereInput>
    NOT?: Enumerable<YoutubeCommentScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    commentByUserId?: IntFilter | number
    postId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeLikePostUpsertWithWhereUniqueWithoutLikeByUserInput = {
    where: YoutubeLikePostWhereUniqueInput
    update: XOR<YoutubeLikePostUpdateWithoutLikeByUserInput, YoutubeLikePostUncheckedUpdateWithoutLikeByUserInput>
    create: XOR<YoutubeLikePostCreateWithoutLikeByUserInput, YoutubeLikePostUncheckedCreateWithoutLikeByUserInput>
  }

  export type YoutubeLikePostUpdateWithWhereUniqueWithoutLikeByUserInput = {
    where: YoutubeLikePostWhereUniqueInput
    data: XOR<YoutubeLikePostUpdateWithoutLikeByUserInput, YoutubeLikePostUncheckedUpdateWithoutLikeByUserInput>
  }

  export type YoutubeLikePostUpdateManyWithWhereWithoutLikeByUserInput = {
    where: YoutubeLikePostScalarWhereInput
    data: XOR<YoutubeLikePostUpdateManyMutationInput, YoutubeLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type YoutubeLikePostScalarWhereInput = {
    AND?: Enumerable<YoutubeLikePostScalarWhereInput>
    OR?: Enumerable<YoutubeLikePostScalarWhereInput>
    NOT?: Enumerable<YoutubeLikePostScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    likeByUserId?: IntFilter | number
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeByUserInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    update: XOR<YoutubeLikeCommentUpdateWithoutLikeByUserInput, YoutubeLikeCommentUncheckedUpdateWithoutLikeByUserInput>
    create: XOR<YoutubeLikeCommentCreateWithoutLikeByUserInput, YoutubeLikeCommentUncheckedCreateWithoutLikeByUserInput>
  }

  export type YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeByUserInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    data: XOR<YoutubeLikeCommentUpdateWithoutLikeByUserInput, YoutubeLikeCommentUncheckedUpdateWithoutLikeByUserInput>
  }

  export type YoutubeLikeCommentUpdateManyWithWhereWithoutLikeByUserInput = {
    where: YoutubeLikeCommentScalarWhereInput
    data: XOR<YoutubeLikeCommentUpdateManyMutationInput, YoutubeLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type YoutubeLikeCommentScalarWhereInput = {
    AND?: Enumerable<YoutubeLikeCommentScalarWhereInput>
    OR?: Enumerable<YoutubeLikeCommentScalarWhereInput>
    NOT?: Enumerable<YoutubeLikeCommentScalarWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    likeByUserId?: IntFilter | number
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeSubcriberUpsertWithWhereUniqueWithoutFromUserInput = {
    where: YoutubeSubcriberWhereUniqueInput
    update: XOR<YoutubeSubcriberUpdateWithoutFromUserInput, YoutubeSubcriberUncheckedUpdateWithoutFromUserInput>
    create: XOR<YoutubeSubcriberCreateWithoutFromUserInput, YoutubeSubcriberUncheckedCreateWithoutFromUserInput>
  }

  export type YoutubeSubcriberUpdateWithWhereUniqueWithoutFromUserInput = {
    where: YoutubeSubcriberWhereUniqueInput
    data: XOR<YoutubeSubcriberUpdateWithoutFromUserInput, YoutubeSubcriberUncheckedUpdateWithoutFromUserInput>
  }

  export type YoutubeSubcriberUpdateManyWithWhereWithoutFromUserInput = {
    where: YoutubeSubcriberScalarWhereInput
    data: XOR<YoutubeSubcriberUpdateManyMutationInput, YoutubeSubcriberUncheckedUpdateManyWithoutSubcribersInput>
  }

  export type YoutubeSubcriberScalarWhereInput = {
    AND?: Enumerable<YoutubeSubcriberScalarWhereInput>
    OR?: Enumerable<YoutubeSubcriberScalarWhereInput>
    NOT?: Enumerable<YoutubeSubcriberScalarWhereInput>
    id?: IntFilter | number
    fromUserId?: IntFilter | number
    toChanelId?: IntFilter | number
    isSupported?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateWithoutPermissionInput = {
    chanel: YoutubeChanelCreateNestedOneWithoutChanelToUserPermissionsInput
    User: YoutubeUserCreateNestedOneWithoutChanelToUserPermissionsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: number
    chanelId: number
    UserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionCreateOrConnectWithoutPermissionInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutPermissionInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type YoutubeChanelToUserPermissionCreateManyPermissionInputEnvelope = {
    data: Enumerable<YoutubeChanelToUserPermissionCreateManyPermissionInput>
    skipDuplicates?: boolean
  }

  export type YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    update: XOR<YoutubeChanelToUserPermissionUpdateWithoutPermissionInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutPermissionInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    data: XOR<YoutubeChanelToUserPermissionUpdateWithoutPermissionInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: YoutubeChanelToUserPermissionScalarWhereInput
    data: XOR<YoutubeChanelToUserPermissionUpdateManyMutationInput, YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelToUserPermissionCreateWithoutChanelInput = {
    User: YoutubeUserCreateNestedOneWithoutChanelToUserPermissionsInput
    permission: YoutubeChanelPermissionCreateNestedOneWithoutChanelToUserPermissionsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput = {
    id?: number
    UserId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionCreateOrConnectWithoutChanelInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutChanelInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>
  }

  export type YoutubeChanelToUserPermissionCreateManyChanelInputEnvelope = {
    data: Enumerable<YoutubeChanelToUserPermissionCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type YoutubePostCreateWithoutChanelInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateWithoutChanelInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostCreateOrConnectWithoutChanelInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutChanelInput, YoutubePostUncheckedCreateWithoutChanelInput>
  }

  export type YoutubePostCreateManyChanelInputEnvelope = {
    data: Enumerable<YoutubePostCreateManyChanelInput>
    skipDuplicates?: boolean
  }

  export type YoutubeSubcriberCreateWithoutToChanelInput = {
    fromUser: YoutubeUserCreateNestedOneWithoutSubcribersInput
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberUncheckedCreateWithoutToChanelInput = {
    id?: number
    fromUserId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberCreateOrConnectWithoutToChanelInput = {
    where: YoutubeSubcriberWhereUniqueInput
    create: XOR<YoutubeSubcriberCreateWithoutToChanelInput, YoutubeSubcriberUncheckedCreateWithoutToChanelInput>
  }

  export type YoutubeSubcriberCreateManyToChanelInputEnvelope = {
    data: Enumerable<YoutubeSubcriberCreateManyToChanelInput>
    skipDuplicates?: boolean
  }

  export type YoutubeChanelToUserPermissionUpsertWithWhereUniqueWithoutChanelInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    update: XOR<YoutubeChanelToUserPermissionUpdateWithoutChanelInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutChanelInput>
    create: XOR<YoutubeChanelToUserPermissionCreateWithoutChanelInput, YoutubeChanelToUserPermissionUncheckedCreateWithoutChanelInput>
  }

  export type YoutubeChanelToUserPermissionUpdateWithWhereUniqueWithoutChanelInput = {
    where: YoutubeChanelToUserPermissionWhereUniqueInput
    data: XOR<YoutubeChanelToUserPermissionUpdateWithoutChanelInput, YoutubeChanelToUserPermissionUncheckedUpdateWithoutChanelInput>
  }

  export type YoutubeChanelToUserPermissionUpdateManyWithWhereWithoutChanelInput = {
    where: YoutubeChanelToUserPermissionScalarWhereInput
    data: XOR<YoutubeChanelToUserPermissionUpdateManyMutationInput, YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelToUserPermissionsInput>
  }

  export type YoutubePostUpsertWithWhereUniqueWithoutChanelInput = {
    where: YoutubePostWhereUniqueInput
    update: XOR<YoutubePostUpdateWithoutChanelInput, YoutubePostUncheckedUpdateWithoutChanelInput>
    create: XOR<YoutubePostCreateWithoutChanelInput, YoutubePostUncheckedCreateWithoutChanelInput>
  }

  export type YoutubePostUpdateWithWhereUniqueWithoutChanelInput = {
    where: YoutubePostWhereUniqueInput
    data: XOR<YoutubePostUpdateWithoutChanelInput, YoutubePostUncheckedUpdateWithoutChanelInput>
  }

  export type YoutubePostUpdateManyWithWhereWithoutChanelInput = {
    where: YoutubePostScalarWhereInput
    data: XOR<YoutubePostUpdateManyMutationInput, YoutubePostUncheckedUpdateManyWithoutPostsInput>
  }

  export type YoutubeSubcriberUpsertWithWhereUniqueWithoutToChanelInput = {
    where: YoutubeSubcriberWhereUniqueInput
    update: XOR<YoutubeSubcriberUpdateWithoutToChanelInput, YoutubeSubcriberUncheckedUpdateWithoutToChanelInput>
    create: XOR<YoutubeSubcriberCreateWithoutToChanelInput, YoutubeSubcriberUncheckedCreateWithoutToChanelInput>
  }

  export type YoutubeSubcriberUpdateWithWhereUniqueWithoutToChanelInput = {
    where: YoutubeSubcriberWhereUniqueInput
    data: XOR<YoutubeSubcriberUpdateWithoutToChanelInput, YoutubeSubcriberUncheckedUpdateWithoutToChanelInput>
  }

  export type YoutubeSubcriberUpdateManyWithWhereWithoutToChanelInput = {
    where: YoutubeSubcriberScalarWhereInput
    data: XOR<YoutubeSubcriberUpdateManyMutationInput, YoutubeSubcriberUncheckedUpdateManyWithoutSubcribersInput>
  }

  export type YoutubeChanelCreateWithoutChanelToUserPermissionsInput = {
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelUncheckedCreateWithoutChanelToUserPermissionsInput = {
    id?: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostUncheckedCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelCreateOrConnectWithoutChanelToUserPermissionsInput = {
    where: YoutubeChanelWhereUniqueInput
    create: XOR<YoutubeChanelCreateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeUserCreateWithoutChanelToUserPermissionsInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutChanelToUserPermissionsInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutChanelToUserPermissionsInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelPermissionCreateWithoutChanelToUserPermissionsInput = {
    name: YoutubePermissionEnum
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelPermissionUncheckedCreateWithoutChanelToUserPermissionsInput = {
    id?: number
    name: YoutubePermissionEnum
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelPermissionCreateOrConnectWithoutChanelToUserPermissionsInput = {
    where: YoutubeChanelPermissionWhereUniqueInput
    create: XOR<YoutubeChanelPermissionCreateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelUpsertWithoutChanelToUserPermissionsInput = {
    update: XOR<YoutubeChanelUpdateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedUpdateWithoutChanelToUserPermissionsInput>
    create: XOR<YoutubeChanelCreateWithoutChanelToUserPermissionsInput, YoutubeChanelUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelUpdateWithoutChanelToUserPermissionsInput = {
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeChanelUncheckedUpdateWithoutChanelToUserPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUncheckedUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeUserUpsertWithoutChanelToUserPermissionsInput = {
    update: XOR<YoutubeUserUpdateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedUpdateWithoutChanelToUserPermissionsInput>
    create: XOR<YoutubeUserCreateWithoutChanelToUserPermissionsInput, YoutubeUserUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeUserUpdateWithoutChanelToUserPermissionsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutChanelToUserPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeChanelPermissionUpsertWithoutChanelToUserPermissionsInput = {
    update: XOR<YoutubeChanelPermissionUpdateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedUpdateWithoutChanelToUserPermissionsInput>
    create: XOR<YoutubeChanelPermissionCreateWithoutChanelToUserPermissionsInput, YoutubeChanelPermissionUncheckedCreateWithoutChanelToUserPermissionsInput>
  }

  export type YoutubeChanelPermissionUpdateWithoutChanelToUserPermissionsInput = {
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelPermissionUncheckedUpdateWithoutChanelToUserPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: EnumYoutubePermissionEnumFieldUpdateOperationsInput | YoutubePermissionEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostCreateWithoutHashtagsInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateWithoutHashtagsInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostCreateOrConnectWithoutHashtagsInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutHashtagsInput, YoutubePostUncheckedCreateWithoutHashtagsInput>
  }

  export type YoutubePostUpsertWithWhereUniqueWithoutHashtagsInput = {
    where: YoutubePostWhereUniqueInput
    update: XOR<YoutubePostUpdateWithoutHashtagsInput, YoutubePostUncheckedUpdateWithoutHashtagsInput>
    create: XOR<YoutubePostCreateWithoutHashtagsInput, YoutubePostUncheckedCreateWithoutHashtagsInput>
  }

  export type YoutubePostUpdateWithWhereUniqueWithoutHashtagsInput = {
    where: YoutubePostWhereUniqueInput
    data: XOR<YoutubePostUpdateWithoutHashtagsInput, YoutubePostUncheckedUpdateWithoutHashtagsInput>
  }

  export type YoutubePostUpdateManyWithWhereWithoutHashtagsInput = {
    where: YoutubePostScalarWhereInput
    data: XOR<YoutubePostUpdateManyMutationInput, YoutubePostUncheckedUpdateManyWithoutPostsInput>
  }

  export type YoutubeUserCreateWithoutPostsInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutPostsInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutPostsInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutPostsInput, YoutubeUserUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeChanelCreateWithoutPostsInput = {
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelUncheckedCreateWithoutPostsInput = {
    id?: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutChanelInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutToChanelInput
  }

  export type YoutubeChanelCreateOrConnectWithoutPostsInput = {
    where: YoutubeChanelWhereUniqueInput
    create: XOR<YoutubeChanelCreateWithoutPostsInput, YoutubeChanelUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeHashtagCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeHashtagUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeHashtagCreateOrConnectWithoutPostsInput = {
    where: YoutubeHashtagWhereUniqueInput
    create: XOR<YoutubeHashtagCreateWithoutPostsInput, YoutubeHashtagUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeCommentCreateWithoutPostInput = {
    message: string
    commentByUser: YoutubeUserCreateNestedOneWithoutCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentUncheckedCreateWithoutPostInput = {
    id?: number
    message: string
    commentByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentCreateOrConnectWithoutPostInput = {
    where: YoutubeCommentWhereUniqueInput
    create: XOR<YoutubeCommentCreateWithoutPostInput, YoutubeCommentUncheckedCreateWithoutPostInput>
  }

  export type YoutubeCommentCreateManyPostInputEnvelope = {
    data: Enumerable<YoutubeCommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikePostCreateWithoutPostInput = {
    likeByUser: YoutubeUserCreateNestedOneWithoutLikePostsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUncheckedCreateWithoutPostInput = {
    id?: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostCreateOrConnectWithoutPostInput = {
    where: YoutubeLikePostWhereUniqueInput
    create: XOR<YoutubeLikePostCreateWithoutPostInput, YoutubeLikePostUncheckedCreateWithoutPostInput>
  }

  export type YoutubeLikePostCreateManyPostInputEnvelope = {
    data: Enumerable<YoutubeLikePostCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikeCommentCreateWithoutCommentInput = {
    likeByUser: YoutubeUserCreateNestedOneWithoutLikeCommentsInput
    likeType: YoutubeLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUncheckedCreateWithoutCommentInput = {
    id?: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateOrConnectWithoutCommentInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    create: XOR<YoutubeLikeCommentCreateWithoutCommentInput, YoutubeLikeCommentUncheckedCreateWithoutCommentInput>
  }

  export type YoutubeLikeCommentCreateManyCommentInputEnvelope = {
    data: Enumerable<YoutubeLikeCommentCreateManyCommentInput>
    skipDuplicates?: boolean
  }

  export type YoutubeUserUpsertWithoutPostsInput = {
    update: XOR<YoutubeUserUpdateWithoutPostsInput, YoutubeUserUncheckedUpdateWithoutPostsInput>
    create: XOR<YoutubeUserCreateWithoutPostsInput, YoutubeUserUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeUserUpdateWithoutPostsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeChanelUpsertWithoutPostsInput = {
    update: XOR<YoutubeChanelUpdateWithoutPostsInput, YoutubeChanelUncheckedUpdateWithoutPostsInput>
    create: XOR<YoutubeChanelCreateWithoutPostsInput, YoutubeChanelUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeChanelUpdateWithoutPostsInput = {
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeChanelUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutToChanelNestedInput
  }

  export type YoutubeHashtagUpsertWithWhereUniqueWithoutPostsInput = {
    where: YoutubeHashtagWhereUniqueInput
    update: XOR<YoutubeHashtagUpdateWithoutPostsInput, YoutubeHashtagUncheckedUpdateWithoutPostsInput>
    create: XOR<YoutubeHashtagCreateWithoutPostsInput, YoutubeHashtagUncheckedCreateWithoutPostsInput>
  }

  export type YoutubeHashtagUpdateWithWhereUniqueWithoutPostsInput = {
    where: YoutubeHashtagWhereUniqueInput
    data: XOR<YoutubeHashtagUpdateWithoutPostsInput, YoutubeHashtagUncheckedUpdateWithoutPostsInput>
  }

  export type YoutubeHashtagUpdateManyWithWhereWithoutPostsInput = {
    where: YoutubeHashtagScalarWhereInput
    data: XOR<YoutubeHashtagUpdateManyMutationInput, YoutubeHashtagUncheckedUpdateManyWithoutHashtagsInput>
  }

  export type YoutubeHashtagScalarWhereInput = {
    AND?: Enumerable<YoutubeHashtagScalarWhereInput>
    OR?: Enumerable<YoutubeHashtagScalarWhereInput>
    NOT?: Enumerable<YoutubeHashtagScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type YoutubeCommentUpsertWithWhereUniqueWithoutPostInput = {
    where: YoutubeCommentWhereUniqueInput
    update: XOR<YoutubeCommentUpdateWithoutPostInput, YoutubeCommentUncheckedUpdateWithoutPostInput>
    create: XOR<YoutubeCommentCreateWithoutPostInput, YoutubeCommentUncheckedCreateWithoutPostInput>
  }

  export type YoutubeCommentUpdateWithWhereUniqueWithoutPostInput = {
    where: YoutubeCommentWhereUniqueInput
    data: XOR<YoutubeCommentUpdateWithoutPostInput, YoutubeCommentUncheckedUpdateWithoutPostInput>
  }

  export type YoutubeCommentUpdateManyWithWhereWithoutPostInput = {
    where: YoutubeCommentScalarWhereInput
    data: XOR<YoutubeCommentUpdateManyMutationInput, YoutubeCommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type YoutubeLikePostUpsertWithWhereUniqueWithoutPostInput = {
    where: YoutubeLikePostWhereUniqueInput
    update: XOR<YoutubeLikePostUpdateWithoutPostInput, YoutubeLikePostUncheckedUpdateWithoutPostInput>
    create: XOR<YoutubeLikePostCreateWithoutPostInput, YoutubeLikePostUncheckedCreateWithoutPostInput>
  }

  export type YoutubeLikePostUpdateWithWhereUniqueWithoutPostInput = {
    where: YoutubeLikePostWhereUniqueInput
    data: XOR<YoutubeLikePostUpdateWithoutPostInput, YoutubeLikePostUncheckedUpdateWithoutPostInput>
  }

  export type YoutubeLikePostUpdateManyWithWhereWithoutPostInput = {
    where: YoutubeLikePostScalarWhereInput
    data: XOR<YoutubeLikePostUpdateManyMutationInput, YoutubeLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type YoutubeLikeCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    update: XOR<YoutubeLikeCommentUpdateWithoutCommentInput, YoutubeLikeCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<YoutubeLikeCommentCreateWithoutCommentInput, YoutubeLikeCommentUncheckedCreateWithoutCommentInput>
  }

  export type YoutubeLikeCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    data: XOR<YoutubeLikeCommentUpdateWithoutCommentInput, YoutubeLikeCommentUncheckedUpdateWithoutCommentInput>
  }

  export type YoutubeLikeCommentUpdateManyWithWhereWithoutCommentInput = {
    where: YoutubeLikeCommentScalarWhereInput
    data: XOR<YoutubeLikeCommentUpdateManyMutationInput, YoutubeLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type YoutubeUserCreateWithoutCommentsInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutCommentsInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutCommentsInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutCommentsInput, YoutubeUserUncheckedCreateWithoutCommentsInput>
  }

  export type YoutubePostCreateWithoutCommentsInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateWithoutCommentsInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostCreateOrConnectWithoutCommentsInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutCommentsInput, YoutubePostUncheckedCreateWithoutCommentsInput>
  }

  export type YoutubeUserUpsertWithoutCommentsInput = {
    update: XOR<YoutubeUserUpdateWithoutCommentsInput, YoutubeUserUncheckedUpdateWithoutCommentsInput>
    create: XOR<YoutubeUserCreateWithoutCommentsInput, YoutubeUserUncheckedCreateWithoutCommentsInput>
  }

  export type YoutubeUserUpdateWithoutCommentsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubePostUpsertWithoutCommentsInput = {
    update: XOR<YoutubePostUpdateWithoutCommentsInput, YoutubePostUncheckedUpdateWithoutCommentsInput>
    create: XOR<YoutubePostCreateWithoutCommentsInput, YoutubePostUncheckedCreateWithoutCommentsInput>
  }

  export type YoutubePostUpdateWithoutCommentsInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubeLikePostCreateWithoutLikeTypeInput = {
    post: YoutubePostCreateNestedOneWithoutLikePostsInput
    likeByUser: YoutubeUserCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUncheckedCreateWithoutLikeTypeInput = {
    id?: number
    postId: number
    likeByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostCreateOrConnectWithoutLikeTypeInput = {
    where: YoutubeLikePostWhereUniqueInput
    create: XOR<YoutubeLikePostCreateWithoutLikeTypeInput, YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>
  }

  export type YoutubeLikePostCreateManyLikeTypeInputEnvelope = {
    data: Enumerable<YoutubeLikePostCreateManyLikeTypeInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikeCommentCreateWithoutLikeTypeInput = {
    comment: YoutubePostCreateNestedOneWithoutLikeCommentsInput
    likeByUser: YoutubeUserCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput = {
    id?: number
    commentId: number
    likeByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateOrConnectWithoutLikeTypeInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    create: XOR<YoutubeLikeCommentCreateWithoutLikeTypeInput, YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>
  }

  export type YoutubeLikeCommentCreateManyLikeTypeInputEnvelope = {
    data: Enumerable<YoutubeLikeCommentCreateManyLikeTypeInput>
    skipDuplicates?: boolean
  }

  export type YoutubeLikePostUpsertWithWhereUniqueWithoutLikeTypeInput = {
    where: YoutubeLikePostWhereUniqueInput
    update: XOR<YoutubeLikePostUpdateWithoutLikeTypeInput, YoutubeLikePostUncheckedUpdateWithoutLikeTypeInput>
    create: XOR<YoutubeLikePostCreateWithoutLikeTypeInput, YoutubeLikePostUncheckedCreateWithoutLikeTypeInput>
  }

  export type YoutubeLikePostUpdateWithWhereUniqueWithoutLikeTypeInput = {
    where: YoutubeLikePostWhereUniqueInput
    data: XOR<YoutubeLikePostUpdateWithoutLikeTypeInput, YoutubeLikePostUncheckedUpdateWithoutLikeTypeInput>
  }

  export type YoutubeLikePostUpdateManyWithWhereWithoutLikeTypeInput = {
    where: YoutubeLikePostScalarWhereInput
    data: XOR<YoutubeLikePostUpdateManyMutationInput, YoutubeLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type YoutubeLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    update: XOR<YoutubeLikeCommentUpdateWithoutLikeTypeInput, YoutubeLikeCommentUncheckedUpdateWithoutLikeTypeInput>
    create: XOR<YoutubeLikeCommentCreateWithoutLikeTypeInput, YoutubeLikeCommentUncheckedCreateWithoutLikeTypeInput>
  }

  export type YoutubeLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput = {
    where: YoutubeLikeCommentWhereUniqueInput
    data: XOR<YoutubeLikeCommentUpdateWithoutLikeTypeInput, YoutubeLikeCommentUncheckedUpdateWithoutLikeTypeInput>
  }

  export type YoutubeLikeCommentUpdateManyWithWhereWithoutLikeTypeInput = {
    where: YoutubeLikeCommentScalarWhereInput
    data: XOR<YoutubeLikeCommentUpdateManyMutationInput, YoutubeLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type YoutubePostCreateWithoutLikePostsInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostUncheckedCreateWithoutLikePostsInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type YoutubePostCreateOrConnectWithoutLikePostsInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutLikePostsInput, YoutubePostUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubeUserCreateWithoutLikePostsInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutLikePostsInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutLikePostsInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutLikePostsInput, YoutubeUserUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubeLikeTypeCreateWithoutLikePostsInput = {
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeUncheckedCreateWithoutLikePostsInput = {
    id?: number
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeCreateOrConnectWithoutLikePostsInput = {
    where: YoutubeLikeTypeWhereUniqueInput
    create: XOR<YoutubeLikeTypeCreateWithoutLikePostsInput, YoutubeLikeTypeUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubePostUpsertWithoutLikePostsInput = {
    update: XOR<YoutubePostUpdateWithoutLikePostsInput, YoutubePostUncheckedUpdateWithoutLikePostsInput>
    create: XOR<YoutubePostCreateWithoutLikePostsInput, YoutubePostUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubePostUpdateWithoutLikePostsInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubeUserUpsertWithoutLikePostsInput = {
    update: XOR<YoutubeUserUpdateWithoutLikePostsInput, YoutubeUserUncheckedUpdateWithoutLikePostsInput>
    create: XOR<YoutubeUserCreateWithoutLikePostsInput, YoutubeUserUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubeUserUpdateWithoutLikePostsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeLikeTypeUpsertWithoutLikePostsInput = {
    update: XOR<YoutubeLikeTypeUpdateWithoutLikePostsInput, YoutubeLikeTypeUncheckedUpdateWithoutLikePostsInput>
    create: XOR<YoutubeLikeTypeCreateWithoutLikePostsInput, YoutubeLikeTypeUncheckedCreateWithoutLikePostsInput>
  }

  export type YoutubeLikeTypeUpdateWithoutLikePostsInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubeLikeTypeUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubePostCreateWithoutLikeCommentsInput = {
    video: string
    name: string
    description: string
    posterUser: YoutubeUserCreateNestedOneWithoutPostsInput
    chanel: YoutubeChanelCreateNestedOneWithoutPostsInput
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutPostInput
  }

  export type YoutubePostUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: YoutubeHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutPostInput
  }

  export type YoutubePostCreateOrConnectWithoutLikeCommentsInput = {
    where: YoutubePostWhereUniqueInput
    create: XOR<YoutubePostCreateWithoutLikeCommentsInput, YoutubePostUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubeUserCreateWithoutLikeCommentsInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    subcribers?: YoutubeSubcriberUncheckedCreateNestedManyWithoutFromUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutLikeCommentsInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutLikeCommentsInput, YoutubeUserUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubeLikeTypeCreateWithoutLikeCommentsInput = {
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    emoji: string
    name: YoutubeLikeTypeEnum
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type YoutubeLikeTypeCreateOrConnectWithoutLikeCommentsInput = {
    where: YoutubeLikeTypeWhereUniqueInput
    create: XOR<YoutubeLikeTypeCreateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubePostUpsertWithoutLikeCommentsInput = {
    update: XOR<YoutubePostUpdateWithoutLikeCommentsInput, YoutubePostUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<YoutubePostCreateWithoutLikeCommentsInput, YoutubePostUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubePostUpdateWithoutLikeCommentsInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type YoutubeUserUpsertWithoutLikeCommentsInput = {
    update: XOR<YoutubeUserUpdateWithoutLikeCommentsInput, YoutubeUserUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<YoutubeUserCreateWithoutLikeCommentsInput, YoutubeUserUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubeUserUpdateWithoutLikeCommentsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    subcribers?: YoutubeSubcriberUncheckedUpdateManyWithoutFromUserNestedInput
  }

  export type YoutubeLikeTypeUpsertWithoutLikeCommentsInput = {
    update: XOR<YoutubeLikeTypeUpdateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<YoutubeLikeTypeCreateWithoutLikeCommentsInput, YoutubeLikeTypeUncheckedCreateWithoutLikeCommentsInput>
  }

  export type YoutubeLikeTypeUpdateWithoutLikeCommentsInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubeLikeTypeUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: EnumYoutubeLikeTypeEnumFieldUpdateOperationsInput | YoutubeLikeTypeEnum
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type YoutubeUserCreateWithoutSubcribersInput = {
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutUserInput
    posts?: YoutubePostCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentCreateNestedManyWithoutLikeByUserInput
  }

  export type YoutubeUserUncheckedCreateWithoutSubcribersInput = {
    id?: number
    profileImage: string
    email: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutUserInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutPosterUserInput
    comments?: YoutubeCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: YoutubeLikePostUncheckedCreateNestedManyWithoutLikeByUserInput
    likeComments?: YoutubeLikeCommentUncheckedCreateNestedManyWithoutLikeByUserInput
  }

  export type YoutubeUserCreateOrConnectWithoutSubcribersInput = {
    where: YoutubeUserWhereUniqueInput
    create: XOR<YoutubeUserCreateWithoutSubcribersInput, YoutubeUserUncheckedCreateWithoutSubcribersInput>
  }

  export type YoutubeChanelCreateWithoutSubcribersInput = {
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionCreateNestedManyWithoutChanelInput
    posts?: YoutubePostCreateNestedManyWithoutChanelInput
  }

  export type YoutubeChanelUncheckedCreateWithoutSubcribersInput = {
    id?: number
    ChanelImage: string
    coverImage: string
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedCreateNestedManyWithoutChanelInput
    posts?: YoutubePostUncheckedCreateNestedManyWithoutChanelInput
  }

  export type YoutubeChanelCreateOrConnectWithoutSubcribersInput = {
    where: YoutubeChanelWhereUniqueInput
    create: XOR<YoutubeChanelCreateWithoutSubcribersInput, YoutubeChanelUncheckedCreateWithoutSubcribersInput>
  }

  export type YoutubeUserUpsertWithoutSubcribersInput = {
    update: XOR<YoutubeUserUpdateWithoutSubcribersInput, YoutubeUserUncheckedUpdateWithoutSubcribersInput>
    create: XOR<YoutubeUserCreateWithoutSubcribersInput, YoutubeUserUncheckedCreateWithoutSubcribersInput>
  }

  export type YoutubeUserUpdateWithoutSubcribersInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutLikeByUserNestedInput
  }

  export type YoutubeUserUncheckedUpdateWithoutSubcribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutUserNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutPosterUserNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutLikeByUserNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutLikeByUserNestedInput
  }

  export type YoutubeChanelUpsertWithoutSubcribersInput = {
    update: XOR<YoutubeChanelUpdateWithoutSubcribersInput, YoutubeChanelUncheckedUpdateWithoutSubcribersInput>
    create: XOR<YoutubeChanelCreateWithoutSubcribersInput, YoutubeChanelUncheckedCreateWithoutSubcribersInput>
  }

  export type YoutubeChanelUpdateWithoutSubcribersInput = {
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUpdateManyWithoutChanelNestedInput
    posts?: YoutubePostUpdateManyWithoutChanelNestedInput
  }

  export type YoutubeChanelUncheckedUpdateWithoutSubcribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    ChanelImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chanelToUserPermissions?: YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelNestedInput
    posts?: YoutubePostUncheckedUpdateManyWithoutChanelNestedInput
  }

  export type FacebookPostCreateWithoutPosterUserInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutPosterUserInput = {
    id?: number
    message: string
    postTypeId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutPosterUserInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutPosterUserInput, FacebookPostUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookPostCreateManyPosterUserInputEnvelope = {
    data: Enumerable<FacebookPostCreateManyPosterUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookGroupCreateWithoutCreaterUserInput = {
    GroupImage: string
    coverImage: string
    name: string
    memberUsers?: FacebookUserCreateNestedManyWithoutGroupMemberInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupUncheckedCreateWithoutCreaterUserInput = {
    id?: number
    GroupImage: string
    coverImage: string
    name: string
    memberUsers?: FacebookUserUncheckedCreateNestedManyWithoutGroupMemberInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupCreateOrConnectWithoutCreaterUserInput = {
    where: FacebookGroupWhereUniqueInput
    create: XOR<FacebookGroupCreateWithoutCreaterUserInput, FacebookGroupUncheckedCreateWithoutCreaterUserInput>
  }

  export type FacebookGroupCreateManyCreaterUserInputEnvelope = {
    data: Enumerable<FacebookGroupCreateManyCreaterUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookGroupCreateWithoutMemberUsersInput = {
    GroupImage: string
    coverImage: string
    name: string
    createrUser: FacebookUserCreateNestedOneWithoutGroupcreaterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupUncheckedCreateWithoutMemberUsersInput = {
    id?: number
    GroupImage: string
    coverImage: string
    name: string
    createrUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupCreateOrConnectWithoutMemberUsersInput = {
    where: FacebookGroupWhereUniqueInput
    create: XOR<FacebookGroupCreateWithoutMemberUsersInput, FacebookGroupUncheckedCreateWithoutMemberUsersInput>
  }

  export type FacebookCommentCreateWithoutCommentByUserInput = {
    message: string
    post: FacebookPostCreateNestedOneWithoutCommentsInput
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentUncheckedCreateWithoutCommentByUserInput = {
    id?: number
    message: string
    postId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentCreateOrConnectWithoutCommentByUserInput = {
    where: FacebookCommentWhereUniqueInput
    create: XOR<FacebookCommentCreateWithoutCommentByUserInput, FacebookCommentUncheckedCreateWithoutCommentByUserInput>
  }

  export type FacebookCommentCreateManyCommentByUserInputEnvelope = {
    data: Enumerable<FacebookCommentCreateManyCommentByUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikePostCreateWithoutPosterUserInput = {
    post: FacebookPostCreateNestedOneWithoutLikePostsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUncheckedCreateWithoutPosterUserInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostCreateOrConnectWithoutPosterUserInput = {
    where: FacebookLikePostWhereUniqueInput
    create: XOR<FacebookLikePostCreateWithoutPosterUserInput, FacebookLikePostUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookLikePostCreateManyPosterUserInputEnvelope = {
    data: Enumerable<FacebookLikePostCreateManyPosterUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikeCommentCreateWithoutPosterUserInput = {
    comment: FacebookPostCreateNestedOneWithoutLikeCommentsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUncheckedCreateWithoutPosterUserInput = {
    id?: number
    commentId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateOrConnectWithoutPosterUserInput = {
    where: FacebookLikeCommentWhereUniqueInput
    create: XOR<FacebookLikeCommentCreateWithoutPosterUserInput, FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookLikeCommentCreateManyPosterUserInputEnvelope = {
    data: Enumerable<FacebookLikeCommentCreateManyPosterUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookFriendRequestCreateWithoutRequestFromUserInput = {
    requestToUser: FacebookUserCreateNestedOneWithoutFriendRequestToesInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput = {
    id?: number
    requestToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestCreateOrConnectWithoutRequestFromUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    create: XOR<FacebookFriendRequestCreateWithoutRequestFromUserInput, FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>
  }

  export type FacebookFriendRequestCreateManyRequestFromUserInputEnvelope = {
    data: Enumerable<FacebookFriendRequestCreateManyRequestFromUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookFriendRequestCreateWithoutRequestToUserInput = {
    requestFromUser: FacebookUserCreateNestedOneWithoutFriendRequestFromsInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput = {
    id?: number
    requestFromUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestCreateOrConnectWithoutRequestToUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    create: XOR<FacebookFriendRequestCreateWithoutRequestToUserInput, FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>
  }

  export type FacebookFriendRequestCreateManyRequestToUserInputEnvelope = {
    data: Enumerable<FacebookFriendRequestCreateManyRequestToUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookUserRelationCreateWithoutRelationFromUserInput = {
    relationToUser: FacebookUserCreateNestedOneWithoutFriendRelationToesInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput = {
    id?: number
    relationToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationCreateOrConnectWithoutRelationFromUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    create: XOR<FacebookUserRelationCreateWithoutRelationFromUserInput, FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>
  }

  export type FacebookUserRelationCreateManyRelationFromUserInputEnvelope = {
    data: Enumerable<FacebookUserRelationCreateManyRelationFromUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookUserRelationCreateWithoutRelationToUserInput = {
    relationFromUser: FacebookUserCreateNestedOneWithoutFriendRelationFromsInput
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationUncheckedCreateWithoutRelationToUserInput = {
    id?: number
    relationFromUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationCreateOrConnectWithoutRelationToUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    create: XOR<FacebookUserRelationCreateWithoutRelationToUserInput, FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>
  }

  export type FacebookUserRelationCreateManyRelationToUserInputEnvelope = {
    data: Enumerable<FacebookUserRelationCreateManyRelationToUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookMessengerCreateWithoutMessageFromUserInput = {
    message: string
    messageToUser: FacebookUserCreateNestedOneWithoutMessengeToesInput
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerUncheckedCreateWithoutMessageFromUserInput = {
    id?: number
    message: string
    messageToUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerCreateOrConnectWithoutMessageFromUserInput = {
    where: FacebookMessengerWhereUniqueInput
    create: XOR<FacebookMessengerCreateWithoutMessageFromUserInput, FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>
  }

  export type FacebookMessengerCreateManyMessageFromUserInputEnvelope = {
    data: Enumerable<FacebookMessengerCreateManyMessageFromUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookMessengerCreateWithoutMessageToUserInput = {
    message: string
    messageFromUser: FacebookUserCreateNestedOneWithoutMessengeFromsInput
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerUncheckedCreateWithoutMessageToUserInput = {
    id?: number
    message: string
    messageFromUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerCreateOrConnectWithoutMessageToUserInput = {
    where: FacebookMessengerWhereUniqueInput
    create: XOR<FacebookMessengerCreateWithoutMessageToUserInput, FacebookMessengerUncheckedCreateWithoutMessageToUserInput>
  }

  export type FacebookMessengerCreateManyMessageToUserInputEnvelope = {
    data: Enumerable<FacebookMessengerCreateManyMessageToUserInput>
    skipDuplicates?: boolean
  }

  export type FacebookPostUpsertWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookPostWhereUniqueInput
    update: XOR<FacebookPostUpdateWithoutPosterUserInput, FacebookPostUncheckedUpdateWithoutPosterUserInput>
    create: XOR<FacebookPostCreateWithoutPosterUserInput, FacebookPostUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookPostUpdateWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookPostWhereUniqueInput
    data: XOR<FacebookPostUpdateWithoutPosterUserInput, FacebookPostUncheckedUpdateWithoutPosterUserInput>
  }

  export type FacebookPostUpdateManyWithWhereWithoutPosterUserInput = {
    where: FacebookPostScalarWhereInput
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type FacebookPostScalarWhereInput = {
    AND?: Enumerable<FacebookPostScalarWhereInput>
    OR?: Enumerable<FacebookPostScalarWhereInput>
    NOT?: Enumerable<FacebookPostScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    postTypeId?: IntFilter | number
    posterUserId?: IntFilter | number
    locationId?: IntFilter | number
    destinationId?: IntFilter | number
    destinationRelateId?: IntFilter | number
    isShared?: BoolFilter | boolean
    shareFromPostId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookGroupUpsertWithWhereUniqueWithoutCreaterUserInput = {
    where: FacebookGroupWhereUniqueInput
    update: XOR<FacebookGroupUpdateWithoutCreaterUserInput, FacebookGroupUncheckedUpdateWithoutCreaterUserInput>
    create: XOR<FacebookGroupCreateWithoutCreaterUserInput, FacebookGroupUncheckedCreateWithoutCreaterUserInput>
  }

  export type FacebookGroupUpdateWithWhereUniqueWithoutCreaterUserInput = {
    where: FacebookGroupWhereUniqueInput
    data: XOR<FacebookGroupUpdateWithoutCreaterUserInput, FacebookGroupUncheckedUpdateWithoutCreaterUserInput>
  }

  export type FacebookGroupUpdateManyWithWhereWithoutCreaterUserInput = {
    where: FacebookGroupScalarWhereInput
    data: XOR<FacebookGroupUpdateManyMutationInput, FacebookGroupUncheckedUpdateManyWithoutGroupcreaterInput>
  }

  export type FacebookGroupScalarWhereInput = {
    AND?: Enumerable<FacebookGroupScalarWhereInput>
    OR?: Enumerable<FacebookGroupScalarWhereInput>
    NOT?: Enumerable<FacebookGroupScalarWhereInput>
    id?: IntFilter | number
    GroupImage?: StringFilter | string
    coverImage?: StringFilter | string
    name?: StringFilter | string
    createrUserId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookGroupUpsertWithWhereUniqueWithoutMemberUsersInput = {
    where: FacebookGroupWhereUniqueInput
    update: XOR<FacebookGroupUpdateWithoutMemberUsersInput, FacebookGroupUncheckedUpdateWithoutMemberUsersInput>
    create: XOR<FacebookGroupCreateWithoutMemberUsersInput, FacebookGroupUncheckedCreateWithoutMemberUsersInput>
  }

  export type FacebookGroupUpdateWithWhereUniqueWithoutMemberUsersInput = {
    where: FacebookGroupWhereUniqueInput
    data: XOR<FacebookGroupUpdateWithoutMemberUsersInput, FacebookGroupUncheckedUpdateWithoutMemberUsersInput>
  }

  export type FacebookGroupUpdateManyWithWhereWithoutMemberUsersInput = {
    where: FacebookGroupScalarWhereInput
    data: XOR<FacebookGroupUpdateManyMutationInput, FacebookGroupUncheckedUpdateManyWithoutGroupMemberInput>
  }

  export type FacebookCommentUpsertWithWhereUniqueWithoutCommentByUserInput = {
    where: FacebookCommentWhereUniqueInput
    update: XOR<FacebookCommentUpdateWithoutCommentByUserInput, FacebookCommentUncheckedUpdateWithoutCommentByUserInput>
    create: XOR<FacebookCommentCreateWithoutCommentByUserInput, FacebookCommentUncheckedCreateWithoutCommentByUserInput>
  }

  export type FacebookCommentUpdateWithWhereUniqueWithoutCommentByUserInput = {
    where: FacebookCommentWhereUniqueInput
    data: XOR<FacebookCommentUpdateWithoutCommentByUserInput, FacebookCommentUncheckedUpdateWithoutCommentByUserInput>
  }

  export type FacebookCommentUpdateManyWithWhereWithoutCommentByUserInput = {
    where: FacebookCommentScalarWhereInput
    data: XOR<FacebookCommentUpdateManyMutationInput, FacebookCommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type FacebookCommentScalarWhereInput = {
    AND?: Enumerable<FacebookCommentScalarWhereInput>
    OR?: Enumerable<FacebookCommentScalarWhereInput>
    NOT?: Enumerable<FacebookCommentScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    commentByUserId?: IntFilter | number
    postId?: IntFilter | number
    isReplied?: BoolFilter | boolean
    replyFromCommentId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookLikePostUpsertWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookLikePostWhereUniqueInput
    update: XOR<FacebookLikePostUpdateWithoutPosterUserInput, FacebookLikePostUncheckedUpdateWithoutPosterUserInput>
    create: XOR<FacebookLikePostCreateWithoutPosterUserInput, FacebookLikePostUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookLikePostUpdateWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookLikePostWhereUniqueInput
    data: XOR<FacebookLikePostUpdateWithoutPosterUserInput, FacebookLikePostUncheckedUpdateWithoutPosterUserInput>
  }

  export type FacebookLikePostUpdateManyWithWhereWithoutPosterUserInput = {
    where: FacebookLikePostScalarWhereInput
    data: XOR<FacebookLikePostUpdateManyMutationInput, FacebookLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type FacebookLikePostScalarWhereInput = {
    AND?: Enumerable<FacebookLikePostScalarWhereInput>
    OR?: Enumerable<FacebookLikePostScalarWhereInput>
    NOT?: Enumerable<FacebookLikePostScalarWhereInput>
    id?: IntFilter | number
    postId?: IntFilter | number
    posterUserId?: IntFilter | number
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookLikeCommentUpsertWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookLikeCommentWhereUniqueInput
    update: XOR<FacebookLikeCommentUpdateWithoutPosterUserInput, FacebookLikeCommentUncheckedUpdateWithoutPosterUserInput>
    create: XOR<FacebookLikeCommentCreateWithoutPosterUserInput, FacebookLikeCommentUncheckedCreateWithoutPosterUserInput>
  }

  export type FacebookLikeCommentUpdateWithWhereUniqueWithoutPosterUserInput = {
    where: FacebookLikeCommentWhereUniqueInput
    data: XOR<FacebookLikeCommentUpdateWithoutPosterUserInput, FacebookLikeCommentUncheckedUpdateWithoutPosterUserInput>
  }

  export type FacebookLikeCommentUpdateManyWithWhereWithoutPosterUserInput = {
    where: FacebookLikeCommentScalarWhereInput
    data: XOR<FacebookLikeCommentUpdateManyMutationInput, FacebookLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type FacebookLikeCommentScalarWhereInput = {
    AND?: Enumerable<FacebookLikeCommentScalarWhereInput>
    OR?: Enumerable<FacebookLikeCommentScalarWhereInput>
    NOT?: Enumerable<FacebookLikeCommentScalarWhereInput>
    id?: IntFilter | number
    commentId?: IntFilter | number
    posterUserId?: IntFilter | number
    likeTypeId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestFromUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    update: XOR<FacebookFriendRequestUpdateWithoutRequestFromUserInput, FacebookFriendRequestUncheckedUpdateWithoutRequestFromUserInput>
    create: XOR<FacebookFriendRequestCreateWithoutRequestFromUserInput, FacebookFriendRequestUncheckedCreateWithoutRequestFromUserInput>
  }

  export type FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestFromUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    data: XOR<FacebookFriendRequestUpdateWithoutRequestFromUserInput, FacebookFriendRequestUncheckedUpdateWithoutRequestFromUserInput>
  }

  export type FacebookFriendRequestUpdateManyWithWhereWithoutRequestFromUserInput = {
    where: FacebookFriendRequestScalarWhereInput
    data: XOR<FacebookFriendRequestUpdateManyMutationInput, FacebookFriendRequestUncheckedUpdateManyWithoutFriendRequestFromsInput>
  }

  export type FacebookFriendRequestScalarWhereInput = {
    AND?: Enumerable<FacebookFriendRequestScalarWhereInput>
    OR?: Enumerable<FacebookFriendRequestScalarWhereInput>
    NOT?: Enumerable<FacebookFriendRequestScalarWhereInput>
    id?: IntFilter | number
    requestFromUserId?: IntFilter | number
    requestToUserId?: IntFilter | number
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookFriendRequestUpsertWithWhereUniqueWithoutRequestToUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    update: XOR<FacebookFriendRequestUpdateWithoutRequestToUserInput, FacebookFriendRequestUncheckedUpdateWithoutRequestToUserInput>
    create: XOR<FacebookFriendRequestCreateWithoutRequestToUserInput, FacebookFriendRequestUncheckedCreateWithoutRequestToUserInput>
  }

  export type FacebookFriendRequestUpdateWithWhereUniqueWithoutRequestToUserInput = {
    where: FacebookFriendRequestWhereUniqueInput
    data: XOR<FacebookFriendRequestUpdateWithoutRequestToUserInput, FacebookFriendRequestUncheckedUpdateWithoutRequestToUserInput>
  }

  export type FacebookFriendRequestUpdateManyWithWhereWithoutRequestToUserInput = {
    where: FacebookFriendRequestScalarWhereInput
    data: XOR<FacebookFriendRequestUpdateManyMutationInput, FacebookFriendRequestUncheckedUpdateManyWithoutFriendRequestToesInput>
  }

  export type FacebookUserRelationUpsertWithWhereUniqueWithoutRelationFromUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    update: XOR<FacebookUserRelationUpdateWithoutRelationFromUserInput, FacebookUserRelationUncheckedUpdateWithoutRelationFromUserInput>
    create: XOR<FacebookUserRelationCreateWithoutRelationFromUserInput, FacebookUserRelationUncheckedCreateWithoutRelationFromUserInput>
  }

  export type FacebookUserRelationUpdateWithWhereUniqueWithoutRelationFromUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    data: XOR<FacebookUserRelationUpdateWithoutRelationFromUserInput, FacebookUserRelationUncheckedUpdateWithoutRelationFromUserInput>
  }

  export type FacebookUserRelationUpdateManyWithWhereWithoutRelationFromUserInput = {
    where: FacebookUserRelationScalarWhereInput
    data: XOR<FacebookUserRelationUpdateManyMutationInput, FacebookUserRelationUncheckedUpdateManyWithoutFriendRelationFromsInput>
  }

  export type FacebookUserRelationScalarWhereInput = {
    AND?: Enumerable<FacebookUserRelationScalarWhereInput>
    OR?: Enumerable<FacebookUserRelationScalarWhereInput>
    NOT?: Enumerable<FacebookUserRelationScalarWhereInput>
    id?: IntFilter | number
    relationFromUserId?: IntFilter | number
    relationToUserId?: IntFilter | number
    isAccepted?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookUserRelationUpsertWithWhereUniqueWithoutRelationToUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    update: XOR<FacebookUserRelationUpdateWithoutRelationToUserInput, FacebookUserRelationUncheckedUpdateWithoutRelationToUserInput>
    create: XOR<FacebookUserRelationCreateWithoutRelationToUserInput, FacebookUserRelationUncheckedCreateWithoutRelationToUserInput>
  }

  export type FacebookUserRelationUpdateWithWhereUniqueWithoutRelationToUserInput = {
    where: FacebookUserRelationWhereUniqueInput
    data: XOR<FacebookUserRelationUpdateWithoutRelationToUserInput, FacebookUserRelationUncheckedUpdateWithoutRelationToUserInput>
  }

  export type FacebookUserRelationUpdateManyWithWhereWithoutRelationToUserInput = {
    where: FacebookUserRelationScalarWhereInput
    data: XOR<FacebookUserRelationUpdateManyMutationInput, FacebookUserRelationUncheckedUpdateManyWithoutFriendRelationToesInput>
  }

  export type FacebookMessengerUpsertWithWhereUniqueWithoutMessageFromUserInput = {
    where: FacebookMessengerWhereUniqueInput
    update: XOR<FacebookMessengerUpdateWithoutMessageFromUserInput, FacebookMessengerUncheckedUpdateWithoutMessageFromUserInput>
    create: XOR<FacebookMessengerCreateWithoutMessageFromUserInput, FacebookMessengerUncheckedCreateWithoutMessageFromUserInput>
  }

  export type FacebookMessengerUpdateWithWhereUniqueWithoutMessageFromUserInput = {
    where: FacebookMessengerWhereUniqueInput
    data: XOR<FacebookMessengerUpdateWithoutMessageFromUserInput, FacebookMessengerUncheckedUpdateWithoutMessageFromUserInput>
  }

  export type FacebookMessengerUpdateManyWithWhereWithoutMessageFromUserInput = {
    where: FacebookMessengerScalarWhereInput
    data: XOR<FacebookMessengerUpdateManyMutationInput, FacebookMessengerUncheckedUpdateManyWithoutMessengeFromsInput>
  }

  export type FacebookMessengerScalarWhereInput = {
    AND?: Enumerable<FacebookMessengerScalarWhereInput>
    OR?: Enumerable<FacebookMessengerScalarWhereInput>
    NOT?: Enumerable<FacebookMessengerScalarWhereInput>
    id?: IntFilter | number
    message?: StringFilter | string
    messageFromUserId?: IntFilter | number
    messageToUserId?: IntFilter | number
    isRead?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookMessengerUpsertWithWhereUniqueWithoutMessageToUserInput = {
    where: FacebookMessengerWhereUniqueInput
    update: XOR<FacebookMessengerUpdateWithoutMessageToUserInput, FacebookMessengerUncheckedUpdateWithoutMessageToUserInput>
    create: XOR<FacebookMessengerCreateWithoutMessageToUserInput, FacebookMessengerUncheckedCreateWithoutMessageToUserInput>
  }

  export type FacebookMessengerUpdateWithWhereUniqueWithoutMessageToUserInput = {
    where: FacebookMessengerWhereUniqueInput
    data: XOR<FacebookMessengerUpdateWithoutMessageToUserInput, FacebookMessengerUncheckedUpdateWithoutMessageToUserInput>
  }

  export type FacebookMessengerUpdateManyWithWhereWithoutMessageToUserInput = {
    where: FacebookMessengerScalarWhereInput
    data: XOR<FacebookMessengerUpdateManyMutationInput, FacebookMessengerUncheckedUpdateManyWithoutMessengeToesInput>
  }

  export type FacebookUserCreateWithoutGroupcreaterInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutGroupcreaterInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutGroupcreaterInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutGroupcreaterInput, FacebookUserUncheckedCreateWithoutGroupcreaterInput>
  }

  export type FacebookUserCreateWithoutGroupMemberInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutGroupMemberInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutGroupMemberInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutGroupMemberInput, FacebookUserUncheckedCreateWithoutGroupMemberInput>
  }

  export type FacebookUserUpsertWithoutGroupcreaterInput = {
    update: XOR<FacebookUserUpdateWithoutGroupcreaterInput, FacebookUserUncheckedUpdateWithoutGroupcreaterInput>
    create: XOR<FacebookUserCreateWithoutGroupcreaterInput, FacebookUserUncheckedCreateWithoutGroupcreaterInput>
  }

  export type FacebookUserUpdateWithoutGroupcreaterInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutGroupcreaterInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUpsertWithWhereUniqueWithoutGroupMemberInput = {
    where: FacebookUserWhereUniqueInput
    update: XOR<FacebookUserUpdateWithoutGroupMemberInput, FacebookUserUncheckedUpdateWithoutGroupMemberInput>
    create: XOR<FacebookUserCreateWithoutGroupMemberInput, FacebookUserUncheckedCreateWithoutGroupMemberInput>
  }

  export type FacebookUserUpdateWithWhereUniqueWithoutGroupMemberInput = {
    where: FacebookUserWhereUniqueInput
    data: XOR<FacebookUserUpdateWithoutGroupMemberInput, FacebookUserUncheckedUpdateWithoutGroupMemberInput>
  }

  export type FacebookUserUpdateManyWithWhereWithoutGroupMemberInput = {
    where: FacebookUserScalarWhereInput
    data: XOR<FacebookUserUpdateManyMutationInput, FacebookUserUncheckedUpdateManyWithoutMemberUsersInput>
  }

  export type FacebookUserScalarWhereInput = {
    AND?: Enumerable<FacebookUserScalarWhereInput>
    OR?: Enumerable<FacebookUserScalarWhereInput>
    NOT?: Enumerable<FacebookUserScalarWhereInput>
    id?: IntFilter | number
    profileImage?: StringFilter | string
    coverImage?: StringFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookPostCreateWithoutDestinationInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutDestinationInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutDestinationInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutDestinationInput, FacebookPostUncheckedCreateWithoutDestinationInput>
  }

  export type FacebookPostCreateManyDestinationInputEnvelope = {
    data: Enumerable<FacebookPostCreateManyDestinationInput>
    skipDuplicates?: boolean
  }

  export type FacebookPostUpsertWithWhereUniqueWithoutDestinationInput = {
    where: FacebookPostWhereUniqueInput
    update: XOR<FacebookPostUpdateWithoutDestinationInput, FacebookPostUncheckedUpdateWithoutDestinationInput>
    create: XOR<FacebookPostCreateWithoutDestinationInput, FacebookPostUncheckedCreateWithoutDestinationInput>
  }

  export type FacebookPostUpdateWithWhereUniqueWithoutDestinationInput = {
    where: FacebookPostWhereUniqueInput
    data: XOR<FacebookPostUpdateWithoutDestinationInput, FacebookPostUncheckedUpdateWithoutDestinationInput>
  }

  export type FacebookPostUpdateManyWithWhereWithoutDestinationInput = {
    where: FacebookPostScalarWhereInput
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type FacebookPostCreateWithoutPostTypeInput = {
    message: string
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutPostTypeInput = {
    id?: number
    message: string
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutPostTypeInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutPostTypeInput, FacebookPostUncheckedCreateWithoutPostTypeInput>
  }

  export type FacebookPostCreateManyPostTypeInputEnvelope = {
    data: Enumerable<FacebookPostCreateManyPostTypeInput>
    skipDuplicates?: boolean
  }

  export type FacebookPostUpsertWithWhereUniqueWithoutPostTypeInput = {
    where: FacebookPostWhereUniqueInput
    update: XOR<FacebookPostUpdateWithoutPostTypeInput, FacebookPostUncheckedUpdateWithoutPostTypeInput>
    create: XOR<FacebookPostCreateWithoutPostTypeInput, FacebookPostUncheckedCreateWithoutPostTypeInput>
  }

  export type FacebookPostUpdateWithWhereUniqueWithoutPostTypeInput = {
    where: FacebookPostWhereUniqueInput
    data: XOR<FacebookPostUpdateWithoutPostTypeInput, FacebookPostUncheckedUpdateWithoutPostTypeInput>
  }

  export type FacebookPostUpdateManyWithWhereWithoutPostTypeInput = {
    where: FacebookPostScalarWhereInput
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type FacebookPostCreateWithoutLocationInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutLocationInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutLocationInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutLocationInput, FacebookPostUncheckedCreateWithoutLocationInput>
  }

  export type FacebookPostCreateManyLocationInputEnvelope = {
    data: Enumerable<FacebookPostCreateManyLocationInput>
    skipDuplicates?: boolean
  }

  export type FacebookPostUpsertWithWhereUniqueWithoutLocationInput = {
    where: FacebookPostWhereUniqueInput
    update: XOR<FacebookPostUpdateWithoutLocationInput, FacebookPostUncheckedUpdateWithoutLocationInput>
    create: XOR<FacebookPostCreateWithoutLocationInput, FacebookPostUncheckedCreateWithoutLocationInput>
  }

  export type FacebookPostUpdateWithWhereUniqueWithoutLocationInput = {
    where: FacebookPostWhereUniqueInput
    data: XOR<FacebookPostUpdateWithoutLocationInput, FacebookPostUncheckedUpdateWithoutLocationInput>
  }

  export type FacebookPostUpdateManyWithWhereWithoutLocationInput = {
    where: FacebookPostScalarWhereInput
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type FacebookPostCreateWithoutHashtagsInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutHashtagsInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutHashtagsInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutHashtagsInput, FacebookPostUncheckedCreateWithoutHashtagsInput>
  }

  export type FacebookPostUpsertWithWhereUniqueWithoutHashtagsInput = {
    where: FacebookPostWhereUniqueInput
    update: XOR<FacebookPostUpdateWithoutHashtagsInput, FacebookPostUncheckedUpdateWithoutHashtagsInput>
    create: XOR<FacebookPostCreateWithoutHashtagsInput, FacebookPostUncheckedCreateWithoutHashtagsInput>
  }

  export type FacebookPostUpdateWithWhereUniqueWithoutHashtagsInput = {
    where: FacebookPostWhereUniqueInput
    data: XOR<FacebookPostUpdateWithoutHashtagsInput, FacebookPostUncheckedUpdateWithoutHashtagsInput>
  }

  export type FacebookPostUpdateManyWithWhereWithoutHashtagsInput = {
    where: FacebookPostScalarWhereInput
    data: XOR<FacebookPostUpdateManyMutationInput, FacebookPostUncheckedUpdateManyWithoutPostsInput>
  }

  export type FacebookPostTypeCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostTypeUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostTypeCreateOrConnectWithoutPostsInput = {
    where: FacebookPostTypeWhereUniqueInput
    create: XOR<FacebookPostTypeCreateWithoutPostsInput, FacebookPostTypeUncheckedCreateWithoutPostsInput>
  }

  export type FacebookUserCreateWithoutPostsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutPostsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutPostsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutPostsInput, FacebookUserUncheckedCreateWithoutPostsInput>
  }

  export type FacebookLocationCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLocationUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLocationCreateOrConnectWithoutPostsInput = {
    where: FacebookLocationWhereUniqueInput
    create: XOR<FacebookLocationCreateWithoutPostsInput, FacebookLocationUncheckedCreateWithoutPostsInput>
  }

  export type FacebookPostDestinationCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostDestinationUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostDestinationCreateOrConnectWithoutPostsInput = {
    where: FacebookPostDestinationWhereUniqueInput
    create: XOR<FacebookPostDestinationCreateWithoutPostsInput, FacebookPostDestinationUncheckedCreateWithoutPostsInput>
  }

  export type FacebookHashtagCreateWithoutPostsInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookHashtagUncheckedCreateWithoutPostsInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookHashtagCreateOrConnectWithoutPostsInput = {
    where: FacebookHashtagWhereUniqueInput
    create: XOR<FacebookHashtagCreateWithoutPostsInput, FacebookHashtagUncheckedCreateWithoutPostsInput>
  }

  export type FacebookCommentCreateWithoutPostInput = {
    message: string
    commentByUser: FacebookUserCreateNestedOneWithoutCommentsInput
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentUncheckedCreateWithoutPostInput = {
    id?: number
    message: string
    commentByUserId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentCreateOrConnectWithoutPostInput = {
    where: FacebookCommentWhereUniqueInput
    create: XOR<FacebookCommentCreateWithoutPostInput, FacebookCommentUncheckedCreateWithoutPostInput>
  }

  export type FacebookCommentCreateManyPostInputEnvelope = {
    data: Enumerable<FacebookCommentCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikePostCreateWithoutPostInput = {
    posterUser: FacebookUserCreateNestedOneWithoutLikePostsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUncheckedCreateWithoutPostInput = {
    id?: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostCreateOrConnectWithoutPostInput = {
    where: FacebookLikePostWhereUniqueInput
    create: XOR<FacebookLikePostCreateWithoutPostInput, FacebookLikePostUncheckedCreateWithoutPostInput>
  }

  export type FacebookLikePostCreateManyPostInputEnvelope = {
    data: Enumerable<FacebookLikePostCreateManyPostInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikeCommentCreateWithoutCommentInput = {
    posterUser: FacebookUserCreateNestedOneWithoutLikeCommentsInput
    likeType: FacebookLikeTypeCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUncheckedCreateWithoutCommentInput = {
    id?: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateOrConnectWithoutCommentInput = {
    where: FacebookLikeCommentWhereUniqueInput
    create: XOR<FacebookLikeCommentCreateWithoutCommentInput, FacebookLikeCommentUncheckedCreateWithoutCommentInput>
  }

  export type FacebookLikeCommentCreateManyCommentInputEnvelope = {
    data: Enumerable<FacebookLikeCommentCreateManyCommentInput>
    skipDuplicates?: boolean
  }

  export type FacebookPostTypeUpsertWithoutPostsInput = {
    update: XOR<FacebookPostTypeUpdateWithoutPostsInput, FacebookPostTypeUncheckedUpdateWithoutPostsInput>
    create: XOR<FacebookPostTypeCreateWithoutPostsInput, FacebookPostTypeUncheckedCreateWithoutPostsInput>
  }

  export type FacebookPostTypeUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostTypeUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserUpsertWithoutPostsInput = {
    update: XOR<FacebookUserUpdateWithoutPostsInput, FacebookUserUncheckedUpdateWithoutPostsInput>
    create: XOR<FacebookUserCreateWithoutPostsInput, FacebookUserUncheckedCreateWithoutPostsInput>
  }

  export type FacebookUserUpdateWithoutPostsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookLocationUpsertWithoutPostsInput = {
    update: XOR<FacebookLocationUpdateWithoutPostsInput, FacebookLocationUncheckedUpdateWithoutPostsInput>
    create: XOR<FacebookLocationCreateWithoutPostsInput, FacebookLocationUncheckedCreateWithoutPostsInput>
  }

  export type FacebookLocationUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLocationUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostDestinationUpsertWithoutPostsInput = {
    update: XOR<FacebookPostDestinationUpdateWithoutPostsInput, FacebookPostDestinationUncheckedUpdateWithoutPostsInput>
    create: XOR<FacebookPostDestinationCreateWithoutPostsInput, FacebookPostDestinationUncheckedCreateWithoutPostsInput>
  }

  export type FacebookPostDestinationUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostDestinationUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookHashtagUpsertWithWhereUniqueWithoutPostsInput = {
    where: FacebookHashtagWhereUniqueInput
    update: XOR<FacebookHashtagUpdateWithoutPostsInput, FacebookHashtagUncheckedUpdateWithoutPostsInput>
    create: XOR<FacebookHashtagCreateWithoutPostsInput, FacebookHashtagUncheckedCreateWithoutPostsInput>
  }

  export type FacebookHashtagUpdateWithWhereUniqueWithoutPostsInput = {
    where: FacebookHashtagWhereUniqueInput
    data: XOR<FacebookHashtagUpdateWithoutPostsInput, FacebookHashtagUncheckedUpdateWithoutPostsInput>
  }

  export type FacebookHashtagUpdateManyWithWhereWithoutPostsInput = {
    where: FacebookHashtagScalarWhereInput
    data: XOR<FacebookHashtagUpdateManyMutationInput, FacebookHashtagUncheckedUpdateManyWithoutHashtagsInput>
  }

  export type FacebookHashtagScalarWhereInput = {
    AND?: Enumerable<FacebookHashtagScalarWhereInput>
    OR?: Enumerable<FacebookHashtagScalarWhereInput>
    NOT?: Enumerable<FacebookHashtagScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type FacebookCommentUpsertWithWhereUniqueWithoutPostInput = {
    where: FacebookCommentWhereUniqueInput
    update: XOR<FacebookCommentUpdateWithoutPostInput, FacebookCommentUncheckedUpdateWithoutPostInput>
    create: XOR<FacebookCommentCreateWithoutPostInput, FacebookCommentUncheckedCreateWithoutPostInput>
  }

  export type FacebookCommentUpdateWithWhereUniqueWithoutPostInput = {
    where: FacebookCommentWhereUniqueInput
    data: XOR<FacebookCommentUpdateWithoutPostInput, FacebookCommentUncheckedUpdateWithoutPostInput>
  }

  export type FacebookCommentUpdateManyWithWhereWithoutPostInput = {
    where: FacebookCommentScalarWhereInput
    data: XOR<FacebookCommentUpdateManyMutationInput, FacebookCommentUncheckedUpdateManyWithoutCommentsInput>
  }

  export type FacebookLikePostUpsertWithWhereUniqueWithoutPostInput = {
    where: FacebookLikePostWhereUniqueInput
    update: XOR<FacebookLikePostUpdateWithoutPostInput, FacebookLikePostUncheckedUpdateWithoutPostInput>
    create: XOR<FacebookLikePostCreateWithoutPostInput, FacebookLikePostUncheckedCreateWithoutPostInput>
  }

  export type FacebookLikePostUpdateWithWhereUniqueWithoutPostInput = {
    where: FacebookLikePostWhereUniqueInput
    data: XOR<FacebookLikePostUpdateWithoutPostInput, FacebookLikePostUncheckedUpdateWithoutPostInput>
  }

  export type FacebookLikePostUpdateManyWithWhereWithoutPostInput = {
    where: FacebookLikePostScalarWhereInput
    data: XOR<FacebookLikePostUpdateManyMutationInput, FacebookLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type FacebookLikeCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: FacebookLikeCommentWhereUniqueInput
    update: XOR<FacebookLikeCommentUpdateWithoutCommentInput, FacebookLikeCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<FacebookLikeCommentCreateWithoutCommentInput, FacebookLikeCommentUncheckedCreateWithoutCommentInput>
  }

  export type FacebookLikeCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: FacebookLikeCommentWhereUniqueInput
    data: XOR<FacebookLikeCommentUpdateWithoutCommentInput, FacebookLikeCommentUncheckedUpdateWithoutCommentInput>
  }

  export type FacebookLikeCommentUpdateManyWithWhereWithoutCommentInput = {
    where: FacebookLikeCommentScalarWhereInput
    data: XOR<FacebookLikeCommentUpdateManyMutationInput, FacebookLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type FacebookUserCreateWithoutCommentsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutCommentsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutCommentsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutCommentsInput, FacebookUserUncheckedCreateWithoutCommentsInput>
  }

  export type FacebookPostCreateWithoutCommentsInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutCommentsInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutCommentsInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutCommentsInput, FacebookPostUncheckedCreateWithoutCommentsInput>
  }

  export type FacebookUserUpsertWithoutCommentsInput = {
    update: XOR<FacebookUserUpdateWithoutCommentsInput, FacebookUserUncheckedUpdateWithoutCommentsInput>
    create: XOR<FacebookUserCreateWithoutCommentsInput, FacebookUserUncheckedCreateWithoutCommentsInput>
  }

  export type FacebookUserUpdateWithoutCommentsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookPostUpsertWithoutCommentsInput = {
    update: XOR<FacebookPostUpdateWithoutCommentsInput, FacebookPostUncheckedUpdateWithoutCommentsInput>
    create: XOR<FacebookPostCreateWithoutCommentsInput, FacebookPostUncheckedCreateWithoutCommentsInput>
  }

  export type FacebookPostUpdateWithoutCommentsInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookLikePostCreateWithoutLikeTypeInput = {
    post: FacebookPostCreateNestedOneWithoutLikePostsInput
    posterUser: FacebookUserCreateNestedOneWithoutLikePostsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUncheckedCreateWithoutLikeTypeInput = {
    id?: number
    postId: number
    posterUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostCreateOrConnectWithoutLikeTypeInput = {
    where: FacebookLikePostWhereUniqueInput
    create: XOR<FacebookLikePostCreateWithoutLikeTypeInput, FacebookLikePostUncheckedCreateWithoutLikeTypeInput>
  }

  export type FacebookLikePostCreateManyLikeTypeInputEnvelope = {
    data: Enumerable<FacebookLikePostCreateManyLikeTypeInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikeCommentCreateWithoutLikeTypeInput = {
    comment: FacebookPostCreateNestedOneWithoutLikeCommentsInput
    posterUser: FacebookUserCreateNestedOneWithoutLikeCommentsInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput = {
    id?: number
    commentId: number
    posterUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateOrConnectWithoutLikeTypeInput = {
    where: FacebookLikeCommentWhereUniqueInput
    create: XOR<FacebookLikeCommentCreateWithoutLikeTypeInput, FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>
  }

  export type FacebookLikeCommentCreateManyLikeTypeInputEnvelope = {
    data: Enumerable<FacebookLikeCommentCreateManyLikeTypeInput>
    skipDuplicates?: boolean
  }

  export type FacebookLikePostUpsertWithWhereUniqueWithoutLikeTypeInput = {
    where: FacebookLikePostWhereUniqueInput
    update: XOR<FacebookLikePostUpdateWithoutLikeTypeInput, FacebookLikePostUncheckedUpdateWithoutLikeTypeInput>
    create: XOR<FacebookLikePostCreateWithoutLikeTypeInput, FacebookLikePostUncheckedCreateWithoutLikeTypeInput>
  }

  export type FacebookLikePostUpdateWithWhereUniqueWithoutLikeTypeInput = {
    where: FacebookLikePostWhereUniqueInput
    data: XOR<FacebookLikePostUpdateWithoutLikeTypeInput, FacebookLikePostUncheckedUpdateWithoutLikeTypeInput>
  }

  export type FacebookLikePostUpdateManyWithWhereWithoutLikeTypeInput = {
    where: FacebookLikePostScalarWhereInput
    data: XOR<FacebookLikePostUpdateManyMutationInput, FacebookLikePostUncheckedUpdateManyWithoutLikePostsInput>
  }

  export type FacebookLikeCommentUpsertWithWhereUniqueWithoutLikeTypeInput = {
    where: FacebookLikeCommentWhereUniqueInput
    update: XOR<FacebookLikeCommentUpdateWithoutLikeTypeInput, FacebookLikeCommentUncheckedUpdateWithoutLikeTypeInput>
    create: XOR<FacebookLikeCommentCreateWithoutLikeTypeInput, FacebookLikeCommentUncheckedCreateWithoutLikeTypeInput>
  }

  export type FacebookLikeCommentUpdateWithWhereUniqueWithoutLikeTypeInput = {
    where: FacebookLikeCommentWhereUniqueInput
    data: XOR<FacebookLikeCommentUpdateWithoutLikeTypeInput, FacebookLikeCommentUncheckedUpdateWithoutLikeTypeInput>
  }

  export type FacebookLikeCommentUpdateManyWithWhereWithoutLikeTypeInput = {
    where: FacebookLikeCommentScalarWhereInput
    data: XOR<FacebookLikeCommentUpdateManyMutationInput, FacebookLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput>
  }

  export type FacebookPostCreateWithoutLikePostsInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostUncheckedCreateWithoutLikePostsInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type FacebookPostCreateOrConnectWithoutLikePostsInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutLikePostsInput, FacebookPostUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookUserCreateWithoutLikePostsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutLikePostsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutLikePostsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutLikePostsInput, FacebookUserUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookLikeTypeCreateWithoutLikePostsInput = {
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeUncheckedCreateWithoutLikePostsInput = {
    id?: number
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeCreateOrConnectWithoutLikePostsInput = {
    where: FacebookLikeTypeWhereUniqueInput
    create: XOR<FacebookLikeTypeCreateWithoutLikePostsInput, FacebookLikeTypeUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookPostUpsertWithoutLikePostsInput = {
    update: XOR<FacebookPostUpdateWithoutLikePostsInput, FacebookPostUncheckedUpdateWithoutLikePostsInput>
    create: XOR<FacebookPostCreateWithoutLikePostsInput, FacebookPostUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookPostUpdateWithoutLikePostsInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookUserUpsertWithoutLikePostsInput = {
    update: XOR<FacebookUserUpdateWithoutLikePostsInput, FacebookUserUncheckedUpdateWithoutLikePostsInput>
    create: XOR<FacebookUserCreateWithoutLikePostsInput, FacebookUserUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookUserUpdateWithoutLikePostsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookLikeTypeUpsertWithoutLikePostsInput = {
    update: XOR<FacebookLikeTypeUpdateWithoutLikePostsInput, FacebookLikeTypeUncheckedUpdateWithoutLikePostsInput>
    create: XOR<FacebookLikeTypeCreateWithoutLikePostsInput, FacebookLikeTypeUncheckedCreateWithoutLikePostsInput>
  }

  export type FacebookLikeTypeUpdateWithoutLikePostsInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeComments?: FacebookLikeCommentUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookLikeTypeUncheckedUpdateWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookPostCreateWithoutLikeCommentsInput = {
    message: string
    postType: FacebookPostTypeCreateNestedOneWithoutPostsInput
    posterUser: FacebookUserCreateNestedOneWithoutPostsInput
    location: FacebookLocationCreateNestedOneWithoutPostsInput
    destination: FacebookPostDestinationCreateNestedOneWithoutPostsInput
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPostInput
  }

  export type FacebookPostUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: FacebookHashtagUncheckedCreateNestedManyWithoutPostsInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutPostInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPostInput
  }

  export type FacebookPostCreateOrConnectWithoutLikeCommentsInput = {
    where: FacebookPostWhereUniqueInput
    create: XOR<FacebookPostCreateWithoutLikeCommentsInput, FacebookPostUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookUserCreateWithoutLikeCommentsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutLikeCommentsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutLikeCommentsInput, FacebookUserUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookLikeTypeCreateWithoutLikeCommentsInput = {
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: FacebookLikePostCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeUncheckedCreateWithoutLikeCommentsInput = {
    id?: number
    emoji: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutLikeTypeInput
  }

  export type FacebookLikeTypeCreateOrConnectWithoutLikeCommentsInput = {
    where: FacebookLikeTypeWhereUniqueInput
    create: XOR<FacebookLikeTypeCreateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookPostUpsertWithoutLikeCommentsInput = {
    update: XOR<FacebookPostUpdateWithoutLikeCommentsInput, FacebookPostUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<FacebookPostCreateWithoutLikeCommentsInput, FacebookPostUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookPostUpdateWithoutLikeCommentsInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type FacebookUserUpsertWithoutLikeCommentsInput = {
    update: XOR<FacebookUserUpdateWithoutLikeCommentsInput, FacebookUserUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<FacebookUserCreateWithoutLikeCommentsInput, FacebookUserUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookUserUpdateWithoutLikeCommentsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookLikeTypeUpsertWithoutLikeCommentsInput = {
    update: XOR<FacebookLikeTypeUpdateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedUpdateWithoutLikeCommentsInput>
    create: XOR<FacebookLikeTypeCreateWithoutLikeCommentsInput, FacebookLikeTypeUncheckedCreateWithoutLikeCommentsInput>
  }

  export type FacebookLikeTypeUpdateWithoutLikeCommentsInput = {
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: FacebookLikePostUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookLikeTypeUncheckedUpdateWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    emoji?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutLikeTypeNestedInput
  }

  export type FacebookUserCreateWithoutFriendRequestFromsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutFriendRequestFromsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutFriendRequestFromsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutFriendRequestFromsInput, FacebookUserUncheckedCreateWithoutFriendRequestFromsInput>
  }

  export type FacebookUserCreateWithoutFriendRequestToesInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutFriendRequestToesInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutFriendRequestToesInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutFriendRequestToesInput, FacebookUserUncheckedCreateWithoutFriendRequestToesInput>
  }

  export type FacebookUserUpsertWithoutFriendRequestFromsInput = {
    update: XOR<FacebookUserUpdateWithoutFriendRequestFromsInput, FacebookUserUncheckedUpdateWithoutFriendRequestFromsInput>
    create: XOR<FacebookUserCreateWithoutFriendRequestFromsInput, FacebookUserUncheckedCreateWithoutFriendRequestFromsInput>
  }

  export type FacebookUserUpdateWithoutFriendRequestFromsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutFriendRequestFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUpsertWithoutFriendRequestToesInput = {
    update: XOR<FacebookUserUpdateWithoutFriendRequestToesInput, FacebookUserUncheckedUpdateWithoutFriendRequestToesInput>
    create: XOR<FacebookUserCreateWithoutFriendRequestToesInput, FacebookUserUncheckedCreateWithoutFriendRequestToesInput>
  }

  export type FacebookUserUpdateWithoutFriendRequestToesInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutFriendRequestToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserCreateWithoutFriendRelationFromsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutFriendRelationFromsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutFriendRelationFromsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutFriendRelationFromsInput, FacebookUserUncheckedCreateWithoutFriendRelationFromsInput>
  }

  export type FacebookUserCreateWithoutFriendRelationToesInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutFriendRelationToesInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutFriendRelationToesInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutFriendRelationToesInput, FacebookUserUncheckedCreateWithoutFriendRelationToesInput>
  }

  export type FacebookUserUpsertWithoutFriendRelationFromsInput = {
    update: XOR<FacebookUserUpdateWithoutFriendRelationFromsInput, FacebookUserUncheckedUpdateWithoutFriendRelationFromsInput>
    create: XOR<FacebookUserCreateWithoutFriendRelationFromsInput, FacebookUserUncheckedCreateWithoutFriendRelationFromsInput>
  }

  export type FacebookUserUpdateWithoutFriendRelationFromsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutFriendRelationFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUpsertWithoutFriendRelationToesInput = {
    update: XOR<FacebookUserUpdateWithoutFriendRelationToesInput, FacebookUserUncheckedUpdateWithoutFriendRelationToesInput>
    create: XOR<FacebookUserCreateWithoutFriendRelationToesInput, FacebookUserUncheckedCreateWithoutFriendRelationToesInput>
  }

  export type FacebookUserUpdateWithoutFriendRelationToesInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutFriendRelationToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserCreateWithoutMessengeFromsInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeToes?: FacebookMessengerCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserUncheckedCreateWithoutMessengeFromsInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeToes?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageToUserInput
  }

  export type FacebookUserCreateOrConnectWithoutMessengeFromsInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutMessengeFromsInput, FacebookUserUncheckedCreateWithoutMessengeFromsInput>
  }

  export type FacebookUserCreateWithoutMessengeToesInput = {
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerCreateNestedManyWithoutMessageFromUserInput
  }

  export type FacebookUserUncheckedCreateWithoutMessengeToesInput = {
    id?: number
    profileImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    posts?: FacebookPostUncheckedCreateNestedManyWithoutPosterUserInput
    groupcreater?: FacebookGroupUncheckedCreateNestedManyWithoutCreaterUserInput
    groupMember?: FacebookGroupUncheckedCreateNestedManyWithoutMemberUsersInput
    comments?: FacebookCommentUncheckedCreateNestedManyWithoutCommentByUserInput
    likePosts?: FacebookLikePostUncheckedCreateNestedManyWithoutPosterUserInput
    likeComments?: FacebookLikeCommentUncheckedCreateNestedManyWithoutPosterUserInput
    friendRequestFroms?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestFromUserInput
    friendRequestToes?: FacebookFriendRequestUncheckedCreateNestedManyWithoutRequestToUserInput
    friendRelationFroms?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationFromUserInput
    friendRelationToes?: FacebookUserRelationUncheckedCreateNestedManyWithoutRelationToUserInput
    messengeFroms?: FacebookMessengerUncheckedCreateNestedManyWithoutMessageFromUserInput
  }

  export type FacebookUserCreateOrConnectWithoutMessengeToesInput = {
    where: FacebookUserWhereUniqueInput
    create: XOR<FacebookUserCreateWithoutMessengeToesInput, FacebookUserUncheckedCreateWithoutMessengeToesInput>
  }

  export type FacebookUserUpsertWithoutMessengeFromsInput = {
    update: XOR<FacebookUserUpdateWithoutMessengeFromsInput, FacebookUserUncheckedUpdateWithoutMessengeFromsInput>
    create: XOR<FacebookUserCreateWithoutMessengeFromsInput, FacebookUserUncheckedCreateWithoutMessengeFromsInput>
  }

  export type FacebookUserUpdateWithoutMessengeFromsInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutMessengeFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUpsertWithoutMessengeToesInput = {
    update: XOR<FacebookUserUpdateWithoutMessengeToesInput, FacebookUserUncheckedUpdateWithoutMessengeToesInput>
    create: XOR<FacebookUserCreateWithoutMessengeToesInput, FacebookUserUncheckedCreateWithoutMessengeToesInput>
  }

  export type FacebookUserUpdateWithoutMessengeToesInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutMessengeToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    groupMember?: FacebookGroupUncheckedUpdateManyWithoutMemberUsersNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
  }

  export type BinKitchenMenuCreateManyCategoryInput = {
    id?: number
    name: string
    image: string
    price: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenMenuUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    orderItems?: BinKitchenOrderItemUpdateManyWithoutMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    orderItems?: BinKitchenOrderItemUncheckedUpdateManyWithoutMenuNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenMenuUncheckedUpdateManyWithoutMenusInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyMenuInput = {
    id?: number
    orderId?: number | null
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateWithoutMenuInput = {
    order?: BinKitchenOrderUpdateOneWithoutOrderItemsNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateWithoutMenuInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateManyWithoutOrderItemsInput = {
    id?: IntFieldUpdateOperationsInput | number
    orderId?: NullableIntFieldUpdateOperationsInput | number | null
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemCreateManyOrderInput = {
    id?: number
    menuId: number
    quantity: number
    totalPrice: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BinKitchenOrderItemUpdateWithoutOrderInput = {
    menu?: BinKitchenMenuUpdateOneRequiredWithoutOrderItemsNestedInput
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BinKitchenOrderItemUncheckedUpdateWithoutOrderInput = {
    id?: IntFieldUpdateOperationsInput | number
    menuId?: IntFieldUpdateOperationsInput | number
    quantity?: IntFieldUpdateOperationsInput | number
    totalPrice?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaQuizCreateManyCategoryInput = {
    id?: number
    quiz: string
    createdAt?: Date | string
    updatedAt?: Date | string
    answerId: number
  }

  export type TriviaRoundCreateManyCategoryInput = {
    id?: number
    round: string
    score: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaQuizUpdateWithoutCategoryInput = {
    quiz?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    choices?: TriviaChoiceUncheckedUpdateManyWithoutQuizNestedInput
    answerId?: IntFieldUpdateOperationsInput | number
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type TriviaQuizUncheckedUpdateManyWithoutTriviaQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    quiz?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    answerId?: IntFieldUpdateOperationsInput | number
  }

  export type TriviaRoundUpdateWithoutCategoryInput = {
    round?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutRoundNestedInput
  }

  export type TriviaRoundUncheckedUpdateManyWithoutRoundsInput = {
    id?: IntFieldUpdateOperationsInput | number
    round?: StringFieldUpdateOperationsInput | string
    score?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaChoiceCreateManyQuizInput = {
    id?: number
    choice: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizCreateManyQuizInput = {
    id?: number
    roundId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaChoiceUpdateWithoutQuizInput = {
    choice?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUpdateManyWithoutUserChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roundQuizes?: TriviaRoundQuizUncheckedUpdateManyWithoutUserChoiceNestedInput
  }

  export type TriviaChoiceUncheckedUpdateManyWithoutChoicesInput = {
    id?: IntFieldUpdateOperationsInput | number
    choice?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUpdateWithoutQuizInput = {
    round?: TriviaRoundUpdateOneWithoutRoundQuizesNestedInput
    userChoice?: TriviaChoiceUpdateOneWithoutRoundQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutQuizInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    userChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateManyWithoutRoundQuizesInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    userChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateManyUserChoiceInput = {
    id?: number
    roundId: number
    quizId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateWithoutUserChoiceInput = {
    round?: TriviaRoundUpdateOneWithoutRoundQuizesNestedInput
    quiz?: TriviaQuizUpdateOneWithoutRoundQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutUserChoiceInput = {
    id?: IntFieldUpdateOperationsInput | number
    roundId?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizCreateManyRoundInput = {
    id?: number
    quizId: number
    userChoiceId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TriviaRoundQuizUpdateWithoutRoundInput = {
    quiz?: TriviaQuizUpdateOneWithoutRoundQuizesNestedInput
    userChoice?: TriviaChoiceUpdateOneWithoutRoundQuizesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TriviaRoundQuizUncheckedUpdateWithoutRoundInput = {
    id?: IntFieldUpdateOperationsInput | number
    quizId?: IntFieldUpdateOperationsInput | number
    userChoiceId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationCreateManyFollwerInput = {
    id?: number
    followingId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationCreateManyFollowingInput = {
    id?: number
    followerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterPostCreateManyUserInput = {
    id?: number
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyCreateManyUserInput = {
    id?: number
    message: string
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMCreateManyDirectFromInput = {
    id?: number
    message: string
    directToId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterDMCreateManyDirectToInput = {
    id?: number
    message: string
    directFromId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterUserRelationUpdateWithoutFollwerInput = {
    following?: TwitterUserUpdateOneRequiredWithoutFollowingsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateWithoutFollwerInput = {
    id?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateManyWithoutFollwersInput = {
    id?: IntFieldUpdateOperationsInput | number
    followingId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUpdateWithoutFollowingInput = {
    follwer?: TwitterUserUpdateOneRequiredWithoutFollwersNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateWithoutFollowingInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterUserRelationUncheckedUpdateManyWithoutFollowingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    followerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterPostUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUpdateManyWithoutPostNestedInput
    hashTags?: TwitterHashTagUpdateManyWithoutPostsNestedInput
  }

  export type TwitterPostUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutPostNestedInput
    hashTags?: TwitterHashTagUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type TwitterPostUncheckedUpdateManyWithoutTwitterPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: TwitterPostUpdateOneRequiredWithoutTwitterRepliesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUncheckedUpdateManyWithoutTwitterRepliesInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUpdateWithoutDirectFromInput = {
    message?: StringFieldUpdateOperationsInput | string
    directTo?: TwitterUserUpdateOneRequiredWithoutDirectToesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateWithoutDirectFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateManyWithoutDirectFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directToId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUpdateWithoutDirectToInput = {
    message?: StringFieldUpdateOperationsInput | string
    directFrom?: TwitterUserUpdateOneRequiredWithoutDirectFromsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateWithoutDirectToInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directFromId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterDMUncheckedUpdateManyWithoutDirectToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    directFromId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyCreateManyPostInput = {
    id?: number
    message: string
    postByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TwitterReplyUpdateWithoutPostInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: TwitterUserUpdateOneRequiredWithoutTwitterRepliesNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterReplyUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagUpdateWithoutPostsInput = {
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterHashTagUncheckedUpdateManyWithoutHashTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TwitterPostUpdateWithoutHashTagsInput = {
    message?: StringFieldUpdateOperationsInput | string
    user?: TwitterUserUpdateOneRequiredWithoutTwitterPostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUpdateManyWithoutPostNestedInput
  }

  export type TwitterPostUncheckedUpdateWithoutHashTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    twitterReplies?: TwitterReplyUncheckedUpdateManyWithoutPostNestedInput
  }

  export type TwitterPostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateManyUserInput = {
    id?: number
    chanelId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubePostCreateManyPosterUserInput = {
    id?: number
    video: string
    name: string
    description: string
    chanelId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeCommentCreateManyCommentByUserInput = {
    id?: number
    message: string
    postId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostCreateManyLikeByUserInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateManyLikeByUserInput = {
    id?: number
    commentId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberCreateManyFromUserInput = {
    id?: number
    toChanelId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUpdateWithoutUserInput = {
    chanel?: YoutubeChanelUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    permission?: YoutubeChanelPermissionUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateManyWithoutChanelToUserPermissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostUpdateWithoutPosterUserInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutPosterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUpdateWithoutCommentByUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: YoutubePostUpdateOneRequiredWithoutCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUncheckedUpdateWithoutCommentByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUpdateWithoutLikeByUserInput = {
    post?: YoutubePostUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateWithoutLikeByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateManyWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUpdateWithoutLikeByUserInput = {
    comment?: YoutubePostUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateWithoutLikeByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUpdateWithoutFromUserInput = {
    toChanel?: YoutubeChanelUpdateOneRequiredWithoutSubcribersNestedInput
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUncheckedUpdateWithoutFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    toChanelId?: IntFieldUpdateOperationsInput | number
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUncheckedUpdateManyWithoutSubcribersInput = {
    id?: IntFieldUpdateOperationsInput | number
    toChanelId?: IntFieldUpdateOperationsInput | number
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateManyPermissionInput = {
    id?: number
    chanelId: number
    UserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUpdateWithoutPermissionInput = {
    chanel?: YoutubeChanelUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    User?: YoutubeUserUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionCreateManyChanelInput = {
    id?: number
    UserId: number
    permissionId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubePostCreateManyChanelInput = {
    id?: number
    video: string
    name: string
    description: string
    posterUserId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeSubcriberCreateManyToChanelInput = {
    id?: number
    fromUserId: number
    isSupported: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeChanelToUserPermissionUpdateWithoutChanelInput = {
    User?: YoutubeUserUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    permission?: YoutubeChanelPermissionUpdateOneRequiredWithoutChanelToUserPermissionsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeChanelToUserPermissionUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    UserId?: IntFieldUpdateOperationsInput | number
    permissionId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostUpdateWithoutChanelInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: YoutubeHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubeSubcriberUpdateWithoutToChanelInput = {
    fromUser?: YoutubeUserUpdateOneRequiredWithoutSubcribersNestedInput
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeSubcriberUncheckedUpdateWithoutToChanelInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromUserId?: IntFieldUpdateOperationsInput | number
    isSupported?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubePostUpdateWithoutHashtagsInput = {
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUser?: YoutubeUserUpdateOneRequiredWithoutPostsNestedInput
    chanel?: YoutubeChanelUpdateOneRequiredWithoutPostsNestedInput
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: YoutubeCommentUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type YoutubePostUncheckedUpdateWithoutHashtagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    video?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    chanelId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: YoutubeCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: YoutubeLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: YoutubeLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type YoutubeCommentCreateManyPostInput = {
    id?: number
    message: string
    commentByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostCreateManyPostInput = {
    id?: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateManyCommentInput = {
    id?: number
    likeByUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeHashtagUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeHashtagUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeHashtagUncheckedUpdateManyWithoutHashtagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUpdateWithoutPostInput = {
    message?: StringFieldUpdateOperationsInput | string
    commentByUser?: YoutubeUserUpdateOneRequiredWithoutCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeCommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUpdateWithoutPostInput = {
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUpdateWithoutCommentInput = {
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: YoutubeLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostCreateManyLikeTypeInput = {
    id?: number
    postId: number
    likeByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikeCommentCreateManyLikeTypeInput = {
    id?: number
    commentId: number
    likeByUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YoutubeLikePostUpdateWithoutLikeTypeInput = {
    post?: YoutubePostUpdateOneRequiredWithoutLikePostsNestedInput
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikePostUncheckedUpdateWithoutLikeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUpdateWithoutLikeTypeInput = {
    comment?: YoutubePostUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeByUser?: YoutubeUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YoutubeLikeCommentUncheckedUpdateWithoutLikeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeByUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostCreateManyPosterUserInput = {
    id?: number
    message: string
    postTypeId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookGroupCreateManyCreaterUserInput = {
    id?: number
    GroupImage: string
    coverImage: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookCommentCreateManyCommentByUserInput = {
    id?: number
    message: string
    postId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostCreateManyPosterUserInput = {
    id?: number
    postId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateManyPosterUserInput = {
    id?: number
    commentId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestCreateManyRequestFromUserInput = {
    id?: number
    requestToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookFriendRequestCreateManyRequestToUserInput = {
    id?: number
    requestFromUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationCreateManyRelationFromUserInput = {
    id?: number
    relationToUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookUserRelationCreateManyRelationToUserInput = {
    id?: number
    relationFromUserId: number
    isAccepted: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerCreateManyMessageFromUserInput = {
    id?: number
    message: string
    messageToUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookMessengerCreateManyMessageToUserInput = {
    id?: number
    message: string
    messageFromUserId: number
    isRead: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostUpdateWithoutPosterUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutPosterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUpdateWithoutCreaterUserInput = {
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    memberUsers?: FacebookUserUpdateManyWithoutGroupMemberNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateWithoutCreaterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    memberUsers?: FacebookUserUncheckedUpdateManyWithoutGroupMemberNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateManyWithoutGroupcreaterInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUpdateWithoutMemberUsersInput = {
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUser?: FacebookUserUpdateOneRequiredWithoutGroupcreaterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateWithoutMemberUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookGroupUncheckedUpdateManyWithoutGroupMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    GroupImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createrUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUpdateWithoutCommentByUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    post?: FacebookPostUpdateOneRequiredWithoutCommentsNestedInput
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUncheckedUpdateWithoutCommentByUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUncheckedUpdateManyWithoutCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postId?: IntFieldUpdateOperationsInput | number
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUpdateWithoutPosterUserInput = {
    post?: FacebookPostUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateWithoutPosterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateManyWithoutLikePostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUpdateWithoutPosterUserInput = {
    comment?: FacebookPostUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateWithoutPosterUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateManyWithoutLikeCommentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUpdateWithoutRequestFromUserInput = {
    requestToUser?: FacebookUserUpdateOneRequiredWithoutFriendRequestToesNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateWithoutRequestFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateManyWithoutFriendRequestFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUpdateWithoutRequestToUserInput = {
    requestFromUser?: FacebookUserUpdateOneRequiredWithoutFriendRequestFromsNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateWithoutRequestToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestFromUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookFriendRequestUncheckedUpdateManyWithoutFriendRequestToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    requestFromUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUpdateWithoutRelationFromUserInput = {
    relationToUser?: FacebookUserUpdateOneRequiredWithoutFriendRelationToesNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateWithoutRelationFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateManyWithoutFriendRelationFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationToUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUpdateWithoutRelationToUserInput = {
    relationFromUser?: FacebookUserUpdateOneRequiredWithoutFriendRelationFromsNestedInput
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateWithoutRelationToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationFromUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserRelationUncheckedUpdateManyWithoutFriendRelationToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    relationFromUserId?: IntFieldUpdateOperationsInput | number
    isAccepted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUpdateWithoutMessageFromUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    messageToUser?: FacebookUserUpdateOneRequiredWithoutMessengeToesNestedInput
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateWithoutMessageFromUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageToUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateManyWithoutMessengeFromsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageToUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUpdateWithoutMessageToUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    messageFromUser?: FacebookUserUpdateOneRequiredWithoutMessengeFromsNestedInput
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateWithoutMessageToUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageFromUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookMessengerUncheckedUpdateManyWithoutMessengeToesInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    messageFromUserId?: IntFieldUpdateOperationsInput | number
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookUserUpdateWithoutGroupMemberInput = {
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUpdateManyWithoutCreaterUserNestedInput
    comments?: FacebookCommentUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateWithoutGroupMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: FacebookPostUncheckedUpdateManyWithoutPosterUserNestedInput
    groupcreater?: FacebookGroupUncheckedUpdateManyWithoutCreaterUserNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutCommentByUserNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPosterUserNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutPosterUserNestedInput
    friendRequestFroms?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestFromUserNestedInput
    friendRequestToes?: FacebookFriendRequestUncheckedUpdateManyWithoutRequestToUserNestedInput
    friendRelationFroms?: FacebookUserRelationUncheckedUpdateManyWithoutRelationFromUserNestedInput
    friendRelationToes?: FacebookUserRelationUncheckedUpdateManyWithoutRelationToUserNestedInput
    messengeFroms?: FacebookMessengerUncheckedUpdateManyWithoutMessageFromUserNestedInput
    messengeToes?: FacebookMessengerUncheckedUpdateManyWithoutMessageToUserNestedInput
  }

  export type FacebookUserUncheckedUpdateManyWithoutMemberUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    profileImage?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookPostCreateManyDestinationInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    locationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostUpdateWithoutDestinationInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutDestinationInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostCreateManyPostTypeInput = {
    id?: number
    message: string
    posterUserId: number
    locationId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostUpdateWithoutPostTypeInput = {
    message?: StringFieldUpdateOperationsInput | string
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutPostTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostCreateManyLocationInput = {
    id?: number
    message: string
    postTypeId: number
    posterUserId: number
    destinationId: number
    destinationRelateId: number
    isShared: boolean
    shareFromPostId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookPostUpdateWithoutLocationInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: FacebookHashtagUncheckedUpdateManyWithoutPostsNestedInput
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUpdateWithoutHashtagsInput = {
    message?: StringFieldUpdateOperationsInput | string
    postType?: FacebookPostTypeUpdateOneRequiredWithoutPostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutPostsNestedInput
    location?: FacebookLocationUpdateOneRequiredWithoutPostsNestedInput
    destination?: FacebookPostDestinationUpdateOneRequiredWithoutPostsNestedInput
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: FacebookCommentUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUpdateManyWithoutCommentNestedInput
  }

  export type FacebookPostUncheckedUpdateWithoutHashtagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    postTypeId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    locationId?: IntFieldUpdateOperationsInput | number
    destinationId?: IntFieldUpdateOperationsInput | number
    destinationRelateId?: IntFieldUpdateOperationsInput | number
    isShared?: BoolFieldUpdateOperationsInput | boolean
    shareFromPostId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: FacebookCommentUncheckedUpdateManyWithoutPostNestedInput
    likePosts?: FacebookLikePostUncheckedUpdateManyWithoutPostNestedInput
    likeComments?: FacebookLikeCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type FacebookCommentCreateManyPostInput = {
    id?: number
    message: string
    commentByUserId: number
    isReplied: boolean
    replyFromCommentId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostCreateManyPostInput = {
    id?: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateManyCommentInput = {
    id?: number
    posterUserId: number
    likeTypeId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookHashtagUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookHashtagUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookHashtagUncheckedUpdateManyWithoutHashtagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUpdateWithoutPostInput = {
    message?: StringFieldUpdateOperationsInput | string
    commentByUser?: FacebookUserUpdateOneRequiredWithoutCommentsNestedInput
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookCommentUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    commentByUserId?: IntFieldUpdateOperationsInput | number
    isReplied?: BoolFieldUpdateOperationsInput | boolean
    replyFromCommentId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUpdateWithoutPostInput = {
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikePostsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateWithoutPostInput = {
    id?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUpdateWithoutCommentInput = {
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    likeType?: FacebookLikeTypeUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateWithoutCommentInput = {
    id?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    likeTypeId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostCreateManyLikeTypeInput = {
    id?: number
    postId: number
    posterUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikeCommentCreateManyLikeTypeInput = {
    id?: number
    commentId: number
    posterUserId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FacebookLikePostUpdateWithoutLikeTypeInput = {
    post?: FacebookPostUpdateOneRequiredWithoutLikePostsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikePostsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikePostUncheckedUpdateWithoutLikeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    postId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUpdateWithoutLikeTypeInput = {
    comment?: FacebookPostUpdateOneRequiredWithoutLikeCommentsNestedInput
    posterUser?: FacebookUserUpdateOneRequiredWithoutLikeCommentsNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FacebookLikeCommentUncheckedUpdateWithoutLikeTypeInput = {
    id?: IntFieldUpdateOperationsInput | number
    commentId?: IntFieldUpdateOperationsInput | number
    posterUserId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}