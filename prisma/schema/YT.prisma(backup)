model YTUser {
  id             Int             @id @default(autoincrement())
  user           String          @unique
  email          String          @unique
  avatar         String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userToChannels UserToChannel[]
  comments       YTComment[]
  subscribes     YTSubscribe[]
  shares         YTShare[]
}

model YTChannel {
  id             Int             @id @default(autoincrement())
  channelName    String
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  userToChannels UserToChannel[]
  videos         YTVideo[]
  subscribes     YTSubscribe[]
}

enum YTRoleEnum {
  ADMIN
  EDITOR
  CREATOR
}

model UserToChannel {
  id        Int        @id @default(autoincrement())
  user      YTUser     @relation(fields: [userId], references: [id])
  userId    Int
  channel   YTChannel  @relation(fields: [channelId], references: [id])
  channelId Int
  role      YTRoleEnum
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model YTVideo {
  id        Int         @id @default(autoincrement())
  name      String
  file      String
  logo      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  channel   YTChannel   @relation(fields: [channelId], references: [id])
  channelId Int
  likes     YTLike[]
  comments  YTComment[]
  shares    YTShare[]
}

model YTLike {
  id        Int       @id @default(autoincrement())
  type      String
  video     YTVideo   @relation(fields: [videoId], references: [id])
  videoId   Int
  comment   YTComment @relation(fields: [commentId], references: [id])
  commentId Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model YTComment {
  id        Int      @id @default(autoincrement())
  text      String
  user      YTUser   @relation(fields: [userId], references: [id])
  userId    Int
  commentTo Int?
  video     YTVideo  @relation(fields: [videoId], references: [id])
  videoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     YTLike[]
}

model YTSubscribe {
  id        Int       @id @default(autoincrement())
  user      YTUser    @relation(fields: [userId], references: [id])
  userId    Int
  channel   YTChannel @relation(fields: [channelId], references: [id])
  channelId Int
  member    Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model YTShare {
  id        Int      @id @default(autoincrement())
  user      YTUser   @relation(fields: [userId], references: [id])
  userId    Int
  video     YTVideo  @relation(fields: [videoId], references: [id])
  videoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
