model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Menu      Menu[]

  @@schema("binkitchen")
}

model Menu {
  id         Int         @id @default(autoincrement())
  name       String
  image      String
  price      Float
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("binkitchen")
}

model Order {
  id        Int         @id @default(autoincrement())
  status    String      @default("PENDING")
  tableId   Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@schema("binkitchen")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  menu       Menu     @relation(fields: [menuId], references: [id])
  menuId     Int
  order      Order?   @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@schema("binkitchen")
}

model QuizCategory {
  id        Int      @id @default(autoincrement())
  name      String
  quizzes   Quiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Category")
  @@schema("binquiz")
}

model Choice {
  id             Int      @id @default(autoincrement())
  answerText     String
  quiz           Quiz?    @relation(name: "choices", fields: [quizId], references: [id])
  quizId         Int?
  correctQuizzes Quiz[]   @relation(name: "correctChoice")
  rounds         Round[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@schema("binquiz")
}

model Quiz {
  id              Int          @id @default(autoincrement())
  questionText    String
  category        QuizCategory @relation(fields: [quizCategoryId], references: [id])
  quizCategoryId  Int
  choices         Choice[]     @relation(name: "choices")
  correctChoice   Choice       @relation(name: "correctChoice", fields: [correctChoiceId], references: [id])
  correctChoiceId Int
  rounds          Round[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@schema("binquiz")
}

model Round {
  id              Int      @id @default(autoincrement())
  quizzes         Quiz[]
  selectedChoices Choice[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@schema("binquiz")
}

model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  bgColor   String   @default("slate")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("todolist")
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String
  imageUrl               String
  bio                    String
  followingUserRelations UserRelation[]  @relation("followingUser")
  followedUserRelations  UserRelation[]  @relation("followedUser")
  tweets                 Tweet[]
  directMessagesFrom     DirectMessage[] @relation("fromUser")
  directMessagesTo       DirectMessage[] @relation("toUser")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  @@schema("twitter")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations

model UserRelation {
  id              Int      @id @default(autoincrement())
  followingUser   User     @relation("followingUser", fields: [followingUserId], references: [id])
  followingUserId Int
  followedUser    User     @relation("followedUser", fields: [followedUserId], references: [id])
  followedUserId  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@schema("twitter")
}

model Tweet {
  id             Int       @id @default(autoincrement())
  tweetText      String
  tweetingUser   User      @relation(fields: [userId], references: [id])
  replyToTweet   Tweet?    @relation("replyToTweet", fields: [replyToTweetId], references: [id])
  replyToTweetId Int?      @unique
  repliedTweet   Tweet?    @relation("replyToTweet")
  userId         Int
  hashTags       HashTag[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@schema("twitter")
}

model HashTag {
  id          Int      @id @default(autoincrement())
  hashTagText String
  isIntweets  Tweet[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("twitter")
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  dmText     String
  fromUser   User     @relation("fromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("toUser", fields: [toUserId], references: [id])
  fromUserId Int
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@schema("twitter")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["todolist", "binkitchen", "binquiz", "twitter"]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output          = "../prisma/client"
  previewFeatures = ["multiSchema"]
}
