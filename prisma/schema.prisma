model KorKitchenCategory {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  menu     KorKitchenMenu[]
  createAt DateTime         @default(now())
  updateAt DateTime         @updatedAt
}

model KorKitchenMenu {
  id           Int                   @id @default(autoincrement())
  name         String
  image        String
  price        Float
  category     KorKitchenCategory?   @relation(fields: [categoryName], references: [name])
  categoryName String?
  orderItems   KorKitchenOrderItem[]
  createAt     DateTime              @default(now())
  updateAt     DateTime              @updatedAt
}

model KorKitchenOrder {
  id       Int                   @id @default(autoincrement())
  status   String                @default("PENDING")
  tableId  Int
  items    KorKitchenOrderItem[]
  createAt DateTime              @default(now())
  updateAt DateTime              @updatedAt
}

model KorKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       KorKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      KorKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  creatAt    DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model TodoList {
  id       Int      @id @default(autoincrement())
  task     String
  status   String   @default("active")
  note     String?
  //จะมีค่าหรือไม่ก็ได้ ไม่จำเป็นต้องส่งไปsave
  createAt DateTime @default(now())
  updateAt DateTime @default(now())
}

model TestModel {
  id        Int    @id @default(autoincrement())
  firstname String
  Surname   String
}

model TriviaCategory {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  questions TriviaQuestion[]
  rounds    TriviaRound[]
}

model TriviaQuestion {
  id             Int                   @id @default(autoincrement())
  category       TriviaCategory        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  name           String
  answerID       Int
  choices        TriviaChoice[]
  roundQuestions TriviaRoundQuestion[]
}

model TriviaChoice {
  id             Int                   @id @default(autoincrement())
  question       TriviaQuestion        @relation(fields: [quizId], references: [id])
  quizId         Int
  name           String
  roundQuestions TriviaRoundQuestion[]
}

model TriviaRoundQuestion {
  id         Int            @id @default(autoincrement())
  question   TriviaQuestion @relation(fields: [quizId], references: [id])
  quizId     Int
  userChoice TriviaChoice   @relation(fields: [choiceId], references: [id])
  choiceId   Int
  quizResult Boolean
  round      TriviaRound?   @relation(fields: [roundId], references: [id])
  roundId    Int?
}

model TriviaRound {
  id          Int                   @id @default(autoincrement())
  user        String
  questions   TriviaRoundQuestion[]
  category    TriviaCategory        @relation(fields: [categoryId], references: [id])
  categoryId  Int
  totalResult Int
  createAt    DateTime              @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
model TwitterUser {
  id               Int                  @id @default(autoincrement())
  name             String
  image            String
  directMessage    TwitterDirectMessage @relation(fields: [directMessageId], references: [id])
  directMessageId  Int
  userRelate       TwitterUserRelation  @relation(fields: [userRelationId], references: [id])
  userRelationId   Int
  TwitterPostReply TwitterPostReply[]
}

model TwitterPost {
  id               Int                @id @default(autoincrement())
  message          String
  TwitterPostReply TwitterPostReply[]
  PostOnHashtag    PostOnHashtag[]
}

model TwitterHashtag {
  id            Int             @id @default(autoincrement())
  message       String
  PostOnHashtag PostOnHashtag[]
}

model TwitterDirectMessage {
  id          Int           @id @default(autoincrement())
  from        String
  to          String
  message     String
  createAt    DateTime      @default(now())
  TwitterUser TwitterUser[]
}

model TwitterUserRelation {
  id          Int           @id @default(autoincrement())
  follower    String
  following   String
  TwitterUser TwitterUser[]
}

model TwitterPostReply {
  id       Int         @id @default(autoincrement())
  message  String
  post     TwitterPost @relation(fields: [postId], references: [id])
  postId   Int
  user     TwitterUser @relation(fields: [userId], references: [id])
  userId   Int
  createAt DateTime    @default(now())
}

model PostOnHashtag {
  id        Int            @id @default(autoincrement())
  post      TwitterPost    @relation(fields: [postId], references: [id])
  postId    Int
  hashtag   TwitterHashtag @relation(fields: [hashtagId], references: [id])
  hashtagId Int
}
