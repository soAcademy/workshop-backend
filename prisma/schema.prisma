model BinKitchenCategory {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  BinKitchenMenu BinKitchenMenu[]
}

model BinKitchenMenu {
  id                  Int                   @id @default(autoincrement())
  name                String
  image               String
  price               Float
  category            BinKitchenCategory?   @relation(fields: [categoryName], references: [name])
  categoryName        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  BinKitchenOrderItem BinKitchenOrderItem[]
}

model BinKitchenOrder {
  id                  Int                   @id @default(autoincrement())
  status              String                @default("PENDING")
  tableId             Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  BinKitchenOrderItem BinKitchenOrderItem[]
}

model BinKitchenOrderItem {
  id         Int              @id @default(autoincrement())
  menu       BinKitchenMenu   @relation(fields: [menuId], references: [id])
  menuId     Int
  order      BinKitchenOrder? @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model FBUser {
  id           Int           @id @default(autoincrement())
  name         String
  profileImage String
  coverImage   String
  bio          String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  fromFriends  Friends[]     @relation("FromFriend")
  toFriends    Friends[]     @relation("ToFriend")
  Post         FBPost[]
  Comment      Comment[]
  SubComment   SubComment[]
  GroupOnUser  GroupOnUser[]
  Like         Like[]
  Share        Share[]
}

model Friends {
  id         Int      @id @default(autoincrement())
  from       FBUser   @relation("FromFriend", fields: [fromUserId], references: [id])
  fromUserId Int
  to         FBUser   @relation("ToFriend", fields: [toUserId], references: [id])
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FBPost {
  id            Int             @id @default(autoincrement())
  user          FBUser          @relation(fields: [userId], references: [id])
  userId        Int
  postDetail    String
  image         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Comment       Comment[]
  PostinGroup   PostinGroup[]
  PostinProfile PostinProfile[]
  Like          Like[]
  Share         Share[]
}

model Comment {
  id            Int          @id @default(autoincrement())
  post          FBPost       @relation(fields: [postId], references: [id])
  postId        Int
  commentDetail String
  fromUserId    FBUser       @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  SubComment    SubComment[]
}

model SubComment {
  id               Int      @id @default(autoincrement())
  comment          Comment  @relation(fields: [commentId], references: [id])
  commentId        Int
  subCommentDetail String
  fromUserId       FBUser   @relation(fields: [userId], references: [id])
  userId           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Like {
  id         Int      @id @default(autoincrement())
  post       FBPost   @relation(fields: [postId], references: [id])
  postId     Int
  fromUserId FBUser   @relation(fields: [userId], references: [id])
  userId     Int
  likeType   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Share {
  id          Int      @id @default(autoincrement())
  post        FBPost   @relation(fields: [postId], references: [id])
  postId      Int
  fromUserId  FBUser   @relation(fields: [userId], references: [id])
  userId      Int
  shareStatus String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Group {
  id          Int           @id @default(autoincrement())
  groupName   String
  groupImage  String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  GroupOnUser GroupOnUser[]
  PostinGroup PostinGroup[]
}

model GroupOnUser {
  id        Int      @id @default(autoincrement())
  user      FBUser   @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostinGroup {
  id        Int      @id @default(autoincrement())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  post      FBPost   @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostinProfile {
  id        Int      @id @default(autoincrement())
  post      FBPost   @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model TriviaCategory {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  triviaQuiz  TriviaQuiz[]
  triviaRound TriviaRound[]
}

model TriviaQuiz {
  id               Int                @id @default(autoincrement())
  name             String
  category         TriviaCategory     @relation(fields: [categoryId], references: [id])
  categoryId       Int
  answerId         Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  triviaQuizChoice TriviaQuizChoice[]
  triviaRoundQuiz  TriviaRoundQuiz[]
}

model TriviaQuizChoice {
  id                    Int                     @id @default(autoincrement())
  name                  String
  quiz                  TriviaQuiz              @relation(fields: [quizId], references: [id])
  quizId                Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  triviaRoundQuizChoice TriviaRoundQuizChoice[]
}

model TriviaRound {
  id              Int               @id @default(autoincrement())
  score           Int
  category        TriviaCategory    @relation(fields: [categoryId], references: [id])
  categoryId      Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  triviaRoundQuiz TriviaRoundQuiz[]
}

model TriviaRoundQuiz {
  id                    Int                     @id @default(autoincrement())
  round                 TriviaRound             @relation(fields: [roundId], references: [id])
  roundId               Int
  quiz                  TriviaQuiz              @relation(fields: [quizId], references: [id])
  quizId                Int
  playerChooseChoice    Int
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  triviaRoundQuizChoice TriviaRoundQuizChoice[]
}

model TriviaRoundQuizChoice {
  id              Int              @id @default(autoincrement())
  roundQuiz       TriviaRoundQuiz  @relation(fields: [roundQuizId], references: [id])
  roundQuizId     Int
  roundQuizChoice TriviaQuizChoice @relation(fields: [quizChoiceId], references: [id])
  quizChoiceId    Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model User {
  id                Int         @id @default(autoincrement())
  name              String
  profileImage      String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  fromFolowing      Following[] @relation("FromFollowing")
  toFollowing       Following[] @relation("ToFollowing")
  post              Post[]
  fromDirectMessage DirectMsg[] @relation("FromDirectMessage")
  toDirectMessage   DirectMsg[] @relation("ToDirectMessage")
  Reply             Reply[]
}

model Following {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromFollowing", fields: [fromUserId], references: [id])
  fromUserId Int
  to         User     @relation("ToFollowing", fields: [toUserId], references: [id])
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int
  postDetail    String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  reply         Reply[]
  postOnHashtag PostOnHashtag[]
}

model DirectMsg {
  id         Int      @id @default(autoincrement())
  from       User     @relation("FromDirectMessage", fields: [fromUserId], references: [id])
  fromUserId Int
  to         User     @relation("ToDirectMessage", fields: [toUserId], references: [id])
  toUserId   Int
  msgDetail  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Hashtag {
  id            Int             @id @default(autoincrement())
  hashtag       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  postOnHashtag PostOnHashtag[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  reply     String
  replyUser User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostOnHashtag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  hashtag   Hashtag  @relation(fields: [hashtagId], references: [id])
  postId    Int
  hashtagId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output        = "../prisma/client"
}
