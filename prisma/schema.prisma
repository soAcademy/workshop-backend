model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Menu      Menu[]

  @@schema("binkitchen")
}

model Menu {
  id         Int         @id @default(autoincrement())
  name       String
  image      String
  price      Float
  category   Category?   @relation(fields: [categoryId], references: [id])
  categoryId Int?
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("binkitchen")
}

model Order {
  id        Int         @id @default(autoincrement())
  status    String      @default("PENDING")
  tableId   Int
  items     OrderItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@schema("binkitchen")
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  menu       Menu     @relation(fields: [menuId], references: [id])
  menuId     Int
  order      Order?   @relation(fields: [orderId], references: [id])
  orderId    Int?
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@schema("binkitchen")
}

model QuizCategory {
  id        Int      @id @default(autoincrement())
  name      String
  quizzes   Quiz[]
  rounds    Round[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Category")
  @@schema("binquiz")
}

model Choice {
  id                  Int            @id @default(autoincrement())
  answerText          String
  quiz                Quiz?          @relation(name: "otherChoices", fields: [quizId], references: [id])
  quizId              Int?
  correctChoiceToQuiz Quiz?          @relation(name: "correctChoice")
  // rounds              Round[]
  shuffledQuizzes     ShuffledQuiz[]
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@schema("binquiz")
}

model Quiz {
  id              Int            @id @default(autoincrement())
  questionText    String
  category        QuizCategory   @relation(fields: [quizCategoryId], references: [id])
  quizCategoryId  Int
  correctChoice   Choice         @relation(name: "correctChoice", fields: [correctChoiceId], references: [id])
  correctChoiceId Int            @unique
  otherChoices    Choice[]       @relation(name: "otherChoices")
  // rounds          Round[]
  shuffledQuizzes ShuffledQuiz[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@schema("binquiz")
}

model Round {
  id              Int            @id @default(autoincrement())
  category        QuizCategory   @relation(fields: [quizCategoryId], references: [id])
  quizCategoryId  Int
  // quizzes         Quiz[]
  shuffledQuizzes ShuffledQuiz[]
  // selectedChoices Choice[]
  // Choice          Choice?        @relation(fields: [choiceId], references: [id])
  // choiceId        Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@schema("binquiz")
}

model ShuffledQuiz {
  id          Int      @id @default(autoincrement())
  round       Round    @relation(fields: [roundId], references: [id])
  roundId     Int
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      Int
  choice      Choice   @relation(fields: [choiceId], references: [id])
  choiceId    Int
  choiceOrder Int
  isSelected  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("binquiz")
}

model BinWashUser {
  id                   Int                   @id @default(autoincrement())
  name                 String
  balance              Float
  owningBranches       Branch[]
  wMMaintenanceRecords WMMaintenanceRecord[]
  usageRecords         UsageRecord[]
  topUpRecords         TopUpRecord[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@map("user")
  @@schema("binwash")
}

model Branch {
  id              Int              @id @default(autoincrement())
  name            String
  location        String
  telephoneNo     String
  area            Float
  branchOwner     BinWashUser      @relation(fields: [binWashUserId], references: [id])
  binWashUserId   Int
  washingMachines WashingMachine[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@schema("binwash")
}

enum WMTypeEnum {
  FRONT_LOAD
  TOP_LOAD

  @@schema("binwash")
}

model WashingMachine {
  id                   Int                   @id @default(autoincrement())
  brand                String
  model                String
  type                 WMTypeEnum
  capacity             Float
  manufacturedYear     DateTime
  warrantyEndDate      DateTime
  locatedBranch        Branch                @relation(fields: [branchId], references: [id])
  branchId             Int
  equippedPrograms     WMProgram[]
  usageRecords         UsageRecord[]
  wMMaintenanceRecords WMMaintenanceRecord[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt

  @@schema("binwash")
}

model WMProgram {
  id           Int              @id @default(autoincrement())
  name         String
  maxCapacity  Float
  duration     Int
  price        Float
  equippingWMs WashingMachine[]
  usageRecords UsageRecord[]
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@schema("binwash")
}

model WMMaintenanceRecord {
  id                  Int            @id @default(autoincrement())
  maintainedWM        WashingMachine @relation(fields: [washingMachineId], references: [id])
  washingMachineId    Int
  maintenanceDateTime DateTime
  level               Int
  details             String
  maintainer          BinWashUser    @relation(fields: [binWashUserId], references: [id])
  binWashUserId       Int
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@schema("binwash")
}

model UsageRecord {
  id               Int            @id @default(autoincrement())
  dateTime         DateTime
  user             BinWashUser    @relation(fields: [binWashUserId], references: [id])
  binWashUserId    Int
  washingMachine   WashingMachine @relation(fields: [washingMachineId], references: [id])
  washingMachineId Int
  program          WMProgram      @relation(fields: [wMProgramId], references: [id])
  wMProgramId      Int
  price            Float
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@schema("binwash")
}

model TopUpRecord {
  id            Int         @id @default(autoincrement())
  dateTime      DateTime
  user          BinWashUser @relation(fields: [binWashUserId], references: [id])
  binWashUserId Int
  price         Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@schema("binwash")
}

model FacebookUser {
  id                     Int                    @id @default(autoincrement())
  name                   String
  imageUrl               String
  bio                    String
  followingUserRelations FacebookUserRelation[] @relation("followingUser")
  followedUserRelations  FacebookUserRelation[] @relation("followedUser")
  posts                  Post[]
  comments               Comment[]
  messengerMessagesFrom  MessengerMessage[]     @relation("fromUser")
  messengerMessagesTo    MessengerMessage[]     @relation("toUser")
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt

  @@map("User")
  @@schema("facebook")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations

model FacebookUserRelation {
  id              Int          @id @default(autoincrement())
  followingUser   FacebookUser @relation("followingUser", fields: [followingUserId], references: [id])
  followingUserId Int
  followedUser    FacebookUser @relation("followedUser", fields: [followedUserId], references: [id])
  followedUserId  Int
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@map("UserRelation")
  @@schema("facebook")
}

model Post {
  id          Int               @id @default(autoincrement())
  postText    String
  postingUser FacebookUser      @relation(fields: [userId], references: [id])
  userId      Int
  comments    Comment[]
  hashTags    FacebookHashTag[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@schema("facebook")
}

model Comment {
  id              Int          @id @default(autoincrement())
  commentText     String
  commentingUser  FacebookUser @relation(fields: [userId], references: [id])
  userId          Int
  parentPost      Post         @relation(fields: [postId], references: [id])
  postId          Int
  parentComment   Comment?     @relation("parentComment", fields: [parentCommentId], references: [id])
  parentCommentId Int?
  childComments   Comment[]    @relation("parentComment")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@schema("facebook")
}

model FacebookHashTag {
  id          Int      @id @default(autoincrement())
  hashTagText String
  isInPosts   Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("HashTag")
  @@schema("facebook")
}

model MessengerMessage {
  id            Int          @id @default(autoincrement())
  messengerText String
  fromUser      FacebookUser @relation("fromUser", fields: [fromUserId], references: [id])
  toUser        FacebookUser @relation("toUser", fields: [toUserId], references: [id])
  fromUserId    Int
  toUserId      Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@schema("facebook")
}

model Author {
  id         Int         @id @default(autoincrement())
  name       String
  bookTitles BookTitle[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("library")
}

model BookTitle {
  id             Int             @id @default(autoincrement())
  title          String
  isbn           String
  authors        Author[]
  categories     BookCategory[]
  books          Book[]
  requestRecords RequestRecord[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@schema("library")
}

// category = subject

model BookCategory {
  id         Int         @id @default(autoincrement())
  category   String
  bookTitles BookTitle[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@schema("library")
}

model Book {
  id               Int               @id @default(autoincrement())
  title            BookTitle         @relation(fields: [bookTitleId], references: [id])
  bookTitleId      Int
  belongsToLibrary Library           @relation(fields: [libraryId], references: [id])
  libraryId        Int
  isAvailable      Boolean
  borrowingRecords BorrowingRecord[]
  requestRecords   RequestRecord[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@schema("library")
}

model Library {
  id                  Int             @id @default(autoincrement())
  name                String
  location            String
  belongsToUniversity University      @relation(fields: [universityId], references: [id])
  universityId        Int
  books               Book[]
  requestingRecords   RequestRecord[] @relation("requestingLibrary")
  requestedRecords    RequestRecord[] @relation("requestedLibrary")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@schema("library")
}

model University {
  id        Int       @id @default(autoincrement())
  name      String
  location  String
  libraries Library[]
  students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@schema("library")
}

model Student {
  id                  Int               @id @default(autoincrement())
  Name                String
  belongsToUniversity University        @relation(fields: [universityId], references: [id])
  universityId        Int
  borrowingRecords    BorrowingRecord[]
  requestRecords      RequestRecord[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  @@schema("library")
}

model BorrowingRecord {
  id               Int       @id @default(autoincrement())
  borrowingStudent Student   @relation(fields: [studentId], references: [id])
  studentId        Int
  borrowedBook     Book      @relation(fields: [bookId], references: [id])
  bookId           Int
  startDate        DateTime
  endDate          DateTime?
  actualEndDate    DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@schema("library")
}

model RequestRecord {
  id                  Int       @id @default(autoincrement())
  requestingStudent   Student   @relation(fields: [studentId], references: [id])
  studentId           Int
  requestedBookTitle  BookTitle @relation(fields: [bookTitleId], references: [id])
  bookTitleId         Int
  requestingLibrary   Library   @relation("requestingLibrary", fields: [requestingLibraryId], references: [id])
  requestingLibraryId Int
  requestedLibrary    Library   @relation("requestedLibrary", fields: [requestedLibraryId], references: [id])
  requestedLibraryId  Int
  requestDate         DateTime
  acquiredDate        DateTime?
  returnDate          DateTime?
  acquiredBook        Book?     @relation(fields: [bookId], references: [id])
  bookId              Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@schema("library")
}

model TodoList {
  id        Int      @id @default(autoincrement())
  task      String
  status    String   @default("PENDING")
  bgColor   String   @default("slate")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@schema("todolist")
}

model User {
  id                     Int             @id @default(autoincrement())
  name                   String          @unique
  imageUrl               String?
  bio                    String?
  followingUserRelations UserRelation[]  @relation("followingUser")
  followedUserRelations  UserRelation[]  @relation("followedUser")
  tweets                 Tweet[]
  directMessagesFrom     DirectMessage[] @relation("fromUser")
  directMessagesTo       DirectMessage[] @relation("toUser")
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt

  @@schema("twitter")
}

// https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations

model UserRelation {
  id              Int      @id @default(autoincrement())
  followingUser   User     @relation("followingUser", fields: [followingUserId], references: [id])
  followingUserId Int
  followedUser    User     @relation("followedUser", fields: [followedUserId], references: [id])
  followedUserId  Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@schema("twitter")
}

model Tweet {
  id            Int       @id @default(autoincrement())
  tweetText     String
  tweetingUser  User      @relation(fields: [userId], references: [id])
  userId        Int
  parentTweet   Tweet?    @relation("parentTweet", fields: [parentTweetId], references: [id])
  parentTweetId Int?
  childTweets   Tweet[]   @relation("parentTweet")
  hashTags      HashTag[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@schema("twitter")
}

model HashTag {
  id          Int      @id @default(autoincrement())
  hashTagText String   @unique
  isInTweets  Tweet[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@schema("twitter")
}

model DirectMessage {
  id         Int      @id @default(autoincrement())
  dmText     String
  fromUser   User     @relation("fromUser", fields: [fromUserId], references: [id])
  toUser     User     @relation("toUser", fields: [toUserId], references: [id])
  fromUserId Int
  toUserId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@schema("twitter")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["todolist", "binkitchen", "binquiz", "twitter", "facebook", "youtube", "binwash", "library"]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "darwin-arm64", "debian-openssl-1.1.x"]
  output          = "../prisma/client"
  previewFeatures = ["multiSchema"]
}

model YouTubeUser {
  id                         Int                       @id @default(autoincrement())
  name                       String
  profileImageUrl            String?
  bio                        String?
  adminOfChannels            Channel[]                 @relation("adminOfChannels")
  usersToChannelswithRoles   UserToChannelwithRole[]
  subscribingToChannels      Channel[]                 @relation("subscribingToChannels")
  reactedVideos              Video[]
  usersToVideosWithReactions UserToVideoWithReaction[]
  videoComments              VideoComment[]
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt

  @@map("User")
  @@schema("youtube")
}

model Channel {
  id                       Int                     @id @default(autoincrement())
  name                     String
  profileImageUrl          String?
  description              String?
  adminUsers               YouTubeUser[]           @relation("adminOfChannels")
  subscribedUsers          YouTubeUser[]           @relation("subscribingToChannels")
  usersToChannelswithRoles UserToChannelwithRole[]
  owningVideos             Video[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  @@schema("youtube")
}

enum RoleEnum {
  MANAGER
  EDITOR
  VIEWER

  @@schema("youtube")
}

model UserToChannelwithRole {
  id            Int         @id @default(autoincrement())
  user          YouTubeUser @relation(fields: [youTubeUserId], references: [id])
  youTubeUserId Int
  channel       Channel     @relation(fields: [channelId], references: [id])
  channelId     Int
  role          RoleEnum
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@schema("youtube")
}

model Video {
  id                         Int                       @id @default(autoincrement())
  title                      String
  videoUrl                   String
  thumbnailImageUrl          String?
  description                String?
  belongsToChannel           Channel                   @relation(fields: [channelId], references: [id])
  channelId                  Int
  reactedByYouTubeUsers      YouTubeUser[]
  usersToVideosWithReactions UserToVideoWithReaction[]
  videoComments              VideoComment[]
  createdAt                  DateTime                  @default(now())
  updatedAt                  DateTime                  @updatedAt

  @@schema("youtube")
}

enum ReactionEnum {
  LIKE
  DISLIKE

  @@schema("youtube")
}

model UserToVideoWithReaction {
  id            Int          @id @default(autoincrement())
  user          YouTubeUser  @relation(fields: [youTubeUserId], references: [id])
  youTubeUserId Int
  video         Video        @relation(fields: [videoId], references: [id])
  videoId       Int
  reaction      ReactionEnum
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@schema("youtube")
}

model VideoComment {
  id                   Int            @id @default(autoincrement())
  commentText          String
  commentingUser       YouTubeUser    @relation(fields: [youTubeUserId], references: [id])
  youTubeUserId        Int
  parentVideo          Video          @relation(fields: [videoId], references: [id])
  videoId              Int
  parentVideoComment   VideoComment?  @relation("parentVideoComment", fields: [parentVideoCommentId], references: [id])
  parentVideoCommentId Int?
  childVideoComments   VideoComment[] @relation("parentVideoComment")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  @@schema("youtube")
}
